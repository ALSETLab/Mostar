#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       0                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     100                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       4                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  9.9999999999999998E-13   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
       0                   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(17456,119)
flowCathode.fluidPort.h_outflow
flowCathode.fluidPort.X_outflow[1]
flowCathode.fluidPort.X_outflow[2]
flowCathode.fluidPort.X_outflow[3]
flowCathode.fluidPort.X_outflow[4]
flowCathode.fluidPort.X_outflow[5]
flowCathode.massFlowBoundary.flowDefinition
flowCathode.massFlowBoundary.energyDefinition
flowCathode.massFlowBoundary.m_flow
flowCathode.massFlowBoundary.V_flow
flowCathode.massFlowBoundary.T
flowCathode.massFlowBoundary.h
flowCathode.massFlowBoundary.X[1]
flowCathode.massFlowBoundary.X[2]
flowCathode.massFlowBoundary.X[3]
flowCathode.massFlowBoundary.X[4]
flowCathode.massFlowBoundary.X[5]
flowCathode.massFlowBoundary.VFlowUnit
flowCathode.massFlowBoundary.temperatureUnit
flowCathode.massFlowBoundary.use_flow_in
flowCathode.massFlowBoundary.use_Th_in
flowCathode.massFlowBoundary.use_X_in
flowCathode.massFlowBoundary.use_C_in
flowCathode.massFlowBoundary.Vflow_scale
flowCathode.massFlowBoundary.p_start
flowCathode.massFlowBoundary.X_set[1]
flowCathode.massFlowBoundary.X_set[2]
flowCathode.massFlowBoundary.X_set[3]
flowCathode.massFlowBoundary.X_set[4]
flowCathode.massFlowBoundary.X_set[5]
flowCathode.massFlowBoundary.state.p
flowCathode.massFlowBoundary.state.T
flowCathode.massFlowBoundary.state.X[1]
flowCathode.massFlowBoundary.state.X[2]
flowCathode.massFlowBoundary.state.X[3]
flowCathode.massFlowBoundary.state.X[4]
flowCathode.massFlowBoundary.state.X[5]
flowCathode.massFlowBoundary.d
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.H0
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.npol_Cp
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.cp_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.cp_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.s_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.s_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.s_coeff[3]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.TMIN
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.TMAX
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.H0
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.npol_Cp
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.cp_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.cp_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.s_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.s_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.s_coeff[3]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.TMIN
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.TMAX
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.H0
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.npol_Cp
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.cp_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.cp_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.s_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.s_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.s_coeff[3]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.TMIN
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.TMAX
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.H0
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.npol_Cp
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.cp_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.cp_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.s_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.s_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.s_coeff[3]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.TMIN
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.TMAX
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.H0
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.npol_Cp
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.cp_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.cp_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.s_coeff[1]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.s_coeff[2]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.s_coeff[3]
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.TMIN
_GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].TMAX
flowCathode.flowDefinition
flowCathode.energyDefinition
flowCathode.m_flow
flowCathode.V_flow
flowCathode.T
flowCathode.h
flowCathode.X[1]
flowCathode.X[2]
flowCathode.X[3]
flowCathode.X[4]
flowCathode.X[5]
flowCathode.VFlowUnit
flowCathode.temperatureUnit
flowCathode.use_flow_in
flowCathode.use_Th_in
flowCathode.use_X_in
ground.p.v
ground.p.i
current.I
current.duration
current.v
current.i
current.n.v
current.offset
current.startTime
current.signalSource.height
current.signalSource.duration
current.signalSource.offset
current.signalSource.startTime
stack.N
stack.nbrSubStacks
stack.n_cell[1]
stack.n_cell[2]
stack.n_cell[3]
stack.A_cell
stack.Cp_cell
stack.kc_cell
stack.M_stack
stack.A_top
stack.h_top
stack.dp_top
stack.h_conv_top
stack.e_top
stack.A_bottom
stack.h_bottom
stack.dp_bottom
stack.A_side
stack.h_conv_side
stack.e_side
stack.k_insul
stack.dl_topInsul
stack.dl_bottomInsul
stack.dl_sideInsul
stack.n
stack.initOpt_anode
stack.p_start_in_anode
stack.p_start_out_anode
stack.p_start_anode[1]
stack.p_start_anode[2]
stack.p_start_anode[3]
stack.p_start_anode[4]
stack.p_start_anode[5]
stack.initFromEnthalpy_anode
stack.h_start_in_anode
stack.h_start_out_anode
stack.h_start_anode[1]
stack.h_start_anode[2]
stack.h_start_anode[3]
stack.h_start_anode[4]
stack.h_start_anode[5]
stack.T_start_in_anode
stack.T_start_out_anode
stack.T_start_anode[1]
stack.T_start_anode[2]
stack.T_start_anode[3]
stack.T_start_anode[4]
stack.T_start_anode[5]
stack.X_start_anode[1]
stack.X_start_anode[2]
stack.X_start_anode[3]
stack.X_start_anode[4]
stack.X_start_anode[5]
stack.X_start_anode[6]
stack.X_start_anode[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].R
stack.m_flow_start_anode
stack.initOpt_cathode
stack.p_start_in_cathode
stack.p_start_out_cathode
stack.p_start_cathode[1]
stack.p_start_cathode[2]
stack.p_start_cathode[3]
stack.p_start_cathode[4]
stack.p_start_cathode[5]
stack.initFromEnthalpy_cathode
stack.h_start_in_cathode
stack.h_start_out_cathode
stack.h_start_cathode[1]
stack.h_start_cathode[2]
stack.h_start_cathode[3]
stack.h_start_cathode[4]
stack.h_start_cathode[5]
stack.T_start_in_cathode
stack.T_start_out_cathode
stack.T_start_cathode[1]
stack.T_start_cathode[2]
stack.T_start_cathode[3]
stack.T_start_cathode[4]
stack.T_start_cathode[5]
stack.X_start_cathode[1]
stack.X_start_cathode[2]
stack.X_start_cathode[3]
stack.X_start_cathode[4]
stack.X_start_cathode[5]
stack.m_flow_start_cathode
stack.dp_smooth
stack.mflow_smooth
stack.from_dp_anode
stack.positiveFlow_anode
stack.generateEventForReversal_anode
stack.from_dp_cathode
stack.positiveFlow_cathode
stack.generateEventForReversal_cathode
stack.useHeatTransfer_anode
stack.useHeatTransfer_cathode
stack.dp_start_anode
stack.dp_start_cathode
stack.splitRatio_an[1]
stack.splitRatio_an[2]
stack.splitRatio_an[3]
stack.splitRatio_cath[1]
stack.splitRatio_cath[2]
stack.splitRatio_cath[3]
stack.V_manifold_an
stack.V_manifold_cath
stack.height
stack.thickness_cell
stack.wallthickness
stack.A_cell_tot
stack.m_flow_nom_an
stack.m_flow_nom_cath
stack.heat[1].n
stack.heat[1].Aheatloss
stack.heat[1].kc
stack.heat[1].infiniteHT
stack.heat[1].variableKc
stack.heat[1].Q_s[1]
stack.heat[1].Q_s[2]
stack.heat[1].Q_s[3]
stack.heat[1].Q_s[4]
stack.heat[2].n
stack.heat[2].Aheatloss
stack.heat[2].kc
stack.heat[2].infiniteHT
stack.heat[2].variableKc
stack.heat[2].Q_s[1]
stack.heat[2].Q_s[2]
stack.heat[2].Q_s[3]
stack.heat[2].Q_s[4]
stack.subStack[1].N
stack.subStack[1].nX_an
stack.subStack[1].nX_cath
stack.subStack[1].A_cell
stack.subStack[1].kc
stack.subStack[1].includeCellConduction
stack.subStack[1].lambda_cell
stack.subStack[1].A_crosssection_cell
stack.subStack[1].length_cell
stack.subStack[1].G_cell
stack.subStack[1].n_cell
stack.subStack[1].M_cell
stack.subStack[1].Cp_cell
stack.subStack[1].addProxToAnode
stack.subStack[1].P_stack
stack.subStack[1].anode_stoich
stack.subStack[1].cathode_stoich
stack.subStack[1].cell.N
stack.subStack[1].cell.nX_an
stack.subStack[1].cell.nX_cath
stack.subStack[1].cell.A_cell
stack.subStack[1].cell.n_cell
stack.subStack[1].cell.MCp_cell
stack.subStack[1].cell.kc
stack.subStack[1].cell.pstart
stack.subStack[1].cell.Tstart
stack.subStack[1].cell.T_cell[1]
stack.subStack[1].cell.der(T_cell[1])
stack.subStack[1].cell.T_cell[2]
stack.subStack[1].cell.der(T_cell[2])
stack.subStack[1].cell.T_cell[3]
stack.subStack[1].cell.der(T_cell[3])
stack.subStack[1].cell.T_cell[4]
stack.subStack[1].cell.der(T_cell[4])
stack.subStack[1].cell.Q_cell[1]
stack.subStack[1].cell.Q_cell[2]
stack.subStack[1].cell.Q_cell[3]
stack.subStack[1].cell.Q_cell[4]
stack.subStack[1].cell.T_from_h
stack.subStack[1].cell.wall_an[1].Q_flow
stack.subStack[1].cell.wall_an[2].Q_flow
stack.subStack[1].cell.wall_an[3].Q_flow
stack.subStack[1].cell.wall_an[4].Q_flow
stack.subStack[1].cell.wall_cath[1].Q_flow
stack.subStack[1].cell.wall_cath[2].Q_flow
stack.subStack[1].cell.wall_cath[3].Q_flow
stack.subStack[1].cell.wall_cath[4].Q_flow
stack.subStack[1].cell.port_an[1].m_flow
stack.subStack[1].cell.port_an[1].H_flow
stack.subStack[1].cell.port_an[1].mX_flow[1]
stack.subStack[1].cell.port_an[1].mX_flow[2]
stack.subStack[1].cell.port_an[1].mX_flow[3]
stack.subStack[1].cell.port_an[1].mX_flow[4]
stack.subStack[1].cell.port_an[1].mX_flow[5]
stack.subStack[1].cell.port_an[1].mX_flow[6]
stack.subStack[1].cell.port_an[1].mX_flow[7]
stack.subStack[1].cell.port_an[2].m_flow
stack.subStack[1].cell.port_an[2].h
stack.subStack[1].cell.port_an[2].H_flow
stack.subStack[1].cell.port_an[2].mX_flow[1]
stack.subStack[1].cell.port_an[2].mX_flow[2]
stack.subStack[1].cell.port_an[2].mX_flow[3]
stack.subStack[1].cell.port_an[2].mX_flow[4]
stack.subStack[1].cell.port_an[2].mX_flow[5]
stack.subStack[1].cell.port_an[2].mX_flow[6]
stack.subStack[1].cell.port_an[2].mX_flow[7]
stack.subStack[1].cell.port_an[3].m_flow
stack.subStack[1].cell.port_an[3].h
stack.subStack[1].cell.port_an[3].H_flow
stack.subStack[1].cell.port_an[3].mX_flow[1]
stack.subStack[1].cell.port_an[3].mX_flow[2]
stack.subStack[1].cell.port_an[3].mX_flow[3]
stack.subStack[1].cell.port_an[3].mX_flow[4]
stack.subStack[1].cell.port_an[3].mX_flow[5]
stack.subStack[1].cell.port_an[3].mX_flow[6]
stack.subStack[1].cell.port_an[3].mX_flow[7]
stack.subStack[1].cell.port_an[4].m_flow
stack.subStack[1].cell.port_an[4].H_flow
stack.subStack[1].cell.port_an[4].mX_flow[1]
stack.subStack[1].cell.port_an[4].mX_flow[2]
stack.subStack[1].cell.port_an[4].mX_flow[3]
stack.subStack[1].cell.port_an[4].mX_flow[4]
stack.subStack[1].cell.port_an[4].mX_flow[5]
stack.subStack[1].cell.port_an[4].mX_flow[6]
stack.subStack[1].cell.port_an[4].mX_flow[7]
stack.subStack[1].cell.port_cath[1].m_flow
stack.subStack[1].cell.port_cath[1].H_flow
stack.subStack[1].cell.port_cath[1].mX_flow[1]
stack.subStack[1].cell.port_cath[1].mX_flow[2]
stack.subStack[1].cell.port_cath[1].mX_flow[3]
stack.subStack[1].cell.port_cath[1].mX_flow[4]
stack.subStack[1].cell.port_cath[2].m_flow
stack.subStack[1].cell.port_cath[2].h
stack.subStack[1].cell.port_cath[2].H_flow
stack.subStack[1].cell.port_cath[2].mX_flow[1]
stack.subStack[1].cell.port_cath[2].mX_flow[2]
stack.subStack[1].cell.port_cath[2].mX_flow[3]
stack.subStack[1].cell.port_cath[2].mX_flow[4]
stack.subStack[1].cell.port_cath[3].m_flow
stack.subStack[1].cell.port_cath[3].h
stack.subStack[1].cell.port_cath[3].H_flow
stack.subStack[1].cell.port_cath[3].mX_flow[1]
stack.subStack[1].cell.port_cath[3].mX_flow[2]
stack.subStack[1].cell.port_cath[3].mX_flow[3]
stack.subStack[1].cell.port_cath[3].mX_flow[4]
stack.subStack[1].cell.port_cath[4].m_flow
stack.subStack[1].cell.port_cath[4].H_flow
stack.subStack[1].cell.port_cath[4].mX_flow[1]
stack.subStack[1].cell.port_cath[4].mX_flow[2]
stack.subStack[1].cell.port_cath[4].mX_flow[3]
stack.subStack[1].cell.port_cath[4].mX_flow[4]
stack.subStack[1].cell.T_an[1]
stack.subStack[1].cell.T_an[2]
stack.subStack[1].cell.T_an[3]
stack.subStack[1].cell.T_an[4]
stack.subStack[1].cell.state_an[1].p
stack.subStack[1].cell.state_an[2].p
stack.subStack[1].cell.state_an[3].p
stack.subStack[1].cell.state_an[4].p
stack.subStack[1].cell.anode[1].X[1]
stack.subStack[1].cell.anode[1].X[2]
stack.subStack[1].cell.anode[1].X[3]
stack.subStack[1].cell.anode[1].X[4]
stack.subStack[1].cell.anode[1].X[5]
stack.subStack[1].cell.anode[1].X[6]
stack.subStack[1].cell.anode[1].X[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].R
stack.subStack[1].cell.anode[1].Xi[1]
stack.subStack[1].cell.anode[1].Xi[2]
stack.subStack[1].cell.anode[1].Xi[3]
stack.subStack[1].cell.anode[1].Xi[4]
stack.subStack[1].cell.anode[1].Xi[5]
stack.subStack[1].cell.anode[1].Xi[6]
stack.subStack[1].cell.anode[1].Xi[7]
stack.subStack[1].cell.anode[1].d
stack.subStack[1].cell.anode[1].h
stack.subStack[1].cell.anode[1].u
stack.subStack[1].cell.anode[1].Rg
stack.subStack[1].cell.anode[1].MM
stack.subStack[1].cell.anode[1].assertlevel
stack.subStack[1].cell.anode[1].state.p
stack.subStack[1].cell.anode[1].state.T
stack.subStack[1].cell.anode[1].state.X[1]
stack.subStack[1].cell.anode[1].state.X[2]
stack.subStack[1].cell.anode[1].state.X[3]
stack.subStack[1].cell.anode[1].state.X[4]
stack.subStack[1].cell.anode[1].state.X[5]
stack.subStack[1].cell.anode[1].state.X[6]
stack.subStack[1].cell.anode[1].state.X[7]
stack.subStack[1].cell.anode[1].preferredMediumStates
stack.subStack[1].cell.anode[1].T_degC
stack.subStack[1].cell.anode[1].p_bar
stack.subStack[1].cell.anode[1].Z[1]
stack.subStack[1].cell.anode[1].Z[2]
stack.subStack[1].cell.anode[1].Z[3]
stack.subStack[1].cell.anode[1].Z[4]
stack.subStack[1].cell.anode[1].Z[5]
stack.subStack[1].cell.anode[1].Z[6]
stack.subStack[1].cell.anode[1].Z[7]
stack.subStack[1].cell.anode[1].dUZT[1]
stack.subStack[1].cell.anode[1].dUZT[2]
stack.subStack[1].cell.anode[1].dUZT[3]
stack.subStack[1].cell.anode[1].dUZT[4]
stack.subStack[1].cell.anode[1].dUZT[5]
stack.subStack[1].cell.anode[1].dUZT[6]
stack.subStack[1].cell.anode[1].dUZT[7]
stack.subStack[1].cell.anode[1].h_component[1]
stack.subStack[1].cell.anode[1].h_component[2]
stack.subStack[1].cell.anode[1].h_component[3]
stack.subStack[1].cell.anode[1].h_component[4]
stack.subStack[1].cell.anode[1].h_component[5]
stack.subStack[1].cell.anode[1].h_component[6]
stack.subStack[1].cell.anode[1].h_component[7]
stack.subStack[1].cell.anode[1].s_component[1]
stack.subStack[1].cell.anode[1].s_component[2]
stack.subStack[1].cell.anode[1].s_component[3]
stack.subStack[1].cell.anode[1].s_component[4]
stack.subStack[1].cell.anode[1].s_component[5]
stack.subStack[1].cell.anode[1].s_component[6]
stack.subStack[1].cell.anode[1].s_component[7]
stack.subStack[1].cell.anode[1].u_comp[1]
stack.subStack[1].cell.anode[1].u_comp[2]
stack.subStack[1].cell.anode[1].u_comp[3]
stack.subStack[1].cell.anode[1].u_comp[4]
stack.subStack[1].cell.anode[1].u_comp[5]
stack.subStack[1].cell.anode[1].u_comp[6]
stack.subStack[1].cell.anode[1].u_comp[7]
stack.subStack[1].cell.anode[1].cp
stack.subStack[1].cell.anode[1].g_formation[1]
stack.subStack[1].cell.anode[1].g_formation[2]
stack.subStack[1].cell.anode[1].g_formation[3]
stack.subStack[1].cell.anode[1].g_formation[4]
stack.subStack[1].cell.anode[1].g_formation[5]
stack.subStack[1].cell.anode[1].g_formation[6]
stack.subStack[1].cell.anode[1].g_formation[7]
stack.subStack[1].cell.anode[1].ddTp
stack.subStack[1].cell.anode[1].ddpT
stack.subStack[1].cell.anode[1].dupT
stack.subStack[1].cell.anode[1].duTp
stack.subStack[1].cell.anode[1].ddx[1]
stack.subStack[1].cell.anode[1].ddx[2]
stack.subStack[1].cell.anode[1].ddx[3]
stack.subStack[1].cell.anode[1].ddx[4]
stack.subStack[1].cell.anode[1].ddx[5]
stack.subStack[1].cell.anode[1].ddx[6]
stack.subStack[1].cell.anode[1].ddx[7]
stack.subStack[1].cell.anode[2].X[1]
stack.subStack[1].cell.anode[2].X[2]
stack.subStack[1].cell.anode[2].X[3]
stack.subStack[1].cell.anode[2].X[4]
stack.subStack[1].cell.anode[2].X[5]
stack.subStack[1].cell.anode[2].X[6]
stack.subStack[1].cell.anode[2].X[7]
stack.subStack[1].cell.anode[2].Xi[1]
stack.subStack[1].cell.anode[2].Xi[2]
stack.subStack[1].cell.anode[2].Xi[3]
stack.subStack[1].cell.anode[2].Xi[4]
stack.subStack[1].cell.anode[2].Xi[5]
stack.subStack[1].cell.anode[2].Xi[6]
stack.subStack[1].cell.anode[2].Xi[7]
stack.subStack[1].cell.anode[2].d
stack.subStack[1].cell.anode[2].h
stack.subStack[1].cell.anode[2].u
stack.subStack[1].cell.anode[2].Rg
stack.subStack[1].cell.anode[2].MM
stack.subStack[1].cell.anode[2].assertlevel
stack.subStack[1].cell.anode[2].state.p
stack.subStack[1].cell.anode[2].state.T
stack.subStack[1].cell.anode[2].state.X[1]
stack.subStack[1].cell.anode[2].state.X[2]
stack.subStack[1].cell.anode[2].state.X[3]
stack.subStack[1].cell.anode[2].state.X[4]
stack.subStack[1].cell.anode[2].state.X[5]
stack.subStack[1].cell.anode[2].state.X[6]
stack.subStack[1].cell.anode[2].state.X[7]
stack.subStack[1].cell.anode[2].preferredMediumStates
stack.subStack[1].cell.anode[2].T_degC
stack.subStack[1].cell.anode[2].p_bar
stack.subStack[1].cell.anode[2].Z[1]
stack.subStack[1].cell.anode[2].Z[2]
stack.subStack[1].cell.anode[2].Z[3]
stack.subStack[1].cell.anode[2].Z[4]
stack.subStack[1].cell.anode[2].Z[5]
stack.subStack[1].cell.anode[2].Z[6]
stack.subStack[1].cell.anode[2].Z[7]
stack.subStack[1].cell.anode[2].dUZT[1]
stack.subStack[1].cell.anode[2].dUZT[2]
stack.subStack[1].cell.anode[2].dUZT[3]
stack.subStack[1].cell.anode[2].dUZT[4]
stack.subStack[1].cell.anode[2].dUZT[5]
stack.subStack[1].cell.anode[2].dUZT[6]
stack.subStack[1].cell.anode[2].dUZT[7]
stack.subStack[1].cell.anode[2].h_component[1]
stack.subStack[1].cell.anode[2].h_component[2]
stack.subStack[1].cell.anode[2].h_component[3]
stack.subStack[1].cell.anode[2].h_component[4]
stack.subStack[1].cell.anode[2].h_component[5]
stack.subStack[1].cell.anode[2].h_component[6]
stack.subStack[1].cell.anode[2].h_component[7]
stack.subStack[1].cell.anode[2].s_component[1]
stack.subStack[1].cell.anode[2].s_component[2]
stack.subStack[1].cell.anode[2].s_component[3]
stack.subStack[1].cell.anode[2].s_component[4]
stack.subStack[1].cell.anode[2].s_component[5]
stack.subStack[1].cell.anode[2].s_component[6]
stack.subStack[1].cell.anode[2].s_component[7]
stack.subStack[1].cell.anode[2].u_comp[1]
stack.subStack[1].cell.anode[2].u_comp[2]
stack.subStack[1].cell.anode[2].u_comp[3]
stack.subStack[1].cell.anode[2].u_comp[4]
stack.subStack[1].cell.anode[2].u_comp[5]
stack.subStack[1].cell.anode[2].u_comp[6]
stack.subStack[1].cell.anode[2].u_comp[7]
stack.subStack[1].cell.anode[2].cp
stack.subStack[1].cell.anode[2].g_formation[1]
stack.subStack[1].cell.anode[2].g_formation[2]
stack.subStack[1].cell.anode[2].g_formation[3]
stack.subStack[1].cell.anode[2].g_formation[4]
stack.subStack[1].cell.anode[2].g_formation[5]
stack.subStack[1].cell.anode[2].g_formation[6]
stack.subStack[1].cell.anode[2].g_formation[7]
stack.subStack[1].cell.anode[2].ddTp
stack.subStack[1].cell.anode[2].ddpT
stack.subStack[1].cell.anode[2].dupT
stack.subStack[1].cell.anode[2].duTp
stack.subStack[1].cell.anode[2].ddx[1]
stack.subStack[1].cell.anode[2].ddx[2]
stack.subStack[1].cell.anode[2].ddx[3]
stack.subStack[1].cell.anode[2].ddx[4]
stack.subStack[1].cell.anode[2].ddx[5]
stack.subStack[1].cell.anode[2].ddx[6]
stack.subStack[1].cell.anode[2].ddx[7]
stack.subStack[1].cell.anode[3].X[1]
stack.subStack[1].cell.anode[3].X[2]
stack.subStack[1].cell.anode[3].X[3]
stack.subStack[1].cell.anode[3].X[4]
stack.subStack[1].cell.anode[3].X[5]
stack.subStack[1].cell.anode[3].X[6]
stack.subStack[1].cell.anode[3].X[7]
stack.subStack[1].cell.anode[3].Xi[1]
stack.subStack[1].cell.anode[3].Xi[2]
stack.subStack[1].cell.anode[3].Xi[3]
stack.subStack[1].cell.anode[3].Xi[4]
stack.subStack[1].cell.anode[3].Xi[5]
stack.subStack[1].cell.anode[3].Xi[6]
stack.subStack[1].cell.anode[3].Xi[7]
stack.subStack[1].cell.anode[3].d
stack.subStack[1].cell.anode[3].h
stack.subStack[1].cell.anode[3].u
stack.subStack[1].cell.anode[3].Rg
stack.subStack[1].cell.anode[3].MM
stack.subStack[1].cell.anode[3].assertlevel
stack.subStack[1].cell.anode[3].state.p
stack.subStack[1].cell.anode[3].state.T
stack.subStack[1].cell.anode[3].state.X[1]
stack.subStack[1].cell.anode[3].state.X[2]
stack.subStack[1].cell.anode[3].state.X[3]
stack.subStack[1].cell.anode[3].state.X[4]
stack.subStack[1].cell.anode[3].state.X[5]
stack.subStack[1].cell.anode[3].state.X[6]
stack.subStack[1].cell.anode[3].state.X[7]
stack.subStack[1].cell.anode[3].preferredMediumStates
stack.subStack[1].cell.anode[3].T_degC
stack.subStack[1].cell.anode[3].p_bar
stack.subStack[1].cell.anode[3].Z[1]
stack.subStack[1].cell.anode[3].Z[2]
stack.subStack[1].cell.anode[3].Z[3]
stack.subStack[1].cell.anode[3].Z[4]
stack.subStack[1].cell.anode[3].Z[5]
stack.subStack[1].cell.anode[3].Z[6]
stack.subStack[1].cell.anode[3].Z[7]
stack.subStack[1].cell.anode[3].dUZT[1]
stack.subStack[1].cell.anode[3].dUZT[2]
stack.subStack[1].cell.anode[3].dUZT[3]
stack.subStack[1].cell.anode[3].dUZT[4]
stack.subStack[1].cell.anode[3].dUZT[5]
stack.subStack[1].cell.anode[3].dUZT[6]
stack.subStack[1].cell.anode[3].dUZT[7]
stack.subStack[1].cell.anode[3].h_component[1]
stack.subStack[1].cell.anode[3].h_component[2]
stack.subStack[1].cell.anode[3].h_component[3]
stack.subStack[1].cell.anode[3].h_component[4]
stack.subStack[1].cell.anode[3].h_component[5]
stack.subStack[1].cell.anode[3].h_component[6]
stack.subStack[1].cell.anode[3].h_component[7]
stack.subStack[1].cell.anode[3].s_component[1]
stack.subStack[1].cell.anode[3].s_component[2]
stack.subStack[1].cell.anode[3].s_component[3]
stack.subStack[1].cell.anode[3].s_component[4]
stack.subStack[1].cell.anode[3].s_component[5]
stack.subStack[1].cell.anode[3].s_component[6]
stack.subStack[1].cell.anode[3].s_component[7]
stack.subStack[1].cell.anode[3].u_comp[1]
stack.subStack[1].cell.anode[3].u_comp[2]
stack.subStack[1].cell.anode[3].u_comp[3]
stack.subStack[1].cell.anode[3].u_comp[4]
stack.subStack[1].cell.anode[3].u_comp[5]
stack.subStack[1].cell.anode[3].u_comp[6]
stack.subStack[1].cell.anode[3].u_comp[7]
stack.subStack[1].cell.anode[3].cp
stack.subStack[1].cell.anode[3].g_formation[1]
stack.subStack[1].cell.anode[3].g_formation[2]
stack.subStack[1].cell.anode[3].g_formation[3]
stack.subStack[1].cell.anode[3].g_formation[4]
stack.subStack[1].cell.anode[3].g_formation[5]
stack.subStack[1].cell.anode[3].g_formation[6]
stack.subStack[1].cell.anode[3].g_formation[7]
stack.subStack[1].cell.anode[3].ddTp
stack.subStack[1].cell.anode[3].ddpT
stack.subStack[1].cell.anode[3].dupT
stack.subStack[1].cell.anode[3].duTp
stack.subStack[1].cell.anode[3].ddx[1]
stack.subStack[1].cell.anode[3].ddx[2]
stack.subStack[1].cell.anode[3].ddx[3]
stack.subStack[1].cell.anode[3].ddx[4]
stack.subStack[1].cell.anode[3].ddx[5]
stack.subStack[1].cell.anode[3].ddx[6]
stack.subStack[1].cell.anode[3].ddx[7]
stack.subStack[1].cell.anode[4].X[1]
stack.subStack[1].cell.anode[4].X[2]
stack.subStack[1].cell.anode[4].X[3]
stack.subStack[1].cell.anode[4].X[4]
stack.subStack[1].cell.anode[4].X[5]
stack.subStack[1].cell.anode[4].X[6]
stack.subStack[1].cell.anode[4].X[7]
stack.subStack[1].cell.anode[4].Xi[1]
stack.subStack[1].cell.anode[4].Xi[2]
stack.subStack[1].cell.anode[4].Xi[3]
stack.subStack[1].cell.anode[4].Xi[4]
stack.subStack[1].cell.anode[4].Xi[5]
stack.subStack[1].cell.anode[4].Xi[6]
stack.subStack[1].cell.anode[4].Xi[7]
stack.subStack[1].cell.anode[4].d
stack.subStack[1].cell.anode[4].h
stack.subStack[1].cell.anode[4].u
stack.subStack[1].cell.anode[4].Rg
stack.subStack[1].cell.anode[4].MM
stack.subStack[1].cell.anode[4].assertlevel
stack.subStack[1].cell.anode[4].state.p
stack.subStack[1].cell.anode[4].state.T
stack.subStack[1].cell.anode[4].state.X[1]
stack.subStack[1].cell.anode[4].state.X[2]
stack.subStack[1].cell.anode[4].state.X[3]
stack.subStack[1].cell.anode[4].state.X[4]
stack.subStack[1].cell.anode[4].state.X[5]
stack.subStack[1].cell.anode[4].state.X[6]
stack.subStack[1].cell.anode[4].state.X[7]
stack.subStack[1].cell.anode[4].preferredMediumStates
stack.subStack[1].cell.anode[4].T_degC
stack.subStack[1].cell.anode[4].p_bar
stack.subStack[1].cell.anode[4].Z[1]
stack.subStack[1].cell.anode[4].Z[2]
stack.subStack[1].cell.anode[4].Z[3]
stack.subStack[1].cell.anode[4].Z[4]
stack.subStack[1].cell.anode[4].Z[5]
stack.subStack[1].cell.anode[4].Z[6]
stack.subStack[1].cell.anode[4].Z[7]
stack.subStack[1].cell.anode[4].dUZT[1]
stack.subStack[1].cell.anode[4].dUZT[2]
stack.subStack[1].cell.anode[4].dUZT[3]
stack.subStack[1].cell.anode[4].dUZT[4]
stack.subStack[1].cell.anode[4].dUZT[5]
stack.subStack[1].cell.anode[4].dUZT[6]
stack.subStack[1].cell.anode[4].dUZT[7]
stack.subStack[1].cell.anode[4].h_component[1]
stack.subStack[1].cell.anode[4].h_component[2]
stack.subStack[1].cell.anode[4].h_component[3]
stack.subStack[1].cell.anode[4].h_component[4]
stack.subStack[1].cell.anode[4].h_component[5]
stack.subStack[1].cell.anode[4].h_component[6]
stack.subStack[1].cell.anode[4].h_component[7]
stack.subStack[1].cell.anode[4].s_component[1]
stack.subStack[1].cell.anode[4].s_component[2]
stack.subStack[1].cell.anode[4].s_component[3]
stack.subStack[1].cell.anode[4].s_component[4]
stack.subStack[1].cell.anode[4].s_component[5]
stack.subStack[1].cell.anode[4].s_component[6]
stack.subStack[1].cell.anode[4].s_component[7]
stack.subStack[1].cell.anode[4].u_comp[1]
stack.subStack[1].cell.anode[4].u_comp[2]
stack.subStack[1].cell.anode[4].u_comp[3]
stack.subStack[1].cell.anode[4].u_comp[4]
stack.subStack[1].cell.anode[4].u_comp[5]
stack.subStack[1].cell.anode[4].u_comp[6]
stack.subStack[1].cell.anode[4].u_comp[7]
stack.subStack[1].cell.anode[4].cp
stack.subStack[1].cell.anode[4].g_formation[1]
stack.subStack[1].cell.anode[4].g_formation[2]
stack.subStack[1].cell.anode[4].g_formation[3]
stack.subStack[1].cell.anode[4].g_formation[4]
stack.subStack[1].cell.anode[4].g_formation[5]
stack.subStack[1].cell.anode[4].g_formation[6]
stack.subStack[1].cell.anode[4].g_formation[7]
stack.subStack[1].cell.anode[4].ddTp
stack.subStack[1].cell.anode[4].ddpT
stack.subStack[1].cell.anode[4].dupT
stack.subStack[1].cell.anode[4].duTp
stack.subStack[1].cell.anode[4].ddx[1]
stack.subStack[1].cell.anode[4].ddx[2]
stack.subStack[1].cell.anode[4].ddx[3]
stack.subStack[1].cell.anode[4].ddx[4]
stack.subStack[1].cell.anode[4].ddx[5]
stack.subStack[1].cell.anode[4].ddx[6]
stack.subStack[1].cell.anode[4].ddx[7]
stack.subStack[1].cell.cathode[1].X[1]
stack.subStack[1].cell.cathode[1].X[2]
stack.subStack[1].cell.cathode[1].X[3]
stack.subStack[1].cell.cathode[1].X[4]
stack.subStack[1].cell.cathode[1].X[5]
stack.subStack[1].cell.cathode[1].d
stack.subStack[1].cell.cathode[1].h
stack.subStack[1].cell.cathode[1].u
stack.subStack[1].cell.cathode[1].Rg
stack.subStack[1].cell.cathode[1].MM
stack.subStack[1].cell.cathode[1].assertlevel
stack.subStack[1].cell.cathode[1].state.p
stack.subStack[1].cell.cathode[1].state.T
stack.subStack[1].cell.cathode[1].state.X[1]
stack.subStack[1].cell.cathode[1].state.X[2]
stack.subStack[1].cell.cathode[1].state.X[3]
stack.subStack[1].cell.cathode[1].state.X[4]
stack.subStack[1].cell.cathode[1].state.X[5]
stack.subStack[1].cell.cathode[1].preferredMediumStates
stack.subStack[1].cell.cathode[1].T_degC
stack.subStack[1].cell.cathode[1].p_bar
stack.subStack[1].cell.cathode[1].Z[1]
stack.subStack[1].cell.cathode[1].Z[2]
stack.subStack[1].cell.cathode[1].Z[3]
stack.subStack[1].cell.cathode[1].Z[4]
stack.subStack[1].cell.cathode[1].Z[5]
stack.subStack[1].cell.cathode[1].dUZT[1]
stack.subStack[1].cell.cathode[1].dUZT[2]
stack.subStack[1].cell.cathode[1].dUZT[3]
stack.subStack[1].cell.cathode[1].dUZT[4]
stack.subStack[1].cell.cathode[1].dUZT[5]
stack.subStack[1].cell.cathode[1].h_component[1]
stack.subStack[1].cell.cathode[1].h_component[2]
stack.subStack[1].cell.cathode[1].h_component[3]
stack.subStack[1].cell.cathode[1].h_component[4]
stack.subStack[1].cell.cathode[1].h_component[5]
stack.subStack[1].cell.cathode[1].s_component[1]
stack.subStack[1].cell.cathode[1].s_component[2]
stack.subStack[1].cell.cathode[1].s_component[3]
stack.subStack[1].cell.cathode[1].s_component[4]
stack.subStack[1].cell.cathode[1].s_component[5]
stack.subStack[1].cell.cathode[1].u_comp[1]
stack.subStack[1].cell.cathode[1].u_comp[2]
stack.subStack[1].cell.cathode[1].u_comp[3]
stack.subStack[1].cell.cathode[1].u_comp[4]
stack.subStack[1].cell.cathode[1].u_comp[5]
stack.subStack[1].cell.cathode[1].cp
stack.subStack[1].cell.cathode[1].g_formation[1]
stack.subStack[1].cell.cathode[1].g_formation[2]
stack.subStack[1].cell.cathode[1].g_formation[3]
stack.subStack[1].cell.cathode[1].g_formation[4]
stack.subStack[1].cell.cathode[1].g_formation[5]
stack.subStack[1].cell.cathode[1].ddTp
stack.subStack[1].cell.cathode[1].ddpT
stack.subStack[1].cell.cathode[1].dupT
stack.subStack[1].cell.cathode[1].duTp
stack.subStack[1].cell.cathode[1].ddx[1]
stack.subStack[1].cell.cathode[1].ddx[2]
stack.subStack[1].cell.cathode[1].ddx[3]
stack.subStack[1].cell.cathode[1].ddx[4]
stack.subStack[1].cell.cathode[1].ddx[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].R
stack.subStack[1].cell.cathode[2].X[1]
stack.subStack[1].cell.cathode[2].X[2]
stack.subStack[1].cell.cathode[2].X[3]
stack.subStack[1].cell.cathode[2].X[4]
stack.subStack[1].cell.cathode[2].X[5]
stack.subStack[1].cell.cathode[2].der(X[1])
stack.subStack[1].cell.cathode[2].der(X[2])
stack.subStack[1].cell.cathode[2].der(X[3])
stack.subStack[1].cell.cathode[2].der(X[4])
stack.subStack[1].cell.cathode[2].der(X[5])
stack.subStack[1].cell.cathode[2].d
stack.subStack[1].cell.cathode[2].h
stack.subStack[1].cell.cathode[2].u
stack.subStack[1].cell.cathode[2].Rg
stack.subStack[1].cell.cathode[2].MM
stack.subStack[1].cell.cathode[2].assertlevel
stack.subStack[1].cell.cathode[2].state.p
stack.subStack[1].cell.cathode[2].state.T
stack.subStack[1].cell.cathode[2].state.X[1]
stack.subStack[1].cell.cathode[2].state.X[2]
stack.subStack[1].cell.cathode[2].state.X[3]
stack.subStack[1].cell.cathode[2].state.X[4]
stack.subStack[1].cell.cathode[2].state.X[5]
stack.subStack[1].cell.cathode[2].preferredMediumStates
stack.subStack[1].cell.cathode[2].T_degC
stack.subStack[1].cell.cathode[2].p_bar
stack.subStack[1].cell.cathode[2].Z[1]
stack.subStack[1].cell.cathode[2].Z[2]
stack.subStack[1].cell.cathode[2].Z[3]
stack.subStack[1].cell.cathode[2].Z[4]
stack.subStack[1].cell.cathode[2].Z[5]
stack.subStack[1].cell.cathode[2].dUZT[1]
stack.subStack[1].cell.cathode[2].dUZT[2]
stack.subStack[1].cell.cathode[2].dUZT[3]
stack.subStack[1].cell.cathode[2].dUZT[4]
stack.subStack[1].cell.cathode[2].dUZT[5]
stack.subStack[1].cell.cathode[2].h_component[1]
stack.subStack[1].cell.cathode[2].h_component[2]
stack.subStack[1].cell.cathode[2].h_component[3]
stack.subStack[1].cell.cathode[2].h_component[4]
stack.subStack[1].cell.cathode[2].h_component[5]
stack.subStack[1].cell.cathode[2].s_component[1]
stack.subStack[1].cell.cathode[2].s_component[2]
stack.subStack[1].cell.cathode[2].s_component[3]
stack.subStack[1].cell.cathode[2].s_component[4]
stack.subStack[1].cell.cathode[2].s_component[5]
stack.subStack[1].cell.cathode[2].u_comp[1]
stack.subStack[1].cell.cathode[2].u_comp[2]
stack.subStack[1].cell.cathode[2].u_comp[3]
stack.subStack[1].cell.cathode[2].u_comp[4]
stack.subStack[1].cell.cathode[2].u_comp[5]
stack.subStack[1].cell.cathode[2].cp
stack.subStack[1].cell.cathode[2].g_formation[1]
stack.subStack[1].cell.cathode[2].g_formation[2]
stack.subStack[1].cell.cathode[2].g_formation[3]
stack.subStack[1].cell.cathode[2].g_formation[4]
stack.subStack[1].cell.cathode[2].g_formation[5]
stack.subStack[1].cell.cathode[2].ddTp
stack.subStack[1].cell.cathode[2].ddpT
stack.subStack[1].cell.cathode[2].dupT
stack.subStack[1].cell.cathode[2].duTp
stack.subStack[1].cell.cathode[2].ddx[1]
stack.subStack[1].cell.cathode[2].ddx[2]
stack.subStack[1].cell.cathode[2].ddx[3]
stack.subStack[1].cell.cathode[2].ddx[4]
stack.subStack[1].cell.cathode[2].ddx[5]
stack.subStack[1].cell.cathode[3].X[1]
stack.subStack[1].cell.cathode[3].X[2]
stack.subStack[1].cell.cathode[3].X[3]
stack.subStack[1].cell.cathode[3].X[4]
stack.subStack[1].cell.cathode[3].X[5]
stack.subStack[1].cell.cathode[3].der(X[1])
stack.subStack[1].cell.cathode[3].der(X[2])
stack.subStack[1].cell.cathode[3].der(X[3])
stack.subStack[1].cell.cathode[3].der(X[4])
stack.subStack[1].cell.cathode[3].der(X[5])
stack.subStack[1].cell.cathode[3].d
stack.subStack[1].cell.cathode[3].h
stack.subStack[1].cell.cathode[3].u
stack.subStack[1].cell.cathode[3].Rg
stack.subStack[1].cell.cathode[3].MM
stack.subStack[1].cell.cathode[3].assertlevel
stack.subStack[1].cell.cathode[3].state.p
stack.subStack[1].cell.cathode[3].state.T
stack.subStack[1].cell.cathode[3].state.X[1]
stack.subStack[1].cell.cathode[3].state.X[2]
stack.subStack[1].cell.cathode[3].state.X[3]
stack.subStack[1].cell.cathode[3].state.X[4]
stack.subStack[1].cell.cathode[3].state.X[5]
stack.subStack[1].cell.cathode[3].preferredMediumStates
stack.subStack[1].cell.cathode[3].T_degC
stack.subStack[1].cell.cathode[3].p_bar
stack.subStack[1].cell.cathode[3].Z[1]
stack.subStack[1].cell.cathode[3].Z[2]
stack.subStack[1].cell.cathode[3].Z[3]
stack.subStack[1].cell.cathode[3].Z[4]
stack.subStack[1].cell.cathode[3].Z[5]
stack.subStack[1].cell.cathode[3].dUZT[1]
stack.subStack[1].cell.cathode[3].dUZT[2]
stack.subStack[1].cell.cathode[3].dUZT[3]
stack.subStack[1].cell.cathode[3].dUZT[4]
stack.subStack[1].cell.cathode[3].dUZT[5]
stack.subStack[1].cell.cathode[3].h_component[1]
stack.subStack[1].cell.cathode[3].h_component[2]
stack.subStack[1].cell.cathode[3].h_component[3]
stack.subStack[1].cell.cathode[3].h_component[4]
stack.subStack[1].cell.cathode[3].h_component[5]
stack.subStack[1].cell.cathode[3].s_component[1]
stack.subStack[1].cell.cathode[3].s_component[2]
stack.subStack[1].cell.cathode[3].s_component[3]
stack.subStack[1].cell.cathode[3].s_component[4]
stack.subStack[1].cell.cathode[3].s_component[5]
stack.subStack[1].cell.cathode[3].u_comp[1]
stack.subStack[1].cell.cathode[3].u_comp[2]
stack.subStack[1].cell.cathode[3].u_comp[3]
stack.subStack[1].cell.cathode[3].u_comp[4]
stack.subStack[1].cell.cathode[3].u_comp[5]
stack.subStack[1].cell.cathode[3].cp
stack.subStack[1].cell.cathode[3].g_formation[1]
stack.subStack[1].cell.cathode[3].g_formation[2]
stack.subStack[1].cell.cathode[3].g_formation[3]
stack.subStack[1].cell.cathode[3].g_formation[4]
stack.subStack[1].cell.cathode[3].g_formation[5]
stack.subStack[1].cell.cathode[3].ddTp
stack.subStack[1].cell.cathode[3].ddpT
stack.subStack[1].cell.cathode[3].dupT
stack.subStack[1].cell.cathode[3].duTp
stack.subStack[1].cell.cathode[3].ddx[1]
stack.subStack[1].cell.cathode[3].ddx[2]
stack.subStack[1].cell.cathode[3].ddx[3]
stack.subStack[1].cell.cathode[3].ddx[4]
stack.subStack[1].cell.cathode[3].ddx[5]
stack.subStack[1].cell.cathode[4].X[1]
stack.subStack[1].cell.cathode[4].X[2]
stack.subStack[1].cell.cathode[4].X[3]
stack.subStack[1].cell.cathode[4].X[4]
stack.subStack[1].cell.cathode[4].X[5]
stack.subStack[1].cell.cathode[4].der(X[1])
stack.subStack[1].cell.cathode[4].der(X[2])
stack.subStack[1].cell.cathode[4].der(X[3])
stack.subStack[1].cell.cathode[4].der(X[4])
stack.subStack[1].cell.cathode[4].der(X[5])
stack.subStack[1].cell.cathode[4].d
stack.subStack[1].cell.cathode[4].h
stack.subStack[1].cell.cathode[4].u
stack.subStack[1].cell.cathode[4].Rg
stack.subStack[1].cell.cathode[4].MM
stack.subStack[1].cell.cathode[4].assertlevel
stack.subStack[1].cell.cathode[4].state.p
stack.subStack[1].cell.cathode[4].state.T
stack.subStack[1].cell.cathode[4].state.X[1]
stack.subStack[1].cell.cathode[4].state.X[2]
stack.subStack[1].cell.cathode[4].state.X[3]
stack.subStack[1].cell.cathode[4].state.X[4]
stack.subStack[1].cell.cathode[4].state.X[5]
stack.subStack[1].cell.cathode[4].preferredMediumStates
stack.subStack[1].cell.cathode[4].T_degC
stack.subStack[1].cell.cathode[4].p_bar
stack.subStack[1].cell.cathode[4].Z[1]
stack.subStack[1].cell.cathode[4].Z[2]
stack.subStack[1].cell.cathode[4].Z[3]
stack.subStack[1].cell.cathode[4].Z[4]
stack.subStack[1].cell.cathode[4].Z[5]
stack.subStack[1].cell.cathode[4].dUZT[1]
stack.subStack[1].cell.cathode[4].dUZT[2]
stack.subStack[1].cell.cathode[4].dUZT[3]
stack.subStack[1].cell.cathode[4].dUZT[4]
stack.subStack[1].cell.cathode[4].dUZT[5]
stack.subStack[1].cell.cathode[4].h_component[1]
stack.subStack[1].cell.cathode[4].h_component[2]
stack.subStack[1].cell.cathode[4].h_component[3]
stack.subStack[1].cell.cathode[4].h_component[4]
stack.subStack[1].cell.cathode[4].h_component[5]
stack.subStack[1].cell.cathode[4].s_component[1]
stack.subStack[1].cell.cathode[4].s_component[2]
stack.subStack[1].cell.cathode[4].s_component[3]
stack.subStack[1].cell.cathode[4].s_component[4]
stack.subStack[1].cell.cathode[4].s_component[5]
stack.subStack[1].cell.cathode[4].u_comp[1]
stack.subStack[1].cell.cathode[4].u_comp[2]
stack.subStack[1].cell.cathode[4].u_comp[3]
stack.subStack[1].cell.cathode[4].u_comp[4]
stack.subStack[1].cell.cathode[4].u_comp[5]
stack.subStack[1].cell.cathode[4].cp
stack.subStack[1].cell.cathode[4].g_formation[1]
stack.subStack[1].cell.cathode[4].g_formation[2]
stack.subStack[1].cell.cathode[4].g_formation[3]
stack.subStack[1].cell.cathode[4].g_formation[4]
stack.subStack[1].cell.cathode[4].g_formation[5]
stack.subStack[1].cell.cathode[4].ddTp
stack.subStack[1].cell.cathode[4].ddpT
stack.subStack[1].cell.cathode[4].dupT
stack.subStack[1].cell.cathode[4].duTp
stack.subStack[1].cell.cathode[4].ddx[1]
stack.subStack[1].cell.cathode[4].ddx[2]
stack.subStack[1].cell.cathode[4].ddx[3]
stack.subStack[1].cell.cathode[4].ddx[4]
stack.subStack[1].cell.cathode[4].ddx[5]
stack.subStack[1].cell.der_T_cell[1]
stack.subStack[1].cell.der_T_cell[2]
stack.subStack[1].cell.der_T_cell[3]
stack.subStack[1].cell.der_T_cell[4]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.H0
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.npol_Cp
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.cp_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.cp_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.s_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.s_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.s_coeff[3]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.TMIN
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.TMAX
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.H0
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.npol_Cp
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.cp_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.cp_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.s_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.s_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.s_coeff[3]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.TMIN
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.TMAX
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.H0
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.npol_Cp
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.cp_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.cp_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.s_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.s_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.s_coeff[3]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.TMIN
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.TMAX
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.H0
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.npol_Cp
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.cp_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.cp_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.s_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.s_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.s_coeff[3]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.TMIN
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.TMAX
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.H0
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.npol_Cp
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.cp_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.cp_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.s_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.s_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.s_coeff[3]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.TMIN
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.TMAX
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.H0
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.npol_Cp
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.cp_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.cp_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.s_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.s_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.s_coeff[3]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.TMIN
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.TMAX
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.H0
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.npol_Cp
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.cp_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.cp_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.s_coeff[1]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.s_coeff[2]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.s_coeff[3]
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.TMIN
_GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].TMAX
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].npol_Cp
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].cp_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].cp_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].s_coeff[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].s_coeff[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].s_coeff[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].TMIN
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].TMAX
stack.subStack[1].cell.sum_Q_cell
stack.subStack[1].cell.P_cell[1]
stack.subStack[1].cell.P_cell[2]
stack.subStack[1].cell.P_cell[3]
stack.subStack[1].cell.P_cell[4]
stack.subStack[1].cell.j_Ionic[1]
stack.subStack[1].cell.j_Ionic[2]
stack.subStack[1].cell.j_Ionic[3]
stack.subStack[1].cell.j_Ionic[4]
stack.subStack[1].cell.T_degC
stack.subStack[1].cell.mXi_flow_an[1, 2]
stack.subStack[1].cell.mXi_flow_an[1, 3]
stack.subStack[1].cell.mXi_flow_an[1, 4]
stack.subStack[1].cell.mXi_flow_an[1, 6]
stack.subStack[1].cell.mXi_flow_an[1, 7]
stack.subStack[1].cell.mXi_flow_an[2, 2]
stack.subStack[1].cell.mXi_flow_an[2, 3]
stack.subStack[1].cell.mXi_flow_an[2, 4]
stack.subStack[1].cell.mXi_flow_an[2, 6]
stack.subStack[1].cell.mXi_flow_an[2, 7]
stack.subStack[1].cell.mXi_flow_an[3, 2]
stack.subStack[1].cell.mXi_flow_an[3, 3]
stack.subStack[1].cell.mXi_flow_an[3, 4]
stack.subStack[1].cell.mXi_flow_an[3, 6]
stack.subStack[1].cell.mXi_flow_an[3, 7]
stack.subStack[1].cell.mXi_flow_an[4, 2]
stack.subStack[1].cell.mXi_flow_an[4, 3]
stack.subStack[1].cell.mXi_flow_an[4, 4]
stack.subStack[1].cell.mXi_flow_an[4, 6]
stack.subStack[1].cell.mXi_flow_an[4, 7]
stack.subStack[1].cell.S_ionic[1]
stack.subStack[1].cell.S_ionic[2]
stack.subStack[1].cell.S_ionic[3]
stack.subStack[1].cell.S_ionic[4]
stack.subStack[1].cell.S_ionic[5]
stack.subStack[1].cell.S_ionic[6]
stack.subStack[1].cell.S_ionic[7]
stack.subStack[1].cell.ASR0
stack.subStack[1].cell.Ea
stack.subStack[1].cell.T0
stack.subStack[1].cell.V_nernst[1]
stack.subStack[1].cell.V_nernst[2]
stack.subStack[1].cell.V_nernst[3]
stack.subStack[1].cell.V_nernst[4]
stack.subStack[1].cell.r_Int[1]
stack.subStack[1].cell.r_Int[2]
stack.subStack[1].cell.r_Int[3]
stack.subStack[1].cell.r_Int[4]
stack.subStack[1].cell.ASR[1]
stack.subStack[1].cell.ASR[2]
stack.subStack[1].cell.ASR[3]
stack.subStack[1].cell.ASR[4]
stack.subStack[1].cell.g_reaction[1]
stack.subStack[1].cell.g_reaction[2]
stack.subStack[1].cell.g_reaction[3]
stack.subStack[1].cell.g_reaction[4]
stack.subStack[1].cell.pH2[1]
stack.subStack[1].cell.pH2[2]
stack.subStack[1].cell.pH2[3]
stack.subStack[1].cell.pH2[4]
stack.subStack[1].cell.pH2O[1]
stack.subStack[1].cell.pH2O[2]
stack.subStack[1].cell.pH2O[3]
stack.subStack[1].cell.pH2O[4]
stack.subStack[1].cell.pO2[1]
stack.subStack[1].cell.pO2[2]
stack.subStack[1].cell.pO2[3]
stack.subStack[1].cell.pO2[4]
stack.subStack[1].cell.internalRes[1].T_ref
stack.subStack[1].cell.internalRes[1].alpha
stack.subStack[1].cell.internalRes[1].v
stack.subStack[1].cell.internalRes[1].i
stack.subStack[1].cell.internalRes[1].n.v
stack.subStack[1].cell.internalRes[1].useHeatPort
stack.subStack[1].cell.internalRes[1].T
stack.subStack[1].cell.internalRes[1].LossPower
stack.subStack[1].cell.internalRes[1].R_actual
stack.subStack[1].cell.internalRes[2].T_ref
stack.subStack[1].cell.internalRes[2].alpha
stack.subStack[1].cell.internalRes[2].v
stack.subStack[1].cell.internalRes[2].i
stack.subStack[1].cell.internalRes[2].n.v
stack.subStack[1].cell.internalRes[2].useHeatPort
stack.subStack[1].cell.internalRes[2].T
stack.subStack[1].cell.internalRes[2].LossPower
stack.subStack[1].cell.internalRes[2].R_actual
stack.subStack[1].cell.internalRes[3].T_ref
stack.subStack[1].cell.internalRes[3].alpha
stack.subStack[1].cell.internalRes[3].v
stack.subStack[1].cell.internalRes[3].i
stack.subStack[1].cell.internalRes[3].n.v
stack.subStack[1].cell.internalRes[3].useHeatPort
stack.subStack[1].cell.internalRes[3].T
stack.subStack[1].cell.internalRes[3].LossPower
stack.subStack[1].cell.internalRes[3].R_actual
stack.subStack[1].cell.internalRes[4].T_ref
stack.subStack[1].cell.internalRes[4].alpha
stack.subStack[1].cell.internalRes[4].v
stack.subStack[1].cell.internalRes[4].i
stack.subStack[1].cell.internalRes[4].n.v
stack.subStack[1].cell.internalRes[4].useHeatPort
stack.subStack[1].cell.internalRes[4].T
stack.subStack[1].cell.internalRes[4].LossPower
stack.subStack[1].cell.internalRes[4].R_actual
stack.subStack[1].cell.ref[1]
stack.subStack[1].cell.ref[2]
stack.subStack[1].cell.air[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[5]
stack.subStack[1].pin_n.v
stack.subStack[1].pin_n.i
stack.subStack[1].feed_anode.h_outflow
stack.subStack[1].drain_anode.h_outflow
stack.subStack[1].feed_cathode.h_outflow
stack.subStack[1].drain_cathode.h_outflow
stack.subStack[1].wall[1].Q_flow
stack.subStack[1].wall[2].Q_flow
stack.subStack[1].wall[3].Q_flow
stack.subStack[1].wall[4].Q_flow
stack.subStack[1].pi
stack.subStack[1].n_channels_anode
stack.subStack[1].L_anode
stack.subStack[1].D_anode
stack.subStack[1].Dhyd_anode
stack.subStack[1].C_anode
stack.subStack[1].A_anode
stack.subStack[1].V_anode
stack.subStack[1].A_heat_anode
stack.subStack[1].n_channels_cathode
stack.subStack[1].L_cathode
stack.subStack[1].D_cathode
stack.subStack[1].Dhyd_cathode
stack.subStack[1].C_cathode
stack.subStack[1].A_cathode
stack.subStack[1].V_cathode
stack.subStack[1].A_heat_cathode
stack.subStack[1].n
stack.subStack[1].initOpt_anode
stack.subStack[1].p_start_in_anode
stack.subStack[1].p_start_out_anode
stack.subStack[1].p_start_anode[1]
stack.subStack[1].p_start_anode[2]
stack.subStack[1].p_start_anode[3]
stack.subStack[1].p_start_anode[4]
stack.subStack[1].p_start_anode[5]
stack.subStack[1].initFromEnthalpy_anode
stack.subStack[1].h_start_in_anode
stack.subStack[1].h_start_out_anode
stack.subStack[1].h_start_anode[1]
stack.subStack[1].h_start_anode[2]
stack.subStack[1].h_start_anode[3]
stack.subStack[1].h_start_anode[4]
stack.subStack[1].h_start_anode[5]
stack.subStack[1].T_start_in_anode
stack.subStack[1].T_start_out_anode
stack.subStack[1].T_start_anode[1]
stack.subStack[1].T_start_anode[2]
stack.subStack[1].T_start_anode[3]
stack.subStack[1].T_start_anode[4]
stack.subStack[1].T_start_anode[5]
stack.subStack[1].X_start_anode[1]
stack.subStack[1].X_start_anode[2]
stack.subStack[1].X_start_anode[3]
stack.subStack[1].X_start_anode[4]
stack.subStack[1].X_start_anode[5]
stack.subStack[1].X_start_anode[6]
stack.subStack[1].X_start_anode[7]
stack.subStack[1].m_flow_start_anode
stack.subStack[1].initOpt_cathode
stack.subStack[1].p_start_in_cathode
stack.subStack[1].p_start_out_cathode
stack.subStack[1].p_start_cathode[1]
stack.subStack[1].p_start_cathode[2]
stack.subStack[1].p_start_cathode[3]
stack.subStack[1].p_start_cathode[4]
stack.subStack[1].p_start_cathode[5]
stack.subStack[1].initFromEnthalpy_cathode
stack.subStack[1].h_start_in_cathode
stack.subStack[1].h_start_out_cathode
stack.subStack[1].h_start_cathode[1]
stack.subStack[1].h_start_cathode[2]
stack.subStack[1].h_start_cathode[3]
stack.subStack[1].h_start_cathode[4]
stack.subStack[1].h_start_cathode[5]
stack.subStack[1].T_start_in_cathode
stack.subStack[1].T_start_out_cathode
stack.subStack[1].T_start_cathode[1]
stack.subStack[1].T_start_cathode[2]
stack.subStack[1].T_start_cathode[3]
stack.subStack[1].T_start_cathode[4]
stack.subStack[1].T_start_cathode[5]
stack.subStack[1].X_start_cathode[1]
stack.subStack[1].X_start_cathode[2]
stack.subStack[1].X_start_cathode[3]
stack.subStack[1].X_start_cathode[4]
stack.subStack[1].X_start_cathode[5]
stack.subStack[1].m_flow_start_cathode
stack.subStack[1].dp_smooth
stack.subStack[1].mflow_smooth
stack.subStack[1].from_dp_anode
stack.subStack[1].positiveFlow_anode
stack.subStack[1].generateEventForReversal_anode
stack.subStack[1].from_dp_cathode
stack.subStack[1].positiveFlow_cathode
stack.subStack[1].generateEventForReversal_cathode
stack.subStack[1].useHeatTransfer_anode
stack.subStack[1].useHeatTransfer_cathode
stack.subStack[1].CF_AnodeSidePressureLoss
stack.subStack[1].CF_AnodeSideHeatTransfer
stack.subStack[1].CF_CathodePressureLoss
stack.subStack[1].CF_CathodeSideHeatTransfer
stack.subStack[1].d0_prox
stack.subStack[1].dp0_prox
stack.subStack[1].m_flow_nom_prox
stack.subStack[1].anode_stoich_num
stack.subStack[1].anode_stoich_den
stack.subStack[1].cathode_stoich_num
stack.subStack[1].cathode_stoich_den
stack.subStack[1].summary.N
stack.subStack[1].summary.n_cell
stack.subStack[1].summary.j_external
stack.subStack[1].summary.V_cell
stack.subStack[1].summary.Q_stack
stack.subStack[1].summary.dp_anode
stack.subStack[1].summary.dp_cathode
stack.subStack[1].anode_channel.summary.dp
stack.subStack[1].anode_channel.summary.m_flow
stack.subStack[1].anode_channel.summary.M
stack.subStack[1].anode_channel.summary.V
stack.subStack[1].anode_channel.summary.d_in
stack.subStack[1].anode_channel.n
stack.subStack[1].anode_channel.pi
stack.subStack[1].anode_channel.n_channels
stack.subStack[1].anode_channel.L
stack.subStack[1].anode_channel.D
stack.subStack[1].anode_channel.Dhyd
stack.subStack[1].anode_channel.A
stack.subStack[1].anode_channel.C
stack.subStack[1].anode_channel.V
stack.subStack[1].anode_channel.A_heat
stack.subStack[1].anode_channel.useHeatTransfer
stack.subStack[1].anode_channel.ni
stack.subStack[1].anode_channel.initOpt
stack.subStack[1].anode_channel.p_start_in
stack.subStack[1].anode_channel.p_start_out
stack.subStack[1].anode_channel.p_start[1]
stack.subStack[1].anode_channel.p_start[2]
stack.subStack[1].anode_channel.p_start[3]
stack.subStack[1].anode_channel.p_start[4]
stack.subStack[1].anode_channel.p_start[5]
stack.subStack[1].anode_channel.initFromEnthalpy
stack.subStack[1].anode_channel.h_start_in
stack.subStack[1].anode_channel.h_start_out
stack.subStack[1].anode_channel.h_start[1]
stack.subStack[1].anode_channel.h_start[2]
stack.subStack[1].anode_channel.h_start[3]
stack.subStack[1].anode_channel.h_start[4]
stack.subStack[1].anode_channel.h_start[5]
stack.subStack[1].anode_channel.T_start_in
stack.subStack[1].anode_channel.T_start_out
stack.subStack[1].anode_channel.T_start[1]
stack.subStack[1].anode_channel.T_start[2]
stack.subStack[1].anode_channel.T_start[3]
stack.subStack[1].anode_channel.T_start[4]
stack.subStack[1].anode_channel.T_start[5]
stack.subStack[1].anode_channel.X_start[1]
stack.subStack[1].anode_channel.X_start[2]
stack.subStack[1].anode_channel.X_start[3]
stack.subStack[1].anode_channel.X_start[4]
stack.subStack[1].anode_channel.X_start[5]
stack.subStack[1].anode_channel.X_start[6]
stack.subStack[1].anode_channel.X_start[7]
stack.subStack[1].anode_channel.m_flow_start
stack.subStack[1].anode_channel.positiveFlow
stack.subStack[1].anode_channel.from_dp
stack.subStack[1].anode_channel.dp_smooth
stack.subStack[1].anode_channel.mflow_smooth
stack.subStack[1].anode_channel.generateEventForReversal
stack.subStack[1].anode_channel.CF_PressureLoss
stack.subStack[1].anode_channel.CF_HeatTransfer
stack.subStack[1].anode_channel.X_weight
stack.subStack[1].anode_channel.y_sat
stack.subStack[1].anode_channel.includeStaticHead
stack.subStack[1].anode_channel.height
stack.subStack[1].anode_channel.g
stack.subStack[1].anode_channel.channel.n
stack.subStack[1].anode_channel.channel.n_channels[1]
stack.subStack[1].anode_channel.channel.n_channels[2]
stack.subStack[1].anode_channel.channel.n_channels[3]
stack.subStack[1].anode_channel.channel.n_channels[4]
stack.subStack[1].anode_channel.channel.L[1]
stack.subStack[1].anode_channel.channel.L[2]
stack.subStack[1].anode_channel.channel.L[3]
stack.subStack[1].anode_channel.channel.L[4]
stack.subStack[1].anode_channel.channel.Dhyd[1]
stack.subStack[1].anode_channel.channel.Dhyd[2]
stack.subStack[1].anode_channel.channel.Dhyd[3]
stack.subStack[1].anode_channel.channel.Dhyd[4]
stack.subStack[1].anode_channel.channel.A[1]
stack.subStack[1].anode_channel.channel.A[2]
stack.subStack[1].anode_channel.channel.A[3]
stack.subStack[1].anode_channel.channel.A[4]
stack.subStack[1].anode_channel.channel.L_total
stack.subStack[1].anode_channel.channel.V[1]
stack.subStack[1].anode_channel.channel.V[2]
stack.subStack[1].anode_channel.channel.V[3]
stack.subStack[1].anode_channel.channel.V[4]
stack.subStack[1].anode_channel.channel.V_tot
stack.subStack[1].anode_channel.channel.A_mean
stack.subStack[1].anode_channel.channel.A_heat[1]
stack.subStack[1].anode_channel.channel.A_heat[2]
stack.subStack[1].anode_channel.channel.A_heat[3]
stack.subStack[1].anode_channel.channel.A_heat[4]
stack.subStack[1].anode_channel.channel.ni
stack.subStack[1].anode_channel.channel.initOpt
stack.subStack[1].anode_channel.channel.p_start_in
stack.subStack[1].anode_channel.channel.p_start_out
stack.subStack[1].anode_channel.channel.p_start[1]
stack.subStack[1].anode_channel.channel.p_start[2]
stack.subStack[1].anode_channel.channel.p_start[3]
stack.subStack[1].anode_channel.channel.p_start[4]
stack.subStack[1].anode_channel.channel.p_start[5]
stack.subStack[1].anode_channel.channel.initFromEnthalpy
stack.subStack[1].anode_channel.channel.h_start_in
stack.subStack[1].anode_channel.channel.h_start_out
stack.subStack[1].anode_channel.channel.h_start[1]
stack.subStack[1].anode_channel.channel.h_start[2]
stack.subStack[1].anode_channel.channel.h_start[3]
stack.subStack[1].anode_channel.channel.h_start[4]
stack.subStack[1].anode_channel.channel.h_start[5]
stack.subStack[1].anode_channel.channel.T_start_in
stack.subStack[1].anode_channel.channel.T_start_out
stack.subStack[1].anode_channel.channel.T_start[1]
stack.subStack[1].anode_channel.channel.T_start[2]
stack.subStack[1].anode_channel.channel.T_start[3]
stack.subStack[1].anode_channel.channel.T_start[4]
stack.subStack[1].anode_channel.channel.T_start[5]
stack.subStack[1].anode_channel.channel.X_start[1]
stack.subStack[1].anode_channel.channel.X_start[2]
stack.subStack[1].anode_channel.channel.X_start[3]
stack.subStack[1].anode_channel.channel.X_start[4]
stack.subStack[1].anode_channel.channel.X_start[5]
stack.subStack[1].anode_channel.channel.X_start[6]
stack.subStack[1].anode_channel.channel.X_start[7]
stack.subStack[1].anode_channel.channel.m_flow_start
stack.subStack[1].anode_channel.channel.positiveFlow
stack.subStack[1].anode_channel.channel.from_dp
stack.subStack[1].anode_channel.channel.dp_smooth
stack.subStack[1].anode_channel.channel.mflow_smooth
stack.subStack[1].anode_channel.channel.generateEventForReversal
stack.subStack[1].anode_channel.channel.NA
stack.subStack[1].anode_channel.channel.NB
stack.subStack[1].anode_channel.channel.T[1]
stack.subStack[1].anode_channel.channel.der(T[1])
stack.subStack[1].anode_channel.channel.T[2]
stack.subStack[1].anode_channel.channel.der(T[2])
stack.subStack[1].anode_channel.channel.T[3]
stack.subStack[1].anode_channel.channel.der(T[3])
stack.subStack[1].anode_channel.channel.T[4]
stack.subStack[1].anode_channel.channel.der(T[4])
stack.subStack[1].anode_channel.channel.dp_asState
stack.subStack[1].anode_channel.channel.frictionDistribution
stack.subStack[1].anode_channel.channel.n_fric
stack.subStack[1].anode_channel.channel.CF_PressureLoss
stack.subStack[1].anode_channel.channel.CF_HeatTransfer
stack.subStack[1].anode_channel.channel.includeStaticHead
stack.subStack[1].anode_channel.channel.levels[1]
stack.subStack[1].anode_channel.channel.levels[2]
stack.subStack[1].anode_channel.channel.levels[3]
stack.subStack[1].anode_channel.channel.levels[4]
stack.subStack[1].anode_channel.channel.g
stack.subStack[1].anode_channel.channel.friction[1].A
stack.subStack[1].anode_channel.channel.friction[1].Dhyd
stack.subStack[1].anode_channel.channel.friction[1].n_channels
stack.subStack[1].anode_channel.channel.friction[1].lengthFraction
stack.subStack[1].anode_channel.channel.friction[1].flowFraction0
stack.subStack[1].anode_channel.channel.friction[1].dpFraction0
stack.subStack[1].anode_channel.channel.friction[1].from_dp
stack.subStack[1].anode_channel.channel.friction[1].positiveFlow
stack.subStack[1].anode_channel.channel.friction[1].dp_smooth
stack.subStack[1].anode_channel.channel.friction[1].mflow_smooth
stack.subStack[1].anode_channel.channel.friction[1].useFixedDensity
stack.subStack[1].anode_channel.channel.friction[1].reference_d
stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[1].dp_from_isothermal
stack.subStack[1].anode_channel.channel.friction[1].m_flow
stack.subStack[1].anode_channel.channel.friction[1].dA
stack.subStack[1].anode_channel.channel.friction[1].dB
stack.subStack[1].anode_channel.channel.friction[1].d0
stack.subStack[1].anode_channel.channel.friction[1].dp0
stack.subStack[1].anode_channel.channel.friction[1].m_flow0
stack.subStack[1].anode_channel.channel.friction[2].A
stack.subStack[1].anode_channel.channel.friction[2].Dhyd
stack.subStack[1].anode_channel.channel.friction[2].n_channels
stack.subStack[1].anode_channel.channel.friction[2].lengthFraction
stack.subStack[1].anode_channel.channel.friction[2].flowFraction0
stack.subStack[1].anode_channel.channel.friction[2].dpFraction0
stack.subStack[1].anode_channel.channel.friction[2].from_dp
stack.subStack[1].anode_channel.channel.friction[2].positiveFlow
stack.subStack[1].anode_channel.channel.friction[2].dp_smooth
stack.subStack[1].anode_channel.channel.friction[2].mflow_smooth
stack.subStack[1].anode_channel.channel.friction[2].useFixedDensity
stack.subStack[1].anode_channel.channel.friction[2].reference_d
stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[2].dp_from_isothermal
stack.subStack[1].anode_channel.channel.friction[2].m_flow
stack.subStack[1].anode_channel.channel.friction[2].dA
stack.subStack[1].anode_channel.channel.friction[2].dB
stack.subStack[1].anode_channel.channel.friction[2].d0
stack.subStack[1].anode_channel.channel.friction[2].dp0
stack.subStack[1].anode_channel.channel.friction[2].m_flow0
stack.subStack[1].anode_channel.channel.friction[3].A
stack.subStack[1].anode_channel.channel.friction[3].Dhyd
stack.subStack[1].anode_channel.channel.friction[3].n_channels
stack.subStack[1].anode_channel.channel.friction[3].lengthFraction
stack.subStack[1].anode_channel.channel.friction[3].flowFraction0
stack.subStack[1].anode_channel.channel.friction[3].dpFraction0
stack.subStack[1].anode_channel.channel.friction[3].from_dp
stack.subStack[1].anode_channel.channel.friction[3].positiveFlow
stack.subStack[1].anode_channel.channel.friction[3].dp_smooth
stack.subStack[1].anode_channel.channel.friction[3].mflow_smooth
stack.subStack[1].anode_channel.channel.friction[3].useFixedDensity
stack.subStack[1].anode_channel.channel.friction[3].reference_d
stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[3].dp_from_isothermal
stack.subStack[1].anode_channel.channel.friction[3].m_flow
stack.subStack[1].anode_channel.channel.friction[3].dA
stack.subStack[1].anode_channel.channel.friction[3].dB
stack.subStack[1].anode_channel.channel.friction[3].d0
stack.subStack[1].anode_channel.channel.friction[3].dp0
stack.subStack[1].anode_channel.channel.friction[3].m_flow0
stack.subStack[1].anode_channel.channel.friction[4].A
stack.subStack[1].anode_channel.channel.friction[4].Dhyd
stack.subStack[1].anode_channel.channel.friction[4].n_channels
stack.subStack[1].anode_channel.channel.friction[4].lengthFraction
stack.subStack[1].anode_channel.channel.friction[4].flowFraction0
stack.subStack[1].anode_channel.channel.friction[4].dpFraction0
stack.subStack[1].anode_channel.channel.friction[4].from_dp
stack.subStack[1].anode_channel.channel.friction[4].positiveFlow
stack.subStack[1].anode_channel.channel.friction[4].dp_smooth
stack.subStack[1].anode_channel.channel.friction[4].mflow_smooth
stack.subStack[1].anode_channel.channel.friction[4].useFixedDensity
stack.subStack[1].anode_channel.channel.friction[4].reference_d
stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[1]
stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[2]
stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[3]
stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[4]
stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[5]
stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[6]
stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[7]
stack.subStack[1].anode_channel.channel.friction[4].dp_from_isothermal
stack.subStack[1].anode_channel.channel.friction[4].m_flow
stack.subStack[1].anode_channel.channel.friction[4].dA
stack.subStack[1].anode_channel.channel.friction[4].dB
stack.subStack[1].anode_channel.channel.friction[4].d0
stack.subStack[1].anode_channel.channel.friction[4].dp0
stack.subStack[1].anode_channel.channel.friction[4].m_flow0
stack.subStack[1].anode_channel.channel.htcoeff[1].A
stack.subStack[1].anode_channel.channel.htcoeff[1].L
stack.subStack[1].anode_channel.channel.htcoeff[1].Dhyd
stack.subStack[1].anode_channel.channel.htcoeff[1].m_flow
stack.subStack[1].anode_channel.channel.htcoeff[1].ht_from_isothermal
stack.subStack[1].anode_channel.channel.htcoeff[1].CF_length
stack.subStack[1].anode_channel.channel.htcoeff[1].alpha
stack.subStack[1].anode_channel.channel.htcoeff[2].A
stack.subStack[1].anode_channel.channel.htcoeff[2].L
stack.subStack[1].anode_channel.channel.htcoeff[2].Dhyd
stack.subStack[1].anode_channel.channel.htcoeff[2].m_flow
stack.subStack[1].anode_channel.channel.htcoeff[2].ht_from_isothermal
stack.subStack[1].anode_channel.channel.htcoeff[2].CF_length
stack.subStack[1].anode_channel.channel.htcoeff[2].alpha
stack.subStack[1].anode_channel.channel.htcoeff[3].A
stack.subStack[1].anode_channel.channel.htcoeff[3].L
stack.subStack[1].anode_channel.channel.htcoeff[3].Dhyd
stack.subStack[1].anode_channel.channel.htcoeff[3].m_flow
stack.subStack[1].anode_channel.channel.htcoeff[3].ht_from_isothermal
stack.subStack[1].anode_channel.channel.htcoeff[3].CF_length
stack.subStack[1].anode_channel.channel.htcoeff[3].alpha
stack.subStack[1].anode_channel.channel.htcoeff[4].A
stack.subStack[1].anode_channel.channel.htcoeff[4].L
stack.subStack[1].anode_channel.channel.htcoeff[4].Dhyd
stack.subStack[1].anode_channel.channel.htcoeff[4].m_flow
stack.subStack[1].anode_channel.channel.htcoeff[4].ht_from_isothermal
stack.subStack[1].anode_channel.channel.htcoeff[4].CF_length
stack.subStack[1].anode_channel.channel.htcoeff[4].alpha
stack.subStack[1].anode_channel.channel.reaction.N
stack.subStack[1].anode_channel.channel.reaction.Cp_reac[1]
stack.subStack[1].anode_channel.channel.reaction.Cp_reac[2]
stack.subStack[1].anode_channel.channel.reaction.Cp_reac[3]
stack.subStack[1].anode_channel.channel.reaction.Cp_reac[4]
stack.subStack[1].anode_channel.channel.reaction.Q[1]
stack.subStack[1].anode_channel.channel.reaction.Q[2]
stack.subStack[1].anode_channel.channel.reaction.Q[3]
stack.subStack[1].anode_channel.channel.reaction.Q[4]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[1, 1]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[1, 5]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[2, 1]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[2, 5]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[3, 1]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[3, 5]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[4, 1]
stack.subStack[1].anode_channel.channel.reaction.mX_flow[4, 5]
stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 1]
stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 2]
stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 3]
stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 4]
stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 5]
stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 6]
stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 7]
stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 1]
stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 2]
stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 3]
stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 4]
stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 5]
stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 6]
stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 7]
stack.subStack[1].anode_channel.channel.reaction.n_reac
stack.subStack[1].anode_channel.channel.reaction.comp[1]
stack.subStack[1].anode_channel.channel.reaction.comp[2]
stack.subStack[1].anode_channel.channel.reaction.pstart
stack.subStack[1].anode_channel.channel.reaction.Tstart
stack.subStack[1].anode_channel.channel.reaction.Xstart[1]
stack.subStack[1].anode_channel.channel.reaction.Xstart[2]
stack.subStack[1].anode_channel.channel.reaction.Xstart[3]
stack.subStack[1].anode_channel.channel.reaction.Xstart[4]
stack.subStack[1].anode_channel.channel.reaction.Xstart[5]
stack.subStack[1].anode_channel.channel.reaction.Xstart[6]
stack.subStack[1].anode_channel.channel.reaction.Xstart[7]
stack.subStack[1].anode_channel.channel.reaction.V
stack.subStack[1].anode_channel.channel.reaction.scale
stack.subStack[1].anode_channel.channel.reaction.MMX[1]
stack.subStack[1].anode_channel.channel.reaction.MMX[2]
stack.subStack[1].anode_channel.channel.reaction.MMX[3]
stack.subStack[1].anode_channel.channel.reaction.MMX[4]
stack.subStack[1].anode_channel.channel.reaction.MMX[5]
stack.subStack[1].anode_channel.channel.reaction.MMX[6]
stack.subStack[1].anode_channel.channel.reaction.MMX[7]
stack.subStack[1].anode_channel.channel.reaction.MM[1]
stack.subStack[1].anode_channel.channel.reaction.MM[2]
stack.subStack[1].anode_channel.channel.reaction.MM[3]
stack.subStack[1].anode_channel.channel.reaction.MM[4]
stack.subStack[1].anode_channel.channel.reaction.der(MM[1])
stack.subStack[1].anode_channel.channel.reaction.der(MM[2])
stack.subStack[1].anode_channel.channel.reaction.der(MM[3])
stack.subStack[1].anode_channel.channel.reaction.der(MM[4])
stack.subStack[1].anode_channel.channel.reaction.y_start[1]
stack.subStack[1].anode_channel.channel.reaction.y_start[2]
stack.subStack[1].anode_channel.channel.reaction.y_start[3]
stack.subStack[1].anode_channel.channel.reaction.y_start[4]
stack.subStack[1].anode_channel.channel.reaction.y_start[5]
stack.subStack[1].anode_channel.channel.reaction.y_start[6]
stack.subStack[1].anode_channel.channel.reaction.y_start[7]
stack.subStack[1].anode_channel.channel.reaction.log10_y_start[1]
stack.subStack[1].anode_channel.channel.reaction.log10_y_start[2]
stack.subStack[1].anode_channel.channel.reaction.log10_y_start[3]
stack.subStack[1].anode_channel.channel.reaction.log10_y_start[4]
stack.subStack[1].anode_channel.channel.reaction.log10_y_start[5]
stack.subStack[1].anode_channel.channel.reaction.log10_y_start[6]
stack.subStack[1].anode_channel.channel.reaction.log10_y_start[7]
stack.subStack[1].anode_channel.channel.reaction.pref
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 2]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 3]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 4]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 5]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 6]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 7]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 2]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 3]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 4]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 5]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 6]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 7]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 2]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 3]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 4]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 5]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 6]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 7]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 2]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 3]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 4]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 5]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 6]
stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 7]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 2]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[2, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[2, 2]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[3, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[3, 2]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[4, 1]
stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[4, 2]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 1]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 2]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 3]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 4]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 5]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 6]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 7]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 1]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 2]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 3]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 4]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 5]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 6]
stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 7]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[5]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[6]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[7]
stack.subStack[1].anode_channel.channel.reaction.Ztot_start
stack.subStack[1].anode_channel.channel.reaction.Zx_start[1]
stack.subStack[1].anode_channel.channel.reaction.Zx_start[2]
stack.subStack[1].anode_channel.channel.reaction.Zx_start[3]
stack.subStack[1].anode_channel.channel.reaction.Zx_start[4]
stack.subStack[1].anode_channel.channel.reaction.Zx_start[5]
stack.subStack[1].anode_channel.channel.reaction.Zx_start[6]
stack.subStack[1].anode_channel.channel.reaction.Zx_start[7]
stack.subStack[1].anode_channel.channel.reaction.CF_conversion
stack.subStack[1].anode_channel.channel.reaction.Tscale
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[1, 1]
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[1, 2]
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[2, 1]
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[2, 2]
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[3, 1]
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[3, 2]
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[4, 1]
stack.subStack[1].anode_channel.channel.reaction.kEq_reac[4, 2]
stack.subStack[1].anode_channel.channel.reaction.Zx[1, 1]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 1])
stack.subStack[1].anode_channel.channel.reaction.Zx[1, 2]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 2])
stack.subStack[1].anode_channel.channel.reaction.Zx[1, 3]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 3])
stack.subStack[1].anode_channel.channel.reaction.Zx[1, 4]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 4])
stack.subStack[1].anode_channel.channel.reaction.Zx[1, 5]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 5])
stack.subStack[1].anode_channel.channel.reaction.Zx[1, 6]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 6])
stack.subStack[1].anode_channel.channel.reaction.Zx[1, 7]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 7])
stack.subStack[1].anode_channel.channel.reaction.Zx[2, 1]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 1])
stack.subStack[1].anode_channel.channel.reaction.Zx[2, 2]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 2])
stack.subStack[1].anode_channel.channel.reaction.Zx[2, 3]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 3])
stack.subStack[1].anode_channel.channel.reaction.Zx[2, 4]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 4])
stack.subStack[1].anode_channel.channel.reaction.Zx[2, 5]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 5])
stack.subStack[1].anode_channel.channel.reaction.Zx[2, 6]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 6])
stack.subStack[1].anode_channel.channel.reaction.Zx[2, 7]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 7])
stack.subStack[1].anode_channel.channel.reaction.Zx[3, 1]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 1])
stack.subStack[1].anode_channel.channel.reaction.Zx[3, 2]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 2])
stack.subStack[1].anode_channel.channel.reaction.Zx[3, 3]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 3])
stack.subStack[1].anode_channel.channel.reaction.Zx[3, 4]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 4])
stack.subStack[1].anode_channel.channel.reaction.Zx[3, 5]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 5])
stack.subStack[1].anode_channel.channel.reaction.Zx[3, 6]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 6])
stack.subStack[1].anode_channel.channel.reaction.Zx[3, 7]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 7])
stack.subStack[1].anode_channel.channel.reaction.Zx[4, 1]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 1])
stack.subStack[1].anode_channel.channel.reaction.Zx[4, 2]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 2])
stack.subStack[1].anode_channel.channel.reaction.Zx[4, 3]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 3])
stack.subStack[1].anode_channel.channel.reaction.Zx[4, 4]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 4])
stack.subStack[1].anode_channel.channel.reaction.Zx[4, 5]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 5])
stack.subStack[1].anode_channel.channel.reaction.Zx[4, 6]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 6])
stack.subStack[1].anode_channel.channel.reaction.Zx[4, 7]
stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 7])
stack.subStack[1].anode_channel.channel.reaction.Ztot[1]
stack.subStack[1].anode_channel.channel.reaction.Ztot[2]
stack.subStack[1].anode_channel.channel.reaction.Ztot[3]
stack.subStack[1].anode_channel.channel.reaction.Ztot[4]
stack.subStack[1].anode_channel.channel.reaction.der(Ztot[1])
stack.subStack[1].anode_channel.channel.reaction.der(Ztot[2])
stack.subStack[1].anode_channel.channel.reaction.der(Ztot[3])
stack.subStack[1].anode_channel.channel.reaction.der(Ztot[4])
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 1]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 2]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 3]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 4]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 5]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 1]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 2]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 3]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 4]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 5]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 1]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 2]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 3]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 4]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 5]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 1]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 2]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 3]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 4]
stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 5]
stack.subStack[1].anode_channel.channel.reaction.krate[1, 1]
stack.subStack[1].anode_channel.channel.reaction.der(krate[1, 1])
stack.subStack[1].anode_channel.channel.reaction.krate[1, 2]
stack.subStack[1].anode_channel.channel.reaction.der(krate[1, 2])
stack.subStack[1].anode_channel.channel.reaction.krate[2, 1]
stack.subStack[1].anode_channel.channel.reaction.der(krate[2, 1])
stack.subStack[1].anode_channel.channel.reaction.krate[2, 2]
stack.subStack[1].anode_channel.channel.reaction.der(krate[2, 2])
stack.subStack[1].anode_channel.channel.reaction.krate[3, 1]
stack.subStack[1].anode_channel.channel.reaction.der(krate[3, 1])
stack.subStack[1].anode_channel.channel.reaction.krate[3, 2]
stack.subStack[1].anode_channel.channel.reaction.der(krate[3, 2])
stack.subStack[1].anode_channel.channel.reaction.krate[4, 1]
stack.subStack[1].anode_channel.channel.reaction.der(krate[4, 1])
stack.subStack[1].anode_channel.channel.reaction.krate[4, 2]
stack.subStack[1].anode_channel.channel.reaction.der(krate[4, 2])
stack.subStack[1].anode_channel.channel.reaction.rZ[1, 1]
stack.subStack[1].anode_channel.channel.reaction.rZ[1, 2]
stack.subStack[1].anode_channel.channel.reaction.rZ[1, 3]
stack.subStack[1].anode_channel.channel.reaction.rZ[1, 4]
stack.subStack[1].anode_channel.channel.reaction.rZ[1, 5]
stack.subStack[1].anode_channel.channel.reaction.rZ[1, 6]
stack.subStack[1].anode_channel.channel.reaction.rZ[1, 7]
stack.subStack[1].anode_channel.channel.reaction.rZ[2, 1]
stack.subStack[1].anode_channel.channel.reaction.rZ[2, 2]
stack.subStack[1].anode_channel.channel.reaction.rZ[2, 3]
stack.subStack[1].anode_channel.channel.reaction.rZ[2, 4]
stack.subStack[1].anode_channel.channel.reaction.rZ[2, 5]
stack.subStack[1].anode_channel.channel.reaction.rZ[2, 6]
stack.subStack[1].anode_channel.channel.reaction.rZ[2, 7]
stack.subStack[1].anode_channel.channel.reaction.rZ[3, 1]
stack.subStack[1].anode_channel.channel.reaction.rZ[3, 2]
stack.subStack[1].anode_channel.channel.reaction.rZ[3, 3]
stack.subStack[1].anode_channel.channel.reaction.rZ[3, 4]
stack.subStack[1].anode_channel.channel.reaction.rZ[3, 5]
stack.subStack[1].anode_channel.channel.reaction.rZ[3, 6]
stack.subStack[1].anode_channel.channel.reaction.rZ[3, 7]
stack.subStack[1].anode_channel.channel.reaction.rZ[4, 1]
stack.subStack[1].anode_channel.channel.reaction.rZ[4, 2]
stack.subStack[1].anode_channel.channel.reaction.rZ[4, 3]
stack.subStack[1].anode_channel.channel.reaction.rZ[4, 4]
stack.subStack[1].anode_channel.channel.reaction.rZ[4, 5]
stack.subStack[1].anode_channel.channel.reaction.rZ[4, 6]
stack.subStack[1].anode_channel.channel.reaction.rZ[4, 7]
stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 1]
stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 2]
stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 3]
stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 4]
stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 5]
stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 6]
stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 7]
stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 1]
stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 2]
stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 3]
stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 4]
stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 5]
stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 6]
stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 7]
stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 1]
stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 2]
stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 3]
stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 4]
stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 5]
stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 6]
stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 7]
stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 1]
stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 2]
stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 3]
stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 4]
stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 5]
stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 6]
stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 7]
stack.subStack[1].anode_channel.channel.reaction.Zx_nominal
stack.subStack[1].anode_channel.channel.reaction.epsZ
stack.subStack[1].anode_channel.channel.reaction.e[1, 1]
stack.subStack[1].anode_channel.channel.reaction.e[1, 2]
stack.subStack[1].anode_channel.channel.reaction.e[2, 1]
stack.subStack[1].anode_channel.channel.reaction.e[2, 2]
stack.subStack[1].anode_channel.channel.reaction.e[3, 1]
stack.subStack[1].anode_channel.channel.reaction.e[3, 2]
stack.subStack[1].anode_channel.channel.reaction.e[4, 1]
stack.subStack[1].anode_channel.channel.reaction.e[4, 2]
stack.subStack[1].anode_channel.channel.reaction.state[1].p
stack.subStack[1].anode_channel.channel.reaction.state[1].T
stack.subStack[1].anode_channel.channel.reaction.state[1].X[1]
stack.subStack[1].anode_channel.channel.reaction.state[1].X[2]
stack.subStack[1].anode_channel.channel.reaction.state[1].X[3]
stack.subStack[1].anode_channel.channel.reaction.state[1].X[4]
stack.subStack[1].anode_channel.channel.reaction.state[1].X[5]
stack.subStack[1].anode_channel.channel.reaction.state[1].X[6]
stack.subStack[1].anode_channel.channel.reaction.state[1].X[7]
stack.subStack[1].anode_channel.channel.reaction.state[2].p
stack.subStack[1].anode_channel.channel.reaction.state[2].T
stack.subStack[1].anode_channel.channel.reaction.state[2].X[1]
stack.subStack[1].anode_channel.channel.reaction.state[2].X[2]
stack.subStack[1].anode_channel.channel.reaction.state[2].X[3]
stack.subStack[1].anode_channel.channel.reaction.state[2].X[4]
stack.subStack[1].anode_channel.channel.reaction.state[2].X[5]
stack.subStack[1].anode_channel.channel.reaction.state[2].X[6]
stack.subStack[1].anode_channel.channel.reaction.state[2].X[7]
stack.subStack[1].anode_channel.channel.reaction.state[3].p
stack.subStack[1].anode_channel.channel.reaction.state[3].T
stack.subStack[1].anode_channel.channel.reaction.state[3].X[1]
stack.subStack[1].anode_channel.channel.reaction.state[3].X[2]
stack.subStack[1].anode_channel.channel.reaction.state[3].X[3]
stack.subStack[1].anode_channel.channel.reaction.state[3].X[4]
stack.subStack[1].anode_channel.channel.reaction.state[3].X[5]
stack.subStack[1].anode_channel.channel.reaction.state[3].X[6]
stack.subStack[1].anode_channel.channel.reaction.state[3].X[7]
stack.subStack[1].anode_channel.channel.reaction.state[4].p
stack.subStack[1].anode_channel.channel.reaction.state[4].T
stack.subStack[1].anode_channel.channel.reaction.state[4].X[1]
stack.subStack[1].anode_channel.channel.reaction.state[4].X[2]
stack.subStack[1].anode_channel.channel.reaction.state[4].X[3]
stack.subStack[1].anode_channel.channel.reaction.state[4].X[4]
stack.subStack[1].anode_channel.channel.reaction.state[4].X[5]
stack.subStack[1].anode_channel.channel.reaction.state[4].X[6]
stack.subStack[1].anode_channel.channel.reaction.state[4].X[7]
stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 1]
stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 2]
stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 3]
stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 4]
stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 5]
stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 6]
stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 7]
stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 1]
stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 2]
stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 3]
stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 4]
stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 5]
stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 6]
stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 7]
stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 1]
stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 2]
stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 3]
stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 4]
stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 5]
stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 6]
stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 7]
stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 1]
stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 2]
stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 3]
stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 4]
stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 5]
stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 6]
stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 7]
stack.subStack[1].anode_channel.channel.reaction.reactant[1, 1]
stack.subStack[1].anode_channel.channel.reaction.reactant[1, 2]
stack.subStack[1].anode_channel.channel.reaction.reactant[1, 3]
stack.subStack[1].anode_channel.channel.reaction.reactant[1, 4]
stack.subStack[1].anode_channel.channel.reaction.reactant[1, 5]
stack.subStack[1].anode_channel.channel.reaction.reactant[1, 6]
stack.subStack[1].anode_channel.channel.reaction.reactant[1, 7]
stack.subStack[1].anode_channel.channel.reaction.reactant[2, 1]
stack.subStack[1].anode_channel.channel.reaction.reactant[2, 2]
stack.subStack[1].anode_channel.channel.reaction.reactant[2, 3]
stack.subStack[1].anode_channel.channel.reaction.reactant[2, 4]
stack.subStack[1].anode_channel.channel.reaction.reactant[2, 5]
stack.subStack[1].anode_channel.channel.reaction.reactant[2, 6]
stack.subStack[1].anode_channel.channel.reaction.reactant[2, 7]
stack.subStack[1].anode_channel.channel.reaction.rate[1, 1]
stack.subStack[1].anode_channel.channel.reaction.rate[1, 2]
stack.subStack[1].anode_channel.channel.reaction.rate[2, 1]
stack.subStack[1].anode_channel.channel.reaction.rate[2, 2]
stack.subStack[1].anode_channel.channel.reaction.rate[3, 1]
stack.subStack[1].anode_channel.channel.reaction.rate[3, 2]
stack.subStack[1].anode_channel.channel.reaction.rate[4, 1]
stack.subStack[1].anode_channel.channel.reaction.rate[4, 2]
stack.subStack[1].anode_channel.channel.reaction.S_ref[1]
stack.subStack[1].anode_channel.channel.reaction.S_ref[2]
stack.subStack[1].anode_channel.channel.reaction.S_ref[3]
stack.subStack[1].anode_channel.channel.reaction.S_ref[4]
stack.subStack[1].anode_channel.channel.reaction.S_ref[5]
stack.subStack[1].anode_channel.channel.reaction.S_ref[6]
stack.subStack[1].anode_channel.channel.reaction.S_ref[7]
stack.subStack[1].anode_channel.channel.reaction.S_wgs[1]
stack.subStack[1].anode_channel.channel.reaction.S_wgs[2]
stack.subStack[1].anode_channel.channel.reaction.S_wgs[3]
stack.subStack[1].anode_channel.channel.reaction.S_wgs[4]
stack.subStack[1].anode_channel.channel.reaction.S_wgs[5]
stack.subStack[1].anode_channel.channel.reaction.S_wgs[6]
stack.subStack[1].anode_channel.channel.reaction.S_wgs[7]
stack.subStack[1].anode_channel.channel.reaction.index[1]
stack.subStack[1].anode_channel.channel.reaction.index[2]
stack.subStack[1].anode_channel.channel.reaction.T_sat_for_WGS
stack.subStack[1].anode_channel.channel.reaction.g_rere[1]
stack.subStack[1].anode_channel.channel.reaction.g_rere[2]
stack.subStack[1].anode_channel.channel.reaction.g_rere[3]
stack.subStack[1].anode_channel.channel.reaction.g_rere[4]
stack.subStack[1].anode_channel.channel.reaction.g_wgs[1]
stack.subStack[1].anode_channel.channel.reaction.g_wgs[2]
stack.subStack[1].anode_channel.channel.reaction.g_wgs[3]
stack.subStack[1].anode_channel.channel.reaction.g_wgs[4]
stack.subStack[1].anode_channel.channel.gas[1].X[1]
stack.subStack[1].anode_channel.channel.gas[1].X[2]
stack.subStack[1].anode_channel.channel.gas[1].X[3]
stack.subStack[1].anode_channel.channel.gas[1].X[4]
stack.subStack[1].anode_channel.channel.gas[1].X[5]
stack.subStack[1].anode_channel.channel.gas[1].X[6]
stack.subStack[1].anode_channel.channel.gas[1].X[7]
stack.subStack[1].anode_channel.channel.gas[1].der(X[1])
stack.subStack[1].anode_channel.channel.gas[1].der(X[2])
stack.subStack[1].anode_channel.channel.gas[1].der(X[3])
stack.subStack[1].anode_channel.channel.gas[1].der(X[4])
stack.subStack[1].anode_channel.channel.gas[1].der(X[5])
stack.subStack[1].anode_channel.channel.gas[1].der(X[6])
stack.subStack[1].anode_channel.channel.gas[1].der(X[7])
stack.subStack[1].anode_channel.channel.gas[1].Xi[1]
stack.subStack[1].anode_channel.channel.gas[1].Xi[2]
stack.subStack[1].anode_channel.channel.gas[1].Xi[3]
stack.subStack[1].anode_channel.channel.gas[1].Xi[4]
stack.subStack[1].anode_channel.channel.gas[1].Xi[5]
stack.subStack[1].anode_channel.channel.gas[1].Xi[6]
stack.subStack[1].anode_channel.channel.gas[1].Xi[7]
stack.subStack[1].anode_channel.channel.gas[1].d
stack.subStack[1].anode_channel.channel.gas[1].der(d)
stack.subStack[1].anode_channel.channel.gas[1].u
stack.subStack[1].anode_channel.channel.gas[1].Rg
stack.subStack[1].anode_channel.channel.gas[1].der(Rg)
stack.subStack[1].anode_channel.channel.gas[1].MM
stack.subStack[1].anode_channel.channel.gas[1].assertlevel
stack.subStack[1].anode_channel.channel.gas[1].state.p
stack.subStack[1].anode_channel.channel.gas[1].state.T
stack.subStack[1].anode_channel.channel.gas[1].state.X[1]
stack.subStack[1].anode_channel.channel.gas[1].state.X[2]
stack.subStack[1].anode_channel.channel.gas[1].state.X[3]
stack.subStack[1].anode_channel.channel.gas[1].state.X[4]
stack.subStack[1].anode_channel.channel.gas[1].state.X[5]
stack.subStack[1].anode_channel.channel.gas[1].state.X[6]
stack.subStack[1].anode_channel.channel.gas[1].state.X[7]
stack.subStack[1].anode_channel.channel.gas[1].preferredMediumStates
stack.subStack[1].anode_channel.channel.gas[1].T_degC
stack.subStack[1].anode_channel.channel.gas[1].p_bar
stack.subStack[1].anode_channel.channel.gas[1].Z[1]
stack.subStack[1].anode_channel.channel.gas[1].Z[2]
stack.subStack[1].anode_channel.channel.gas[1].Z[3]
stack.subStack[1].anode_channel.channel.gas[1].Z[4]
stack.subStack[1].anode_channel.channel.gas[1].Z[5]
stack.subStack[1].anode_channel.channel.gas[1].Z[6]
stack.subStack[1].anode_channel.channel.gas[1].Z[7]
stack.subStack[1].anode_channel.channel.gas[1].dUZT[1]
stack.subStack[1].anode_channel.channel.gas[1].dUZT[2]
stack.subStack[1].anode_channel.channel.gas[1].dUZT[3]
stack.subStack[1].anode_channel.channel.gas[1].dUZT[4]
stack.subStack[1].anode_channel.channel.gas[1].dUZT[5]
stack.subStack[1].anode_channel.channel.gas[1].dUZT[6]
stack.subStack[1].anode_channel.channel.gas[1].dUZT[7]
stack.subStack[1].anode_channel.channel.gas[1].h_component[1]
stack.subStack[1].anode_channel.channel.gas[1].h_component[2]
stack.subStack[1].anode_channel.channel.gas[1].h_component[3]
stack.subStack[1].anode_channel.channel.gas[1].h_component[4]
stack.subStack[1].anode_channel.channel.gas[1].h_component[5]
stack.subStack[1].anode_channel.channel.gas[1].h_component[6]
stack.subStack[1].anode_channel.channel.gas[1].h_component[7]
stack.subStack[1].anode_channel.channel.gas[1].s_component[1]
stack.subStack[1].anode_channel.channel.gas[1].s_component[2]
stack.subStack[1].anode_channel.channel.gas[1].s_component[3]
stack.subStack[1].anode_channel.channel.gas[1].s_component[4]
stack.subStack[1].anode_channel.channel.gas[1].s_component[5]
stack.subStack[1].anode_channel.channel.gas[1].s_component[6]
stack.subStack[1].anode_channel.channel.gas[1].s_component[7]
stack.subStack[1].anode_channel.channel.gas[1].u_comp[1]
stack.subStack[1].anode_channel.channel.gas[1].u_comp[2]
stack.subStack[1].anode_channel.channel.gas[1].u_comp[3]
stack.subStack[1].anode_channel.channel.gas[1].u_comp[4]
stack.subStack[1].anode_channel.channel.gas[1].u_comp[5]
stack.subStack[1].anode_channel.channel.gas[1].u_comp[6]
stack.subStack[1].anode_channel.channel.gas[1].u_comp[7]
stack.subStack[1].anode_channel.channel.gas[1].cp
stack.subStack[1].anode_channel.channel.gas[1].g_formation[1]
stack.subStack[1].anode_channel.channel.gas[1].g_formation[2]
stack.subStack[1].anode_channel.channel.gas[1].g_formation[3]
stack.subStack[1].anode_channel.channel.gas[1].g_formation[4]
stack.subStack[1].anode_channel.channel.gas[1].g_formation[5]
stack.subStack[1].anode_channel.channel.gas[1].g_formation[6]
stack.subStack[1].anode_channel.channel.gas[1].g_formation[7]
stack.subStack[1].anode_channel.channel.gas[1].ddTp
stack.subStack[1].anode_channel.channel.gas[1].ddpT
stack.subStack[1].anode_channel.channel.gas[1].dupT
stack.subStack[1].anode_channel.channel.gas[1].duTp
stack.subStack[1].anode_channel.channel.gas[1].ddx[1]
stack.subStack[1].anode_channel.channel.gas[1].ddx[2]
stack.subStack[1].anode_channel.channel.gas[1].ddx[3]
stack.subStack[1].anode_channel.channel.gas[1].ddx[4]
stack.subStack[1].anode_channel.channel.gas[1].ddx[5]
stack.subStack[1].anode_channel.channel.gas[1].ddx[6]
stack.subStack[1].anode_channel.channel.gas[1].ddx[7]
stack.subStack[1].anode_channel.channel.gas[2].X[1]
stack.subStack[1].anode_channel.channel.gas[2].X[2]
stack.subStack[1].anode_channel.channel.gas[2].X[3]
stack.subStack[1].anode_channel.channel.gas[2].X[4]
stack.subStack[1].anode_channel.channel.gas[2].X[5]
stack.subStack[1].anode_channel.channel.gas[2].X[6]
stack.subStack[1].anode_channel.channel.gas[2].X[7]
stack.subStack[1].anode_channel.channel.gas[2].der(X[1])
stack.subStack[1].anode_channel.channel.gas[2].der(X[2])
stack.subStack[1].anode_channel.channel.gas[2].der(X[3])
stack.subStack[1].anode_channel.channel.gas[2].der(X[4])
stack.subStack[1].anode_channel.channel.gas[2].der(X[5])
stack.subStack[1].anode_channel.channel.gas[2].der(X[6])
stack.subStack[1].anode_channel.channel.gas[2].der(X[7])
stack.subStack[1].anode_channel.channel.gas[2].Xi[1]
stack.subStack[1].anode_channel.channel.gas[2].Xi[2]
stack.subStack[1].anode_channel.channel.gas[2].Xi[3]
stack.subStack[1].anode_channel.channel.gas[2].Xi[4]
stack.subStack[1].anode_channel.channel.gas[2].Xi[5]
stack.subStack[1].anode_channel.channel.gas[2].Xi[6]
stack.subStack[1].anode_channel.channel.gas[2].Xi[7]
stack.subStack[1].anode_channel.channel.gas[2].d
stack.subStack[1].anode_channel.channel.gas[2].der(d)
stack.subStack[1].anode_channel.channel.gas[2].u
stack.subStack[1].anode_channel.channel.gas[2].Rg
stack.subStack[1].anode_channel.channel.gas[2].der(Rg)
stack.subStack[1].anode_channel.channel.gas[2].MM
stack.subStack[1].anode_channel.channel.gas[2].assertlevel
stack.subStack[1].anode_channel.channel.gas[2].state.p
stack.subStack[1].anode_channel.channel.gas[2].state.T
stack.subStack[1].anode_channel.channel.gas[2].state.X[1]
stack.subStack[1].anode_channel.channel.gas[2].state.X[2]
stack.subStack[1].anode_channel.channel.gas[2].state.X[3]
stack.subStack[1].anode_channel.channel.gas[2].state.X[4]
stack.subStack[1].anode_channel.channel.gas[2].state.X[5]
stack.subStack[1].anode_channel.channel.gas[2].state.X[6]
stack.subStack[1].anode_channel.channel.gas[2].state.X[7]
stack.subStack[1].anode_channel.channel.gas[2].preferredMediumStates
stack.subStack[1].anode_channel.channel.gas[2].T_degC
stack.subStack[1].anode_channel.channel.gas[2].p_bar
stack.subStack[1].anode_channel.channel.gas[2].Z[1]
stack.subStack[1].anode_channel.channel.gas[2].Z[2]
stack.subStack[1].anode_channel.channel.gas[2].Z[3]
stack.subStack[1].anode_channel.channel.gas[2].Z[4]
stack.subStack[1].anode_channel.channel.gas[2].Z[5]
stack.subStack[1].anode_channel.channel.gas[2].Z[6]
stack.subStack[1].anode_channel.channel.gas[2].Z[7]
stack.subStack[1].anode_channel.channel.gas[2].dUZT[1]
stack.subStack[1].anode_channel.channel.gas[2].dUZT[2]
stack.subStack[1].anode_channel.channel.gas[2].dUZT[3]
stack.subStack[1].anode_channel.channel.gas[2].dUZT[4]
stack.subStack[1].anode_channel.channel.gas[2].dUZT[5]
stack.subStack[1].anode_channel.channel.gas[2].dUZT[6]
stack.subStack[1].anode_channel.channel.gas[2].dUZT[7]
stack.subStack[1].anode_channel.channel.gas[2].h_component[1]
stack.subStack[1].anode_channel.channel.gas[2].h_component[2]
stack.subStack[1].anode_channel.channel.gas[2].h_component[3]
stack.subStack[1].anode_channel.channel.gas[2].h_component[4]
stack.subStack[1].anode_channel.channel.gas[2].h_component[5]
stack.subStack[1].anode_channel.channel.gas[2].h_component[6]
stack.subStack[1].anode_channel.channel.gas[2].h_component[7]
stack.subStack[1].anode_channel.channel.gas[2].s_component[1]
stack.subStack[1].anode_channel.channel.gas[2].s_component[2]
stack.subStack[1].anode_channel.channel.gas[2].s_component[3]
stack.subStack[1].anode_channel.channel.gas[2].s_component[4]
stack.subStack[1].anode_channel.channel.gas[2].s_component[5]
stack.subStack[1].anode_channel.channel.gas[2].s_component[6]
stack.subStack[1].anode_channel.channel.gas[2].s_component[7]
stack.subStack[1].anode_channel.channel.gas[2].u_comp[1]
stack.subStack[1].anode_channel.channel.gas[2].u_comp[2]
stack.subStack[1].anode_channel.channel.gas[2].u_comp[3]
stack.subStack[1].anode_channel.channel.gas[2].u_comp[4]
stack.subStack[1].anode_channel.channel.gas[2].u_comp[5]
stack.subStack[1].anode_channel.channel.gas[2].u_comp[6]
stack.subStack[1].anode_channel.channel.gas[2].u_comp[7]
stack.subStack[1].anode_channel.channel.gas[2].cp
stack.subStack[1].anode_channel.channel.gas[2].g_formation[1]
stack.subStack[1].anode_channel.channel.gas[2].g_formation[2]
stack.subStack[1].anode_channel.channel.gas[2].g_formation[3]
stack.subStack[1].anode_channel.channel.gas[2].g_formation[4]
stack.subStack[1].anode_channel.channel.gas[2].g_formation[5]
stack.subStack[1].anode_channel.channel.gas[2].g_formation[6]
stack.subStack[1].anode_channel.channel.gas[2].g_formation[7]
stack.subStack[1].anode_channel.channel.gas[2].ddTp
stack.subStack[1].anode_channel.channel.gas[2].ddpT
stack.subStack[1].anode_channel.channel.gas[2].dupT
stack.subStack[1].anode_channel.channel.gas[2].duTp
stack.subStack[1].anode_channel.channel.gas[2].ddx[1]
stack.subStack[1].anode_channel.channel.gas[2].ddx[2]
stack.subStack[1].anode_channel.channel.gas[2].ddx[3]
stack.subStack[1].anode_channel.channel.gas[2].ddx[4]
stack.subStack[1].anode_channel.channel.gas[2].ddx[5]
stack.subStack[1].anode_channel.channel.gas[2].ddx[6]
stack.subStack[1].anode_channel.channel.gas[2].ddx[7]
stack.subStack[1].anode_channel.channel.gas[3].X[1]
stack.subStack[1].anode_channel.channel.gas[3].X[2]
stack.subStack[1].anode_channel.channel.gas[3].X[3]
stack.subStack[1].anode_channel.channel.gas[3].X[4]
stack.subStack[1].anode_channel.channel.gas[3].X[5]
stack.subStack[1].anode_channel.channel.gas[3].X[6]
stack.subStack[1].anode_channel.channel.gas[3].X[7]
stack.subStack[1].anode_channel.channel.gas[3].der(X[1])
stack.subStack[1].anode_channel.channel.gas[3].der(X[2])
stack.subStack[1].anode_channel.channel.gas[3].der(X[3])
stack.subStack[1].anode_channel.channel.gas[3].der(X[4])
stack.subStack[1].anode_channel.channel.gas[3].der(X[5])
stack.subStack[1].anode_channel.channel.gas[3].der(X[6])
stack.subStack[1].anode_channel.channel.gas[3].der(X[7])
stack.subStack[1].anode_channel.channel.gas[3].Xi[1]
stack.subStack[1].anode_channel.channel.gas[3].Xi[2]
stack.subStack[1].anode_channel.channel.gas[3].Xi[3]
stack.subStack[1].anode_channel.channel.gas[3].Xi[4]
stack.subStack[1].anode_channel.channel.gas[3].Xi[5]
stack.subStack[1].anode_channel.channel.gas[3].Xi[6]
stack.subStack[1].anode_channel.channel.gas[3].Xi[7]
stack.subStack[1].anode_channel.channel.gas[3].d
stack.subStack[1].anode_channel.channel.gas[3].der(d)
stack.subStack[1].anode_channel.channel.gas[3].u
stack.subStack[1].anode_channel.channel.gas[3].Rg
stack.subStack[1].anode_channel.channel.gas[3].der(Rg)
stack.subStack[1].anode_channel.channel.gas[3].MM
stack.subStack[1].anode_channel.channel.gas[3].assertlevel
stack.subStack[1].anode_channel.channel.gas[3].state.p
stack.subStack[1].anode_channel.channel.gas[3].state.T
stack.subStack[1].anode_channel.channel.gas[3].state.X[1]
stack.subStack[1].anode_channel.channel.gas[3].state.X[2]
stack.subStack[1].anode_channel.channel.gas[3].state.X[3]
stack.subStack[1].anode_channel.channel.gas[3].state.X[4]
stack.subStack[1].anode_channel.channel.gas[3].state.X[5]
stack.subStack[1].anode_channel.channel.gas[3].state.X[6]
stack.subStack[1].anode_channel.channel.gas[3].state.X[7]
stack.subStack[1].anode_channel.channel.gas[3].preferredMediumStates
stack.subStack[1].anode_channel.channel.gas[3].T_degC
stack.subStack[1].anode_channel.channel.gas[3].p_bar
stack.subStack[1].anode_channel.channel.gas[3].Z[1]
stack.subStack[1].anode_channel.channel.gas[3].Z[2]
stack.subStack[1].anode_channel.channel.gas[3].Z[3]
stack.subStack[1].anode_channel.channel.gas[3].Z[4]
stack.subStack[1].anode_channel.channel.gas[3].Z[5]
stack.subStack[1].anode_channel.channel.gas[3].Z[6]
stack.subStack[1].anode_channel.channel.gas[3].Z[7]
stack.subStack[1].anode_channel.channel.gas[3].dUZT[1]
stack.subStack[1].anode_channel.channel.gas[3].dUZT[2]
stack.subStack[1].anode_channel.channel.gas[3].dUZT[3]
stack.subStack[1].anode_channel.channel.gas[3].dUZT[4]
stack.subStack[1].anode_channel.channel.gas[3].dUZT[5]
stack.subStack[1].anode_channel.channel.gas[3].dUZT[6]
stack.subStack[1].anode_channel.channel.gas[3].dUZT[7]
stack.subStack[1].anode_channel.channel.gas[3].h_component[1]
stack.subStack[1].anode_channel.channel.gas[3].h_component[2]
stack.subStack[1].anode_channel.channel.gas[3].h_component[3]
stack.subStack[1].anode_channel.channel.gas[3].h_component[4]
stack.subStack[1].anode_channel.channel.gas[3].h_component[5]
stack.subStack[1].anode_channel.channel.gas[3].h_component[6]
stack.subStack[1].anode_channel.channel.gas[3].h_component[7]
stack.subStack[1].anode_channel.channel.gas[3].s_component[1]
stack.subStack[1].anode_channel.channel.gas[3].s_component[2]
stack.subStack[1].anode_channel.channel.gas[3].s_component[3]
stack.subStack[1].anode_channel.channel.gas[3].s_component[4]
stack.subStack[1].anode_channel.channel.gas[3].s_component[5]
stack.subStack[1].anode_channel.channel.gas[3].s_component[6]
stack.subStack[1].anode_channel.channel.gas[3].s_component[7]
stack.subStack[1].anode_channel.channel.gas[3].u_comp[1]
stack.subStack[1].anode_channel.channel.gas[3].u_comp[2]
stack.subStack[1].anode_channel.channel.gas[3].u_comp[3]
stack.subStack[1].anode_channel.channel.gas[3].u_comp[4]
stack.subStack[1].anode_channel.channel.gas[3].u_comp[5]
stack.subStack[1].anode_channel.channel.gas[3].u_comp[6]
stack.subStack[1].anode_channel.channel.gas[3].u_comp[7]
stack.subStack[1].anode_channel.channel.gas[3].cp
stack.subStack[1].anode_channel.channel.gas[3].g_formation[1]
stack.subStack[1].anode_channel.channel.gas[3].g_formation[2]
stack.subStack[1].anode_channel.channel.gas[3].g_formation[3]
stack.subStack[1].anode_channel.channel.gas[3].g_formation[4]
stack.subStack[1].anode_channel.channel.gas[3].g_formation[5]
stack.subStack[1].anode_channel.channel.gas[3].g_formation[6]
stack.subStack[1].anode_channel.channel.gas[3].g_formation[7]
stack.subStack[1].anode_channel.channel.gas[3].ddTp
stack.subStack[1].anode_channel.channel.gas[3].ddpT
stack.subStack[1].anode_channel.channel.gas[3].dupT
stack.subStack[1].anode_channel.channel.gas[3].duTp
stack.subStack[1].anode_channel.channel.gas[3].ddx[1]
stack.subStack[1].anode_channel.channel.gas[3].ddx[2]
stack.subStack[1].anode_channel.channel.gas[3].ddx[3]
stack.subStack[1].anode_channel.channel.gas[3].ddx[4]
stack.subStack[1].anode_channel.channel.gas[3].ddx[5]
stack.subStack[1].anode_channel.channel.gas[3].ddx[6]
stack.subStack[1].anode_channel.channel.gas[3].ddx[7]
stack.subStack[1].anode_channel.channel.gas[4].X[1]
stack.subStack[1].anode_channel.channel.gas[4].X[2]
stack.subStack[1].anode_channel.channel.gas[4].X[3]
stack.subStack[1].anode_channel.channel.gas[4].X[4]
stack.subStack[1].anode_channel.channel.gas[4].X[5]
stack.subStack[1].anode_channel.channel.gas[4].X[6]
stack.subStack[1].anode_channel.channel.gas[4].X[7]
stack.subStack[1].anode_channel.channel.gas[4].der(X[1])
stack.subStack[1].anode_channel.channel.gas[4].der(X[2])
stack.subStack[1].anode_channel.channel.gas[4].der(X[3])
stack.subStack[1].anode_channel.channel.gas[4].der(X[4])
stack.subStack[1].anode_channel.channel.gas[4].der(X[5])
stack.subStack[1].anode_channel.channel.gas[4].der(X[6])
stack.subStack[1].anode_channel.channel.gas[4].der(X[7])
stack.subStack[1].anode_channel.channel.gas[4].Xi[1]
stack.subStack[1].anode_channel.channel.gas[4].Xi[2]
stack.subStack[1].anode_channel.channel.gas[4].Xi[3]
stack.subStack[1].anode_channel.channel.gas[4].Xi[4]
stack.subStack[1].anode_channel.channel.gas[4].Xi[5]
stack.subStack[1].anode_channel.channel.gas[4].Xi[6]
stack.subStack[1].anode_channel.channel.gas[4].Xi[7]
stack.subStack[1].anode_channel.channel.gas[4].d
stack.subStack[1].anode_channel.channel.gas[4].der(d)
stack.subStack[1].anode_channel.channel.gas[4].u
stack.subStack[1].anode_channel.channel.gas[4].Rg
stack.subStack[1].anode_channel.channel.gas[4].der(Rg)
stack.subStack[1].anode_channel.channel.gas[4].MM
stack.subStack[1].anode_channel.channel.gas[4].assertlevel
stack.subStack[1].anode_channel.channel.gas[4].state.p
stack.subStack[1].anode_channel.channel.gas[4].state.T
stack.subStack[1].anode_channel.channel.gas[4].state.X[1]
stack.subStack[1].anode_channel.channel.gas[4].state.X[2]
stack.subStack[1].anode_channel.channel.gas[4].state.X[3]
stack.subStack[1].anode_channel.channel.gas[4].state.X[4]
stack.subStack[1].anode_channel.channel.gas[4].state.X[5]
stack.subStack[1].anode_channel.channel.gas[4].state.X[6]
stack.subStack[1].anode_channel.channel.gas[4].state.X[7]
stack.subStack[1].anode_channel.channel.gas[4].preferredMediumStates
stack.subStack[1].anode_channel.channel.gas[4].p_bar
stack.subStack[1].anode_channel.channel.gas[4].Z[1]
stack.subStack[1].anode_channel.channel.gas[4].Z[2]
stack.subStack[1].anode_channel.channel.gas[4].Z[3]
stack.subStack[1].anode_channel.channel.gas[4].Z[4]
stack.subStack[1].anode_channel.channel.gas[4].Z[5]
stack.subStack[1].anode_channel.channel.gas[4].Z[6]
stack.subStack[1].anode_channel.channel.gas[4].Z[7]
stack.subStack[1].anode_channel.channel.gas[4].dUZT[1]
stack.subStack[1].anode_channel.channel.gas[4].dUZT[2]
stack.subStack[1].anode_channel.channel.gas[4].dUZT[3]
stack.subStack[1].anode_channel.channel.gas[4].dUZT[4]
stack.subStack[1].anode_channel.channel.gas[4].dUZT[5]
stack.subStack[1].anode_channel.channel.gas[4].dUZT[6]
stack.subStack[1].anode_channel.channel.gas[4].dUZT[7]
stack.subStack[1].anode_channel.channel.gas[4].h_component[1]
stack.subStack[1].anode_channel.channel.gas[4].h_component[2]
stack.subStack[1].anode_channel.channel.gas[4].h_component[3]
stack.subStack[1].anode_channel.channel.gas[4].h_component[4]
stack.subStack[1].anode_channel.channel.gas[4].h_component[5]
stack.subStack[1].anode_channel.channel.gas[4].h_component[6]
stack.subStack[1].anode_channel.channel.gas[4].h_component[7]
stack.subStack[1].anode_channel.channel.gas[4].s_component[1]
stack.subStack[1].anode_channel.channel.gas[4].s_component[2]
stack.subStack[1].anode_channel.channel.gas[4].s_component[3]
stack.subStack[1].anode_channel.channel.gas[4].s_component[4]
stack.subStack[1].anode_channel.channel.gas[4].s_component[5]
stack.subStack[1].anode_channel.channel.gas[4].s_component[6]
stack.subStack[1].anode_channel.channel.gas[4].s_component[7]
stack.subStack[1].anode_channel.channel.gas[4].u_comp[1]
stack.subStack[1].anode_channel.channel.gas[4].u_comp[2]
stack.subStack[1].anode_channel.channel.gas[4].u_comp[3]
stack.subStack[1].anode_channel.channel.gas[4].u_comp[4]
stack.subStack[1].anode_channel.channel.gas[4].u_comp[5]
stack.subStack[1].anode_channel.channel.gas[4].u_comp[6]
stack.subStack[1].anode_channel.channel.gas[4].u_comp[7]
stack.subStack[1].anode_channel.channel.gas[4].cp
stack.subStack[1].anode_channel.channel.gas[4].g_formation[1]
stack.subStack[1].anode_channel.channel.gas[4].g_formation[2]
stack.subStack[1].anode_channel.channel.gas[4].g_formation[3]
stack.subStack[1].anode_channel.channel.gas[4].g_formation[4]
stack.subStack[1].anode_channel.channel.gas[4].g_formation[5]
stack.subStack[1].anode_channel.channel.gas[4].g_formation[6]
stack.subStack[1].anode_channel.channel.gas[4].g_formation[7]
stack.subStack[1].anode_channel.channel.gas[4].ddTp
stack.subStack[1].anode_channel.channel.gas[4].ddpT
stack.subStack[1].anode_channel.channel.gas[4].dupT
stack.subStack[1].anode_channel.channel.gas[4].duTp
stack.subStack[1].anode_channel.channel.gas[4].ddx[1]
stack.subStack[1].anode_channel.channel.gas[4].ddx[2]
stack.subStack[1].anode_channel.channel.gas[4].ddx[3]
stack.subStack[1].anode_channel.channel.gas[4].ddx[4]
stack.subStack[1].anode_channel.channel.gas[4].ddx[5]
stack.subStack[1].anode_channel.channel.gas[4].ddx[6]
stack.subStack[1].anode_channel.channel.gas[4].ddx[7]
stack.subStack[1].anode_channel.channel.p[1]
stack.subStack[1].anode_channel.channel.p[2]
stack.subStack[1].anode_channel.channel.p[3]
stack.subStack[1].anode_channel.channel.p[4]
stack.subStack[1].anode_channel.channel.der(p[1])
stack.subStack[1].anode_channel.channel.der(p[2])
stack.subStack[1].anode_channel.channel.der(p[3])
stack.subStack[1].anode_channel.channel.der(p[4])
stack.subStack[1].anode_channel.channel.M[1]
stack.subStack[1].anode_channel.channel.M[2]
stack.subStack[1].anode_channel.channel.M[3]
stack.subStack[1].anode_channel.channel.M[4]
stack.subStack[1].anode_channel.channel.der(M[1])
stack.subStack[1].anode_channel.channel.der(M[2])
stack.subStack[1].anode_channel.channel.der(M[3])
stack.subStack[1].anode_channel.channel.der(M[4])
stack.subStack[1].anode_channel.channel.E_seg[1]
stack.subStack[1].anode_channel.channel.E_seg[2]
stack.subStack[1].anode_channel.channel.E_seg[3]
stack.subStack[1].anode_channel.channel.E_seg[4]
stack.subStack[1].anode_channel.channel.MXi[1, 1]
stack.subStack[1].anode_channel.channel.MXi[1, 2]
stack.subStack[1].anode_channel.channel.MXi[1, 3]
stack.subStack[1].anode_channel.channel.MXi[1, 4]
stack.subStack[1].anode_channel.channel.MXi[1, 5]
stack.subStack[1].anode_channel.channel.MXi[1, 6]
stack.subStack[1].anode_channel.channel.MXi[1, 7]
stack.subStack[1].anode_channel.channel.MXi[2, 1]
stack.subStack[1].anode_channel.channel.MXi[2, 2]
stack.subStack[1].anode_channel.channel.MXi[2, 3]
stack.subStack[1].anode_channel.channel.MXi[2, 4]
stack.subStack[1].anode_channel.channel.MXi[2, 5]
stack.subStack[1].anode_channel.channel.MXi[2, 6]
stack.subStack[1].anode_channel.channel.MXi[2, 7]
stack.subStack[1].anode_channel.channel.MXi[3, 1]
stack.subStack[1].anode_channel.channel.MXi[3, 2]
stack.subStack[1].anode_channel.channel.MXi[3, 3]
stack.subStack[1].anode_channel.channel.MXi[3, 4]
stack.subStack[1].anode_channel.channel.MXi[3, 5]
stack.subStack[1].anode_channel.channel.MXi[3, 6]
stack.subStack[1].anode_channel.channel.MXi[3, 7]
stack.subStack[1].anode_channel.channel.MXi[4, 1]
stack.subStack[1].anode_channel.channel.MXi[4, 2]
stack.subStack[1].anode_channel.channel.MXi[4, 3]
stack.subStack[1].anode_channel.channel.MXi[4, 4]
stack.subStack[1].anode_channel.channel.MXi[4, 5]
stack.subStack[1].anode_channel.channel.MXi[4, 6]
stack.subStack[1].anode_channel.channel.MXi[4, 7]
stack.subStack[1].anode_channel.channel.dp[1]
stack.subStack[1].anode_channel.channel.dp[2]
stack.subStack[1].anode_channel.channel.dp[3]
stack.subStack[1].anode_channel.channel.dp[4]
stack.subStack[1].anode_channel.channel.dp[5]
stack.subStack[1].anode_channel.channel.sh[1]
stack.subStack[1].anode_channel.channel.sh[2]
stack.subStack[1].anode_channel.channel.sh[3]
stack.subStack[1].anode_channel.channel.sh[4]
stack.subStack[1].anode_channel.channel.state[1].p
stack.subStack[1].anode_channel.channel.state[1].T
stack.subStack[1].anode_channel.channel.state[1].X[1]
stack.subStack[1].anode_channel.channel.state[1].X[2]
stack.subStack[1].anode_channel.channel.state[1].X[3]
stack.subStack[1].anode_channel.channel.state[1].X[4]
stack.subStack[1].anode_channel.channel.state[1].X[5]
stack.subStack[1].anode_channel.channel.state[1].X[6]
stack.subStack[1].anode_channel.channel.state[1].X[7]
stack.subStack[1].anode_channel.channel.state[6].p
stack.subStack[1].anode_channel.channel.state[6].T
stack.subStack[1].anode_channel.channel.state[6].X[1]
stack.subStack[1].anode_channel.channel.state[6].X[2]
stack.subStack[1].anode_channel.channel.state[6].X[3]
stack.subStack[1].anode_channel.channel.state[6].X[4]
stack.subStack[1].anode_channel.channel.state[6].X[5]
stack.subStack[1].anode_channel.channel.state[6].X[6]
stack.subStack[1].anode_channel.channel.state[6].X[7]
stack.subStack[1].anode_channel.channel.Q[1]
stack.subStack[1].anode_channel.channel.Q[2]
stack.subStack[1].anode_channel.channel.Q[3]
stack.subStack[1].anode_channel.channel.Q[4]
stack.subStack[1].anode_channel.channel.Q_tot
stack.subStack[1].anode_channel.channel.Q_wall[1]
stack.subStack[1].anode_channel.channel.Q_wall[2]
stack.subStack[1].anode_channel.channel.Q_wall[3]
stack.subStack[1].anode_channel.channel.Q_wall[4]
stack.subStack[1].anode_channel.channel.alpha[1]
stack.subStack[1].anode_channel.channel.alpha[2]
stack.subStack[1].anode_channel.channel.alpha[3]
stack.subStack[1].anode_channel.channel.alpha[4]
stack.subStack[1].anode_channel.channel.rMX[1, 2]
stack.subStack[1].anode_channel.channel.rMX[1, 3]
stack.subStack[1].anode_channel.channel.rMX[1, 4]
stack.subStack[1].anode_channel.channel.rMX[1, 6]
stack.subStack[1].anode_channel.channel.rMX[1, 7]
stack.subStack[1].anode_channel.channel.rMX[2, 2]
stack.subStack[1].anode_channel.channel.rMX[2, 3]
stack.subStack[1].anode_channel.channel.rMX[2, 4]
stack.subStack[1].anode_channel.channel.rMX[2, 6]
stack.subStack[1].anode_channel.channel.rMX[2, 7]
stack.subStack[1].anode_channel.channel.rMX[3, 2]
stack.subStack[1].anode_channel.channel.rMX[3, 3]
stack.subStack[1].anode_channel.channel.rMX[3, 4]
stack.subStack[1].anode_channel.channel.rMX[3, 6]
stack.subStack[1].anode_channel.channel.rMX[3, 7]
stack.subStack[1].anode_channel.channel.rMX[4, 2]
stack.subStack[1].anode_channel.channel.rMX[4, 3]
stack.subStack[1].anode_channel.channel.rMX[4, 4]
stack.subStack[1].anode_channel.channel.rMX[4, 6]
stack.subStack[1].anode_channel.channel.rMX[4, 7]
stack.subStack[1].anode_channel.channel.mflow_A_in
stack.subStack[1].anode_channel.channel.mflow_B_in
stack.subStack[1].anode_channel.channel.m_flow_fric[1]
stack.subStack[1].anode_channel.channel.m_flow_fric[2]
stack.subStack[1].anode_channel.channel.m_flow_fric[3]
stack.subStack[1].anode_channel.channel.XA[1]
stack.subStack[1].anode_channel.channel.XA[2]
stack.subStack[1].anode_channel.channel.XA[3]
stack.subStack[1].anode_channel.channel.XA[4]
stack.subStack[1].anode_channel.channel.XA[5]
stack.subStack[1].anode_channel.channel.XA[6]
stack.subStack[1].anode_channel.channel.XA[7]
stack.subStack[1].anode_channel.channel.XB[1]
stack.subStack[1].anode_channel.channel.XB[2]
stack.subStack[1].anode_channel.channel.XB[3]
stack.subStack[1].anode_channel.channel.XB[4]
stack.subStack[1].anode_channel.channel.XB[5]
stack.subStack[1].anode_channel.channel.XB[6]
stack.subStack[1].anode_channel.channel.XB[7]
stack.subStack[1].anode_channel.channel.n_channels_fric[1]
stack.subStack[1].anode_channel.channel.n_channels_fric[2]
stack.subStack[1].anode_channel.channel.n_channels_fric[3]
stack.subStack[1].anode_channel.channel.n_channels_fric[4]
stack.subStack[1].anode_channel.channel.T_wall[1]
stack.subStack[1].anode_channel.channel.T_wall[2]
stack.subStack[1].anode_channel.channel.T_wall[3]
stack.subStack[1].anode_channel.channel.T_wall[4]
stack.subStack[1].anode_channel.channel.nS
stack.subStack[1].anode_channel.channel.mX_flow[1, 1]
stack.subStack[1].anode_channel.channel.mX_flow[1, 2]
stack.subStack[1].anode_channel.channel.mX_flow[1, 3]
stack.subStack[1].anode_channel.channel.mX_flow[1, 4]
stack.subStack[1].anode_channel.channel.mX_flow[1, 5]
stack.subStack[1].anode_channel.channel.mX_flow[1, 6]
stack.subStack[1].anode_channel.channel.mX_flow[1, 7]
stack.subStack[1].anode_channel.channel.mX_flow[2, 1]
stack.subStack[1].anode_channel.channel.mX_flow[2, 2]
stack.subStack[1].anode_channel.channel.mX_flow[2, 3]
stack.subStack[1].anode_channel.channel.mX_flow[2, 4]
stack.subStack[1].anode_channel.channel.mX_flow[2, 5]
stack.subStack[1].anode_channel.channel.mX_flow[2, 6]
stack.subStack[1].anode_channel.channel.mX_flow[2, 7]
stack.subStack[1].anode_channel.channel.mX_flow[3, 1]
stack.subStack[1].anode_channel.channel.mX_flow[3, 2]
stack.subStack[1].anode_channel.channel.mX_flow[3, 3]
stack.subStack[1].anode_channel.channel.mX_flow[3, 4]
stack.subStack[1].anode_channel.channel.mX_flow[3, 5]
stack.subStack[1].anode_channel.channel.mX_flow[3, 6]
stack.subStack[1].anode_channel.channel.mX_flow[3, 7]
stack.subStack[1].anode_channel.channel.mX_flow[4, 1]
stack.subStack[1].anode_channel.channel.mX_flow[4, 2]
stack.subStack[1].anode_channel.channel.mX_flow[4, 3]
stack.subStack[1].anode_channel.channel.mX_flow[4, 4]
stack.subStack[1].anode_channel.channel.mX_flow[4, 5]
stack.subStack[1].anode_channel.channel.mX_flow[4, 6]
stack.subStack[1].anode_channel.channel.mX_flow[4, 7]
stack.subStack[1].anode_channel.channel.mX_flow[5, 1]
stack.subStack[1].anode_channel.channel.mX_flow[5, 2]
stack.subStack[1].anode_channel.channel.mX_flow[5, 3]
stack.subStack[1].anode_channel.channel.mX_flow[5, 4]
stack.subStack[1].anode_channel.channel.mX_flow[5, 5]
stack.subStack[1].anode_channel.channel.mX_flow[5, 6]
stack.subStack[1].anode_channel.channel.mX_flow[5, 7]
stack.subStack[1].anode_channel.channel.H_flow[1]
stack.subStack[1].anode_channel.channel.H_flow[2]
stack.subStack[1].anode_channel.channel.H_flow[3]
stack.subStack[1].anode_channel.channel.H_flow[4]
stack.subStack[1].anode_channel.channel.H_flow[5]
stack.subStack[1].anode_channel.channel.dE[1]
stack.subStack[1].anode_channel.channel.dE[2]
stack.subStack[1].anode_channel.channel.dE[3]
stack.subStack[1].anode_channel.channel.dE[4]
stack.subStack[1].anode_channel.channel.dMX[1, 1]
stack.subStack[1].anode_channel.channel.dMX[1, 2]
stack.subStack[1].anode_channel.channel.dMX[1, 3]
stack.subStack[1].anode_channel.channel.dMX[1, 4]
stack.subStack[1].anode_channel.channel.dMX[1, 5]
stack.subStack[1].anode_channel.channel.dMX[1, 6]
stack.subStack[1].anode_channel.channel.dMX[1, 7]
stack.subStack[1].anode_channel.channel.dMX[2, 1]
stack.subStack[1].anode_channel.channel.dMX[2, 2]
stack.subStack[1].anode_channel.channel.dMX[2, 3]
stack.subStack[1].anode_channel.channel.dMX[2, 4]
stack.subStack[1].anode_channel.channel.dMX[2, 5]
stack.subStack[1].anode_channel.channel.dMX[2, 6]
stack.subStack[1].anode_channel.channel.dMX[2, 7]
stack.subStack[1].anode_channel.channel.dMX[3, 1]
stack.subStack[1].anode_channel.channel.dMX[3, 2]
stack.subStack[1].anode_channel.channel.dMX[3, 3]
stack.subStack[1].anode_channel.channel.dMX[3, 4]
stack.subStack[1].anode_channel.channel.dMX[3, 5]
stack.subStack[1].anode_channel.channel.dMX[3, 6]
stack.subStack[1].anode_channel.channel.dMX[3, 7]
stack.subStack[1].anode_channel.channel.dMX[4, 1]
stack.subStack[1].anode_channel.channel.dMX[4, 2]
stack.subStack[1].anode_channel.channel.dMX[4, 3]
stack.subStack[1].anode_channel.channel.dMX[4, 4]
stack.subStack[1].anode_channel.channel.dMX[4, 5]
stack.subStack[1].anode_channel.channel.dMX[4, 6]
stack.subStack[1].anode_channel.channel.dMX[4, 7]
stack.subStack[1].anode_channel.channel.dZ[1, 1]
stack.subStack[1].anode_channel.channel.dZ[1, 2]
stack.subStack[1].anode_channel.channel.dZ[1, 3]
stack.subStack[1].anode_channel.channel.dZ[1, 4]
stack.subStack[1].anode_channel.channel.dZ[1, 5]
stack.subStack[1].anode_channel.channel.dZ[2, 1]
stack.subStack[1].anode_channel.channel.dZ[2, 2]
stack.subStack[1].anode_channel.channel.dZ[2, 3]
stack.subStack[1].anode_channel.channel.dZ[2, 4]
stack.subStack[1].anode_channel.channel.dZ[2, 5]
stack.subStack[1].anode_channel.channel.dZ[3, 1]
stack.subStack[1].anode_channel.channel.dZ[3, 2]
stack.subStack[1].anode_channel.channel.dZ[3, 3]
stack.subStack[1].anode_channel.channel.dZ[3, 4]
stack.subStack[1].anode_channel.channel.dZ[3, 5]
stack.subStack[1].anode_channel.channel.dZ[4, 1]
stack.subStack[1].anode_channel.channel.dZ[4, 2]
stack.subStack[1].anode_channel.channel.dZ[4, 3]
stack.subStack[1].anode_channel.channel.dZ[4, 4]
stack.subStack[1].anode_channel.channel.dZ[4, 5]
stack.subStack[1].anode_channel.channel.dUTZ[1]
stack.subStack[1].anode_channel.channel.dUTZ[2]
stack.subStack[1].anode_channel.channel.dUTZ[3]
stack.subStack[1].anode_channel.channel.dUTZ[4]
stack.subStack[1].anode_channel.channel.Z[1, 1]
stack.subStack[1].anode_channel.channel.Z[1, 2]
stack.subStack[1].anode_channel.channel.Z[1, 3]
stack.subStack[1].anode_channel.channel.Z[1, 4]
stack.subStack[1].anode_channel.channel.Z[1, 5]
stack.subStack[1].anode_channel.channel.Z[1, 6]
stack.subStack[1].anode_channel.channel.Z[1, 7]
stack.subStack[1].anode_channel.channel.Z[2, 1]
stack.subStack[1].anode_channel.channel.Z[2, 2]
stack.subStack[1].anode_channel.channel.Z[2, 3]
stack.subStack[1].anode_channel.channel.Z[2, 4]
stack.subStack[1].anode_channel.channel.Z[2, 5]
stack.subStack[1].anode_channel.channel.Z[2, 6]
stack.subStack[1].anode_channel.channel.Z[2, 7]
stack.subStack[1].anode_channel.channel.Z[3, 1]
stack.subStack[1].anode_channel.channel.Z[3, 2]
stack.subStack[1].anode_channel.channel.Z[3, 3]
stack.subStack[1].anode_channel.channel.Z[3, 4]
stack.subStack[1].anode_channel.channel.Z[3, 5]
stack.subStack[1].anode_channel.channel.Z[3, 6]
stack.subStack[1].anode_channel.channel.Z[3, 7]
stack.subStack[1].anode_channel.channel.Z[4, 1]
stack.subStack[1].anode_channel.channel.Z[4, 2]
stack.subStack[1].anode_channel.channel.Z[4, 3]
stack.subStack[1].anode_channel.channel.Z[4, 4]
stack.subStack[1].anode_channel.channel.Z[4, 5]
stack.subStack[1].anode_channel.channel.Z[4, 6]
stack.subStack[1].anode_channel.channel.Z[4, 7]
stack.subStack[1].anode_channel.channel.der(Z[1, 1])
stack.subStack[1].anode_channel.channel.der(Z[1, 2])
stack.subStack[1].anode_channel.channel.der(Z[1, 3])
stack.subStack[1].anode_channel.channel.der(Z[1, 4])
stack.subStack[1].anode_channel.channel.der(Z[1, 5])
stack.subStack[1].anode_channel.channel.der(Z[1, 6])
stack.subStack[1].anode_channel.channel.der(Z[1, 7])
stack.subStack[1].anode_channel.channel.der(Z[2, 1])
stack.subStack[1].anode_channel.channel.der(Z[2, 2])
stack.subStack[1].anode_channel.channel.der(Z[2, 3])
stack.subStack[1].anode_channel.channel.der(Z[2, 4])
stack.subStack[1].anode_channel.channel.der(Z[2, 5])
stack.subStack[1].anode_channel.channel.der(Z[2, 6])
stack.subStack[1].anode_channel.channel.der(Z[2, 7])
stack.subStack[1].anode_channel.channel.der(Z[3, 1])
stack.subStack[1].anode_channel.channel.der(Z[3, 2])
stack.subStack[1].anode_channel.channel.der(Z[3, 3])
stack.subStack[1].anode_channel.channel.der(Z[3, 4])
stack.subStack[1].anode_channel.channel.der(Z[3, 5])
stack.subStack[1].anode_channel.channel.der(Z[3, 6])
stack.subStack[1].anode_channel.channel.der(Z[3, 7])
stack.subStack[1].anode_channel.channel.der(Z[4, 1])
stack.subStack[1].anode_channel.channel.der(Z[4, 2])
stack.subStack[1].anode_channel.channel.der(Z[4, 3])
stack.subStack[1].anode_channel.channel.der(Z[4, 4])
stack.subStack[1].anode_channel.channel.der(Z[4, 5])
stack.subStack[1].anode_channel.channel.der(Z[4, 6])
stack.subStack[1].anode_channel.channel.der(Z[4, 7])
stack.subStack[1].anode_channel.port[1].mX_flow[2]
stack.subStack[1].anode_channel.port[1].mX_flow[3]
stack.subStack[1].anode_channel.port[1].mX_flow[4]
stack.subStack[1].anode_channel.port[1].mX_flow[6]
stack.subStack[1].anode_channel.port[1].mX_flow[7]
stack.subStack[1].anode_channel.port[2].mX_flow[2]
stack.subStack[1].anode_channel.port[2].mX_flow[3]
stack.subStack[1].anode_channel.port[2].mX_flow[4]
stack.subStack[1].anode_channel.port[2].mX_flow[6]
stack.subStack[1].anode_channel.port[2].mX_flow[7]
stack.subStack[1].anode_channel.port[3].mX_flow[2]
stack.subStack[1].anode_channel.port[3].mX_flow[3]
stack.subStack[1].anode_channel.port[3].mX_flow[4]
stack.subStack[1].anode_channel.port[3].mX_flow[6]
stack.subStack[1].anode_channel.port[3].mX_flow[7]
stack.subStack[1].anode_channel.port[4].mX_flow[2]
stack.subStack[1].anode_channel.port[4].mX_flow[3]
stack.subStack[1].anode_channel.port[4].mX_flow[4]
stack.subStack[1].anode_channel.port[4].mX_flow[6]
stack.subStack[1].anode_channel.port[4].mX_flow[7]
stack.subStack[1].cathode_channel.summary.dp
stack.subStack[1].cathode_channel.summary.m_flow
stack.subStack[1].cathode_channel.summary.M
stack.subStack[1].cathode_channel.summary.V
stack.subStack[1].cathode_channel.summary.T_in
stack.subStack[1].cathode_channel.summary.d_in
stack.subStack[1].cathode_channel.n
stack.subStack[1].cathode_channel.pi
stack.subStack[1].cathode_channel.n_channels
stack.subStack[1].cathode_channel.L
stack.subStack[1].cathode_channel.D
stack.subStack[1].cathode_channel.Dhyd
stack.subStack[1].cathode_channel.A
stack.subStack[1].cathode_channel.C
stack.subStack[1].cathode_channel.V
stack.subStack[1].cathode_channel.A_heat
stack.subStack[1].cathode_channel.useHeatTransfer
stack.subStack[1].cathode_channel.ni
stack.subStack[1].cathode_channel.initOpt
stack.subStack[1].cathode_channel.p_start_in
stack.subStack[1].cathode_channel.p_start_out
stack.subStack[1].cathode_channel.p_start[1]
stack.subStack[1].cathode_channel.p_start[2]
stack.subStack[1].cathode_channel.p_start[3]
stack.subStack[1].cathode_channel.p_start[4]
stack.subStack[1].cathode_channel.p_start[5]
stack.subStack[1].cathode_channel.initFromEnthalpy
stack.subStack[1].cathode_channel.h_start_in
stack.subStack[1].cathode_channel.h_start_out
stack.subStack[1].cathode_channel.h_start[1]
stack.subStack[1].cathode_channel.h_start[2]
stack.subStack[1].cathode_channel.h_start[3]
stack.subStack[1].cathode_channel.h_start[4]
stack.subStack[1].cathode_channel.h_start[5]
stack.subStack[1].cathode_channel.T_start_in
stack.subStack[1].cathode_channel.T_start_out
stack.subStack[1].cathode_channel.T_start[1]
stack.subStack[1].cathode_channel.T_start[2]
stack.subStack[1].cathode_channel.T_start[3]
stack.subStack[1].cathode_channel.T_start[4]
stack.subStack[1].cathode_channel.T_start[5]
stack.subStack[1].cathode_channel.X_start[1]
stack.subStack[1].cathode_channel.X_start[2]
stack.subStack[1].cathode_channel.X_start[3]
stack.subStack[1].cathode_channel.X_start[4]
stack.subStack[1].cathode_channel.X_start[5]
stack.subStack[1].cathode_channel.m_flow_start
stack.subStack[1].cathode_channel.positiveFlow
stack.subStack[1].cathode_channel.from_dp
stack.subStack[1].cathode_channel.dp_smooth
stack.subStack[1].cathode_channel.mflow_smooth
stack.subStack[1].cathode_channel.generateEventForReversal
stack.subStack[1].cathode_channel.CF_PressureLoss
stack.subStack[1].cathode_channel.CF_HeatTransfer
stack.subStack[1].cathode_channel.X_weight
stack.subStack[1].cathode_channel.y_sat
stack.subStack[1].cathode_channel.includeStaticHead
stack.subStack[1].cathode_channel.height
stack.subStack[1].cathode_channel.g
stack.subStack[1].cathode_channel.channel.n
stack.subStack[1].cathode_channel.channel.n_channels[1]
stack.subStack[1].cathode_channel.channel.n_channels[2]
stack.subStack[1].cathode_channel.channel.n_channels[3]
stack.subStack[1].cathode_channel.channel.n_channels[4]
stack.subStack[1].cathode_channel.channel.L[1]
stack.subStack[1].cathode_channel.channel.L[2]
stack.subStack[1].cathode_channel.channel.L[3]
stack.subStack[1].cathode_channel.channel.L[4]
stack.subStack[1].cathode_channel.channel.Dhyd[1]
stack.subStack[1].cathode_channel.channel.Dhyd[2]
stack.subStack[1].cathode_channel.channel.Dhyd[3]
stack.subStack[1].cathode_channel.channel.Dhyd[4]
stack.subStack[1].cathode_channel.channel.A[1]
stack.subStack[1].cathode_channel.channel.A[2]
stack.subStack[1].cathode_channel.channel.A[3]
stack.subStack[1].cathode_channel.channel.A[4]
stack.subStack[1].cathode_channel.channel.L_total
stack.subStack[1].cathode_channel.channel.V[1]
stack.subStack[1].cathode_channel.channel.V[2]
stack.subStack[1].cathode_channel.channel.V[3]
stack.subStack[1].cathode_channel.channel.V[4]
stack.subStack[1].cathode_channel.channel.V_tot
stack.subStack[1].cathode_channel.channel.A_mean
stack.subStack[1].cathode_channel.channel.A_heat[1]
stack.subStack[1].cathode_channel.channel.A_heat[2]
stack.subStack[1].cathode_channel.channel.A_heat[3]
stack.subStack[1].cathode_channel.channel.A_heat[4]
stack.subStack[1].cathode_channel.channel.ni
stack.subStack[1].cathode_channel.channel.initOpt
stack.subStack[1].cathode_channel.channel.p_start_in
stack.subStack[1].cathode_channel.channel.p_start_out
stack.subStack[1].cathode_channel.channel.p_start[1]
stack.subStack[1].cathode_channel.channel.p_start[2]
stack.subStack[1].cathode_channel.channel.p_start[3]
stack.subStack[1].cathode_channel.channel.p_start[4]
stack.subStack[1].cathode_channel.channel.p_start[5]
stack.subStack[1].cathode_channel.channel.initFromEnthalpy
stack.subStack[1].cathode_channel.channel.h_start_in
stack.subStack[1].cathode_channel.channel.h_start_out
stack.subStack[1].cathode_channel.channel.h_start[1]
stack.subStack[1].cathode_channel.channel.h_start[2]
stack.subStack[1].cathode_channel.channel.h_start[3]
stack.subStack[1].cathode_channel.channel.h_start[4]
stack.subStack[1].cathode_channel.channel.h_start[5]
stack.subStack[1].cathode_channel.channel.T_start_in
stack.subStack[1].cathode_channel.channel.T_start_out
stack.subStack[1].cathode_channel.channel.T_start[1]
stack.subStack[1].cathode_channel.channel.T_start[2]
stack.subStack[1].cathode_channel.channel.T_start[3]
stack.subStack[1].cathode_channel.channel.T_start[4]
stack.subStack[1].cathode_channel.channel.T_start[5]
stack.subStack[1].cathode_channel.channel.X_start[1]
stack.subStack[1].cathode_channel.channel.X_start[2]
stack.subStack[1].cathode_channel.channel.X_start[3]
stack.subStack[1].cathode_channel.channel.X_start[4]
stack.subStack[1].cathode_channel.channel.X_start[5]
stack.subStack[1].cathode_channel.channel.m_flow_start
stack.subStack[1].cathode_channel.channel.positiveFlow
stack.subStack[1].cathode_channel.channel.from_dp
stack.subStack[1].cathode_channel.channel.dp_smooth
stack.subStack[1].cathode_channel.channel.mflow_smooth
stack.subStack[1].cathode_channel.channel.generateEventForReversal
stack.subStack[1].cathode_channel.channel.NA
stack.subStack[1].cathode_channel.channel.NB
stack.subStack[1].cathode_channel.channel.T[1]
stack.subStack[1].cathode_channel.channel.der(T[1])
stack.subStack[1].cathode_channel.channel.T[2]
stack.subStack[1].cathode_channel.channel.der(T[2])
stack.subStack[1].cathode_channel.channel.T[3]
stack.subStack[1].cathode_channel.channel.der(T[3])
stack.subStack[1].cathode_channel.channel.T[4]
stack.subStack[1].cathode_channel.channel.der(T[4])
stack.subStack[1].cathode_channel.channel.dp_asState
stack.subStack[1].cathode_channel.channel.frictionDistribution
stack.subStack[1].cathode_channel.channel.n_fric
stack.subStack[1].cathode_channel.channel.CF_PressureLoss
stack.subStack[1].cathode_channel.channel.CF_HeatTransfer
stack.subStack[1].cathode_channel.channel.includeStaticHead
stack.subStack[1].cathode_channel.channel.levels[1]
stack.subStack[1].cathode_channel.channel.levels[2]
stack.subStack[1].cathode_channel.channel.levels[3]
stack.subStack[1].cathode_channel.channel.levels[4]
stack.subStack[1].cathode_channel.channel.g
stack.subStack[1].cathode_channel.channel.friction[1].A
stack.subStack[1].cathode_channel.channel.friction[1].Dhyd
stack.subStack[1].cathode_channel.channel.friction[1].n_channels
stack.subStack[1].cathode_channel.channel.friction[1].lengthFraction
stack.subStack[1].cathode_channel.channel.friction[1].flowFraction0
stack.subStack[1].cathode_channel.channel.friction[1].dpFraction0
stack.subStack[1].cathode_channel.channel.friction[1].from_dp
stack.subStack[1].cathode_channel.channel.friction[1].positiveFlow
stack.subStack[1].cathode_channel.channel.friction[1].dp_smooth
stack.subStack[1].cathode_channel.channel.friction[1].mflow_smooth
stack.subStack[1].cathode_channel.channel.friction[1].useFixedDensity
stack.subStack[1].cathode_channel.channel.friction[1].reference_d
stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[1].dp_from_isothermal
stack.subStack[1].cathode_channel.channel.friction[1].dA
stack.subStack[1].cathode_channel.channel.friction[1].dB
stack.subStack[1].cathode_channel.channel.friction[1].d0
stack.subStack[1].cathode_channel.channel.friction[1].dp0
stack.subStack[1].cathode_channel.channel.friction[1].m_flow0
stack.subStack[1].cathode_channel.channel.friction[2].A
stack.subStack[1].cathode_channel.channel.friction[2].Dhyd
stack.subStack[1].cathode_channel.channel.friction[2].n_channels
stack.subStack[1].cathode_channel.channel.friction[2].lengthFraction
stack.subStack[1].cathode_channel.channel.friction[2].flowFraction0
stack.subStack[1].cathode_channel.channel.friction[2].dpFraction0
stack.subStack[1].cathode_channel.channel.friction[2].from_dp
stack.subStack[1].cathode_channel.channel.friction[2].positiveFlow
stack.subStack[1].cathode_channel.channel.friction[2].dp_smooth
stack.subStack[1].cathode_channel.channel.friction[2].mflow_smooth
stack.subStack[1].cathode_channel.channel.friction[2].useFixedDensity
stack.subStack[1].cathode_channel.channel.friction[2].reference_d
stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[2].dp_from_isothermal
stack.subStack[1].cathode_channel.channel.friction[2].dA
stack.subStack[1].cathode_channel.channel.friction[2].dB
stack.subStack[1].cathode_channel.channel.friction[2].d0
stack.subStack[1].cathode_channel.channel.friction[2].dp0
stack.subStack[1].cathode_channel.channel.friction[2].m_flow0
stack.subStack[1].cathode_channel.channel.friction[3].A
stack.subStack[1].cathode_channel.channel.friction[3].Dhyd
stack.subStack[1].cathode_channel.channel.friction[3].n_channels
stack.subStack[1].cathode_channel.channel.friction[3].lengthFraction
stack.subStack[1].cathode_channel.channel.friction[3].flowFraction0
stack.subStack[1].cathode_channel.channel.friction[3].dpFraction0
stack.subStack[1].cathode_channel.channel.friction[3].from_dp
stack.subStack[1].cathode_channel.channel.friction[3].positiveFlow
stack.subStack[1].cathode_channel.channel.friction[3].dp_smooth
stack.subStack[1].cathode_channel.channel.friction[3].mflow_smooth
stack.subStack[1].cathode_channel.channel.friction[3].useFixedDensity
stack.subStack[1].cathode_channel.channel.friction[3].reference_d
stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[3].dp_from_isothermal
stack.subStack[1].cathode_channel.channel.friction[3].dA
stack.subStack[1].cathode_channel.channel.friction[3].dB
stack.subStack[1].cathode_channel.channel.friction[3].d0
stack.subStack[1].cathode_channel.channel.friction[3].dp0
stack.subStack[1].cathode_channel.channel.friction[3].m_flow0
stack.subStack[1].cathode_channel.channel.friction[4].A
stack.subStack[1].cathode_channel.channel.friction[4].Dhyd
stack.subStack[1].cathode_channel.channel.friction[4].n_channels
stack.subStack[1].cathode_channel.channel.friction[4].lengthFraction
stack.subStack[1].cathode_channel.channel.friction[4].flowFraction0
stack.subStack[1].cathode_channel.channel.friction[4].dpFraction0
stack.subStack[1].cathode_channel.channel.friction[4].from_dp
stack.subStack[1].cathode_channel.channel.friction[4].positiveFlow
stack.subStack[1].cathode_channel.channel.friction[4].dp_smooth
stack.subStack[1].cathode_channel.channel.friction[4].mflow_smooth
stack.subStack[1].cathode_channel.channel.friction[4].useFixedDensity
stack.subStack[1].cathode_channel.channel.friction[4].reference_d
stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[1]
stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[2]
stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[3]
stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[4]
stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[5]
stack.subStack[1].cathode_channel.channel.friction[4].dp_from_isothermal
stack.subStack[1].cathode_channel.channel.friction[4].dA
stack.subStack[1].cathode_channel.channel.friction[4].dB
stack.subStack[1].cathode_channel.channel.friction[4].d0
stack.subStack[1].cathode_channel.channel.friction[4].dp0
stack.subStack[1].cathode_channel.channel.friction[4].m_flow0
stack.subStack[1].cathode_channel.channel.htcoeff[1].A
stack.subStack[1].cathode_channel.channel.htcoeff[1].L
stack.subStack[1].cathode_channel.channel.htcoeff[1].Dhyd
stack.subStack[1].cathode_channel.channel.htcoeff[1].ht_from_isothermal
stack.subStack[1].cathode_channel.channel.htcoeff[1].CF_length
stack.subStack[1].cathode_channel.channel.htcoeff[1].alpha
stack.subStack[1].cathode_channel.channel.htcoeff[2].A
stack.subStack[1].cathode_channel.channel.htcoeff[2].L
stack.subStack[1].cathode_channel.channel.htcoeff[2].Dhyd
stack.subStack[1].cathode_channel.channel.htcoeff[2].ht_from_isothermal
stack.subStack[1].cathode_channel.channel.htcoeff[2].CF_length
stack.subStack[1].cathode_channel.channel.htcoeff[2].alpha
stack.subStack[1].cathode_channel.channel.htcoeff[3].A
stack.subStack[1].cathode_channel.channel.htcoeff[3].L
stack.subStack[1].cathode_channel.channel.htcoeff[3].Dhyd
stack.subStack[1].cathode_channel.channel.htcoeff[3].ht_from_isothermal
stack.subStack[1].cathode_channel.channel.htcoeff[3].CF_length
stack.subStack[1].cathode_channel.channel.htcoeff[3].alpha
stack.subStack[1].cathode_channel.channel.htcoeff[4].A
stack.subStack[1].cathode_channel.channel.htcoeff[4].L
stack.subStack[1].cathode_channel.channel.htcoeff[4].Dhyd
stack.subStack[1].cathode_channel.channel.htcoeff[4].ht_from_isothermal
stack.subStack[1].cathode_channel.channel.htcoeff[4].CF_length
stack.subStack[1].cathode_channel.channel.htcoeff[4].alpha
stack.subStack[1].cathode_channel.channel.reaction.N
stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[1]
stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[2]
stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[3]
stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[4]
stack.subStack[1].cathode_channel.channel.reaction.Q[1]
stack.subStack[1].cathode_channel.channel.reaction.Q[2]
stack.subStack[1].cathode_channel.channel.reaction.Q[3]
stack.subStack[1].cathode_channel.channel.reaction.Q[4]
stack.subStack[1].cathode_channel.channel.reaction.mX_flow[1, 5]
stack.subStack[1].cathode_channel.channel.reaction.mX_flow[2, 5]
stack.subStack[1].cathode_channel.channel.reaction.mX_flow[3, 5]
stack.subStack[1].cathode_channel.channel.reaction.mX_flow[4, 5]
stack.subStack[1].cathode_channel.channel.reaction.n_reac
stack.subStack[1].cathode_channel.channel.reaction.pstart
stack.subStack[1].cathode_channel.channel.reaction.Tstart
stack.subStack[1].cathode_channel.channel.reaction.Xstart[1]
stack.subStack[1].cathode_channel.channel.reaction.Xstart[2]
stack.subStack[1].cathode_channel.channel.reaction.Xstart[3]
stack.subStack[1].cathode_channel.channel.reaction.Xstart[4]
stack.subStack[1].cathode_channel.channel.reaction.Xstart[5]
stack.subStack[1].cathode_channel.channel.reaction.V
stack.subStack[1].cathode_channel.channel.reaction.scale
stack.subStack[1].cathode_channel.channel.reaction.MMX[1]
stack.subStack[1].cathode_channel.channel.reaction.MMX[2]
stack.subStack[1].cathode_channel.channel.reaction.MMX[3]
stack.subStack[1].cathode_channel.channel.reaction.MMX[4]
stack.subStack[1].cathode_channel.channel.reaction.MMX[5]
stack.subStack[1].cathode_channel.channel.reaction.MM[1]
stack.subStack[1].cathode_channel.channel.reaction.MM[2]
stack.subStack[1].cathode_channel.channel.reaction.MM[3]
stack.subStack[1].cathode_channel.channel.reaction.MM[4]
stack.subStack[1].cathode_channel.channel.reaction.der(MM[1])
stack.subStack[1].cathode_channel.channel.reaction.der(MM[2])
stack.subStack[1].cathode_channel.channel.reaction.der(MM[3])
stack.subStack[1].cathode_channel.channel.reaction.der(MM[4])
stack.subStack[1].cathode_channel.channel.reaction.y_start[1]
stack.subStack[1].cathode_channel.channel.reaction.y_start[2]
stack.subStack[1].cathode_channel.channel.reaction.y_start[3]
stack.subStack[1].cathode_channel.channel.reaction.y_start[4]
stack.subStack[1].cathode_channel.channel.reaction.y_start[5]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[1]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[2]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[3]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[4]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[5]
stack.subStack[1].cathode_channel.channel.reaction.pref
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 1]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 2]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 3]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 4]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 5]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 1]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 2]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 3]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 4]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 5]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 1]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 2]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 3]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 4]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 5]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 1]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 2]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 3]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 4]
stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 5]
stack.subStack[1].cathode_channel.channel.reaction.Ztot_start
stack.subStack[1].cathode_channel.channel.reaction.Zx_start[1]
stack.subStack[1].cathode_channel.channel.reaction.Zx_start[2]
stack.subStack[1].cathode_channel.channel.reaction.Zx_start[3]
stack.subStack[1].cathode_channel.channel.reaction.Zx_start[4]
stack.subStack[1].cathode_channel.channel.reaction.Zx_start[5]
stack.subStack[1].cathode_channel.channel.reaction.CF_conversion
stack.subStack[1].cathode_channel.channel.reaction.Tscale
stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 1]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 1])
stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 2]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 2])
stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 3]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 3])
stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 4]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 4])
stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 5]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 5])
stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 1]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 1])
stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 2]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 2])
stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 3]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 3])
stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 4]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 4])
stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 5]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 5])
stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 1]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 1])
stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 2]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 2])
stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 3]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 3])
stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 4]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 4])
stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 5]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 5])
stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 1]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 1])
stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 2]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 2])
stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 3]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 3])
stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 4]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 4])
stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 5]
stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 5])
stack.subStack[1].cathode_channel.channel.reaction.Ztot[1]
stack.subStack[1].cathode_channel.channel.reaction.Ztot[2]
stack.subStack[1].cathode_channel.channel.reaction.Ztot[3]
stack.subStack[1].cathode_channel.channel.reaction.Ztot[4]
stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[1])
stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[2])
stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[3])
stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[4])
stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 1]
stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 2]
stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 3]
stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 4]
stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 5]
stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 1]
stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 2]
stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 3]
stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 4]
stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 5]
stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 1]
stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 2]
stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 3]
stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 4]
stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 5]
stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 1]
stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 2]
stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 3]
stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 4]
stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 5]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 1]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 2]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 3]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 4]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 5]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 1]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 2]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 3]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 4]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 5]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 1]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 2]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 3]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 4]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 5]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 1]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 2]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 3]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 4]
stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 5]
stack.subStack[1].cathode_channel.channel.reaction.Zx_nominal
stack.subStack[1].cathode_channel.channel.reaction.epsZ
stack.subStack[1].cathode_channel.channel.reaction.state[1].p
stack.subStack[1].cathode_channel.channel.reaction.state[1].T
stack.subStack[1].cathode_channel.channel.reaction.state[1].X[1]
stack.subStack[1].cathode_channel.channel.reaction.state[1].X[2]
stack.subStack[1].cathode_channel.channel.reaction.state[1].X[3]
stack.subStack[1].cathode_channel.channel.reaction.state[1].X[4]
stack.subStack[1].cathode_channel.channel.reaction.state[1].X[5]
stack.subStack[1].cathode_channel.channel.reaction.state[2].p
stack.subStack[1].cathode_channel.channel.reaction.state[2].T
stack.subStack[1].cathode_channel.channel.reaction.state[2].X[1]
stack.subStack[1].cathode_channel.channel.reaction.state[2].X[2]
stack.subStack[1].cathode_channel.channel.reaction.state[2].X[3]
stack.subStack[1].cathode_channel.channel.reaction.state[2].X[4]
stack.subStack[1].cathode_channel.channel.reaction.state[2].X[5]
stack.subStack[1].cathode_channel.channel.reaction.state[3].p
stack.subStack[1].cathode_channel.channel.reaction.state[3].T
stack.subStack[1].cathode_channel.channel.reaction.state[3].X[1]
stack.subStack[1].cathode_channel.channel.reaction.state[3].X[2]
stack.subStack[1].cathode_channel.channel.reaction.state[3].X[3]
stack.subStack[1].cathode_channel.channel.reaction.state[3].X[4]
stack.subStack[1].cathode_channel.channel.reaction.state[3].X[5]
stack.subStack[1].cathode_channel.channel.reaction.state[4].p
stack.subStack[1].cathode_channel.channel.reaction.state[4].T
stack.subStack[1].cathode_channel.channel.reaction.state[4].X[1]
stack.subStack[1].cathode_channel.channel.reaction.state[4].X[2]
stack.subStack[1].cathode_channel.channel.reaction.state[4].X[3]
stack.subStack[1].cathode_channel.channel.reaction.state[4].X[4]
stack.subStack[1].cathode_channel.channel.reaction.state[4].X[5]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 1]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 2]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 3]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 4]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 5]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 1]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 2]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 3]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 4]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 5]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 1]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 2]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 3]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 4]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 5]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 1]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 2]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 3]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 4]
stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 5]
stack.subStack[1].cathode_channel.channel.gas[1].X[1]
stack.subStack[1].cathode_channel.channel.gas[1].X[2]
stack.subStack[1].cathode_channel.channel.gas[1].X[3]
stack.subStack[1].cathode_channel.channel.gas[1].X[4]
stack.subStack[1].cathode_channel.channel.gas[1].X[5]
stack.subStack[1].cathode_channel.channel.gas[1].d
stack.subStack[1].cathode_channel.channel.gas[1].der(d)
stack.subStack[1].cathode_channel.channel.gas[1].u
stack.subStack[1].cathode_channel.channel.gas[1].Rg
stack.subStack[1].cathode_channel.channel.gas[1].der(Rg)
stack.subStack[1].cathode_channel.channel.gas[1].MM
stack.subStack[1].cathode_channel.channel.gas[1].assertlevel
stack.subStack[1].cathode_channel.channel.gas[1].state.p
stack.subStack[1].cathode_channel.channel.gas[1].state.T
stack.subStack[1].cathode_channel.channel.gas[1].state.X[1]
stack.subStack[1].cathode_channel.channel.gas[1].state.X[2]
stack.subStack[1].cathode_channel.channel.gas[1].state.X[3]
stack.subStack[1].cathode_channel.channel.gas[1].state.X[4]
stack.subStack[1].cathode_channel.channel.gas[1].state.X[5]
stack.subStack[1].cathode_channel.channel.gas[1].preferredMediumStates
stack.subStack[1].cathode_channel.channel.gas[1].T_degC
stack.subStack[1].cathode_channel.channel.gas[1].p_bar
stack.subStack[1].cathode_channel.channel.gas[1].Z[1]
stack.subStack[1].cathode_channel.channel.gas[1].Z[2]
stack.subStack[1].cathode_channel.channel.gas[1].Z[3]
stack.subStack[1].cathode_channel.channel.gas[1].Z[4]
stack.subStack[1].cathode_channel.channel.gas[1].Z[5]
stack.subStack[1].cathode_channel.channel.gas[1].dUZT[1]
stack.subStack[1].cathode_channel.channel.gas[1].dUZT[2]
stack.subStack[1].cathode_channel.channel.gas[1].dUZT[3]
stack.subStack[1].cathode_channel.channel.gas[1].dUZT[4]
stack.subStack[1].cathode_channel.channel.gas[1].dUZT[5]
stack.subStack[1].cathode_channel.channel.gas[1].h_component[1]
stack.subStack[1].cathode_channel.channel.gas[1].h_component[2]
stack.subStack[1].cathode_channel.channel.gas[1].h_component[3]
stack.subStack[1].cathode_channel.channel.gas[1].h_component[4]
stack.subStack[1].cathode_channel.channel.gas[1].h_component[5]
stack.subStack[1].cathode_channel.channel.gas[1].s_component[1]
stack.subStack[1].cathode_channel.channel.gas[1].s_component[2]
stack.subStack[1].cathode_channel.channel.gas[1].s_component[3]
stack.subStack[1].cathode_channel.channel.gas[1].s_component[4]
stack.subStack[1].cathode_channel.channel.gas[1].s_component[5]
stack.subStack[1].cathode_channel.channel.gas[1].u_comp[1]
stack.subStack[1].cathode_channel.channel.gas[1].u_comp[2]
stack.subStack[1].cathode_channel.channel.gas[1].u_comp[3]
stack.subStack[1].cathode_channel.channel.gas[1].u_comp[4]
stack.subStack[1].cathode_channel.channel.gas[1].u_comp[5]
stack.subStack[1].cathode_channel.channel.gas[1].cp
stack.subStack[1].cathode_channel.channel.gas[1].g_formation[1]
stack.subStack[1].cathode_channel.channel.gas[1].g_formation[2]
stack.subStack[1].cathode_channel.channel.gas[1].g_formation[3]
stack.subStack[1].cathode_channel.channel.gas[1].g_formation[4]
stack.subStack[1].cathode_channel.channel.gas[1].g_formation[5]
stack.subStack[1].cathode_channel.channel.gas[1].ddTp
stack.subStack[1].cathode_channel.channel.gas[1].ddpT
stack.subStack[1].cathode_channel.channel.gas[1].dupT
stack.subStack[1].cathode_channel.channel.gas[1].duTp
stack.subStack[1].cathode_channel.channel.gas[1].ddx[1]
stack.subStack[1].cathode_channel.channel.gas[1].ddx[2]
stack.subStack[1].cathode_channel.channel.gas[1].ddx[3]
stack.subStack[1].cathode_channel.channel.gas[1].ddx[4]
stack.subStack[1].cathode_channel.channel.gas[1].ddx[5]
stack.subStack[1].cathode_channel.channel.gas[2].X[1]
stack.subStack[1].cathode_channel.channel.gas[2].X[2]
stack.subStack[1].cathode_channel.channel.gas[2].X[3]
stack.subStack[1].cathode_channel.channel.gas[2].X[4]
stack.subStack[1].cathode_channel.channel.gas[2].X[5]
stack.subStack[1].cathode_channel.channel.gas[2].d
stack.subStack[1].cathode_channel.channel.gas[2].der(d)
stack.subStack[1].cathode_channel.channel.gas[2].u
stack.subStack[1].cathode_channel.channel.gas[2].Rg
stack.subStack[1].cathode_channel.channel.gas[2].der(Rg)
stack.subStack[1].cathode_channel.channel.gas[2].MM
stack.subStack[1].cathode_channel.channel.gas[2].assertlevel
stack.subStack[1].cathode_channel.channel.gas[2].state.p
stack.subStack[1].cathode_channel.channel.gas[2].state.T
stack.subStack[1].cathode_channel.channel.gas[2].state.X[1]
stack.subStack[1].cathode_channel.channel.gas[2].state.X[2]
stack.subStack[1].cathode_channel.channel.gas[2].state.X[3]
stack.subStack[1].cathode_channel.channel.gas[2].state.X[4]
stack.subStack[1].cathode_channel.channel.gas[2].state.X[5]
stack.subStack[1].cathode_channel.channel.gas[2].preferredMediumStates
stack.subStack[1].cathode_channel.channel.gas[2].T_degC
stack.subStack[1].cathode_channel.channel.gas[2].p_bar
stack.subStack[1].cathode_channel.channel.gas[2].Z[1]
stack.subStack[1].cathode_channel.channel.gas[2].Z[2]
stack.subStack[1].cathode_channel.channel.gas[2].Z[3]
stack.subStack[1].cathode_channel.channel.gas[2].Z[4]
stack.subStack[1].cathode_channel.channel.gas[2].Z[5]
stack.subStack[1].cathode_channel.channel.gas[2].dUZT[1]
stack.subStack[1].cathode_channel.channel.gas[2].dUZT[2]
stack.subStack[1].cathode_channel.channel.gas[2].dUZT[3]
stack.subStack[1].cathode_channel.channel.gas[2].dUZT[4]
stack.subStack[1].cathode_channel.channel.gas[2].dUZT[5]
stack.subStack[1].cathode_channel.channel.gas[2].h_component[1]
stack.subStack[1].cathode_channel.channel.gas[2].h_component[2]
stack.subStack[1].cathode_channel.channel.gas[2].h_component[3]
stack.subStack[1].cathode_channel.channel.gas[2].h_component[4]
stack.subStack[1].cathode_channel.channel.gas[2].h_component[5]
stack.subStack[1].cathode_channel.channel.gas[2].s_component[1]
stack.subStack[1].cathode_channel.channel.gas[2].s_component[2]
stack.subStack[1].cathode_channel.channel.gas[2].s_component[3]
stack.subStack[1].cathode_channel.channel.gas[2].s_component[4]
stack.subStack[1].cathode_channel.channel.gas[2].s_component[5]
stack.subStack[1].cathode_channel.channel.gas[2].u_comp[1]
stack.subStack[1].cathode_channel.channel.gas[2].u_comp[2]
stack.subStack[1].cathode_channel.channel.gas[2].u_comp[3]
stack.subStack[1].cathode_channel.channel.gas[2].u_comp[4]
stack.subStack[1].cathode_channel.channel.gas[2].u_comp[5]
stack.subStack[1].cathode_channel.channel.gas[2].cp
stack.subStack[1].cathode_channel.channel.gas[2].g_formation[1]
stack.subStack[1].cathode_channel.channel.gas[2].g_formation[2]
stack.subStack[1].cathode_channel.channel.gas[2].g_formation[3]
stack.subStack[1].cathode_channel.channel.gas[2].g_formation[4]
stack.subStack[1].cathode_channel.channel.gas[2].g_formation[5]
stack.subStack[1].cathode_channel.channel.gas[2].ddTp
stack.subStack[1].cathode_channel.channel.gas[2].ddpT
stack.subStack[1].cathode_channel.channel.gas[2].dupT
stack.subStack[1].cathode_channel.channel.gas[2].duTp
stack.subStack[1].cathode_channel.channel.gas[2].ddx[1]
stack.subStack[1].cathode_channel.channel.gas[2].ddx[2]
stack.subStack[1].cathode_channel.channel.gas[2].ddx[3]
stack.subStack[1].cathode_channel.channel.gas[2].ddx[4]
stack.subStack[1].cathode_channel.channel.gas[2].ddx[5]
stack.subStack[1].cathode_channel.channel.gas[3].X[1]
stack.subStack[1].cathode_channel.channel.gas[3].X[2]
stack.subStack[1].cathode_channel.channel.gas[3].X[3]
stack.subStack[1].cathode_channel.channel.gas[3].X[4]
stack.subStack[1].cathode_channel.channel.gas[3].X[5]
stack.subStack[1].cathode_channel.channel.gas[3].d
stack.subStack[1].cathode_channel.channel.gas[3].der(d)
stack.subStack[1].cathode_channel.channel.gas[3].u
stack.subStack[1].cathode_channel.channel.gas[3].Rg
stack.subStack[1].cathode_channel.channel.gas[3].der(Rg)
stack.subStack[1].cathode_channel.channel.gas[3].MM
stack.subStack[1].cathode_channel.channel.gas[3].assertlevel
stack.subStack[1].cathode_channel.channel.gas[3].state.p
stack.subStack[1].cathode_channel.channel.gas[3].state.T
stack.subStack[1].cathode_channel.channel.gas[3].state.X[1]
stack.subStack[1].cathode_channel.channel.gas[3].state.X[2]
stack.subStack[1].cathode_channel.channel.gas[3].state.X[3]
stack.subStack[1].cathode_channel.channel.gas[3].state.X[4]
stack.subStack[1].cathode_channel.channel.gas[3].state.X[5]
stack.subStack[1].cathode_channel.channel.gas[3].preferredMediumStates
stack.subStack[1].cathode_channel.channel.gas[3].T_degC
stack.subStack[1].cathode_channel.channel.gas[3].p_bar
stack.subStack[1].cathode_channel.channel.gas[3].Z[1]
stack.subStack[1].cathode_channel.channel.gas[3].Z[2]
stack.subStack[1].cathode_channel.channel.gas[3].Z[3]
stack.subStack[1].cathode_channel.channel.gas[3].Z[4]
stack.subStack[1].cathode_channel.channel.gas[3].Z[5]
stack.subStack[1].cathode_channel.channel.gas[3].dUZT[1]
stack.subStack[1].cathode_channel.channel.gas[3].dUZT[2]
stack.subStack[1].cathode_channel.channel.gas[3].dUZT[3]
stack.subStack[1].cathode_channel.channel.gas[3].dUZT[4]
stack.subStack[1].cathode_channel.channel.gas[3].dUZT[5]
stack.subStack[1].cathode_channel.channel.gas[3].h_component[1]
stack.subStack[1].cathode_channel.channel.gas[3].h_component[2]
stack.subStack[1].cathode_channel.channel.gas[3].h_component[3]
stack.subStack[1].cathode_channel.channel.gas[3].h_component[4]
stack.subStack[1].cathode_channel.channel.gas[3].h_component[5]
stack.subStack[1].cathode_channel.channel.gas[3].s_component[1]
stack.subStack[1].cathode_channel.channel.gas[3].s_component[2]
stack.subStack[1].cathode_channel.channel.gas[3].s_component[3]
stack.subStack[1].cathode_channel.channel.gas[3].s_component[4]
stack.subStack[1].cathode_channel.channel.gas[3].s_component[5]
stack.subStack[1].cathode_channel.channel.gas[3].u_comp[1]
stack.subStack[1].cathode_channel.channel.gas[3].u_comp[2]
stack.subStack[1].cathode_channel.channel.gas[3].u_comp[3]
stack.subStack[1].cathode_channel.channel.gas[3].u_comp[4]
stack.subStack[1].cathode_channel.channel.gas[3].u_comp[5]
stack.subStack[1].cathode_channel.channel.gas[3].cp
stack.subStack[1].cathode_channel.channel.gas[3].g_formation[1]
stack.subStack[1].cathode_channel.channel.gas[3].g_formation[2]
stack.subStack[1].cathode_channel.channel.gas[3].g_formation[3]
stack.subStack[1].cathode_channel.channel.gas[3].g_formation[4]
stack.subStack[1].cathode_channel.channel.gas[3].g_formation[5]
stack.subStack[1].cathode_channel.channel.gas[3].ddTp
stack.subStack[1].cathode_channel.channel.gas[3].ddpT
stack.subStack[1].cathode_channel.channel.gas[3].dupT
stack.subStack[1].cathode_channel.channel.gas[3].duTp
stack.subStack[1].cathode_channel.channel.gas[3].ddx[1]
stack.subStack[1].cathode_channel.channel.gas[3].ddx[2]
stack.subStack[1].cathode_channel.channel.gas[3].ddx[3]
stack.subStack[1].cathode_channel.channel.gas[3].ddx[4]
stack.subStack[1].cathode_channel.channel.gas[3].ddx[5]
stack.subStack[1].cathode_channel.channel.gas[4].X[1]
stack.subStack[1].cathode_channel.channel.gas[4].X[2]
stack.subStack[1].cathode_channel.channel.gas[4].X[3]
stack.subStack[1].cathode_channel.channel.gas[4].X[4]
stack.subStack[1].cathode_channel.channel.gas[4].X[5]
stack.subStack[1].cathode_channel.channel.gas[4].d
stack.subStack[1].cathode_channel.channel.gas[4].der(d)
stack.subStack[1].cathode_channel.channel.gas[4].u
stack.subStack[1].cathode_channel.channel.gas[4].Rg
stack.subStack[1].cathode_channel.channel.gas[4].der(Rg)
stack.subStack[1].cathode_channel.channel.gas[4].MM
stack.subStack[1].cathode_channel.channel.gas[4].assertlevel
stack.subStack[1].cathode_channel.channel.gas[4].state.p
stack.subStack[1].cathode_channel.channel.gas[4].state.T
stack.subStack[1].cathode_channel.channel.gas[4].state.X[1]
stack.subStack[1].cathode_channel.channel.gas[4].state.X[2]
stack.subStack[1].cathode_channel.channel.gas[4].state.X[3]
stack.subStack[1].cathode_channel.channel.gas[4].state.X[4]
stack.subStack[1].cathode_channel.channel.gas[4].state.X[5]
stack.subStack[1].cathode_channel.channel.gas[4].preferredMediumStates
stack.subStack[1].cathode_channel.channel.gas[4].p_bar
stack.subStack[1].cathode_channel.channel.gas[4].Z[1]
stack.subStack[1].cathode_channel.channel.gas[4].Z[2]
stack.subStack[1].cathode_channel.channel.gas[4].Z[3]
stack.subStack[1].cathode_channel.channel.gas[4].Z[4]
stack.subStack[1].cathode_channel.channel.gas[4].Z[5]
stack.subStack[1].cathode_channel.channel.gas[4].dUZT[1]
stack.subStack[1].cathode_channel.channel.gas[4].dUZT[2]
stack.subStack[1].cathode_channel.channel.gas[4].dUZT[3]
stack.subStack[1].cathode_channel.channel.gas[4].dUZT[4]
stack.subStack[1].cathode_channel.channel.gas[4].dUZT[5]
stack.subStack[1].cathode_channel.channel.gas[4].h_component[1]
stack.subStack[1].cathode_channel.channel.gas[4].h_component[2]
stack.subStack[1].cathode_channel.channel.gas[4].h_component[3]
stack.subStack[1].cathode_channel.channel.gas[4].h_component[4]
stack.subStack[1].cathode_channel.channel.gas[4].h_component[5]
stack.subStack[1].cathode_channel.channel.gas[4].s_component[1]
stack.subStack[1].cathode_channel.channel.gas[4].s_component[2]
stack.subStack[1].cathode_channel.channel.gas[4].s_component[3]
stack.subStack[1].cathode_channel.channel.gas[4].s_component[4]
stack.subStack[1].cathode_channel.channel.gas[4].s_component[5]
stack.subStack[1].cathode_channel.channel.gas[4].u_comp[1]
stack.subStack[1].cathode_channel.channel.gas[4].u_comp[2]
stack.subStack[1].cathode_channel.channel.gas[4].u_comp[3]
stack.subStack[1].cathode_channel.channel.gas[4].u_comp[4]
stack.subStack[1].cathode_channel.channel.gas[4].u_comp[5]
stack.subStack[1].cathode_channel.channel.gas[4].cp
stack.subStack[1].cathode_channel.channel.gas[4].g_formation[1]
stack.subStack[1].cathode_channel.channel.gas[4].g_formation[2]
stack.subStack[1].cathode_channel.channel.gas[4].g_formation[3]
stack.subStack[1].cathode_channel.channel.gas[4].g_formation[4]
stack.subStack[1].cathode_channel.channel.gas[4].g_formation[5]
stack.subStack[1].cathode_channel.channel.gas[4].ddTp
stack.subStack[1].cathode_channel.channel.gas[4].ddpT
stack.subStack[1].cathode_channel.channel.gas[4].dupT
stack.subStack[1].cathode_channel.channel.gas[4].duTp
stack.subStack[1].cathode_channel.channel.gas[4].ddx[1]
stack.subStack[1].cathode_channel.channel.gas[4].ddx[2]
stack.subStack[1].cathode_channel.channel.gas[4].ddx[3]
stack.subStack[1].cathode_channel.channel.gas[4].ddx[4]
stack.subStack[1].cathode_channel.channel.gas[4].ddx[5]
stack.subStack[1].cathode_channel.channel.der(p[1])
stack.subStack[1].cathode_channel.channel.der(p[2])
stack.subStack[1].cathode_channel.channel.der(p[3])
stack.subStack[1].cathode_channel.channel.der(p[4])
stack.subStack[1].cathode_channel.channel.M[1]
stack.subStack[1].cathode_channel.channel.M[2]
stack.subStack[1].cathode_channel.channel.M[3]
stack.subStack[1].cathode_channel.channel.M[4]
stack.subStack[1].cathode_channel.channel.der(M[1])
stack.subStack[1].cathode_channel.channel.der(M[2])
stack.subStack[1].cathode_channel.channel.der(M[3])
stack.subStack[1].cathode_channel.channel.der(M[4])
stack.subStack[1].cathode_channel.channel.E_seg[1]
stack.subStack[1].cathode_channel.channel.E_seg[2]
stack.subStack[1].cathode_channel.channel.E_seg[3]
stack.subStack[1].cathode_channel.channel.E_seg[4]
stack.subStack[1].cathode_channel.channel.MXi[1, 1]
stack.subStack[1].cathode_channel.channel.MXi[1, 2]
stack.subStack[1].cathode_channel.channel.MXi[1, 3]
stack.subStack[1].cathode_channel.channel.MXi[1, 4]
stack.subStack[1].cathode_channel.channel.MXi[1, 5]
stack.subStack[1].cathode_channel.channel.MXi[2, 1]
stack.subStack[1].cathode_channel.channel.MXi[2, 2]
stack.subStack[1].cathode_channel.channel.MXi[2, 3]
stack.subStack[1].cathode_channel.channel.MXi[2, 4]
stack.subStack[1].cathode_channel.channel.MXi[2, 5]
stack.subStack[1].cathode_channel.channel.MXi[3, 1]
stack.subStack[1].cathode_channel.channel.MXi[3, 2]
stack.subStack[1].cathode_channel.channel.MXi[3, 3]
stack.subStack[1].cathode_channel.channel.MXi[3, 4]
stack.subStack[1].cathode_channel.channel.MXi[3, 5]
stack.subStack[1].cathode_channel.channel.MXi[4, 1]
stack.subStack[1].cathode_channel.channel.MXi[4, 2]
stack.subStack[1].cathode_channel.channel.MXi[4, 3]
stack.subStack[1].cathode_channel.channel.MXi[4, 4]
stack.subStack[1].cathode_channel.channel.MXi[4, 5]
stack.subStack[1].cathode_channel.channel.dp[1]
stack.subStack[1].cathode_channel.channel.dp[2]
stack.subStack[1].cathode_channel.channel.dp[3]
stack.subStack[1].cathode_channel.channel.dp[4]
stack.subStack[1].cathode_channel.channel.dp[5]
stack.subStack[1].cathode_channel.channel.sh[1]
stack.subStack[1].cathode_channel.channel.sh[2]
stack.subStack[1].cathode_channel.channel.sh[3]
stack.subStack[1].cathode_channel.channel.sh[4]
stack.subStack[1].cathode_channel.channel.state[1].X[1]
stack.subStack[1].cathode_channel.channel.state[1].X[2]
stack.subStack[1].cathode_channel.channel.state[1].X[3]
stack.subStack[1].cathode_channel.channel.state[1].X[4]
stack.subStack[1].cathode_channel.channel.state[1].X[5]
stack.subStack[1].cathode_channel.channel.state[6].T
stack.subStack[1].cathode_channel.channel.Q[1]
stack.subStack[1].cathode_channel.channel.Q[2]
stack.subStack[1].cathode_channel.channel.Q[3]
stack.subStack[1].cathode_channel.channel.Q[4]
stack.subStack[1].cathode_channel.channel.Q_tot
stack.subStack[1].cathode_channel.channel.Q_wall[1]
stack.subStack[1].cathode_channel.channel.Q_wall[2]
stack.subStack[1].cathode_channel.channel.Q_wall[3]
stack.subStack[1].cathode_channel.channel.Q_wall[4]
stack.subStack[1].cathode_channel.channel.alpha[1]
stack.subStack[1].cathode_channel.channel.alpha[2]
stack.subStack[1].cathode_channel.channel.alpha[3]
stack.subStack[1].cathode_channel.channel.alpha[4]
stack.subStack[1].cathode_channel.channel.rMX[1, 1]
stack.subStack[1].cathode_channel.channel.rMX[1, 2]
stack.subStack[1].cathode_channel.channel.rMX[1, 3]
stack.subStack[1].cathode_channel.channel.rMX[1, 4]
stack.subStack[1].cathode_channel.channel.rMX[2, 1]
stack.subStack[1].cathode_channel.channel.rMX[2, 2]
stack.subStack[1].cathode_channel.channel.rMX[2, 3]
stack.subStack[1].cathode_channel.channel.rMX[2, 4]
stack.subStack[1].cathode_channel.channel.rMX[3, 1]
stack.subStack[1].cathode_channel.channel.rMX[3, 2]
stack.subStack[1].cathode_channel.channel.rMX[3, 3]
stack.subStack[1].cathode_channel.channel.rMX[3, 4]
stack.subStack[1].cathode_channel.channel.rMX[4, 1]
stack.subStack[1].cathode_channel.channel.rMX[4, 2]
stack.subStack[1].cathode_channel.channel.rMX[4, 3]
stack.subStack[1].cathode_channel.channel.rMX[4, 4]
stack.subStack[1].cathode_channel.channel.mflow_A_in
stack.subStack[1].cathode_channel.channel.mflow_B_in
stack.subStack[1].cathode_channel.channel.m_flow_fric[1]
stack.subStack[1].cathode_channel.channel.m_flow_fric[2]
stack.subStack[1].cathode_channel.channel.m_flow_fric[3]
stack.subStack[1].cathode_channel.channel.XA[1]
stack.subStack[1].cathode_channel.channel.XA[2]
stack.subStack[1].cathode_channel.channel.XA[3]
stack.subStack[1].cathode_channel.channel.XA[4]
stack.subStack[1].cathode_channel.channel.XA[5]
stack.subStack[1].cathode_channel.channel.XB[1]
stack.subStack[1].cathode_channel.channel.XB[2]
stack.subStack[1].cathode_channel.channel.XB[3]
stack.subStack[1].cathode_channel.channel.XB[4]
stack.subStack[1].cathode_channel.channel.XB[5]
stack.subStack[1].cathode_channel.channel.n_channels_fric[1]
stack.subStack[1].cathode_channel.channel.n_channels_fric[2]
stack.subStack[1].cathode_channel.channel.n_channels_fric[3]
stack.subStack[1].cathode_channel.channel.n_channels_fric[4]
stack.subStack[1].cathode_channel.channel.T_wall[1]
stack.subStack[1].cathode_channel.channel.T_wall[2]
stack.subStack[1].cathode_channel.channel.T_wall[3]
stack.subStack[1].cathode_channel.channel.T_wall[4]
stack.subStack[1].cathode_channel.channel.nS
stack.subStack[1].cathode_channel.channel.mX_flow[1, 1]
stack.subStack[1].cathode_channel.channel.mX_flow[1, 2]
stack.subStack[1].cathode_channel.channel.mX_flow[1, 3]
stack.subStack[1].cathode_channel.channel.mX_flow[1, 4]
stack.subStack[1].cathode_channel.channel.mX_flow[1, 5]
stack.subStack[1].cathode_channel.channel.mX_flow[2, 1]
stack.subStack[1].cathode_channel.channel.mX_flow[2, 2]
stack.subStack[1].cathode_channel.channel.mX_flow[2, 3]
stack.subStack[1].cathode_channel.channel.mX_flow[2, 4]
stack.subStack[1].cathode_channel.channel.mX_flow[2, 5]
stack.subStack[1].cathode_channel.channel.mX_flow[3, 1]
stack.subStack[1].cathode_channel.channel.mX_flow[3, 2]
stack.subStack[1].cathode_channel.channel.mX_flow[3, 3]
stack.subStack[1].cathode_channel.channel.mX_flow[3, 4]
stack.subStack[1].cathode_channel.channel.mX_flow[3, 5]
stack.subStack[1].cathode_channel.channel.mX_flow[4, 1]
stack.subStack[1].cathode_channel.channel.mX_flow[4, 2]
stack.subStack[1].cathode_channel.channel.mX_flow[4, 3]
stack.subStack[1].cathode_channel.channel.mX_flow[4, 4]
stack.subStack[1].cathode_channel.channel.mX_flow[4, 5]
stack.subStack[1].cathode_channel.channel.mX_flow[5, 1]
stack.subStack[1].cathode_channel.channel.mX_flow[5, 2]
stack.subStack[1].cathode_channel.channel.mX_flow[5, 3]
stack.subStack[1].cathode_channel.channel.mX_flow[5, 4]
stack.subStack[1].cathode_channel.channel.mX_flow[5, 5]
stack.subStack[1].cathode_channel.channel.H_flow[1]
stack.subStack[1].cathode_channel.channel.H_flow[2]
stack.subStack[1].cathode_channel.channel.H_flow[3]
stack.subStack[1].cathode_channel.channel.H_flow[4]
stack.subStack[1].cathode_channel.channel.H_flow[5]
stack.subStack[1].cathode_channel.channel.dE[1]
stack.subStack[1].cathode_channel.channel.dE[2]
stack.subStack[1].cathode_channel.channel.dE[3]
stack.subStack[1].cathode_channel.channel.dE[4]
stack.subStack[1].cathode_channel.channel.dMX[1, 1]
stack.subStack[1].cathode_channel.channel.dMX[1, 2]
stack.subStack[1].cathode_channel.channel.dMX[1, 3]
stack.subStack[1].cathode_channel.channel.dMX[1, 4]
stack.subStack[1].cathode_channel.channel.dMX[1, 5]
stack.subStack[1].cathode_channel.channel.dMX[2, 1]
stack.subStack[1].cathode_channel.channel.dMX[2, 2]
stack.subStack[1].cathode_channel.channel.dMX[2, 3]
stack.subStack[1].cathode_channel.channel.dMX[2, 4]
stack.subStack[1].cathode_channel.channel.dMX[2, 5]
stack.subStack[1].cathode_channel.channel.dMX[3, 1]
stack.subStack[1].cathode_channel.channel.dMX[3, 2]
stack.subStack[1].cathode_channel.channel.dMX[3, 3]
stack.subStack[1].cathode_channel.channel.dMX[3, 4]
stack.subStack[1].cathode_channel.channel.dMX[3, 5]
stack.subStack[1].cathode_channel.channel.dMX[4, 1]
stack.subStack[1].cathode_channel.channel.dMX[4, 2]
stack.subStack[1].cathode_channel.channel.dMX[4, 3]
stack.subStack[1].cathode_channel.channel.dMX[4, 4]
stack.subStack[1].cathode_channel.channel.dMX[4, 5]
stack.subStack[1].cathode_channel.channel.dUTZ[1]
stack.subStack[1].cathode_channel.channel.dUTZ[2]
stack.subStack[1].cathode_channel.channel.dUTZ[3]
stack.subStack[1].cathode_channel.channel.dUTZ[4]
stack.subStack[1].cathode_channel.channel.Z[1, 1]
stack.subStack[1].cathode_channel.channel.Z[1, 2]
stack.subStack[1].cathode_channel.channel.Z[1, 3]
stack.subStack[1].cathode_channel.channel.Z[1, 4]
stack.subStack[1].cathode_channel.channel.Z[1, 5]
stack.subStack[1].cathode_channel.channel.Z[2, 1]
stack.subStack[1].cathode_channel.channel.Z[2, 2]
stack.subStack[1].cathode_channel.channel.Z[2, 3]
stack.subStack[1].cathode_channel.channel.Z[2, 4]
stack.subStack[1].cathode_channel.channel.Z[2, 5]
stack.subStack[1].cathode_channel.channel.Z[3, 1]
stack.subStack[1].cathode_channel.channel.Z[3, 2]
stack.subStack[1].cathode_channel.channel.Z[3, 3]
stack.subStack[1].cathode_channel.channel.Z[3, 4]
stack.subStack[1].cathode_channel.channel.Z[3, 5]
stack.subStack[1].cathode_channel.channel.Z[4, 1]
stack.subStack[1].cathode_channel.channel.Z[4, 2]
stack.subStack[1].cathode_channel.channel.Z[4, 3]
stack.subStack[1].cathode_channel.channel.Z[4, 4]
stack.subStack[1].cathode_channel.channel.Z[4, 5]
stack.subStack[1].cathode_channel.channel.der(Z[1, 1])
stack.subStack[1].cathode_channel.channel.der(Z[1, 2])
stack.subStack[1].cathode_channel.channel.der(Z[1, 3])
stack.subStack[1].cathode_channel.channel.der(Z[1, 4])
stack.subStack[1].cathode_channel.channel.der(Z[1, 5])
stack.subStack[1].cathode_channel.channel.der(Z[2, 1])
stack.subStack[1].cathode_channel.channel.der(Z[2, 2])
stack.subStack[1].cathode_channel.channel.der(Z[2, 3])
stack.subStack[1].cathode_channel.channel.der(Z[2, 4])
stack.subStack[1].cathode_channel.channel.der(Z[2, 5])
stack.subStack[1].cathode_channel.channel.der(Z[3, 1])
stack.subStack[1].cathode_channel.channel.der(Z[3, 2])
stack.subStack[1].cathode_channel.channel.der(Z[3, 3])
stack.subStack[1].cathode_channel.channel.der(Z[3, 4])
stack.subStack[1].cathode_channel.channel.der(Z[3, 5])
stack.subStack[1].cathode_channel.channel.der(Z[4, 1])
stack.subStack[1].cathode_channel.channel.der(Z[4, 2])
stack.subStack[1].cathode_channel.channel.der(Z[4, 3])
stack.subStack[1].cathode_channel.channel.der(Z[4, 4])
stack.subStack[1].cathode_channel.channel.der(Z[4, 5])
stack.subStack[1].cathode_channel.port[1].mX_flow[1]
stack.subStack[1].cathode_channel.port[1].mX_flow[2]
stack.subStack[1].cathode_channel.port[1].mX_flow[3]
stack.subStack[1].cathode_channel.port[1].mX_flow[4]
stack.subStack[1].cathode_channel.port[2].mX_flow[1]
stack.subStack[1].cathode_channel.port[2].mX_flow[2]
stack.subStack[1].cathode_channel.port[2].mX_flow[3]
stack.subStack[1].cathode_channel.port[2].mX_flow[4]
stack.subStack[1].cathode_channel.port[3].mX_flow[1]
stack.subStack[1].cathode_channel.port[3].mX_flow[2]
stack.subStack[1].cathode_channel.port[3].mX_flow[3]
stack.subStack[1].cathode_channel.port[3].mX_flow[4]
stack.subStack[1].cathode_channel.port[4].mX_flow[1]
stack.subStack[1].cathode_channel.port[4].mX_flow[2]
stack.subStack[1].cathode_channel.port[4].mX_flow[3]
stack.subStack[1].cathode_channel.port[4].mX_flow[4]
stack.subStack[1].ref[1]
stack.subStack[1].air[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[5]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[6]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[7]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].R
stack.subStack[2].N
stack.subStack[2].nX_an
stack.subStack[2].nX_cath
stack.subStack[2].A_cell
stack.subStack[2].kc
stack.subStack[2].includeCellConduction
stack.subStack[2].lambda_cell
stack.subStack[2].A_crosssection_cell
stack.subStack[2].length_cell
stack.subStack[2].G_cell
stack.subStack[2].n_cell
stack.subStack[2].M_cell
stack.subStack[2].Cp_cell
stack.subStack[2].addProxToAnode
stack.subStack[2].P_stack
stack.subStack[2].anode_stoich
stack.subStack[2].cathode_stoich
stack.subStack[2].cell.N
stack.subStack[2].cell.nX_an
stack.subStack[2].cell.nX_cath
stack.subStack[2].cell.A_cell
stack.subStack[2].cell.n_cell
stack.subStack[2].cell.MCp_cell
stack.subStack[2].cell.kc
stack.subStack[2].cell.pstart
stack.subStack[2].cell.Tstart
stack.subStack[2].cell.T_cell[1]
stack.subStack[2].cell.der(T_cell[1])
stack.subStack[2].cell.T_cell[2]
stack.subStack[2].cell.der(T_cell[2])
stack.subStack[2].cell.T_cell[3]
stack.subStack[2].cell.der(T_cell[3])
stack.subStack[2].cell.T_cell[4]
stack.subStack[2].cell.der(T_cell[4])
stack.subStack[2].cell.Q_cell[1]
stack.subStack[2].cell.Q_cell[2]
stack.subStack[2].cell.Q_cell[3]
stack.subStack[2].cell.Q_cell[4]
stack.subStack[2].cell.T_from_h
stack.subStack[2].cell.wall_an[1].Q_flow
stack.subStack[2].cell.wall_an[2].Q_flow
stack.subStack[2].cell.wall_an[3].Q_flow
stack.subStack[2].cell.wall_an[4].Q_flow
stack.subStack[2].cell.wall_cath[1].Q_flow
stack.subStack[2].cell.wall_cath[2].Q_flow
stack.subStack[2].cell.wall_cath[3].Q_flow
stack.subStack[2].cell.wall_cath[4].Q_flow
stack.subStack[2].cell.port_an[1].m_flow
stack.subStack[2].cell.port_an[1].H_flow
stack.subStack[2].cell.port_an[1].mX_flow[1]
stack.subStack[2].cell.port_an[1].mX_flow[2]
stack.subStack[2].cell.port_an[1].mX_flow[3]
stack.subStack[2].cell.port_an[1].mX_flow[4]
stack.subStack[2].cell.port_an[1].mX_flow[5]
stack.subStack[2].cell.port_an[1].mX_flow[6]
stack.subStack[2].cell.port_an[1].mX_flow[7]
stack.subStack[2].cell.port_an[2].m_flow
stack.subStack[2].cell.port_an[2].h
stack.subStack[2].cell.port_an[2].H_flow
stack.subStack[2].cell.port_an[2].mX_flow[1]
stack.subStack[2].cell.port_an[2].mX_flow[2]
stack.subStack[2].cell.port_an[2].mX_flow[3]
stack.subStack[2].cell.port_an[2].mX_flow[4]
stack.subStack[2].cell.port_an[2].mX_flow[5]
stack.subStack[2].cell.port_an[2].mX_flow[6]
stack.subStack[2].cell.port_an[2].mX_flow[7]
stack.subStack[2].cell.port_an[3].m_flow
stack.subStack[2].cell.port_an[3].h
stack.subStack[2].cell.port_an[3].H_flow
stack.subStack[2].cell.port_an[3].mX_flow[1]
stack.subStack[2].cell.port_an[3].mX_flow[2]
stack.subStack[2].cell.port_an[3].mX_flow[3]
stack.subStack[2].cell.port_an[3].mX_flow[4]
stack.subStack[2].cell.port_an[3].mX_flow[5]
stack.subStack[2].cell.port_an[3].mX_flow[6]
stack.subStack[2].cell.port_an[3].mX_flow[7]
stack.subStack[2].cell.port_an[4].m_flow
stack.subStack[2].cell.port_an[4].H_flow
stack.subStack[2].cell.port_an[4].mX_flow[1]
stack.subStack[2].cell.port_an[4].mX_flow[2]
stack.subStack[2].cell.port_an[4].mX_flow[3]
stack.subStack[2].cell.port_an[4].mX_flow[4]
stack.subStack[2].cell.port_an[4].mX_flow[5]
stack.subStack[2].cell.port_an[4].mX_flow[6]
stack.subStack[2].cell.port_an[4].mX_flow[7]
stack.subStack[2].cell.port_cath[1].m_flow
stack.subStack[2].cell.port_cath[1].H_flow
stack.subStack[2].cell.port_cath[1].mX_flow[1]
stack.subStack[2].cell.port_cath[1].mX_flow[2]
stack.subStack[2].cell.port_cath[1].mX_flow[3]
stack.subStack[2].cell.port_cath[1].mX_flow[4]
stack.subStack[2].cell.port_cath[2].m_flow
stack.subStack[2].cell.port_cath[2].h
stack.subStack[2].cell.port_cath[2].H_flow
stack.subStack[2].cell.port_cath[2].mX_flow[1]
stack.subStack[2].cell.port_cath[2].mX_flow[2]
stack.subStack[2].cell.port_cath[2].mX_flow[3]
stack.subStack[2].cell.port_cath[2].mX_flow[4]
stack.subStack[2].cell.port_cath[3].m_flow
stack.subStack[2].cell.port_cath[3].h
stack.subStack[2].cell.port_cath[3].H_flow
stack.subStack[2].cell.port_cath[3].mX_flow[1]
stack.subStack[2].cell.port_cath[3].mX_flow[2]
stack.subStack[2].cell.port_cath[3].mX_flow[3]
stack.subStack[2].cell.port_cath[3].mX_flow[4]
stack.subStack[2].cell.port_cath[4].m_flow
stack.subStack[2].cell.port_cath[4].H_flow
stack.subStack[2].cell.port_cath[4].mX_flow[1]
stack.subStack[2].cell.port_cath[4].mX_flow[2]
stack.subStack[2].cell.port_cath[4].mX_flow[3]
stack.subStack[2].cell.port_cath[4].mX_flow[4]
stack.subStack[2].cell.T_an[1]
stack.subStack[2].cell.T_an[2]
stack.subStack[2].cell.T_an[3]
stack.subStack[2].cell.T_an[4]
stack.subStack[2].cell.state_an[1].p
stack.subStack[2].cell.state_an[2].p
stack.subStack[2].cell.state_an[3].p
stack.subStack[2].cell.state_an[4].p
stack.subStack[2].cell.anode[1].X[1]
stack.subStack[2].cell.anode[1].X[2]
stack.subStack[2].cell.anode[1].X[3]
stack.subStack[2].cell.anode[1].X[4]
stack.subStack[2].cell.anode[1].X[5]
stack.subStack[2].cell.anode[1].X[6]
stack.subStack[2].cell.anode[1].X[7]
stack.subStack[2].cell.anode[1].Xi[1]
stack.subStack[2].cell.anode[1].Xi[2]
stack.subStack[2].cell.anode[1].Xi[3]
stack.subStack[2].cell.anode[1].Xi[4]
stack.subStack[2].cell.anode[1].Xi[5]
stack.subStack[2].cell.anode[1].Xi[6]
stack.subStack[2].cell.anode[1].Xi[7]
stack.subStack[2].cell.anode[1].d
stack.subStack[2].cell.anode[1].h
stack.subStack[2].cell.anode[1].u
stack.subStack[2].cell.anode[1].Rg
stack.subStack[2].cell.anode[1].MM
stack.subStack[2].cell.anode[1].assertlevel
stack.subStack[2].cell.anode[1].state.p
stack.subStack[2].cell.anode[1].state.T
stack.subStack[2].cell.anode[1].state.X[1]
stack.subStack[2].cell.anode[1].state.X[2]
stack.subStack[2].cell.anode[1].state.X[3]
stack.subStack[2].cell.anode[1].state.X[4]
stack.subStack[2].cell.anode[1].state.X[5]
stack.subStack[2].cell.anode[1].state.X[6]
stack.subStack[2].cell.anode[1].state.X[7]
stack.subStack[2].cell.anode[1].preferredMediumStates
stack.subStack[2].cell.anode[1].T_degC
stack.subStack[2].cell.anode[1].p_bar
stack.subStack[2].cell.anode[1].Z[1]
stack.subStack[2].cell.anode[1].Z[2]
stack.subStack[2].cell.anode[1].Z[3]
stack.subStack[2].cell.anode[1].Z[4]
stack.subStack[2].cell.anode[1].Z[5]
stack.subStack[2].cell.anode[1].Z[6]
stack.subStack[2].cell.anode[1].Z[7]
stack.subStack[2].cell.anode[1].dUZT[1]
stack.subStack[2].cell.anode[1].dUZT[2]
stack.subStack[2].cell.anode[1].dUZT[3]
stack.subStack[2].cell.anode[1].dUZT[4]
stack.subStack[2].cell.anode[1].dUZT[5]
stack.subStack[2].cell.anode[1].dUZT[6]
stack.subStack[2].cell.anode[1].dUZT[7]
stack.subStack[2].cell.anode[1].h_component[1]
stack.subStack[2].cell.anode[1].h_component[2]
stack.subStack[2].cell.anode[1].h_component[3]
stack.subStack[2].cell.anode[1].h_component[4]
stack.subStack[2].cell.anode[1].h_component[5]
stack.subStack[2].cell.anode[1].h_component[6]
stack.subStack[2].cell.anode[1].h_component[7]
stack.subStack[2].cell.anode[1].s_component[1]
stack.subStack[2].cell.anode[1].s_component[2]
stack.subStack[2].cell.anode[1].s_component[3]
stack.subStack[2].cell.anode[1].s_component[4]
stack.subStack[2].cell.anode[1].s_component[5]
stack.subStack[2].cell.anode[1].s_component[6]
stack.subStack[2].cell.anode[1].s_component[7]
stack.subStack[2].cell.anode[1].u_comp[1]
stack.subStack[2].cell.anode[1].u_comp[2]
stack.subStack[2].cell.anode[1].u_comp[3]
stack.subStack[2].cell.anode[1].u_comp[4]
stack.subStack[2].cell.anode[1].u_comp[5]
stack.subStack[2].cell.anode[1].u_comp[6]
stack.subStack[2].cell.anode[1].u_comp[7]
stack.subStack[2].cell.anode[1].cp
stack.subStack[2].cell.anode[1].g_formation[1]
stack.subStack[2].cell.anode[1].g_formation[2]
stack.subStack[2].cell.anode[1].g_formation[3]
stack.subStack[2].cell.anode[1].g_formation[4]
stack.subStack[2].cell.anode[1].g_formation[5]
stack.subStack[2].cell.anode[1].g_formation[6]
stack.subStack[2].cell.anode[1].g_formation[7]
stack.subStack[2].cell.anode[1].ddTp
stack.subStack[2].cell.anode[1].ddpT
stack.subStack[2].cell.anode[1].dupT
stack.subStack[2].cell.anode[1].duTp
stack.subStack[2].cell.anode[1].ddx[1]
stack.subStack[2].cell.anode[1].ddx[2]
stack.subStack[2].cell.anode[1].ddx[3]
stack.subStack[2].cell.anode[1].ddx[4]
stack.subStack[2].cell.anode[1].ddx[5]
stack.subStack[2].cell.anode[1].ddx[6]
stack.subStack[2].cell.anode[1].ddx[7]
stack.subStack[2].cell.anode[2].X[1]
stack.subStack[2].cell.anode[2].X[2]
stack.subStack[2].cell.anode[2].X[3]
stack.subStack[2].cell.anode[2].X[4]
stack.subStack[2].cell.anode[2].X[5]
stack.subStack[2].cell.anode[2].X[6]
stack.subStack[2].cell.anode[2].X[7]
stack.subStack[2].cell.anode[2].Xi[1]
stack.subStack[2].cell.anode[2].Xi[2]
stack.subStack[2].cell.anode[2].Xi[3]
stack.subStack[2].cell.anode[2].Xi[4]
stack.subStack[2].cell.anode[2].Xi[5]
stack.subStack[2].cell.anode[2].Xi[6]
stack.subStack[2].cell.anode[2].Xi[7]
stack.subStack[2].cell.anode[2].d
stack.subStack[2].cell.anode[2].h
stack.subStack[2].cell.anode[2].u
stack.subStack[2].cell.anode[2].Rg
stack.subStack[2].cell.anode[2].MM
stack.subStack[2].cell.anode[2].assertlevel
stack.subStack[2].cell.anode[2].state.p
stack.subStack[2].cell.anode[2].state.T
stack.subStack[2].cell.anode[2].state.X[1]
stack.subStack[2].cell.anode[2].state.X[2]
stack.subStack[2].cell.anode[2].state.X[3]
stack.subStack[2].cell.anode[2].state.X[4]
stack.subStack[2].cell.anode[2].state.X[5]
stack.subStack[2].cell.anode[2].state.X[6]
stack.subStack[2].cell.anode[2].state.X[7]
stack.subStack[2].cell.anode[2].preferredMediumStates
stack.subStack[2].cell.anode[2].T_degC
stack.subStack[2].cell.anode[2].p_bar
stack.subStack[2].cell.anode[2].Z[1]
stack.subStack[2].cell.anode[2].Z[2]
stack.subStack[2].cell.anode[2].Z[3]
stack.subStack[2].cell.anode[2].Z[4]
stack.subStack[2].cell.anode[2].Z[5]
stack.subStack[2].cell.anode[2].Z[6]
stack.subStack[2].cell.anode[2].Z[7]
stack.subStack[2].cell.anode[2].dUZT[1]
stack.subStack[2].cell.anode[2].dUZT[2]
stack.subStack[2].cell.anode[2].dUZT[3]
stack.subStack[2].cell.anode[2].dUZT[4]
stack.subStack[2].cell.anode[2].dUZT[5]
stack.subStack[2].cell.anode[2].dUZT[6]
stack.subStack[2].cell.anode[2].dUZT[7]
stack.subStack[2].cell.anode[2].h_component[1]
stack.subStack[2].cell.anode[2].h_component[2]
stack.subStack[2].cell.anode[2].h_component[3]
stack.subStack[2].cell.anode[2].h_component[4]
stack.subStack[2].cell.anode[2].h_component[5]
stack.subStack[2].cell.anode[2].h_component[6]
stack.subStack[2].cell.anode[2].h_component[7]
stack.subStack[2].cell.anode[2].s_component[1]
stack.subStack[2].cell.anode[2].s_component[2]
stack.subStack[2].cell.anode[2].s_component[3]
stack.subStack[2].cell.anode[2].s_component[4]
stack.subStack[2].cell.anode[2].s_component[5]
stack.subStack[2].cell.anode[2].s_component[6]
stack.subStack[2].cell.anode[2].s_component[7]
stack.subStack[2].cell.anode[2].u_comp[1]
stack.subStack[2].cell.anode[2].u_comp[2]
stack.subStack[2].cell.anode[2].u_comp[3]
stack.subStack[2].cell.anode[2].u_comp[4]
stack.subStack[2].cell.anode[2].u_comp[5]
stack.subStack[2].cell.anode[2].u_comp[6]
stack.subStack[2].cell.anode[2].u_comp[7]
stack.subStack[2].cell.anode[2].cp
stack.subStack[2].cell.anode[2].g_formation[1]
stack.subStack[2].cell.anode[2].g_formation[2]
stack.subStack[2].cell.anode[2].g_formation[3]
stack.subStack[2].cell.anode[2].g_formation[4]
stack.subStack[2].cell.anode[2].g_formation[5]
stack.subStack[2].cell.anode[2].g_formation[6]
stack.subStack[2].cell.anode[2].g_formation[7]
stack.subStack[2].cell.anode[2].ddTp
stack.subStack[2].cell.anode[2].ddpT
stack.subStack[2].cell.anode[2].dupT
stack.subStack[2].cell.anode[2].duTp
stack.subStack[2].cell.anode[2].ddx[1]
stack.subStack[2].cell.anode[2].ddx[2]
stack.subStack[2].cell.anode[2].ddx[3]
stack.subStack[2].cell.anode[2].ddx[4]
stack.subStack[2].cell.anode[2].ddx[5]
stack.subStack[2].cell.anode[2].ddx[6]
stack.subStack[2].cell.anode[2].ddx[7]
stack.subStack[2].cell.anode[3].X[1]
stack.subStack[2].cell.anode[3].X[2]
stack.subStack[2].cell.anode[3].X[3]
stack.subStack[2].cell.anode[3].X[4]
stack.subStack[2].cell.anode[3].X[5]
stack.subStack[2].cell.anode[3].X[6]
stack.subStack[2].cell.anode[3].X[7]
stack.subStack[2].cell.anode[3].Xi[1]
stack.subStack[2].cell.anode[3].Xi[2]
stack.subStack[2].cell.anode[3].Xi[3]
stack.subStack[2].cell.anode[3].Xi[4]
stack.subStack[2].cell.anode[3].Xi[5]
stack.subStack[2].cell.anode[3].Xi[6]
stack.subStack[2].cell.anode[3].Xi[7]
stack.subStack[2].cell.anode[3].d
stack.subStack[2].cell.anode[3].h
stack.subStack[2].cell.anode[3].u
stack.subStack[2].cell.anode[3].Rg
stack.subStack[2].cell.anode[3].MM
stack.subStack[2].cell.anode[3].assertlevel
stack.subStack[2].cell.anode[3].state.p
stack.subStack[2].cell.anode[3].state.T
stack.subStack[2].cell.anode[3].state.X[1]
stack.subStack[2].cell.anode[3].state.X[2]
stack.subStack[2].cell.anode[3].state.X[3]
stack.subStack[2].cell.anode[3].state.X[4]
stack.subStack[2].cell.anode[3].state.X[5]
stack.subStack[2].cell.anode[3].state.X[6]
stack.subStack[2].cell.anode[3].state.X[7]
stack.subStack[2].cell.anode[3].preferredMediumStates
stack.subStack[2].cell.anode[3].T_degC
stack.subStack[2].cell.anode[3].p_bar
stack.subStack[2].cell.anode[3].Z[1]
stack.subStack[2].cell.anode[3].Z[2]
stack.subStack[2].cell.anode[3].Z[3]
stack.subStack[2].cell.anode[3].Z[4]
stack.subStack[2].cell.anode[3].Z[5]
stack.subStack[2].cell.anode[3].Z[6]
stack.subStack[2].cell.anode[3].Z[7]
stack.subStack[2].cell.anode[3].dUZT[1]
stack.subStack[2].cell.anode[3].dUZT[2]
stack.subStack[2].cell.anode[3].dUZT[3]
stack.subStack[2].cell.anode[3].dUZT[4]
stack.subStack[2].cell.anode[3].dUZT[5]
stack.subStack[2].cell.anode[3].dUZT[6]
stack.subStack[2].cell.anode[3].dUZT[7]
stack.subStack[2].cell.anode[3].h_component[1]
stack.subStack[2].cell.anode[3].h_component[2]
stack.subStack[2].cell.anode[3].h_component[3]
stack.subStack[2].cell.anode[3].h_component[4]
stack.subStack[2].cell.anode[3].h_component[5]
stack.subStack[2].cell.anode[3].h_component[6]
stack.subStack[2].cell.anode[3].h_component[7]
stack.subStack[2].cell.anode[3].s_component[1]
stack.subStack[2].cell.anode[3].s_component[2]
stack.subStack[2].cell.anode[3].s_component[3]
stack.subStack[2].cell.anode[3].s_component[4]
stack.subStack[2].cell.anode[3].s_component[5]
stack.subStack[2].cell.anode[3].s_component[6]
stack.subStack[2].cell.anode[3].s_component[7]
stack.subStack[2].cell.anode[3].u_comp[1]
stack.subStack[2].cell.anode[3].u_comp[2]
stack.subStack[2].cell.anode[3].u_comp[3]
stack.subStack[2].cell.anode[3].u_comp[4]
stack.subStack[2].cell.anode[3].u_comp[5]
stack.subStack[2].cell.anode[3].u_comp[6]
stack.subStack[2].cell.anode[3].u_comp[7]
stack.subStack[2].cell.anode[3].cp
stack.subStack[2].cell.anode[3].g_formation[1]
stack.subStack[2].cell.anode[3].g_formation[2]
stack.subStack[2].cell.anode[3].g_formation[3]
stack.subStack[2].cell.anode[3].g_formation[4]
stack.subStack[2].cell.anode[3].g_formation[5]
stack.subStack[2].cell.anode[3].g_formation[6]
stack.subStack[2].cell.anode[3].g_formation[7]
stack.subStack[2].cell.anode[3].ddTp
stack.subStack[2].cell.anode[3].ddpT
stack.subStack[2].cell.anode[3].dupT
stack.subStack[2].cell.anode[3].duTp
stack.subStack[2].cell.anode[3].ddx[1]
stack.subStack[2].cell.anode[3].ddx[2]
stack.subStack[2].cell.anode[3].ddx[3]
stack.subStack[2].cell.anode[3].ddx[4]
stack.subStack[2].cell.anode[3].ddx[5]
stack.subStack[2].cell.anode[3].ddx[6]
stack.subStack[2].cell.anode[3].ddx[7]
stack.subStack[2].cell.anode[4].X[1]
stack.subStack[2].cell.anode[4].X[2]
stack.subStack[2].cell.anode[4].X[3]
stack.subStack[2].cell.anode[4].X[4]
stack.subStack[2].cell.anode[4].X[5]
stack.subStack[2].cell.anode[4].X[6]
stack.subStack[2].cell.anode[4].X[7]
stack.subStack[2].cell.anode[4].Xi[1]
stack.subStack[2].cell.anode[4].Xi[2]
stack.subStack[2].cell.anode[4].Xi[3]
stack.subStack[2].cell.anode[4].Xi[4]
stack.subStack[2].cell.anode[4].Xi[5]
stack.subStack[2].cell.anode[4].Xi[6]
stack.subStack[2].cell.anode[4].Xi[7]
stack.subStack[2].cell.anode[4].d
stack.subStack[2].cell.anode[4].h
stack.subStack[2].cell.anode[4].u
stack.subStack[2].cell.anode[4].Rg
stack.subStack[2].cell.anode[4].MM
stack.subStack[2].cell.anode[4].assertlevel
stack.subStack[2].cell.anode[4].state.p
stack.subStack[2].cell.anode[4].state.T
stack.subStack[2].cell.anode[4].state.X[1]
stack.subStack[2].cell.anode[4].state.X[2]
stack.subStack[2].cell.anode[4].state.X[3]
stack.subStack[2].cell.anode[4].state.X[4]
stack.subStack[2].cell.anode[4].state.X[5]
stack.subStack[2].cell.anode[4].state.X[6]
stack.subStack[2].cell.anode[4].state.X[7]
stack.subStack[2].cell.anode[4].preferredMediumStates
stack.subStack[2].cell.anode[4].T_degC
stack.subStack[2].cell.anode[4].p_bar
stack.subStack[2].cell.anode[4].Z[1]
stack.subStack[2].cell.anode[4].Z[2]
stack.subStack[2].cell.anode[4].Z[3]
stack.subStack[2].cell.anode[4].Z[4]
stack.subStack[2].cell.anode[4].Z[5]
stack.subStack[2].cell.anode[4].Z[6]
stack.subStack[2].cell.anode[4].Z[7]
stack.subStack[2].cell.anode[4].dUZT[1]
stack.subStack[2].cell.anode[4].dUZT[2]
stack.subStack[2].cell.anode[4].dUZT[3]
stack.subStack[2].cell.anode[4].dUZT[4]
stack.subStack[2].cell.anode[4].dUZT[5]
stack.subStack[2].cell.anode[4].dUZT[6]
stack.subStack[2].cell.anode[4].dUZT[7]
stack.subStack[2].cell.anode[4].h_component[1]
stack.subStack[2].cell.anode[4].h_component[2]
stack.subStack[2].cell.anode[4].h_component[3]
stack.subStack[2].cell.anode[4].h_component[4]
stack.subStack[2].cell.anode[4].h_component[5]
stack.subStack[2].cell.anode[4].h_component[6]
stack.subStack[2].cell.anode[4].h_component[7]
stack.subStack[2].cell.anode[4].s_component[1]
stack.subStack[2].cell.anode[4].s_component[2]
stack.subStack[2].cell.anode[4].s_component[3]
stack.subStack[2].cell.anode[4].s_component[4]
stack.subStack[2].cell.anode[4].s_component[5]
stack.subStack[2].cell.anode[4].s_component[6]
stack.subStack[2].cell.anode[4].s_component[7]
stack.subStack[2].cell.anode[4].u_comp[1]
stack.subStack[2].cell.anode[4].u_comp[2]
stack.subStack[2].cell.anode[4].u_comp[3]
stack.subStack[2].cell.anode[4].u_comp[4]
stack.subStack[2].cell.anode[4].u_comp[5]
stack.subStack[2].cell.anode[4].u_comp[6]
stack.subStack[2].cell.anode[4].u_comp[7]
stack.subStack[2].cell.anode[4].cp
stack.subStack[2].cell.anode[4].g_formation[1]
stack.subStack[2].cell.anode[4].g_formation[2]
stack.subStack[2].cell.anode[4].g_formation[3]
stack.subStack[2].cell.anode[4].g_formation[4]
stack.subStack[2].cell.anode[4].g_formation[5]
stack.subStack[2].cell.anode[4].g_formation[6]
stack.subStack[2].cell.anode[4].g_formation[7]
stack.subStack[2].cell.anode[4].ddTp
stack.subStack[2].cell.anode[4].ddpT
stack.subStack[2].cell.anode[4].dupT
stack.subStack[2].cell.anode[4].duTp
stack.subStack[2].cell.anode[4].ddx[1]
stack.subStack[2].cell.anode[4].ddx[2]
stack.subStack[2].cell.anode[4].ddx[3]
stack.subStack[2].cell.anode[4].ddx[4]
stack.subStack[2].cell.anode[4].ddx[5]
stack.subStack[2].cell.anode[4].ddx[6]
stack.subStack[2].cell.anode[4].ddx[7]
stack.subStack[2].cell.cathode[1].X[1]
stack.subStack[2].cell.cathode[1].X[2]
stack.subStack[2].cell.cathode[1].X[3]
stack.subStack[2].cell.cathode[1].X[4]
stack.subStack[2].cell.cathode[1].X[5]
stack.subStack[2].cell.cathode[1].d
stack.subStack[2].cell.cathode[1].h
stack.subStack[2].cell.cathode[1].u
stack.subStack[2].cell.cathode[1].Rg
stack.subStack[2].cell.cathode[1].MM
stack.subStack[2].cell.cathode[1].assertlevel
stack.subStack[2].cell.cathode[1].state.p
stack.subStack[2].cell.cathode[1].state.T
stack.subStack[2].cell.cathode[1].state.X[1]
stack.subStack[2].cell.cathode[1].state.X[2]
stack.subStack[2].cell.cathode[1].state.X[3]
stack.subStack[2].cell.cathode[1].state.X[4]
stack.subStack[2].cell.cathode[1].state.X[5]
stack.subStack[2].cell.cathode[1].preferredMediumStates
stack.subStack[2].cell.cathode[1].T_degC
stack.subStack[2].cell.cathode[1].p_bar
stack.subStack[2].cell.cathode[1].Z[1]
stack.subStack[2].cell.cathode[1].Z[2]
stack.subStack[2].cell.cathode[1].Z[3]
stack.subStack[2].cell.cathode[1].Z[4]
stack.subStack[2].cell.cathode[1].Z[5]
stack.subStack[2].cell.cathode[1].dUZT[1]
stack.subStack[2].cell.cathode[1].dUZT[2]
stack.subStack[2].cell.cathode[1].dUZT[3]
stack.subStack[2].cell.cathode[1].dUZT[4]
stack.subStack[2].cell.cathode[1].dUZT[5]
stack.subStack[2].cell.cathode[1].h_component[1]
stack.subStack[2].cell.cathode[1].h_component[2]
stack.subStack[2].cell.cathode[1].h_component[3]
stack.subStack[2].cell.cathode[1].h_component[4]
stack.subStack[2].cell.cathode[1].h_component[5]
stack.subStack[2].cell.cathode[1].s_component[1]
stack.subStack[2].cell.cathode[1].s_component[2]
stack.subStack[2].cell.cathode[1].s_component[3]
stack.subStack[2].cell.cathode[1].s_component[4]
stack.subStack[2].cell.cathode[1].s_component[5]
stack.subStack[2].cell.cathode[1].u_comp[1]
stack.subStack[2].cell.cathode[1].u_comp[2]
stack.subStack[2].cell.cathode[1].u_comp[3]
stack.subStack[2].cell.cathode[1].u_comp[4]
stack.subStack[2].cell.cathode[1].u_comp[5]
stack.subStack[2].cell.cathode[1].cp
stack.subStack[2].cell.cathode[1].g_formation[1]
stack.subStack[2].cell.cathode[1].g_formation[2]
stack.subStack[2].cell.cathode[1].g_formation[3]
stack.subStack[2].cell.cathode[1].g_formation[4]
stack.subStack[2].cell.cathode[1].g_formation[5]
stack.subStack[2].cell.cathode[1].ddTp
stack.subStack[2].cell.cathode[1].ddpT
stack.subStack[2].cell.cathode[1].dupT
stack.subStack[2].cell.cathode[1].duTp
stack.subStack[2].cell.cathode[1].ddx[1]
stack.subStack[2].cell.cathode[1].ddx[2]
stack.subStack[2].cell.cathode[1].ddx[3]
stack.subStack[2].cell.cathode[1].ddx[4]
stack.subStack[2].cell.cathode[1].ddx[5]
stack.subStack[2].cell.cathode[2].X[1]
stack.subStack[2].cell.cathode[2].X[2]
stack.subStack[2].cell.cathode[2].X[3]
stack.subStack[2].cell.cathode[2].X[4]
stack.subStack[2].cell.cathode[2].X[5]
stack.subStack[2].cell.cathode[2].der(X[1])
stack.subStack[2].cell.cathode[2].der(X[2])
stack.subStack[2].cell.cathode[2].der(X[3])
stack.subStack[2].cell.cathode[2].der(X[4])
stack.subStack[2].cell.cathode[2].der(X[5])
stack.subStack[2].cell.cathode[2].d
stack.subStack[2].cell.cathode[2].h
stack.subStack[2].cell.cathode[2].u
stack.subStack[2].cell.cathode[2].Rg
stack.subStack[2].cell.cathode[2].MM
stack.subStack[2].cell.cathode[2].assertlevel
stack.subStack[2].cell.cathode[2].state.p
stack.subStack[2].cell.cathode[2].state.T
stack.subStack[2].cell.cathode[2].state.X[1]
stack.subStack[2].cell.cathode[2].state.X[2]
stack.subStack[2].cell.cathode[2].state.X[3]
stack.subStack[2].cell.cathode[2].state.X[4]
stack.subStack[2].cell.cathode[2].state.X[5]
stack.subStack[2].cell.cathode[2].preferredMediumStates
stack.subStack[2].cell.cathode[2].T_degC
stack.subStack[2].cell.cathode[2].p_bar
stack.subStack[2].cell.cathode[2].Z[1]
stack.subStack[2].cell.cathode[2].Z[2]
stack.subStack[2].cell.cathode[2].Z[3]
stack.subStack[2].cell.cathode[2].Z[4]
stack.subStack[2].cell.cathode[2].Z[5]
stack.subStack[2].cell.cathode[2].dUZT[1]
stack.subStack[2].cell.cathode[2].dUZT[2]
stack.subStack[2].cell.cathode[2].dUZT[3]
stack.subStack[2].cell.cathode[2].dUZT[4]
stack.subStack[2].cell.cathode[2].dUZT[5]
stack.subStack[2].cell.cathode[2].h_component[1]
stack.subStack[2].cell.cathode[2].h_component[2]
stack.subStack[2].cell.cathode[2].h_component[3]
stack.subStack[2].cell.cathode[2].h_component[4]
stack.subStack[2].cell.cathode[2].h_component[5]
stack.subStack[2].cell.cathode[2].s_component[1]
stack.subStack[2].cell.cathode[2].s_component[2]
stack.subStack[2].cell.cathode[2].s_component[3]
stack.subStack[2].cell.cathode[2].s_component[4]
stack.subStack[2].cell.cathode[2].s_component[5]
stack.subStack[2].cell.cathode[2].u_comp[1]
stack.subStack[2].cell.cathode[2].u_comp[2]
stack.subStack[2].cell.cathode[2].u_comp[3]
stack.subStack[2].cell.cathode[2].u_comp[4]
stack.subStack[2].cell.cathode[2].u_comp[5]
stack.subStack[2].cell.cathode[2].cp
stack.subStack[2].cell.cathode[2].g_formation[1]
stack.subStack[2].cell.cathode[2].g_formation[2]
stack.subStack[2].cell.cathode[2].g_formation[3]
stack.subStack[2].cell.cathode[2].g_formation[4]
stack.subStack[2].cell.cathode[2].g_formation[5]
stack.subStack[2].cell.cathode[2].ddTp
stack.subStack[2].cell.cathode[2].ddpT
stack.subStack[2].cell.cathode[2].dupT
stack.subStack[2].cell.cathode[2].duTp
stack.subStack[2].cell.cathode[2].ddx[1]
stack.subStack[2].cell.cathode[2].ddx[2]
stack.subStack[2].cell.cathode[2].ddx[3]
stack.subStack[2].cell.cathode[2].ddx[4]
stack.subStack[2].cell.cathode[2].ddx[5]
stack.subStack[2].cell.cathode[3].X[1]
stack.subStack[2].cell.cathode[3].X[2]
stack.subStack[2].cell.cathode[3].X[3]
stack.subStack[2].cell.cathode[3].X[4]
stack.subStack[2].cell.cathode[3].X[5]
stack.subStack[2].cell.cathode[3].der(X[1])
stack.subStack[2].cell.cathode[3].der(X[2])
stack.subStack[2].cell.cathode[3].der(X[3])
stack.subStack[2].cell.cathode[3].der(X[4])
stack.subStack[2].cell.cathode[3].der(X[5])
stack.subStack[2].cell.cathode[3].d
stack.subStack[2].cell.cathode[3].h
stack.subStack[2].cell.cathode[3].u
stack.subStack[2].cell.cathode[3].Rg
stack.subStack[2].cell.cathode[3].MM
stack.subStack[2].cell.cathode[3].assertlevel
stack.subStack[2].cell.cathode[3].state.p
stack.subStack[2].cell.cathode[3].state.T
stack.subStack[2].cell.cathode[3].state.X[1]
stack.subStack[2].cell.cathode[3].state.X[2]
stack.subStack[2].cell.cathode[3].state.X[3]
stack.subStack[2].cell.cathode[3].state.X[4]
stack.subStack[2].cell.cathode[3].state.X[5]
stack.subStack[2].cell.cathode[3].preferredMediumStates
stack.subStack[2].cell.cathode[3].T_degC
stack.subStack[2].cell.cathode[3].p_bar
stack.subStack[2].cell.cathode[3].Z[1]
stack.subStack[2].cell.cathode[3].Z[2]
stack.subStack[2].cell.cathode[3].Z[3]
stack.subStack[2].cell.cathode[3].Z[4]
stack.subStack[2].cell.cathode[3].Z[5]
stack.subStack[2].cell.cathode[3].dUZT[1]
stack.subStack[2].cell.cathode[3].dUZT[2]
stack.subStack[2].cell.cathode[3].dUZT[3]
stack.subStack[2].cell.cathode[3].dUZT[4]
stack.subStack[2].cell.cathode[3].dUZT[5]
stack.subStack[2].cell.cathode[3].h_component[1]
stack.subStack[2].cell.cathode[3].h_component[2]
stack.subStack[2].cell.cathode[3].h_component[3]
stack.subStack[2].cell.cathode[3].h_component[4]
stack.subStack[2].cell.cathode[3].h_component[5]
stack.subStack[2].cell.cathode[3].s_component[1]
stack.subStack[2].cell.cathode[3].s_component[2]
stack.subStack[2].cell.cathode[3].s_component[3]
stack.subStack[2].cell.cathode[3].s_component[4]
stack.subStack[2].cell.cathode[3].s_component[5]
stack.subStack[2].cell.cathode[3].u_comp[1]
stack.subStack[2].cell.cathode[3].u_comp[2]
stack.subStack[2].cell.cathode[3].u_comp[3]
stack.subStack[2].cell.cathode[3].u_comp[4]
stack.subStack[2].cell.cathode[3].u_comp[5]
stack.subStack[2].cell.cathode[3].cp
stack.subStack[2].cell.cathode[3].g_formation[1]
stack.subStack[2].cell.cathode[3].g_formation[2]
stack.subStack[2].cell.cathode[3].g_formation[3]
stack.subStack[2].cell.cathode[3].g_formation[4]
stack.subStack[2].cell.cathode[3].g_formation[5]
stack.subStack[2].cell.cathode[3].ddTp
stack.subStack[2].cell.cathode[3].ddpT
stack.subStack[2].cell.cathode[3].dupT
stack.subStack[2].cell.cathode[3].duTp
stack.subStack[2].cell.cathode[3].ddx[1]
stack.subStack[2].cell.cathode[3].ddx[2]
stack.subStack[2].cell.cathode[3].ddx[3]
stack.subStack[2].cell.cathode[3].ddx[4]
stack.subStack[2].cell.cathode[3].ddx[5]
stack.subStack[2].cell.cathode[4].X[1]
stack.subStack[2].cell.cathode[4].X[2]
stack.subStack[2].cell.cathode[4].X[3]
stack.subStack[2].cell.cathode[4].X[4]
stack.subStack[2].cell.cathode[4].X[5]
stack.subStack[2].cell.cathode[4].der(X[1])
stack.subStack[2].cell.cathode[4].der(X[2])
stack.subStack[2].cell.cathode[4].der(X[3])
stack.subStack[2].cell.cathode[4].der(X[4])
stack.subStack[2].cell.cathode[4].der(X[5])
stack.subStack[2].cell.cathode[4].d
stack.subStack[2].cell.cathode[4].h
stack.subStack[2].cell.cathode[4].u
stack.subStack[2].cell.cathode[4].Rg
stack.subStack[2].cell.cathode[4].MM
stack.subStack[2].cell.cathode[4].assertlevel
stack.subStack[2].cell.cathode[4].state.p
stack.subStack[2].cell.cathode[4].state.T
stack.subStack[2].cell.cathode[4].state.X[1]
stack.subStack[2].cell.cathode[4].state.X[2]
stack.subStack[2].cell.cathode[4].state.X[3]
stack.subStack[2].cell.cathode[4].state.X[4]
stack.subStack[2].cell.cathode[4].state.X[5]
stack.subStack[2].cell.cathode[4].preferredMediumStates
stack.subStack[2].cell.cathode[4].T_degC
stack.subStack[2].cell.cathode[4].p_bar
stack.subStack[2].cell.cathode[4].Z[1]
stack.subStack[2].cell.cathode[4].Z[2]
stack.subStack[2].cell.cathode[4].Z[3]
stack.subStack[2].cell.cathode[4].Z[4]
stack.subStack[2].cell.cathode[4].Z[5]
stack.subStack[2].cell.cathode[4].dUZT[1]
stack.subStack[2].cell.cathode[4].dUZT[2]
stack.subStack[2].cell.cathode[4].dUZT[3]
stack.subStack[2].cell.cathode[4].dUZT[4]
stack.subStack[2].cell.cathode[4].dUZT[5]
stack.subStack[2].cell.cathode[4].h_component[1]
stack.subStack[2].cell.cathode[4].h_component[2]
stack.subStack[2].cell.cathode[4].h_component[3]
stack.subStack[2].cell.cathode[4].h_component[4]
stack.subStack[2].cell.cathode[4].h_component[5]
stack.subStack[2].cell.cathode[4].s_component[1]
stack.subStack[2].cell.cathode[4].s_component[2]
stack.subStack[2].cell.cathode[4].s_component[3]
stack.subStack[2].cell.cathode[4].s_component[4]
stack.subStack[2].cell.cathode[4].s_component[5]
stack.subStack[2].cell.cathode[4].u_comp[1]
stack.subStack[2].cell.cathode[4].u_comp[2]
stack.subStack[2].cell.cathode[4].u_comp[3]
stack.subStack[2].cell.cathode[4].u_comp[4]
stack.subStack[2].cell.cathode[4].u_comp[5]
stack.subStack[2].cell.cathode[4].cp
stack.subStack[2].cell.cathode[4].g_formation[1]
stack.subStack[2].cell.cathode[4].g_formation[2]
stack.subStack[2].cell.cathode[4].g_formation[3]
stack.subStack[2].cell.cathode[4].g_formation[4]
stack.subStack[2].cell.cathode[4].g_formation[5]
stack.subStack[2].cell.cathode[4].ddTp
stack.subStack[2].cell.cathode[4].ddpT
stack.subStack[2].cell.cathode[4].dupT
stack.subStack[2].cell.cathode[4].duTp
stack.subStack[2].cell.cathode[4].ddx[1]
stack.subStack[2].cell.cathode[4].ddx[2]
stack.subStack[2].cell.cathode[4].ddx[3]
stack.subStack[2].cell.cathode[4].ddx[4]
stack.subStack[2].cell.cathode[4].ddx[5]
stack.subStack[2].cell.der_T_cell[1]
stack.subStack[2].cell.der_T_cell[2]
stack.subStack[2].cell.der_T_cell[3]
stack.subStack[2].cell.der_T_cell[4]
stack.subStack[2].cell.sum_Q_cell
stack.subStack[2].cell.P_cell[1]
stack.subStack[2].cell.P_cell[2]
stack.subStack[2].cell.P_cell[3]
stack.subStack[2].cell.P_cell[4]
stack.subStack[2].cell.j_Ionic[1]
stack.subStack[2].cell.j_Ionic[2]
stack.subStack[2].cell.j_Ionic[3]
stack.subStack[2].cell.j_Ionic[4]
stack.subStack[2].cell.T_degC
stack.subStack[2].cell.mXi_flow_an[1, 2]
stack.subStack[2].cell.mXi_flow_an[1, 3]
stack.subStack[2].cell.mXi_flow_an[1, 4]
stack.subStack[2].cell.mXi_flow_an[1, 6]
stack.subStack[2].cell.mXi_flow_an[1, 7]
stack.subStack[2].cell.mXi_flow_an[2, 2]
stack.subStack[2].cell.mXi_flow_an[2, 3]
stack.subStack[2].cell.mXi_flow_an[2, 4]
stack.subStack[2].cell.mXi_flow_an[2, 6]
stack.subStack[2].cell.mXi_flow_an[2, 7]
stack.subStack[2].cell.mXi_flow_an[3, 2]
stack.subStack[2].cell.mXi_flow_an[3, 3]
stack.subStack[2].cell.mXi_flow_an[3, 4]
stack.subStack[2].cell.mXi_flow_an[3, 6]
stack.subStack[2].cell.mXi_flow_an[3, 7]
stack.subStack[2].cell.mXi_flow_an[4, 2]
stack.subStack[2].cell.mXi_flow_an[4, 3]
stack.subStack[2].cell.mXi_flow_an[4, 4]
stack.subStack[2].cell.mXi_flow_an[4, 6]
stack.subStack[2].cell.mXi_flow_an[4, 7]
stack.subStack[2].cell.S_ionic[1]
stack.subStack[2].cell.S_ionic[2]
stack.subStack[2].cell.S_ionic[3]
stack.subStack[2].cell.S_ionic[4]
stack.subStack[2].cell.S_ionic[5]
stack.subStack[2].cell.S_ionic[6]
stack.subStack[2].cell.S_ionic[7]
stack.subStack[2].cell.ASR0
stack.subStack[2].cell.Ea
stack.subStack[2].cell.T0
stack.subStack[2].cell.V_nernst[1]
stack.subStack[2].cell.V_nernst[2]
stack.subStack[2].cell.V_nernst[3]
stack.subStack[2].cell.V_nernst[4]
stack.subStack[2].cell.r_Int[1]
stack.subStack[2].cell.r_Int[2]
stack.subStack[2].cell.r_Int[3]
stack.subStack[2].cell.r_Int[4]
stack.subStack[2].cell.ASR[1]
stack.subStack[2].cell.ASR[2]
stack.subStack[2].cell.ASR[3]
stack.subStack[2].cell.ASR[4]
stack.subStack[2].cell.g_reaction[1]
stack.subStack[2].cell.g_reaction[2]
stack.subStack[2].cell.g_reaction[3]
stack.subStack[2].cell.g_reaction[4]
stack.subStack[2].cell.pH2[1]
stack.subStack[2].cell.pH2[2]
stack.subStack[2].cell.pH2[3]
stack.subStack[2].cell.pH2[4]
stack.subStack[2].cell.pH2O[1]
stack.subStack[2].cell.pH2O[2]
stack.subStack[2].cell.pH2O[3]
stack.subStack[2].cell.pH2O[4]
stack.subStack[2].cell.pO2[1]
stack.subStack[2].cell.pO2[2]
stack.subStack[2].cell.pO2[3]
stack.subStack[2].cell.pO2[4]
stack.subStack[2].cell.internalRes[1].T_ref
stack.subStack[2].cell.internalRes[1].alpha
stack.subStack[2].cell.internalRes[1].v
stack.subStack[2].cell.internalRes[1].i
stack.subStack[2].cell.internalRes[1].n.v
stack.subStack[2].cell.internalRes[1].useHeatPort
stack.subStack[2].cell.internalRes[1].T
stack.subStack[2].cell.internalRes[1].LossPower
stack.subStack[2].cell.internalRes[1].R_actual
stack.subStack[2].cell.internalRes[2].T_ref
stack.subStack[2].cell.internalRes[2].alpha
stack.subStack[2].cell.internalRes[2].v
stack.subStack[2].cell.internalRes[2].i
stack.subStack[2].cell.internalRes[2].n.v
stack.subStack[2].cell.internalRes[2].useHeatPort
stack.subStack[2].cell.internalRes[2].T
stack.subStack[2].cell.internalRes[2].LossPower
stack.subStack[2].cell.internalRes[2].R_actual
stack.subStack[2].cell.internalRes[3].T_ref
stack.subStack[2].cell.internalRes[3].alpha
stack.subStack[2].cell.internalRes[3].v
stack.subStack[2].cell.internalRes[3].i
stack.subStack[2].cell.internalRes[3].n.v
stack.subStack[2].cell.internalRes[3].useHeatPort
stack.subStack[2].cell.internalRes[3].T
stack.subStack[2].cell.internalRes[3].LossPower
stack.subStack[2].cell.internalRes[3].R_actual
stack.subStack[2].cell.internalRes[4].T_ref
stack.subStack[2].cell.internalRes[4].alpha
stack.subStack[2].cell.internalRes[4].v
stack.subStack[2].cell.internalRes[4].i
stack.subStack[2].cell.internalRes[4].n.v
stack.subStack[2].cell.internalRes[4].useHeatPort
stack.subStack[2].cell.internalRes[4].T
stack.subStack[2].cell.internalRes[4].LossPower
stack.subStack[2].cell.internalRes[4].R_actual
stack.subStack[2].cell.ref[1]
stack.subStack[2].cell.ref[2]
stack.subStack[2].cell.air[1]
stack.subStack[2].pin_n.i
stack.subStack[2].feed_anode.h_outflow
stack.subStack[2].drain_anode.h_outflow
stack.subStack[2].feed_cathode.h_outflow
stack.subStack[2].drain_cathode.h_outflow
stack.subStack[2].wall[1].Q_flow
stack.subStack[2].wall[2].Q_flow
stack.subStack[2].wall[3].Q_flow
stack.subStack[2].wall[4].Q_flow
stack.subStack[2].pi
stack.subStack[2].n_channels_anode
stack.subStack[2].L_anode
stack.subStack[2].D_anode
stack.subStack[2].Dhyd_anode
stack.subStack[2].C_anode
stack.subStack[2].A_anode
stack.subStack[2].V_anode
stack.subStack[2].A_heat_anode
stack.subStack[2].n_channels_cathode
stack.subStack[2].L_cathode
stack.subStack[2].D_cathode
stack.subStack[2].Dhyd_cathode
stack.subStack[2].C_cathode
stack.subStack[2].A_cathode
stack.subStack[2].V_cathode
stack.subStack[2].A_heat_cathode
stack.subStack[2].n
stack.subStack[2].initOpt_anode
stack.subStack[2].p_start_in_anode
stack.subStack[2].p_start_out_anode
stack.subStack[2].p_start_anode[1]
stack.subStack[2].p_start_anode[2]
stack.subStack[2].p_start_anode[3]
stack.subStack[2].p_start_anode[4]
stack.subStack[2].p_start_anode[5]
stack.subStack[2].initFromEnthalpy_anode
stack.subStack[2].h_start_in_anode
stack.subStack[2].h_start_out_anode
stack.subStack[2].h_start_anode[1]
stack.subStack[2].h_start_anode[2]
stack.subStack[2].h_start_anode[3]
stack.subStack[2].h_start_anode[4]
stack.subStack[2].h_start_anode[5]
stack.subStack[2].T_start_in_anode
stack.subStack[2].T_start_out_anode
stack.subStack[2].T_start_anode[1]
stack.subStack[2].T_start_anode[2]
stack.subStack[2].T_start_anode[3]
stack.subStack[2].T_start_anode[4]
stack.subStack[2].T_start_anode[5]
stack.subStack[2].X_start_anode[1]
stack.subStack[2].X_start_anode[2]
stack.subStack[2].X_start_anode[3]
stack.subStack[2].X_start_anode[4]
stack.subStack[2].X_start_anode[5]
stack.subStack[2].X_start_anode[6]
stack.subStack[2].X_start_anode[7]
stack.subStack[2].m_flow_start_anode
stack.subStack[2].initOpt_cathode
stack.subStack[2].p_start_in_cathode
stack.subStack[2].p_start_out_cathode
stack.subStack[2].p_start_cathode[1]
stack.subStack[2].p_start_cathode[2]
stack.subStack[2].p_start_cathode[3]
stack.subStack[2].p_start_cathode[4]
stack.subStack[2].p_start_cathode[5]
stack.subStack[2].initFromEnthalpy_cathode
stack.subStack[2].h_start_in_cathode
stack.subStack[2].h_start_out_cathode
stack.subStack[2].h_start_cathode[1]
stack.subStack[2].h_start_cathode[2]
stack.subStack[2].h_start_cathode[3]
stack.subStack[2].h_start_cathode[4]
stack.subStack[2].h_start_cathode[5]
stack.subStack[2].T_start_in_cathode
stack.subStack[2].T_start_out_cathode
stack.subStack[2].T_start_cathode[1]
stack.subStack[2].T_start_cathode[2]
stack.subStack[2].T_start_cathode[3]
stack.subStack[2].T_start_cathode[4]
stack.subStack[2].T_start_cathode[5]
stack.subStack[2].X_start_cathode[1]
stack.subStack[2].X_start_cathode[2]
stack.subStack[2].X_start_cathode[3]
stack.subStack[2].X_start_cathode[4]
stack.subStack[2].X_start_cathode[5]
stack.subStack[2].m_flow_start_cathode
stack.subStack[2].dp_smooth
stack.subStack[2].mflow_smooth
stack.subStack[2].from_dp_anode
stack.subStack[2].positiveFlow_anode
stack.subStack[2].generateEventForReversal_anode
stack.subStack[2].from_dp_cathode
stack.subStack[2].positiveFlow_cathode
stack.subStack[2].generateEventForReversal_cathode
stack.subStack[2].useHeatTransfer_anode
stack.subStack[2].useHeatTransfer_cathode
stack.subStack[2].CF_AnodeSidePressureLoss
stack.subStack[2].CF_AnodeSideHeatTransfer
stack.subStack[2].CF_CathodePressureLoss
stack.subStack[2].CF_CathodeSideHeatTransfer
stack.subStack[2].d0_prox
stack.subStack[2].dp0_prox
stack.subStack[2].m_flow_nom_prox
stack.subStack[2].anode_stoich_num
stack.subStack[2].anode_stoich_den
stack.subStack[2].cathode_stoich_num
stack.subStack[2].cathode_stoich_den
stack.subStack[2].summary.N
stack.subStack[2].summary.n_cell
stack.subStack[2].summary.j_external
stack.subStack[2].summary.V_cell
stack.subStack[2].summary.Q_stack
stack.subStack[2].summary.dp_anode
stack.subStack[2].summary.dp_cathode
stack.subStack[2].anode_channel.summary.dp
stack.subStack[2].anode_channel.summary.m_flow
stack.subStack[2].anode_channel.summary.M
stack.subStack[2].anode_channel.summary.V
stack.subStack[2].anode_channel.summary.d_in
stack.subStack[2].anode_channel.n
stack.subStack[2].anode_channel.pi
stack.subStack[2].anode_channel.n_channels
stack.subStack[2].anode_channel.L
stack.subStack[2].anode_channel.D
stack.subStack[2].anode_channel.Dhyd
stack.subStack[2].anode_channel.A
stack.subStack[2].anode_channel.C
stack.subStack[2].anode_channel.V
stack.subStack[2].anode_channel.A_heat
stack.subStack[2].anode_channel.useHeatTransfer
stack.subStack[2].anode_channel.ni
stack.subStack[2].anode_channel.initOpt
stack.subStack[2].anode_channel.p_start_in
stack.subStack[2].anode_channel.p_start_out
stack.subStack[2].anode_channel.p_start[1]
stack.subStack[2].anode_channel.p_start[2]
stack.subStack[2].anode_channel.p_start[3]
stack.subStack[2].anode_channel.p_start[4]
stack.subStack[2].anode_channel.p_start[5]
stack.subStack[2].anode_channel.initFromEnthalpy
stack.subStack[2].anode_channel.h_start_in
stack.subStack[2].anode_channel.h_start_out
stack.subStack[2].anode_channel.h_start[1]
stack.subStack[2].anode_channel.h_start[2]
stack.subStack[2].anode_channel.h_start[3]
stack.subStack[2].anode_channel.h_start[4]
stack.subStack[2].anode_channel.h_start[5]
stack.subStack[2].anode_channel.T_start_in
stack.subStack[2].anode_channel.T_start_out
stack.subStack[2].anode_channel.T_start[1]
stack.subStack[2].anode_channel.T_start[2]
stack.subStack[2].anode_channel.T_start[3]
stack.subStack[2].anode_channel.T_start[4]
stack.subStack[2].anode_channel.T_start[5]
stack.subStack[2].anode_channel.X_start[1]
stack.subStack[2].anode_channel.X_start[2]
stack.subStack[2].anode_channel.X_start[3]
stack.subStack[2].anode_channel.X_start[4]
stack.subStack[2].anode_channel.X_start[5]
stack.subStack[2].anode_channel.X_start[6]
stack.subStack[2].anode_channel.X_start[7]
stack.subStack[2].anode_channel.m_flow_start
stack.subStack[2].anode_channel.positiveFlow
stack.subStack[2].anode_channel.from_dp
stack.subStack[2].anode_channel.dp_smooth
stack.subStack[2].anode_channel.mflow_smooth
stack.subStack[2].anode_channel.generateEventForReversal
stack.subStack[2].anode_channel.CF_PressureLoss
stack.subStack[2].anode_channel.CF_HeatTransfer
stack.subStack[2].anode_channel.X_weight
stack.subStack[2].anode_channel.y_sat
stack.subStack[2].anode_channel.includeStaticHead
stack.subStack[2].anode_channel.height
stack.subStack[2].anode_channel.g
stack.subStack[2].anode_channel.channel.n
stack.subStack[2].anode_channel.channel.n_channels[1]
stack.subStack[2].anode_channel.channel.n_channels[2]
stack.subStack[2].anode_channel.channel.n_channels[3]
stack.subStack[2].anode_channel.channel.n_channels[4]
stack.subStack[2].anode_channel.channel.L[1]
stack.subStack[2].anode_channel.channel.L[2]
stack.subStack[2].anode_channel.channel.L[3]
stack.subStack[2].anode_channel.channel.L[4]
stack.subStack[2].anode_channel.channel.Dhyd[1]
stack.subStack[2].anode_channel.channel.Dhyd[2]
stack.subStack[2].anode_channel.channel.Dhyd[3]
stack.subStack[2].anode_channel.channel.Dhyd[4]
stack.subStack[2].anode_channel.channel.A[1]
stack.subStack[2].anode_channel.channel.A[2]
stack.subStack[2].anode_channel.channel.A[3]
stack.subStack[2].anode_channel.channel.A[4]
stack.subStack[2].anode_channel.channel.L_total
stack.subStack[2].anode_channel.channel.V[1]
stack.subStack[2].anode_channel.channel.V[2]
stack.subStack[2].anode_channel.channel.V[3]
stack.subStack[2].anode_channel.channel.V[4]
stack.subStack[2].anode_channel.channel.V_tot
stack.subStack[2].anode_channel.channel.A_mean
stack.subStack[2].anode_channel.channel.A_heat[1]
stack.subStack[2].anode_channel.channel.A_heat[2]
stack.subStack[2].anode_channel.channel.A_heat[3]
stack.subStack[2].anode_channel.channel.A_heat[4]
stack.subStack[2].anode_channel.channel.ni
stack.subStack[2].anode_channel.channel.initOpt
stack.subStack[2].anode_channel.channel.p_start_in
stack.subStack[2].anode_channel.channel.p_start_out
stack.subStack[2].anode_channel.channel.p_start[1]
stack.subStack[2].anode_channel.channel.p_start[2]
stack.subStack[2].anode_channel.channel.p_start[3]
stack.subStack[2].anode_channel.channel.p_start[4]
stack.subStack[2].anode_channel.channel.p_start[5]
stack.subStack[2].anode_channel.channel.initFromEnthalpy
stack.subStack[2].anode_channel.channel.h_start_in
stack.subStack[2].anode_channel.channel.h_start_out
stack.subStack[2].anode_channel.channel.h_start[1]
stack.subStack[2].anode_channel.channel.h_start[2]
stack.subStack[2].anode_channel.channel.h_start[3]
stack.subStack[2].anode_channel.channel.h_start[4]
stack.subStack[2].anode_channel.channel.h_start[5]
stack.subStack[2].anode_channel.channel.T_start_in
stack.subStack[2].anode_channel.channel.T_start_out
stack.subStack[2].anode_channel.channel.T_start[1]
stack.subStack[2].anode_channel.channel.T_start[2]
stack.subStack[2].anode_channel.channel.T_start[3]
stack.subStack[2].anode_channel.channel.T_start[4]
stack.subStack[2].anode_channel.channel.T_start[5]
stack.subStack[2].anode_channel.channel.X_start[1]
stack.subStack[2].anode_channel.channel.X_start[2]
stack.subStack[2].anode_channel.channel.X_start[3]
stack.subStack[2].anode_channel.channel.X_start[4]
stack.subStack[2].anode_channel.channel.X_start[5]
stack.subStack[2].anode_channel.channel.X_start[6]
stack.subStack[2].anode_channel.channel.X_start[7]
stack.subStack[2].anode_channel.channel.m_flow_start
stack.subStack[2].anode_channel.channel.positiveFlow
stack.subStack[2].anode_channel.channel.from_dp
stack.subStack[2].anode_channel.channel.dp_smooth
stack.subStack[2].anode_channel.channel.mflow_smooth
stack.subStack[2].anode_channel.channel.generateEventForReversal
stack.subStack[2].anode_channel.channel.NA
stack.subStack[2].anode_channel.channel.NB
stack.subStack[2].anode_channel.channel.T[1]
stack.subStack[2].anode_channel.channel.der(T[1])
stack.subStack[2].anode_channel.channel.T[2]
stack.subStack[2].anode_channel.channel.der(T[2])
stack.subStack[2].anode_channel.channel.T[3]
stack.subStack[2].anode_channel.channel.der(T[3])
stack.subStack[2].anode_channel.channel.T[4]
stack.subStack[2].anode_channel.channel.der(T[4])
stack.subStack[2].anode_channel.channel.dp_asState
stack.subStack[2].anode_channel.channel.frictionDistribution
stack.subStack[2].anode_channel.channel.n_fric
stack.subStack[2].anode_channel.channel.CF_PressureLoss
stack.subStack[2].anode_channel.channel.CF_HeatTransfer
stack.subStack[2].anode_channel.channel.includeStaticHead
stack.subStack[2].anode_channel.channel.levels[1]
stack.subStack[2].anode_channel.channel.levels[2]
stack.subStack[2].anode_channel.channel.levels[3]
stack.subStack[2].anode_channel.channel.levels[4]
stack.subStack[2].anode_channel.channel.g
stack.subStack[2].anode_channel.channel.friction[1].A
stack.subStack[2].anode_channel.channel.friction[1].Dhyd
stack.subStack[2].anode_channel.channel.friction[1].n_channels
stack.subStack[2].anode_channel.channel.friction[1].lengthFraction
stack.subStack[2].anode_channel.channel.friction[1].flowFraction0
stack.subStack[2].anode_channel.channel.friction[1].dpFraction0
stack.subStack[2].anode_channel.channel.friction[1].from_dp
stack.subStack[2].anode_channel.channel.friction[1].positiveFlow
stack.subStack[2].anode_channel.channel.friction[1].dp_smooth
stack.subStack[2].anode_channel.channel.friction[1].mflow_smooth
stack.subStack[2].anode_channel.channel.friction[1].useFixedDensity
stack.subStack[2].anode_channel.channel.friction[1].reference_d
stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[1].dp_from_isothermal
stack.subStack[2].anode_channel.channel.friction[1].m_flow
stack.subStack[2].anode_channel.channel.friction[1].dA
stack.subStack[2].anode_channel.channel.friction[1].dB
stack.subStack[2].anode_channel.channel.friction[1].d0
stack.subStack[2].anode_channel.channel.friction[1].dp0
stack.subStack[2].anode_channel.channel.friction[1].m_flow0
stack.subStack[2].anode_channel.channel.friction[2].A
stack.subStack[2].anode_channel.channel.friction[2].Dhyd
stack.subStack[2].anode_channel.channel.friction[2].n_channels
stack.subStack[2].anode_channel.channel.friction[2].lengthFraction
stack.subStack[2].anode_channel.channel.friction[2].flowFraction0
stack.subStack[2].anode_channel.channel.friction[2].dpFraction0
stack.subStack[2].anode_channel.channel.friction[2].from_dp
stack.subStack[2].anode_channel.channel.friction[2].positiveFlow
stack.subStack[2].anode_channel.channel.friction[2].dp_smooth
stack.subStack[2].anode_channel.channel.friction[2].mflow_smooth
stack.subStack[2].anode_channel.channel.friction[2].useFixedDensity
stack.subStack[2].anode_channel.channel.friction[2].reference_d
stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[2].dp_from_isothermal
stack.subStack[2].anode_channel.channel.friction[2].m_flow
stack.subStack[2].anode_channel.channel.friction[2].dA
stack.subStack[2].anode_channel.channel.friction[2].dB
stack.subStack[2].anode_channel.channel.friction[2].d0
stack.subStack[2].anode_channel.channel.friction[2].dp0
stack.subStack[2].anode_channel.channel.friction[2].m_flow0
stack.subStack[2].anode_channel.channel.friction[3].A
stack.subStack[2].anode_channel.channel.friction[3].Dhyd
stack.subStack[2].anode_channel.channel.friction[3].n_channels
stack.subStack[2].anode_channel.channel.friction[3].lengthFraction
stack.subStack[2].anode_channel.channel.friction[3].flowFraction0
stack.subStack[2].anode_channel.channel.friction[3].dpFraction0
stack.subStack[2].anode_channel.channel.friction[3].from_dp
stack.subStack[2].anode_channel.channel.friction[3].positiveFlow
stack.subStack[2].anode_channel.channel.friction[3].dp_smooth
stack.subStack[2].anode_channel.channel.friction[3].mflow_smooth
stack.subStack[2].anode_channel.channel.friction[3].useFixedDensity
stack.subStack[2].anode_channel.channel.friction[3].reference_d
stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[3].dp_from_isothermal
stack.subStack[2].anode_channel.channel.friction[3].m_flow
stack.subStack[2].anode_channel.channel.friction[3].dA
stack.subStack[2].anode_channel.channel.friction[3].dB
stack.subStack[2].anode_channel.channel.friction[3].d0
stack.subStack[2].anode_channel.channel.friction[3].dp0
stack.subStack[2].anode_channel.channel.friction[3].m_flow0
stack.subStack[2].anode_channel.channel.friction[4].A
stack.subStack[2].anode_channel.channel.friction[4].Dhyd
stack.subStack[2].anode_channel.channel.friction[4].n_channels
stack.subStack[2].anode_channel.channel.friction[4].lengthFraction
stack.subStack[2].anode_channel.channel.friction[4].flowFraction0
stack.subStack[2].anode_channel.channel.friction[4].dpFraction0
stack.subStack[2].anode_channel.channel.friction[4].from_dp
stack.subStack[2].anode_channel.channel.friction[4].positiveFlow
stack.subStack[2].anode_channel.channel.friction[4].dp_smooth
stack.subStack[2].anode_channel.channel.friction[4].mflow_smooth
stack.subStack[2].anode_channel.channel.friction[4].useFixedDensity
stack.subStack[2].anode_channel.channel.friction[4].reference_d
stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[1]
stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[2]
stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[3]
stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[4]
stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[5]
stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[6]
stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[7]
stack.subStack[2].anode_channel.channel.friction[4].dp_from_isothermal
stack.subStack[2].anode_channel.channel.friction[4].m_flow
stack.subStack[2].anode_channel.channel.friction[4].dA
stack.subStack[2].anode_channel.channel.friction[4].dB
stack.subStack[2].anode_channel.channel.friction[4].d0
stack.subStack[2].anode_channel.channel.friction[4].dp0
stack.subStack[2].anode_channel.channel.friction[4].m_flow0
stack.subStack[2].anode_channel.channel.htcoeff[1].A
stack.subStack[2].anode_channel.channel.htcoeff[1].L
stack.subStack[2].anode_channel.channel.htcoeff[1].Dhyd
stack.subStack[2].anode_channel.channel.htcoeff[1].m_flow
stack.subStack[2].anode_channel.channel.htcoeff[1].ht_from_isothermal
stack.subStack[2].anode_channel.channel.htcoeff[1].CF_length
stack.subStack[2].anode_channel.channel.htcoeff[1].alpha
stack.subStack[2].anode_channel.channel.htcoeff[2].A
stack.subStack[2].anode_channel.channel.htcoeff[2].L
stack.subStack[2].anode_channel.channel.htcoeff[2].Dhyd
stack.subStack[2].anode_channel.channel.htcoeff[2].m_flow
stack.subStack[2].anode_channel.channel.htcoeff[2].ht_from_isothermal
stack.subStack[2].anode_channel.channel.htcoeff[2].CF_length
stack.subStack[2].anode_channel.channel.htcoeff[2].alpha
stack.subStack[2].anode_channel.channel.htcoeff[3].A
stack.subStack[2].anode_channel.channel.htcoeff[3].L
stack.subStack[2].anode_channel.channel.htcoeff[3].Dhyd
stack.subStack[2].anode_channel.channel.htcoeff[3].m_flow
stack.subStack[2].anode_channel.channel.htcoeff[3].ht_from_isothermal
stack.subStack[2].anode_channel.channel.htcoeff[3].CF_length
stack.subStack[2].anode_channel.channel.htcoeff[3].alpha
stack.subStack[2].anode_channel.channel.htcoeff[4].A
stack.subStack[2].anode_channel.channel.htcoeff[4].L
stack.subStack[2].anode_channel.channel.htcoeff[4].Dhyd
stack.subStack[2].anode_channel.channel.htcoeff[4].m_flow
stack.subStack[2].anode_channel.channel.htcoeff[4].ht_from_isothermal
stack.subStack[2].anode_channel.channel.htcoeff[4].CF_length
stack.subStack[2].anode_channel.channel.htcoeff[4].alpha
stack.subStack[2].anode_channel.channel.reaction.N
stack.subStack[2].anode_channel.channel.reaction.Cp_reac[1]
stack.subStack[2].anode_channel.channel.reaction.Cp_reac[2]
stack.subStack[2].anode_channel.channel.reaction.Cp_reac[3]
stack.subStack[2].anode_channel.channel.reaction.Cp_reac[4]
stack.subStack[2].anode_channel.channel.reaction.Q[1]
stack.subStack[2].anode_channel.channel.reaction.Q[2]
stack.subStack[2].anode_channel.channel.reaction.Q[3]
stack.subStack[2].anode_channel.channel.reaction.Q[4]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[1, 1]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[1, 5]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[2, 1]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[2, 5]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[3, 1]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[3, 5]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[4, 1]
stack.subStack[2].anode_channel.channel.reaction.mX_flow[4, 5]
stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 1]
stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 2]
stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 3]
stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 4]
stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 5]
stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 6]
stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 7]
stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 1]
stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 2]
stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 3]
stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 4]
stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 5]
stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 6]
stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 7]
stack.subStack[2].anode_channel.channel.reaction.n_reac
stack.subStack[2].anode_channel.channel.reaction.comp[1]
stack.subStack[2].anode_channel.channel.reaction.comp[2]
stack.subStack[2].anode_channel.channel.reaction.pstart
stack.subStack[2].anode_channel.channel.reaction.Tstart
stack.subStack[2].anode_channel.channel.reaction.Xstart[1]
stack.subStack[2].anode_channel.channel.reaction.Xstart[2]
stack.subStack[2].anode_channel.channel.reaction.Xstart[3]
stack.subStack[2].anode_channel.channel.reaction.Xstart[4]
stack.subStack[2].anode_channel.channel.reaction.Xstart[5]
stack.subStack[2].anode_channel.channel.reaction.Xstart[6]
stack.subStack[2].anode_channel.channel.reaction.Xstart[7]
stack.subStack[2].anode_channel.channel.reaction.V
stack.subStack[2].anode_channel.channel.reaction.scale
stack.subStack[2].anode_channel.channel.reaction.MMX[1]
stack.subStack[2].anode_channel.channel.reaction.MMX[2]
stack.subStack[2].anode_channel.channel.reaction.MMX[3]
stack.subStack[2].anode_channel.channel.reaction.MMX[4]
stack.subStack[2].anode_channel.channel.reaction.MMX[5]
stack.subStack[2].anode_channel.channel.reaction.MMX[6]
stack.subStack[2].anode_channel.channel.reaction.MMX[7]
stack.subStack[2].anode_channel.channel.reaction.MM[1]
stack.subStack[2].anode_channel.channel.reaction.MM[2]
stack.subStack[2].anode_channel.channel.reaction.MM[3]
stack.subStack[2].anode_channel.channel.reaction.MM[4]
stack.subStack[2].anode_channel.channel.reaction.der(MM[1])
stack.subStack[2].anode_channel.channel.reaction.der(MM[2])
stack.subStack[2].anode_channel.channel.reaction.der(MM[3])
stack.subStack[2].anode_channel.channel.reaction.der(MM[4])
stack.subStack[2].anode_channel.channel.reaction.y_start[1]
stack.subStack[2].anode_channel.channel.reaction.y_start[2]
stack.subStack[2].anode_channel.channel.reaction.y_start[3]
stack.subStack[2].anode_channel.channel.reaction.y_start[4]
stack.subStack[2].anode_channel.channel.reaction.y_start[5]
stack.subStack[2].anode_channel.channel.reaction.y_start[6]
stack.subStack[2].anode_channel.channel.reaction.y_start[7]
stack.subStack[2].anode_channel.channel.reaction.log10_y_start[1]
stack.subStack[2].anode_channel.channel.reaction.log10_y_start[2]
stack.subStack[2].anode_channel.channel.reaction.log10_y_start[3]
stack.subStack[2].anode_channel.channel.reaction.log10_y_start[4]
stack.subStack[2].anode_channel.channel.reaction.log10_y_start[5]
stack.subStack[2].anode_channel.channel.reaction.log10_y_start[6]
stack.subStack[2].anode_channel.channel.reaction.log10_y_start[7]
stack.subStack[2].anode_channel.channel.reaction.pref
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 2]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 3]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 4]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 5]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 6]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 7]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 2]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 3]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 4]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 5]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 6]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 7]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 2]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 3]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 4]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 5]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 6]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 7]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 2]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 3]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 4]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 5]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 6]
stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 7]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 2]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[2, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[2, 2]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[3, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[3, 2]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[4, 1]
stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[4, 2]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 1]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 2]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 3]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 4]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 5]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 6]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 7]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 1]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 2]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 3]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 4]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 5]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 6]
stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 7]
stack.subStack[2].anode_channel.channel.reaction.Ztot_start
stack.subStack[2].anode_channel.channel.reaction.Zx_start[1]
stack.subStack[2].anode_channel.channel.reaction.Zx_start[2]
stack.subStack[2].anode_channel.channel.reaction.Zx_start[3]
stack.subStack[2].anode_channel.channel.reaction.Zx_start[4]
stack.subStack[2].anode_channel.channel.reaction.Zx_start[5]
stack.subStack[2].anode_channel.channel.reaction.Zx_start[6]
stack.subStack[2].anode_channel.channel.reaction.Zx_start[7]
stack.subStack[2].anode_channel.channel.reaction.CF_conversion
stack.subStack[2].anode_channel.channel.reaction.Tscale
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[1, 1]
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[1, 2]
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[2, 1]
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[2, 2]
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[3, 1]
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[3, 2]
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[4, 1]
stack.subStack[2].anode_channel.channel.reaction.kEq_reac[4, 2]
stack.subStack[2].anode_channel.channel.reaction.Zx[1, 1]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 1])
stack.subStack[2].anode_channel.channel.reaction.Zx[1, 2]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 2])
stack.subStack[2].anode_channel.channel.reaction.Zx[1, 3]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 3])
stack.subStack[2].anode_channel.channel.reaction.Zx[1, 4]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 4])
stack.subStack[2].anode_channel.channel.reaction.Zx[1, 5]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 5])
stack.subStack[2].anode_channel.channel.reaction.Zx[1, 6]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 6])
stack.subStack[2].anode_channel.channel.reaction.Zx[1, 7]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 7])
stack.subStack[2].anode_channel.channel.reaction.Zx[2, 1]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 1])
stack.subStack[2].anode_channel.channel.reaction.Zx[2, 2]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 2])
stack.subStack[2].anode_channel.channel.reaction.Zx[2, 3]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 3])
stack.subStack[2].anode_channel.channel.reaction.Zx[2, 4]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 4])
stack.subStack[2].anode_channel.channel.reaction.Zx[2, 5]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 5])
stack.subStack[2].anode_channel.channel.reaction.Zx[2, 6]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 6])
stack.subStack[2].anode_channel.channel.reaction.Zx[2, 7]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 7])
stack.subStack[2].anode_channel.channel.reaction.Zx[3, 1]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 1])
stack.subStack[2].anode_channel.channel.reaction.Zx[3, 2]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 2])
stack.subStack[2].anode_channel.channel.reaction.Zx[3, 3]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 3])
stack.subStack[2].anode_channel.channel.reaction.Zx[3, 4]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 4])
stack.subStack[2].anode_channel.channel.reaction.Zx[3, 5]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 5])
stack.subStack[2].anode_channel.channel.reaction.Zx[3, 6]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 6])
stack.subStack[2].anode_channel.channel.reaction.Zx[3, 7]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 7])
stack.subStack[2].anode_channel.channel.reaction.Zx[4, 1]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 1])
stack.subStack[2].anode_channel.channel.reaction.Zx[4, 2]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 2])
stack.subStack[2].anode_channel.channel.reaction.Zx[4, 3]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 3])
stack.subStack[2].anode_channel.channel.reaction.Zx[4, 4]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 4])
stack.subStack[2].anode_channel.channel.reaction.Zx[4, 5]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 5])
stack.subStack[2].anode_channel.channel.reaction.Zx[4, 6]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 6])
stack.subStack[2].anode_channel.channel.reaction.Zx[4, 7]
stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 7])
stack.subStack[2].anode_channel.channel.reaction.Ztot[1]
stack.subStack[2].anode_channel.channel.reaction.Ztot[2]
stack.subStack[2].anode_channel.channel.reaction.Ztot[3]
stack.subStack[2].anode_channel.channel.reaction.Ztot[4]
stack.subStack[2].anode_channel.channel.reaction.der(Ztot[1])
stack.subStack[2].anode_channel.channel.reaction.der(Ztot[2])
stack.subStack[2].anode_channel.channel.reaction.der(Ztot[3])
stack.subStack[2].anode_channel.channel.reaction.der(Ztot[4])
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 1]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 2]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 3]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 4]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 5]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 1]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 2]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 3]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 4]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 5]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 1]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 2]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 3]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 4]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 5]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 1]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 2]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 3]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 4]
stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 5]
stack.subStack[2].anode_channel.channel.reaction.krate[1, 1]
stack.subStack[2].anode_channel.channel.reaction.der(krate[1, 1])
stack.subStack[2].anode_channel.channel.reaction.krate[1, 2]
stack.subStack[2].anode_channel.channel.reaction.der(krate[1, 2])
stack.subStack[2].anode_channel.channel.reaction.krate[2, 1]
stack.subStack[2].anode_channel.channel.reaction.der(krate[2, 1])
stack.subStack[2].anode_channel.channel.reaction.krate[2, 2]
stack.subStack[2].anode_channel.channel.reaction.der(krate[2, 2])
stack.subStack[2].anode_channel.channel.reaction.krate[3, 1]
stack.subStack[2].anode_channel.channel.reaction.der(krate[3, 1])
stack.subStack[2].anode_channel.channel.reaction.krate[3, 2]
stack.subStack[2].anode_channel.channel.reaction.der(krate[3, 2])
stack.subStack[2].anode_channel.channel.reaction.krate[4, 1]
stack.subStack[2].anode_channel.channel.reaction.der(krate[4, 1])
stack.subStack[2].anode_channel.channel.reaction.krate[4, 2]
stack.subStack[2].anode_channel.channel.reaction.der(krate[4, 2])
stack.subStack[2].anode_channel.channel.reaction.rZ[1, 1]
stack.subStack[2].anode_channel.channel.reaction.rZ[1, 2]
stack.subStack[2].anode_channel.channel.reaction.rZ[1, 3]
stack.subStack[2].anode_channel.channel.reaction.rZ[1, 4]
stack.subStack[2].anode_channel.channel.reaction.rZ[1, 5]
stack.subStack[2].anode_channel.channel.reaction.rZ[1, 6]
stack.subStack[2].anode_channel.channel.reaction.rZ[1, 7]
stack.subStack[2].anode_channel.channel.reaction.rZ[2, 1]
stack.subStack[2].anode_channel.channel.reaction.rZ[2, 2]
stack.subStack[2].anode_channel.channel.reaction.rZ[2, 3]
stack.subStack[2].anode_channel.channel.reaction.rZ[2, 4]
stack.subStack[2].anode_channel.channel.reaction.rZ[2, 5]
stack.subStack[2].anode_channel.channel.reaction.rZ[2, 6]
stack.subStack[2].anode_channel.channel.reaction.rZ[2, 7]
stack.subStack[2].anode_channel.channel.reaction.rZ[3, 1]
stack.subStack[2].anode_channel.channel.reaction.rZ[3, 2]
stack.subStack[2].anode_channel.channel.reaction.rZ[3, 3]
stack.subStack[2].anode_channel.channel.reaction.rZ[3, 4]
stack.subStack[2].anode_channel.channel.reaction.rZ[3, 5]
stack.subStack[2].anode_channel.channel.reaction.rZ[3, 6]
stack.subStack[2].anode_channel.channel.reaction.rZ[3, 7]
stack.subStack[2].anode_channel.channel.reaction.rZ[4, 1]
stack.subStack[2].anode_channel.channel.reaction.rZ[4, 2]
stack.subStack[2].anode_channel.channel.reaction.rZ[4, 3]
stack.subStack[2].anode_channel.channel.reaction.rZ[4, 4]
stack.subStack[2].anode_channel.channel.reaction.rZ[4, 5]
stack.subStack[2].anode_channel.channel.reaction.rZ[4, 6]
stack.subStack[2].anode_channel.channel.reaction.rZ[4, 7]
stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 1]
stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 2]
stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 3]
stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 4]
stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 5]
stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 6]
stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 7]
stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 1]
stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 2]
stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 3]
stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 4]
stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 5]
stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 6]
stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 7]
stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 1]
stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 2]
stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 3]
stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 4]
stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 5]
stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 6]
stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 7]
stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 1]
stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 2]
stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 3]
stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 4]
stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 5]
stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 6]
stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 7]
stack.subStack[2].anode_channel.channel.reaction.Zx_nominal
stack.subStack[2].anode_channel.channel.reaction.epsZ
stack.subStack[2].anode_channel.channel.reaction.e[1, 1]
stack.subStack[2].anode_channel.channel.reaction.e[1, 2]
stack.subStack[2].anode_channel.channel.reaction.e[2, 1]
stack.subStack[2].anode_channel.channel.reaction.e[2, 2]
stack.subStack[2].anode_channel.channel.reaction.e[3, 1]
stack.subStack[2].anode_channel.channel.reaction.e[3, 2]
stack.subStack[2].anode_channel.channel.reaction.e[4, 1]
stack.subStack[2].anode_channel.channel.reaction.e[4, 2]
stack.subStack[2].anode_channel.channel.reaction.state[1].p
stack.subStack[2].anode_channel.channel.reaction.state[1].T
stack.subStack[2].anode_channel.channel.reaction.state[1].X[1]
stack.subStack[2].anode_channel.channel.reaction.state[1].X[2]
stack.subStack[2].anode_channel.channel.reaction.state[1].X[3]
stack.subStack[2].anode_channel.channel.reaction.state[1].X[4]
stack.subStack[2].anode_channel.channel.reaction.state[1].X[5]
stack.subStack[2].anode_channel.channel.reaction.state[1].X[6]
stack.subStack[2].anode_channel.channel.reaction.state[1].X[7]
stack.subStack[2].anode_channel.channel.reaction.state[2].p
stack.subStack[2].anode_channel.channel.reaction.state[2].T
stack.subStack[2].anode_channel.channel.reaction.state[2].X[1]
stack.subStack[2].anode_channel.channel.reaction.state[2].X[2]
stack.subStack[2].anode_channel.channel.reaction.state[2].X[3]
stack.subStack[2].anode_channel.channel.reaction.state[2].X[4]
stack.subStack[2].anode_channel.channel.reaction.state[2].X[5]
stack.subStack[2].anode_channel.channel.reaction.state[2].X[6]
stack.subStack[2].anode_channel.channel.reaction.state[2].X[7]
stack.subStack[2].anode_channel.channel.reaction.state[3].p
stack.subStack[2].anode_channel.channel.reaction.state[3].T
stack.subStack[2].anode_channel.channel.reaction.state[3].X[1]
stack.subStack[2].anode_channel.channel.reaction.state[3].X[2]
stack.subStack[2].anode_channel.channel.reaction.state[3].X[3]
stack.subStack[2].anode_channel.channel.reaction.state[3].X[4]
stack.subStack[2].anode_channel.channel.reaction.state[3].X[5]
stack.subStack[2].anode_channel.channel.reaction.state[3].X[6]
stack.subStack[2].anode_channel.channel.reaction.state[3].X[7]
stack.subStack[2].anode_channel.channel.reaction.state[4].p
stack.subStack[2].anode_channel.channel.reaction.state[4].T
stack.subStack[2].anode_channel.channel.reaction.state[4].X[1]
stack.subStack[2].anode_channel.channel.reaction.state[4].X[2]
stack.subStack[2].anode_channel.channel.reaction.state[4].X[3]
stack.subStack[2].anode_channel.channel.reaction.state[4].X[4]
stack.subStack[2].anode_channel.channel.reaction.state[4].X[5]
stack.subStack[2].anode_channel.channel.reaction.state[4].X[6]
stack.subStack[2].anode_channel.channel.reaction.state[4].X[7]
stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 1]
stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 2]
stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 3]
stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 4]
stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 5]
stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 6]
stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 7]
stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 1]
stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 2]
stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 3]
stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 4]
stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 5]
stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 6]
stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 7]
stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 1]
stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 2]
stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 3]
stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 4]
stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 5]
stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 6]
stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 7]
stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 1]
stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 2]
stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 3]
stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 4]
stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 5]
stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 6]
stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 7]
stack.subStack[2].anode_channel.channel.reaction.reactant[1, 1]
stack.subStack[2].anode_channel.channel.reaction.reactant[1, 2]
stack.subStack[2].anode_channel.channel.reaction.reactant[1, 3]
stack.subStack[2].anode_channel.channel.reaction.reactant[1, 4]
stack.subStack[2].anode_channel.channel.reaction.reactant[1, 5]
stack.subStack[2].anode_channel.channel.reaction.reactant[1, 6]
stack.subStack[2].anode_channel.channel.reaction.reactant[1, 7]
stack.subStack[2].anode_channel.channel.reaction.reactant[2, 1]
stack.subStack[2].anode_channel.channel.reaction.reactant[2, 2]
stack.subStack[2].anode_channel.channel.reaction.reactant[2, 3]
stack.subStack[2].anode_channel.channel.reaction.reactant[2, 4]
stack.subStack[2].anode_channel.channel.reaction.reactant[2, 5]
stack.subStack[2].anode_channel.channel.reaction.reactant[2, 6]
stack.subStack[2].anode_channel.channel.reaction.reactant[2, 7]
stack.subStack[2].anode_channel.channel.reaction.rate[1, 1]
stack.subStack[2].anode_channel.channel.reaction.rate[1, 2]
stack.subStack[2].anode_channel.channel.reaction.rate[2, 1]
stack.subStack[2].anode_channel.channel.reaction.rate[2, 2]
stack.subStack[2].anode_channel.channel.reaction.rate[3, 1]
stack.subStack[2].anode_channel.channel.reaction.rate[3, 2]
stack.subStack[2].anode_channel.channel.reaction.rate[4, 1]
stack.subStack[2].anode_channel.channel.reaction.rate[4, 2]
stack.subStack[2].anode_channel.channel.reaction.S_ref[1]
stack.subStack[2].anode_channel.channel.reaction.S_ref[2]
stack.subStack[2].anode_channel.channel.reaction.S_ref[3]
stack.subStack[2].anode_channel.channel.reaction.S_ref[4]
stack.subStack[2].anode_channel.channel.reaction.S_ref[5]
stack.subStack[2].anode_channel.channel.reaction.S_ref[6]
stack.subStack[2].anode_channel.channel.reaction.S_ref[7]
stack.subStack[2].anode_channel.channel.reaction.S_wgs[1]
stack.subStack[2].anode_channel.channel.reaction.S_wgs[2]
stack.subStack[2].anode_channel.channel.reaction.S_wgs[3]
stack.subStack[2].anode_channel.channel.reaction.S_wgs[4]
stack.subStack[2].anode_channel.channel.reaction.S_wgs[5]
stack.subStack[2].anode_channel.channel.reaction.S_wgs[6]
stack.subStack[2].anode_channel.channel.reaction.S_wgs[7]
stack.subStack[2].anode_channel.channel.reaction.index[1]
stack.subStack[2].anode_channel.channel.reaction.index[2]
stack.subStack[2].anode_channel.channel.reaction.T_sat_for_WGS
stack.subStack[2].anode_channel.channel.reaction.g_rere[1]
stack.subStack[2].anode_channel.channel.reaction.g_rere[2]
stack.subStack[2].anode_channel.channel.reaction.g_rere[3]
stack.subStack[2].anode_channel.channel.reaction.g_rere[4]
stack.subStack[2].anode_channel.channel.reaction.g_wgs[1]
stack.subStack[2].anode_channel.channel.reaction.g_wgs[2]
stack.subStack[2].anode_channel.channel.reaction.g_wgs[3]
stack.subStack[2].anode_channel.channel.reaction.g_wgs[4]
stack.subStack[2].anode_channel.channel.gas[1].X[1]
stack.subStack[2].anode_channel.channel.gas[1].X[2]
stack.subStack[2].anode_channel.channel.gas[1].X[3]
stack.subStack[2].anode_channel.channel.gas[1].X[4]
stack.subStack[2].anode_channel.channel.gas[1].X[5]
stack.subStack[2].anode_channel.channel.gas[1].X[6]
stack.subStack[2].anode_channel.channel.gas[1].X[7]
stack.subStack[2].anode_channel.channel.gas[1].der(X[1])
stack.subStack[2].anode_channel.channel.gas[1].der(X[2])
stack.subStack[2].anode_channel.channel.gas[1].der(X[3])
stack.subStack[2].anode_channel.channel.gas[1].der(X[4])
stack.subStack[2].anode_channel.channel.gas[1].der(X[5])
stack.subStack[2].anode_channel.channel.gas[1].der(X[6])
stack.subStack[2].anode_channel.channel.gas[1].der(X[7])
stack.subStack[2].anode_channel.channel.gas[1].Xi[1]
stack.subStack[2].anode_channel.channel.gas[1].Xi[2]
stack.subStack[2].anode_channel.channel.gas[1].Xi[3]
stack.subStack[2].anode_channel.channel.gas[1].Xi[4]
stack.subStack[2].anode_channel.channel.gas[1].Xi[5]
stack.subStack[2].anode_channel.channel.gas[1].Xi[6]
stack.subStack[2].anode_channel.channel.gas[1].Xi[7]
stack.subStack[2].anode_channel.channel.gas[1].d
stack.subStack[2].anode_channel.channel.gas[1].der(d)
stack.subStack[2].anode_channel.channel.gas[1].u
stack.subStack[2].anode_channel.channel.gas[1].Rg
stack.subStack[2].anode_channel.channel.gas[1].der(Rg)
stack.subStack[2].anode_channel.channel.gas[1].MM
stack.subStack[2].anode_channel.channel.gas[1].assertlevel
stack.subStack[2].anode_channel.channel.gas[1].state.p
stack.subStack[2].anode_channel.channel.gas[1].state.T
stack.subStack[2].anode_channel.channel.gas[1].state.X[1]
stack.subStack[2].anode_channel.channel.gas[1].state.X[2]
stack.subStack[2].anode_channel.channel.gas[1].state.X[3]
stack.subStack[2].anode_channel.channel.gas[1].state.X[4]
stack.subStack[2].anode_channel.channel.gas[1].state.X[5]
stack.subStack[2].anode_channel.channel.gas[1].state.X[6]
stack.subStack[2].anode_channel.channel.gas[1].state.X[7]
stack.subStack[2].anode_channel.channel.gas[1].preferredMediumStates
stack.subStack[2].anode_channel.channel.gas[1].T_degC
stack.subStack[2].anode_channel.channel.gas[1].p_bar
stack.subStack[2].anode_channel.channel.gas[1].Z[1]
stack.subStack[2].anode_channel.channel.gas[1].Z[2]
stack.subStack[2].anode_channel.channel.gas[1].Z[3]
stack.subStack[2].anode_channel.channel.gas[1].Z[4]
stack.subStack[2].anode_channel.channel.gas[1].Z[5]
stack.subStack[2].anode_channel.channel.gas[1].Z[6]
stack.subStack[2].anode_channel.channel.gas[1].Z[7]
stack.subStack[2].anode_channel.channel.gas[1].dUZT[1]
stack.subStack[2].anode_channel.channel.gas[1].dUZT[2]
stack.subStack[2].anode_channel.channel.gas[1].dUZT[3]
stack.subStack[2].anode_channel.channel.gas[1].dUZT[4]
stack.subStack[2].anode_channel.channel.gas[1].dUZT[5]
stack.subStack[2].anode_channel.channel.gas[1].dUZT[6]
stack.subStack[2].anode_channel.channel.gas[1].dUZT[7]
stack.subStack[2].anode_channel.channel.gas[1].h_component[1]
stack.subStack[2].anode_channel.channel.gas[1].h_component[2]
stack.subStack[2].anode_channel.channel.gas[1].h_component[3]
stack.subStack[2].anode_channel.channel.gas[1].h_component[4]
stack.subStack[2].anode_channel.channel.gas[1].h_component[5]
stack.subStack[2].anode_channel.channel.gas[1].h_component[6]
stack.subStack[2].anode_channel.channel.gas[1].h_component[7]
stack.subStack[2].anode_channel.channel.gas[1].s_component[1]
stack.subStack[2].anode_channel.channel.gas[1].s_component[2]
stack.subStack[2].anode_channel.channel.gas[1].s_component[3]
stack.subStack[2].anode_channel.channel.gas[1].s_component[4]
stack.subStack[2].anode_channel.channel.gas[1].s_component[5]
stack.subStack[2].anode_channel.channel.gas[1].s_component[6]
stack.subStack[2].anode_channel.channel.gas[1].s_component[7]
stack.subStack[2].anode_channel.channel.gas[1].u_comp[1]
stack.subStack[2].anode_channel.channel.gas[1].u_comp[2]
stack.subStack[2].anode_channel.channel.gas[1].u_comp[3]
stack.subStack[2].anode_channel.channel.gas[1].u_comp[4]
stack.subStack[2].anode_channel.channel.gas[1].u_comp[5]
stack.subStack[2].anode_channel.channel.gas[1].u_comp[6]
stack.subStack[2].anode_channel.channel.gas[1].u_comp[7]
stack.subStack[2].anode_channel.channel.gas[1].cp
stack.subStack[2].anode_channel.channel.gas[1].g_formation[1]
stack.subStack[2].anode_channel.channel.gas[1].g_formation[2]
stack.subStack[2].anode_channel.channel.gas[1].g_formation[3]
stack.subStack[2].anode_channel.channel.gas[1].g_formation[4]
stack.subStack[2].anode_channel.channel.gas[1].g_formation[5]
stack.subStack[2].anode_channel.channel.gas[1].g_formation[6]
stack.subStack[2].anode_channel.channel.gas[1].g_formation[7]
stack.subStack[2].anode_channel.channel.gas[1].ddTp
stack.subStack[2].anode_channel.channel.gas[1].ddpT
stack.subStack[2].anode_channel.channel.gas[1].dupT
stack.subStack[2].anode_channel.channel.gas[1].duTp
stack.subStack[2].anode_channel.channel.gas[1].ddx[1]
stack.subStack[2].anode_channel.channel.gas[1].ddx[2]
stack.subStack[2].anode_channel.channel.gas[1].ddx[3]
stack.subStack[2].anode_channel.channel.gas[1].ddx[4]
stack.subStack[2].anode_channel.channel.gas[1].ddx[5]
stack.subStack[2].anode_channel.channel.gas[1].ddx[6]
stack.subStack[2].anode_channel.channel.gas[1].ddx[7]
stack.subStack[2].anode_channel.channel.gas[2].X[1]
stack.subStack[2].anode_channel.channel.gas[2].X[2]
stack.subStack[2].anode_channel.channel.gas[2].X[3]
stack.subStack[2].anode_channel.channel.gas[2].X[4]
stack.subStack[2].anode_channel.channel.gas[2].X[5]
stack.subStack[2].anode_channel.channel.gas[2].X[6]
stack.subStack[2].anode_channel.channel.gas[2].X[7]
stack.subStack[2].anode_channel.channel.gas[2].der(X[1])
stack.subStack[2].anode_channel.channel.gas[2].der(X[2])
stack.subStack[2].anode_channel.channel.gas[2].der(X[3])
stack.subStack[2].anode_channel.channel.gas[2].der(X[4])
stack.subStack[2].anode_channel.channel.gas[2].der(X[5])
stack.subStack[2].anode_channel.channel.gas[2].der(X[6])
stack.subStack[2].anode_channel.channel.gas[2].der(X[7])
stack.subStack[2].anode_channel.channel.gas[2].Xi[1]
stack.subStack[2].anode_channel.channel.gas[2].Xi[2]
stack.subStack[2].anode_channel.channel.gas[2].Xi[3]
stack.subStack[2].anode_channel.channel.gas[2].Xi[4]
stack.subStack[2].anode_channel.channel.gas[2].Xi[5]
stack.subStack[2].anode_channel.channel.gas[2].Xi[6]
stack.subStack[2].anode_channel.channel.gas[2].Xi[7]
stack.subStack[2].anode_channel.channel.gas[2].d
stack.subStack[2].anode_channel.channel.gas[2].der(d)
stack.subStack[2].anode_channel.channel.gas[2].u
stack.subStack[2].anode_channel.channel.gas[2].Rg
stack.subStack[2].anode_channel.channel.gas[2].der(Rg)
stack.subStack[2].anode_channel.channel.gas[2].MM
stack.subStack[2].anode_channel.channel.gas[2].assertlevel
stack.subStack[2].anode_channel.channel.gas[2].state.p
stack.subStack[2].anode_channel.channel.gas[2].state.T
stack.subStack[2].anode_channel.channel.gas[2].state.X[1]
stack.subStack[2].anode_channel.channel.gas[2].state.X[2]
stack.subStack[2].anode_channel.channel.gas[2].state.X[3]
stack.subStack[2].anode_channel.channel.gas[2].state.X[4]
stack.subStack[2].anode_channel.channel.gas[2].state.X[5]
stack.subStack[2].anode_channel.channel.gas[2].state.X[6]
stack.subStack[2].anode_channel.channel.gas[2].state.X[7]
stack.subStack[2].anode_channel.channel.gas[2].preferredMediumStates
stack.subStack[2].anode_channel.channel.gas[2].T_degC
stack.subStack[2].anode_channel.channel.gas[2].p_bar
stack.subStack[2].anode_channel.channel.gas[2].Z[1]
stack.subStack[2].anode_channel.channel.gas[2].Z[2]
stack.subStack[2].anode_channel.channel.gas[2].Z[3]
stack.subStack[2].anode_channel.channel.gas[2].Z[4]
stack.subStack[2].anode_channel.channel.gas[2].Z[5]
stack.subStack[2].anode_channel.channel.gas[2].Z[6]
stack.subStack[2].anode_channel.channel.gas[2].Z[7]
stack.subStack[2].anode_channel.channel.gas[2].dUZT[1]
stack.subStack[2].anode_channel.channel.gas[2].dUZT[2]
stack.subStack[2].anode_channel.channel.gas[2].dUZT[3]
stack.subStack[2].anode_channel.channel.gas[2].dUZT[4]
stack.subStack[2].anode_channel.channel.gas[2].dUZT[5]
stack.subStack[2].anode_channel.channel.gas[2].dUZT[6]
stack.subStack[2].anode_channel.channel.gas[2].dUZT[7]
stack.subStack[2].anode_channel.channel.gas[2].h_component[1]
stack.subStack[2].anode_channel.channel.gas[2].h_component[2]
stack.subStack[2].anode_channel.channel.gas[2].h_component[3]
stack.subStack[2].anode_channel.channel.gas[2].h_component[4]
stack.subStack[2].anode_channel.channel.gas[2].h_component[5]
stack.subStack[2].anode_channel.channel.gas[2].h_component[6]
stack.subStack[2].anode_channel.channel.gas[2].h_component[7]
stack.subStack[2].anode_channel.channel.gas[2].s_component[1]
stack.subStack[2].anode_channel.channel.gas[2].s_component[2]
stack.subStack[2].anode_channel.channel.gas[2].s_component[3]
stack.subStack[2].anode_channel.channel.gas[2].s_component[4]
stack.subStack[2].anode_channel.channel.gas[2].s_component[5]
stack.subStack[2].anode_channel.channel.gas[2].s_component[6]
stack.subStack[2].anode_channel.channel.gas[2].s_component[7]
stack.subStack[2].anode_channel.channel.gas[2].u_comp[1]
stack.subStack[2].anode_channel.channel.gas[2].u_comp[2]
stack.subStack[2].anode_channel.channel.gas[2].u_comp[3]
stack.subStack[2].anode_channel.channel.gas[2].u_comp[4]
stack.subStack[2].anode_channel.channel.gas[2].u_comp[5]
stack.subStack[2].anode_channel.channel.gas[2].u_comp[6]
stack.subStack[2].anode_channel.channel.gas[2].u_comp[7]
stack.subStack[2].anode_channel.channel.gas[2].cp
stack.subStack[2].anode_channel.channel.gas[2].g_formation[1]
stack.subStack[2].anode_channel.channel.gas[2].g_formation[2]
stack.subStack[2].anode_channel.channel.gas[2].g_formation[3]
stack.subStack[2].anode_channel.channel.gas[2].g_formation[4]
stack.subStack[2].anode_channel.channel.gas[2].g_formation[5]
stack.subStack[2].anode_channel.channel.gas[2].g_formation[6]
stack.subStack[2].anode_channel.channel.gas[2].g_formation[7]
stack.subStack[2].anode_channel.channel.gas[2].ddTp
stack.subStack[2].anode_channel.channel.gas[2].ddpT
stack.subStack[2].anode_channel.channel.gas[2].dupT
stack.subStack[2].anode_channel.channel.gas[2].duTp
stack.subStack[2].anode_channel.channel.gas[2].ddx[1]
stack.subStack[2].anode_channel.channel.gas[2].ddx[2]
stack.subStack[2].anode_channel.channel.gas[2].ddx[3]
stack.subStack[2].anode_channel.channel.gas[2].ddx[4]
stack.subStack[2].anode_channel.channel.gas[2].ddx[5]
stack.subStack[2].anode_channel.channel.gas[2].ddx[6]
stack.subStack[2].anode_channel.channel.gas[2].ddx[7]
stack.subStack[2].anode_channel.channel.gas[3].X[1]
stack.subStack[2].anode_channel.channel.gas[3].X[2]
stack.subStack[2].anode_channel.channel.gas[3].X[3]
stack.subStack[2].anode_channel.channel.gas[3].X[4]
stack.subStack[2].anode_channel.channel.gas[3].X[5]
stack.subStack[2].anode_channel.channel.gas[3].X[6]
stack.subStack[2].anode_channel.channel.gas[3].X[7]
stack.subStack[2].anode_channel.channel.gas[3].der(X[1])
stack.subStack[2].anode_channel.channel.gas[3].der(X[2])
stack.subStack[2].anode_channel.channel.gas[3].der(X[3])
stack.subStack[2].anode_channel.channel.gas[3].der(X[4])
stack.subStack[2].anode_channel.channel.gas[3].der(X[5])
stack.subStack[2].anode_channel.channel.gas[3].der(X[6])
stack.subStack[2].anode_channel.channel.gas[3].der(X[7])
stack.subStack[2].anode_channel.channel.gas[3].Xi[1]
stack.subStack[2].anode_channel.channel.gas[3].Xi[2]
stack.subStack[2].anode_channel.channel.gas[3].Xi[3]
stack.subStack[2].anode_channel.channel.gas[3].Xi[4]
stack.subStack[2].anode_channel.channel.gas[3].Xi[5]
stack.subStack[2].anode_channel.channel.gas[3].Xi[6]
stack.subStack[2].anode_channel.channel.gas[3].Xi[7]
stack.subStack[2].anode_channel.channel.gas[3].d
stack.subStack[2].anode_channel.channel.gas[3].der(d)
stack.subStack[2].anode_channel.channel.gas[3].u
stack.subStack[2].anode_channel.channel.gas[3].Rg
stack.subStack[2].anode_channel.channel.gas[3].der(Rg)
stack.subStack[2].anode_channel.channel.gas[3].MM
stack.subStack[2].anode_channel.channel.gas[3].assertlevel
stack.subStack[2].anode_channel.channel.gas[3].state.p
stack.subStack[2].anode_channel.channel.gas[3].state.T
stack.subStack[2].anode_channel.channel.gas[3].state.X[1]
stack.subStack[2].anode_channel.channel.gas[3].state.X[2]
stack.subStack[2].anode_channel.channel.gas[3].state.X[3]
stack.subStack[2].anode_channel.channel.gas[3].state.X[4]
stack.subStack[2].anode_channel.channel.gas[3].state.X[5]
stack.subStack[2].anode_channel.channel.gas[3].state.X[6]
stack.subStack[2].anode_channel.channel.gas[3].state.X[7]
stack.subStack[2].anode_channel.channel.gas[3].preferredMediumStates
stack.subStack[2].anode_channel.channel.gas[3].T_degC
stack.subStack[2].anode_channel.channel.gas[3].p_bar
stack.subStack[2].anode_channel.channel.gas[3].Z[1]
stack.subStack[2].anode_channel.channel.gas[3].Z[2]
stack.subStack[2].anode_channel.channel.gas[3].Z[3]
stack.subStack[2].anode_channel.channel.gas[3].Z[4]
stack.subStack[2].anode_channel.channel.gas[3].Z[5]
stack.subStack[2].anode_channel.channel.gas[3].Z[6]
stack.subStack[2].anode_channel.channel.gas[3].Z[7]
stack.subStack[2].anode_channel.channel.gas[3].dUZT[1]
stack.subStack[2].anode_channel.channel.gas[3].dUZT[2]
stack.subStack[2].anode_channel.channel.gas[3].dUZT[3]
stack.subStack[2].anode_channel.channel.gas[3].dUZT[4]
stack.subStack[2].anode_channel.channel.gas[3].dUZT[5]
stack.subStack[2].anode_channel.channel.gas[3].dUZT[6]
stack.subStack[2].anode_channel.channel.gas[3].dUZT[7]
stack.subStack[2].anode_channel.channel.gas[3].h_component[1]
stack.subStack[2].anode_channel.channel.gas[3].h_component[2]
stack.subStack[2].anode_channel.channel.gas[3].h_component[3]
stack.subStack[2].anode_channel.channel.gas[3].h_component[4]
stack.subStack[2].anode_channel.channel.gas[3].h_component[5]
stack.subStack[2].anode_channel.channel.gas[3].h_component[6]
stack.subStack[2].anode_channel.channel.gas[3].h_component[7]
stack.subStack[2].anode_channel.channel.gas[3].s_component[1]
stack.subStack[2].anode_channel.channel.gas[3].s_component[2]
stack.subStack[2].anode_channel.channel.gas[3].s_component[3]
stack.subStack[2].anode_channel.channel.gas[3].s_component[4]
stack.subStack[2].anode_channel.channel.gas[3].s_component[5]
stack.subStack[2].anode_channel.channel.gas[3].s_component[6]
stack.subStack[2].anode_channel.channel.gas[3].s_component[7]
stack.subStack[2].anode_channel.channel.gas[3].u_comp[1]
stack.subStack[2].anode_channel.channel.gas[3].u_comp[2]
stack.subStack[2].anode_channel.channel.gas[3].u_comp[3]
stack.subStack[2].anode_channel.channel.gas[3].u_comp[4]
stack.subStack[2].anode_channel.channel.gas[3].u_comp[5]
stack.subStack[2].anode_channel.channel.gas[3].u_comp[6]
stack.subStack[2].anode_channel.channel.gas[3].u_comp[7]
stack.subStack[2].anode_channel.channel.gas[3].cp
stack.subStack[2].anode_channel.channel.gas[3].g_formation[1]
stack.subStack[2].anode_channel.channel.gas[3].g_formation[2]
stack.subStack[2].anode_channel.channel.gas[3].g_formation[3]
stack.subStack[2].anode_channel.channel.gas[3].g_formation[4]
stack.subStack[2].anode_channel.channel.gas[3].g_formation[5]
stack.subStack[2].anode_channel.channel.gas[3].g_formation[6]
stack.subStack[2].anode_channel.channel.gas[3].g_formation[7]
stack.subStack[2].anode_channel.channel.gas[3].ddTp
stack.subStack[2].anode_channel.channel.gas[3].ddpT
stack.subStack[2].anode_channel.channel.gas[3].dupT
stack.subStack[2].anode_channel.channel.gas[3].duTp
stack.subStack[2].anode_channel.channel.gas[3].ddx[1]
stack.subStack[2].anode_channel.channel.gas[3].ddx[2]
stack.subStack[2].anode_channel.channel.gas[3].ddx[3]
stack.subStack[2].anode_channel.channel.gas[3].ddx[4]
stack.subStack[2].anode_channel.channel.gas[3].ddx[5]
stack.subStack[2].anode_channel.channel.gas[3].ddx[6]
stack.subStack[2].anode_channel.channel.gas[3].ddx[7]
stack.subStack[2].anode_channel.channel.gas[4].X[1]
stack.subStack[2].anode_channel.channel.gas[4].X[2]
stack.subStack[2].anode_channel.channel.gas[4].X[3]
stack.subStack[2].anode_channel.channel.gas[4].X[4]
stack.subStack[2].anode_channel.channel.gas[4].X[5]
stack.subStack[2].anode_channel.channel.gas[4].X[6]
stack.subStack[2].anode_channel.channel.gas[4].X[7]
stack.subStack[2].anode_channel.channel.gas[4].der(X[1])
stack.subStack[2].anode_channel.channel.gas[4].der(X[2])
stack.subStack[2].anode_channel.channel.gas[4].der(X[3])
stack.subStack[2].anode_channel.channel.gas[4].der(X[4])
stack.subStack[2].anode_channel.channel.gas[4].der(X[5])
stack.subStack[2].anode_channel.channel.gas[4].der(X[6])
stack.subStack[2].anode_channel.channel.gas[4].der(X[7])
stack.subStack[2].anode_channel.channel.gas[4].Xi[1]
stack.subStack[2].anode_channel.channel.gas[4].Xi[2]
stack.subStack[2].anode_channel.channel.gas[4].Xi[3]
stack.subStack[2].anode_channel.channel.gas[4].Xi[4]
stack.subStack[2].anode_channel.channel.gas[4].Xi[5]
stack.subStack[2].anode_channel.channel.gas[4].Xi[6]
stack.subStack[2].anode_channel.channel.gas[4].Xi[7]
stack.subStack[2].anode_channel.channel.gas[4].d
stack.subStack[2].anode_channel.channel.gas[4].der(d)
stack.subStack[2].anode_channel.channel.gas[4].u
stack.subStack[2].anode_channel.channel.gas[4].Rg
stack.subStack[2].anode_channel.channel.gas[4].der(Rg)
stack.subStack[2].anode_channel.channel.gas[4].MM
stack.subStack[2].anode_channel.channel.gas[4].assertlevel
stack.subStack[2].anode_channel.channel.gas[4].state.p
stack.subStack[2].anode_channel.channel.gas[4].state.T
stack.subStack[2].anode_channel.channel.gas[4].state.X[1]
stack.subStack[2].anode_channel.channel.gas[4].state.X[2]
stack.subStack[2].anode_channel.channel.gas[4].state.X[3]
stack.subStack[2].anode_channel.channel.gas[4].state.X[4]
stack.subStack[2].anode_channel.channel.gas[4].state.X[5]
stack.subStack[2].anode_channel.channel.gas[4].state.X[6]
stack.subStack[2].anode_channel.channel.gas[4].state.X[7]
stack.subStack[2].anode_channel.channel.gas[4].preferredMediumStates
stack.subStack[2].anode_channel.channel.gas[4].p_bar
stack.subStack[2].anode_channel.channel.gas[4].Z[1]
stack.subStack[2].anode_channel.channel.gas[4].Z[2]
stack.subStack[2].anode_channel.channel.gas[4].Z[3]
stack.subStack[2].anode_channel.channel.gas[4].Z[4]
stack.subStack[2].anode_channel.channel.gas[4].Z[5]
stack.subStack[2].anode_channel.channel.gas[4].Z[6]
stack.subStack[2].anode_channel.channel.gas[4].Z[7]
stack.subStack[2].anode_channel.channel.gas[4].dUZT[1]
stack.subStack[2].anode_channel.channel.gas[4].dUZT[2]
stack.subStack[2].anode_channel.channel.gas[4].dUZT[3]
stack.subStack[2].anode_channel.channel.gas[4].dUZT[4]
stack.subStack[2].anode_channel.channel.gas[4].dUZT[5]
stack.subStack[2].anode_channel.channel.gas[4].dUZT[6]
stack.subStack[2].anode_channel.channel.gas[4].dUZT[7]
stack.subStack[2].anode_channel.channel.gas[4].h_component[1]
stack.subStack[2].anode_channel.channel.gas[4].h_component[2]
stack.subStack[2].anode_channel.channel.gas[4].h_component[3]
stack.subStack[2].anode_channel.channel.gas[4].h_component[4]
stack.subStack[2].anode_channel.channel.gas[4].h_component[5]
stack.subStack[2].anode_channel.channel.gas[4].h_component[6]
stack.subStack[2].anode_channel.channel.gas[4].h_component[7]
stack.subStack[2].anode_channel.channel.gas[4].s_component[1]
stack.subStack[2].anode_channel.channel.gas[4].s_component[2]
stack.subStack[2].anode_channel.channel.gas[4].s_component[3]
stack.subStack[2].anode_channel.channel.gas[4].s_component[4]
stack.subStack[2].anode_channel.channel.gas[4].s_component[5]
stack.subStack[2].anode_channel.channel.gas[4].s_component[6]
stack.subStack[2].anode_channel.channel.gas[4].s_component[7]
stack.subStack[2].anode_channel.channel.gas[4].u_comp[1]
stack.subStack[2].anode_channel.channel.gas[4].u_comp[2]
stack.subStack[2].anode_channel.channel.gas[4].u_comp[3]
stack.subStack[2].anode_channel.channel.gas[4].u_comp[4]
stack.subStack[2].anode_channel.channel.gas[4].u_comp[5]
stack.subStack[2].anode_channel.channel.gas[4].u_comp[6]
stack.subStack[2].anode_channel.channel.gas[4].u_comp[7]
stack.subStack[2].anode_channel.channel.gas[4].cp
stack.subStack[2].anode_channel.channel.gas[4].g_formation[1]
stack.subStack[2].anode_channel.channel.gas[4].g_formation[2]
stack.subStack[2].anode_channel.channel.gas[4].g_formation[3]
stack.subStack[2].anode_channel.channel.gas[4].g_formation[4]
stack.subStack[2].anode_channel.channel.gas[4].g_formation[5]
stack.subStack[2].anode_channel.channel.gas[4].g_formation[6]
stack.subStack[2].anode_channel.channel.gas[4].g_formation[7]
stack.subStack[2].anode_channel.channel.gas[4].ddTp
stack.subStack[2].anode_channel.channel.gas[4].ddpT
stack.subStack[2].anode_channel.channel.gas[4].dupT
stack.subStack[2].anode_channel.channel.gas[4].duTp
stack.subStack[2].anode_channel.channel.gas[4].ddx[1]
stack.subStack[2].anode_channel.channel.gas[4].ddx[2]
stack.subStack[2].anode_channel.channel.gas[4].ddx[3]
stack.subStack[2].anode_channel.channel.gas[4].ddx[4]
stack.subStack[2].anode_channel.channel.gas[4].ddx[5]
stack.subStack[2].anode_channel.channel.gas[4].ddx[6]
stack.subStack[2].anode_channel.channel.gas[4].ddx[7]
stack.subStack[2].anode_channel.channel.p[1]
stack.subStack[2].anode_channel.channel.p[2]
stack.subStack[2].anode_channel.channel.p[3]
stack.subStack[2].anode_channel.channel.p[4]
stack.subStack[2].anode_channel.channel.der(p[1])
stack.subStack[2].anode_channel.channel.der(p[2])
stack.subStack[2].anode_channel.channel.der(p[3])
stack.subStack[2].anode_channel.channel.der(p[4])
stack.subStack[2].anode_channel.channel.M[1]
stack.subStack[2].anode_channel.channel.M[2]
stack.subStack[2].anode_channel.channel.M[3]
stack.subStack[2].anode_channel.channel.M[4]
stack.subStack[2].anode_channel.channel.der(M[1])
stack.subStack[2].anode_channel.channel.der(M[2])
stack.subStack[2].anode_channel.channel.der(M[3])
stack.subStack[2].anode_channel.channel.der(M[4])
stack.subStack[2].anode_channel.channel.E_seg[1]
stack.subStack[2].anode_channel.channel.E_seg[2]
stack.subStack[2].anode_channel.channel.E_seg[3]
stack.subStack[2].anode_channel.channel.E_seg[4]
stack.subStack[2].anode_channel.channel.MXi[1, 1]
stack.subStack[2].anode_channel.channel.MXi[1, 2]
stack.subStack[2].anode_channel.channel.MXi[1, 3]
stack.subStack[2].anode_channel.channel.MXi[1, 4]
stack.subStack[2].anode_channel.channel.MXi[1, 5]
stack.subStack[2].anode_channel.channel.MXi[1, 6]
stack.subStack[2].anode_channel.channel.MXi[1, 7]
stack.subStack[2].anode_channel.channel.MXi[2, 1]
stack.subStack[2].anode_channel.channel.MXi[2, 2]
stack.subStack[2].anode_channel.channel.MXi[2, 3]
stack.subStack[2].anode_channel.channel.MXi[2, 4]
stack.subStack[2].anode_channel.channel.MXi[2, 5]
stack.subStack[2].anode_channel.channel.MXi[2, 6]
stack.subStack[2].anode_channel.channel.MXi[2, 7]
stack.subStack[2].anode_channel.channel.MXi[3, 1]
stack.subStack[2].anode_channel.channel.MXi[3, 2]
stack.subStack[2].anode_channel.channel.MXi[3, 3]
stack.subStack[2].anode_channel.channel.MXi[3, 4]
stack.subStack[2].anode_channel.channel.MXi[3, 5]
stack.subStack[2].anode_channel.channel.MXi[3, 6]
stack.subStack[2].anode_channel.channel.MXi[3, 7]
stack.subStack[2].anode_channel.channel.MXi[4, 1]
stack.subStack[2].anode_channel.channel.MXi[4, 2]
stack.subStack[2].anode_channel.channel.MXi[4, 3]
stack.subStack[2].anode_channel.channel.MXi[4, 4]
stack.subStack[2].anode_channel.channel.MXi[4, 5]
stack.subStack[2].anode_channel.channel.MXi[4, 6]
stack.subStack[2].anode_channel.channel.MXi[4, 7]
stack.subStack[2].anode_channel.channel.dp[1]
stack.subStack[2].anode_channel.channel.dp[2]
stack.subStack[2].anode_channel.channel.dp[3]
stack.subStack[2].anode_channel.channel.dp[4]
stack.subStack[2].anode_channel.channel.dp[5]
stack.subStack[2].anode_channel.channel.sh[1]
stack.subStack[2].anode_channel.channel.sh[2]
stack.subStack[2].anode_channel.channel.sh[3]
stack.subStack[2].anode_channel.channel.sh[4]
stack.subStack[2].anode_channel.channel.state[1].p
stack.subStack[2].anode_channel.channel.state[1].T
stack.subStack[2].anode_channel.channel.state[1].X[1]
stack.subStack[2].anode_channel.channel.state[1].X[2]
stack.subStack[2].anode_channel.channel.state[1].X[3]
stack.subStack[2].anode_channel.channel.state[1].X[4]
stack.subStack[2].anode_channel.channel.state[1].X[5]
stack.subStack[2].anode_channel.channel.state[1].X[6]
stack.subStack[2].anode_channel.channel.state[1].X[7]
stack.subStack[2].anode_channel.channel.state[6].p
stack.subStack[2].anode_channel.channel.state[6].T
stack.subStack[2].anode_channel.channel.state[6].X[1]
stack.subStack[2].anode_channel.channel.state[6].X[2]
stack.subStack[2].anode_channel.channel.state[6].X[3]
stack.subStack[2].anode_channel.channel.state[6].X[4]
stack.subStack[2].anode_channel.channel.state[6].X[5]
stack.subStack[2].anode_channel.channel.state[6].X[6]
stack.subStack[2].anode_channel.channel.state[6].X[7]
stack.subStack[2].anode_channel.channel.Q[1]
stack.subStack[2].anode_channel.channel.Q[2]
stack.subStack[2].anode_channel.channel.Q[3]
stack.subStack[2].anode_channel.channel.Q[4]
stack.subStack[2].anode_channel.channel.Q_tot
stack.subStack[2].anode_channel.channel.Q_wall[1]
stack.subStack[2].anode_channel.channel.Q_wall[2]
stack.subStack[2].anode_channel.channel.Q_wall[3]
stack.subStack[2].anode_channel.channel.Q_wall[4]
stack.subStack[2].anode_channel.channel.alpha[1]
stack.subStack[2].anode_channel.channel.alpha[2]
stack.subStack[2].anode_channel.channel.alpha[3]
stack.subStack[2].anode_channel.channel.alpha[4]
stack.subStack[2].anode_channel.channel.rMX[1, 2]
stack.subStack[2].anode_channel.channel.rMX[1, 3]
stack.subStack[2].anode_channel.channel.rMX[1, 4]
stack.subStack[2].anode_channel.channel.rMX[1, 6]
stack.subStack[2].anode_channel.channel.rMX[1, 7]
stack.subStack[2].anode_channel.channel.rMX[2, 2]
stack.subStack[2].anode_channel.channel.rMX[2, 3]
stack.subStack[2].anode_channel.channel.rMX[2, 4]
stack.subStack[2].anode_channel.channel.rMX[2, 6]
stack.subStack[2].anode_channel.channel.rMX[2, 7]
stack.subStack[2].anode_channel.channel.rMX[3, 2]
stack.subStack[2].anode_channel.channel.rMX[3, 3]
stack.subStack[2].anode_channel.channel.rMX[3, 4]
stack.subStack[2].anode_channel.channel.rMX[3, 6]
stack.subStack[2].anode_channel.channel.rMX[3, 7]
stack.subStack[2].anode_channel.channel.rMX[4, 2]
stack.subStack[2].anode_channel.channel.rMX[4, 3]
stack.subStack[2].anode_channel.channel.rMX[4, 4]
stack.subStack[2].anode_channel.channel.rMX[4, 6]
stack.subStack[2].anode_channel.channel.rMX[4, 7]
stack.subStack[2].anode_channel.channel.mflow_A_in
stack.subStack[2].anode_channel.channel.mflow_B_in
stack.subStack[2].anode_channel.channel.m_flow_fric[1]
stack.subStack[2].anode_channel.channel.m_flow_fric[2]
stack.subStack[2].anode_channel.channel.m_flow_fric[3]
stack.subStack[2].anode_channel.channel.XA[1]
stack.subStack[2].anode_channel.channel.XA[2]
stack.subStack[2].anode_channel.channel.XA[3]
stack.subStack[2].anode_channel.channel.XA[4]
stack.subStack[2].anode_channel.channel.XA[5]
stack.subStack[2].anode_channel.channel.XA[6]
stack.subStack[2].anode_channel.channel.XA[7]
stack.subStack[2].anode_channel.channel.XB[1]
stack.subStack[2].anode_channel.channel.XB[2]
stack.subStack[2].anode_channel.channel.XB[3]
stack.subStack[2].anode_channel.channel.XB[4]
stack.subStack[2].anode_channel.channel.XB[5]
stack.subStack[2].anode_channel.channel.XB[6]
stack.subStack[2].anode_channel.channel.XB[7]
stack.subStack[2].anode_channel.channel.n_channels_fric[1]
stack.subStack[2].anode_channel.channel.n_channels_fric[2]
stack.subStack[2].anode_channel.channel.n_channels_fric[3]
stack.subStack[2].anode_channel.channel.n_channels_fric[4]
stack.subStack[2].anode_channel.channel.T_wall[1]
stack.subStack[2].anode_channel.channel.T_wall[2]
stack.subStack[2].anode_channel.channel.T_wall[3]
stack.subStack[2].anode_channel.channel.T_wall[4]
stack.subStack[2].anode_channel.channel.nS
stack.subStack[2].anode_channel.channel.mX_flow[1, 1]
stack.subStack[2].anode_channel.channel.mX_flow[1, 2]
stack.subStack[2].anode_channel.channel.mX_flow[1, 3]
stack.subStack[2].anode_channel.channel.mX_flow[1, 4]
stack.subStack[2].anode_channel.channel.mX_flow[1, 5]
stack.subStack[2].anode_channel.channel.mX_flow[1, 6]
stack.subStack[2].anode_channel.channel.mX_flow[1, 7]
stack.subStack[2].anode_channel.channel.mX_flow[2, 1]
stack.subStack[2].anode_channel.channel.mX_flow[2, 2]
stack.subStack[2].anode_channel.channel.mX_flow[2, 3]
stack.subStack[2].anode_channel.channel.mX_flow[2, 4]
stack.subStack[2].anode_channel.channel.mX_flow[2, 5]
stack.subStack[2].anode_channel.channel.mX_flow[2, 6]
stack.subStack[2].anode_channel.channel.mX_flow[2, 7]
stack.subStack[2].anode_channel.channel.mX_flow[3, 1]
stack.subStack[2].anode_channel.channel.mX_flow[3, 2]
stack.subStack[2].anode_channel.channel.mX_flow[3, 3]
stack.subStack[2].anode_channel.channel.mX_flow[3, 4]
stack.subStack[2].anode_channel.channel.mX_flow[3, 5]
stack.subStack[2].anode_channel.channel.mX_flow[3, 6]
stack.subStack[2].anode_channel.channel.mX_flow[3, 7]
stack.subStack[2].anode_channel.channel.mX_flow[4, 1]
stack.subStack[2].anode_channel.channel.mX_flow[4, 2]
stack.subStack[2].anode_channel.channel.mX_flow[4, 3]
stack.subStack[2].anode_channel.channel.mX_flow[4, 4]
stack.subStack[2].anode_channel.channel.mX_flow[4, 5]
stack.subStack[2].anode_channel.channel.mX_flow[4, 6]
stack.subStack[2].anode_channel.channel.mX_flow[4, 7]
stack.subStack[2].anode_channel.channel.mX_flow[5, 1]
stack.subStack[2].anode_channel.channel.mX_flow[5, 2]
stack.subStack[2].anode_channel.channel.mX_flow[5, 3]
stack.subStack[2].anode_channel.channel.mX_flow[5, 4]
stack.subStack[2].anode_channel.channel.mX_flow[5, 5]
stack.subStack[2].anode_channel.channel.mX_flow[5, 6]
stack.subStack[2].anode_channel.channel.mX_flow[5, 7]
stack.subStack[2].anode_channel.channel.H_flow[1]
stack.subStack[2].anode_channel.channel.H_flow[2]
stack.subStack[2].anode_channel.channel.H_flow[3]
stack.subStack[2].anode_channel.channel.H_flow[4]
stack.subStack[2].anode_channel.channel.H_flow[5]
stack.subStack[2].anode_channel.channel.dE[1]
stack.subStack[2].anode_channel.channel.dE[2]
stack.subStack[2].anode_channel.channel.dE[3]
stack.subStack[2].anode_channel.channel.dE[4]
stack.subStack[2].anode_channel.channel.dMX[1, 1]
stack.subStack[2].anode_channel.channel.dMX[1, 2]
stack.subStack[2].anode_channel.channel.dMX[1, 3]
stack.subStack[2].anode_channel.channel.dMX[1, 4]
stack.subStack[2].anode_channel.channel.dMX[1, 5]
stack.subStack[2].anode_channel.channel.dMX[1, 6]
stack.subStack[2].anode_channel.channel.dMX[1, 7]
stack.subStack[2].anode_channel.channel.dMX[2, 1]
stack.subStack[2].anode_channel.channel.dMX[2, 2]
stack.subStack[2].anode_channel.channel.dMX[2, 3]
stack.subStack[2].anode_channel.channel.dMX[2, 4]
stack.subStack[2].anode_channel.channel.dMX[2, 5]
stack.subStack[2].anode_channel.channel.dMX[2, 6]
stack.subStack[2].anode_channel.channel.dMX[2, 7]
stack.subStack[2].anode_channel.channel.dMX[3, 1]
stack.subStack[2].anode_channel.channel.dMX[3, 2]
stack.subStack[2].anode_channel.channel.dMX[3, 3]
stack.subStack[2].anode_channel.channel.dMX[3, 4]
stack.subStack[2].anode_channel.channel.dMX[3, 5]
stack.subStack[2].anode_channel.channel.dMX[3, 6]
stack.subStack[2].anode_channel.channel.dMX[3, 7]
stack.subStack[2].anode_channel.channel.dMX[4, 1]
stack.subStack[2].anode_channel.channel.dMX[4, 2]
stack.subStack[2].anode_channel.channel.dMX[4, 3]
stack.subStack[2].anode_channel.channel.dMX[4, 4]
stack.subStack[2].anode_channel.channel.dMX[4, 5]
stack.subStack[2].anode_channel.channel.dMX[4, 6]
stack.subStack[2].anode_channel.channel.dMX[4, 7]
stack.subStack[2].anode_channel.channel.dZ[1, 1]
stack.subStack[2].anode_channel.channel.dZ[1, 2]
stack.subStack[2].anode_channel.channel.dZ[1, 3]
stack.subStack[2].anode_channel.channel.dZ[1, 4]
stack.subStack[2].anode_channel.channel.dZ[1, 5]
stack.subStack[2].anode_channel.channel.dZ[2, 1]
stack.subStack[2].anode_channel.channel.dZ[2, 2]
stack.subStack[2].anode_channel.channel.dZ[2, 3]
stack.subStack[2].anode_channel.channel.dZ[2, 4]
stack.subStack[2].anode_channel.channel.dZ[2, 5]
stack.subStack[2].anode_channel.channel.dZ[3, 1]
stack.subStack[2].anode_channel.channel.dZ[3, 2]
stack.subStack[2].anode_channel.channel.dZ[3, 3]
stack.subStack[2].anode_channel.channel.dZ[3, 4]
stack.subStack[2].anode_channel.channel.dZ[3, 5]
stack.subStack[2].anode_channel.channel.dZ[4, 1]
stack.subStack[2].anode_channel.channel.dZ[4, 2]
stack.subStack[2].anode_channel.channel.dZ[4, 3]
stack.subStack[2].anode_channel.channel.dZ[4, 4]
stack.subStack[2].anode_channel.channel.dZ[4, 5]
stack.subStack[2].anode_channel.channel.dUTZ[1]
stack.subStack[2].anode_channel.channel.dUTZ[2]
stack.subStack[2].anode_channel.channel.dUTZ[3]
stack.subStack[2].anode_channel.channel.dUTZ[4]
stack.subStack[2].anode_channel.channel.Z[1, 1]
stack.subStack[2].anode_channel.channel.Z[1, 2]
stack.subStack[2].anode_channel.channel.Z[1, 3]
stack.subStack[2].anode_channel.channel.Z[1, 4]
stack.subStack[2].anode_channel.channel.Z[1, 5]
stack.subStack[2].anode_channel.channel.Z[1, 6]
stack.subStack[2].anode_channel.channel.Z[1, 7]
stack.subStack[2].anode_channel.channel.Z[2, 1]
stack.subStack[2].anode_channel.channel.Z[2, 2]
stack.subStack[2].anode_channel.channel.Z[2, 3]
stack.subStack[2].anode_channel.channel.Z[2, 4]
stack.subStack[2].anode_channel.channel.Z[2, 5]
stack.subStack[2].anode_channel.channel.Z[2, 6]
stack.subStack[2].anode_channel.channel.Z[2, 7]
stack.subStack[2].anode_channel.channel.Z[3, 1]
stack.subStack[2].anode_channel.channel.Z[3, 2]
stack.subStack[2].anode_channel.channel.Z[3, 3]
stack.subStack[2].anode_channel.channel.Z[3, 4]
stack.subStack[2].anode_channel.channel.Z[3, 5]
stack.subStack[2].anode_channel.channel.Z[3, 6]
stack.subStack[2].anode_channel.channel.Z[3, 7]
stack.subStack[2].anode_channel.channel.Z[4, 1]
stack.subStack[2].anode_channel.channel.Z[4, 2]
stack.subStack[2].anode_channel.channel.Z[4, 3]
stack.subStack[2].anode_channel.channel.Z[4, 4]
stack.subStack[2].anode_channel.channel.Z[4, 5]
stack.subStack[2].anode_channel.channel.Z[4, 6]
stack.subStack[2].anode_channel.channel.Z[4, 7]
stack.subStack[2].anode_channel.channel.der(Z[1, 1])
stack.subStack[2].anode_channel.channel.der(Z[1, 2])
stack.subStack[2].anode_channel.channel.der(Z[1, 3])
stack.subStack[2].anode_channel.channel.der(Z[1, 4])
stack.subStack[2].anode_channel.channel.der(Z[1, 5])
stack.subStack[2].anode_channel.channel.der(Z[1, 6])
stack.subStack[2].anode_channel.channel.der(Z[1, 7])
stack.subStack[2].anode_channel.channel.der(Z[2, 1])
stack.subStack[2].anode_channel.channel.der(Z[2, 2])
stack.subStack[2].anode_channel.channel.der(Z[2, 3])
stack.subStack[2].anode_channel.channel.der(Z[2, 4])
stack.subStack[2].anode_channel.channel.der(Z[2, 5])
stack.subStack[2].anode_channel.channel.der(Z[2, 6])
stack.subStack[2].anode_channel.channel.der(Z[2, 7])
stack.subStack[2].anode_channel.channel.der(Z[3, 1])
stack.subStack[2].anode_channel.channel.der(Z[3, 2])
stack.subStack[2].anode_channel.channel.der(Z[3, 3])
stack.subStack[2].anode_channel.channel.der(Z[3, 4])
stack.subStack[2].anode_channel.channel.der(Z[3, 5])
stack.subStack[2].anode_channel.channel.der(Z[3, 6])
stack.subStack[2].anode_channel.channel.der(Z[3, 7])
stack.subStack[2].anode_channel.channel.der(Z[4, 1])
stack.subStack[2].anode_channel.channel.der(Z[4, 2])
stack.subStack[2].anode_channel.channel.der(Z[4, 3])
stack.subStack[2].anode_channel.channel.der(Z[4, 4])
stack.subStack[2].anode_channel.channel.der(Z[4, 5])
stack.subStack[2].anode_channel.channel.der(Z[4, 6])
stack.subStack[2].anode_channel.channel.der(Z[4, 7])
stack.subStack[2].anode_channel.port[1].mX_flow[2]
stack.subStack[2].anode_channel.port[1].mX_flow[3]
stack.subStack[2].anode_channel.port[1].mX_flow[4]
stack.subStack[2].anode_channel.port[1].mX_flow[6]
stack.subStack[2].anode_channel.port[1].mX_flow[7]
stack.subStack[2].anode_channel.port[2].mX_flow[2]
stack.subStack[2].anode_channel.port[2].mX_flow[3]
stack.subStack[2].anode_channel.port[2].mX_flow[4]
stack.subStack[2].anode_channel.port[2].mX_flow[6]
stack.subStack[2].anode_channel.port[2].mX_flow[7]
stack.subStack[2].anode_channel.port[3].mX_flow[2]
stack.subStack[2].anode_channel.port[3].mX_flow[3]
stack.subStack[2].anode_channel.port[3].mX_flow[4]
stack.subStack[2].anode_channel.port[3].mX_flow[6]
stack.subStack[2].anode_channel.port[3].mX_flow[7]
stack.subStack[2].anode_channel.port[4].mX_flow[2]
stack.subStack[2].anode_channel.port[4].mX_flow[3]
stack.subStack[2].anode_channel.port[4].mX_flow[4]
stack.subStack[2].anode_channel.port[4].mX_flow[6]
stack.subStack[2].anode_channel.port[4].mX_flow[7]
stack.subStack[2].cathode_channel.summary.dp
stack.subStack[2].cathode_channel.summary.m_flow
stack.subStack[2].cathode_channel.summary.M
stack.subStack[2].cathode_channel.summary.V
stack.subStack[2].cathode_channel.summary.T_in
stack.subStack[2].cathode_channel.summary.d_in
stack.subStack[2].cathode_channel.n
stack.subStack[2].cathode_channel.pi
stack.subStack[2].cathode_channel.n_channels
stack.subStack[2].cathode_channel.L
stack.subStack[2].cathode_channel.D
stack.subStack[2].cathode_channel.Dhyd
stack.subStack[2].cathode_channel.A
stack.subStack[2].cathode_channel.C
stack.subStack[2].cathode_channel.V
stack.subStack[2].cathode_channel.A_heat
stack.subStack[2].cathode_channel.useHeatTransfer
stack.subStack[2].cathode_channel.ni
stack.subStack[2].cathode_channel.initOpt
stack.subStack[2].cathode_channel.p_start_in
stack.subStack[2].cathode_channel.p_start_out
stack.subStack[2].cathode_channel.p_start[1]
stack.subStack[2].cathode_channel.p_start[2]
stack.subStack[2].cathode_channel.p_start[3]
stack.subStack[2].cathode_channel.p_start[4]
stack.subStack[2].cathode_channel.p_start[5]
stack.subStack[2].cathode_channel.initFromEnthalpy
stack.subStack[2].cathode_channel.h_start_in
stack.subStack[2].cathode_channel.h_start_out
stack.subStack[2].cathode_channel.h_start[1]
stack.subStack[2].cathode_channel.h_start[2]
stack.subStack[2].cathode_channel.h_start[3]
stack.subStack[2].cathode_channel.h_start[4]
stack.subStack[2].cathode_channel.h_start[5]
stack.subStack[2].cathode_channel.T_start_in
stack.subStack[2].cathode_channel.T_start_out
stack.subStack[2].cathode_channel.T_start[1]
stack.subStack[2].cathode_channel.T_start[2]
stack.subStack[2].cathode_channel.T_start[3]
stack.subStack[2].cathode_channel.T_start[4]
stack.subStack[2].cathode_channel.T_start[5]
stack.subStack[2].cathode_channel.X_start[1]
stack.subStack[2].cathode_channel.X_start[2]
stack.subStack[2].cathode_channel.X_start[3]
stack.subStack[2].cathode_channel.X_start[4]
stack.subStack[2].cathode_channel.X_start[5]
stack.subStack[2].cathode_channel.m_flow_start
stack.subStack[2].cathode_channel.positiveFlow
stack.subStack[2].cathode_channel.from_dp
stack.subStack[2].cathode_channel.dp_smooth
stack.subStack[2].cathode_channel.mflow_smooth
stack.subStack[2].cathode_channel.generateEventForReversal
stack.subStack[2].cathode_channel.CF_PressureLoss
stack.subStack[2].cathode_channel.CF_HeatTransfer
stack.subStack[2].cathode_channel.X_weight
stack.subStack[2].cathode_channel.y_sat
stack.subStack[2].cathode_channel.includeStaticHead
stack.subStack[2].cathode_channel.height
stack.subStack[2].cathode_channel.g
stack.subStack[2].cathode_channel.channel.n
stack.subStack[2].cathode_channel.channel.n_channels[1]
stack.subStack[2].cathode_channel.channel.n_channels[2]
stack.subStack[2].cathode_channel.channel.n_channels[3]
stack.subStack[2].cathode_channel.channel.n_channels[4]
stack.subStack[2].cathode_channel.channel.L[1]
stack.subStack[2].cathode_channel.channel.L[2]
stack.subStack[2].cathode_channel.channel.L[3]
stack.subStack[2].cathode_channel.channel.L[4]
stack.subStack[2].cathode_channel.channel.Dhyd[1]
stack.subStack[2].cathode_channel.channel.Dhyd[2]
stack.subStack[2].cathode_channel.channel.Dhyd[3]
stack.subStack[2].cathode_channel.channel.Dhyd[4]
stack.subStack[2].cathode_channel.channel.A[1]
stack.subStack[2].cathode_channel.channel.A[2]
stack.subStack[2].cathode_channel.channel.A[3]
stack.subStack[2].cathode_channel.channel.A[4]
stack.subStack[2].cathode_channel.channel.L_total
stack.subStack[2].cathode_channel.channel.V[1]
stack.subStack[2].cathode_channel.channel.V[2]
stack.subStack[2].cathode_channel.channel.V[3]
stack.subStack[2].cathode_channel.channel.V[4]
stack.subStack[2].cathode_channel.channel.V_tot
stack.subStack[2].cathode_channel.channel.A_mean
stack.subStack[2].cathode_channel.channel.A_heat[1]
stack.subStack[2].cathode_channel.channel.A_heat[2]
stack.subStack[2].cathode_channel.channel.A_heat[3]
stack.subStack[2].cathode_channel.channel.A_heat[4]
stack.subStack[2].cathode_channel.channel.ni
stack.subStack[2].cathode_channel.channel.initOpt
stack.subStack[2].cathode_channel.channel.p_start_in
stack.subStack[2].cathode_channel.channel.p_start_out
stack.subStack[2].cathode_channel.channel.p_start[1]
stack.subStack[2].cathode_channel.channel.p_start[2]
stack.subStack[2].cathode_channel.channel.p_start[3]
stack.subStack[2].cathode_channel.channel.p_start[4]
stack.subStack[2].cathode_channel.channel.p_start[5]
stack.subStack[2].cathode_channel.channel.initFromEnthalpy
stack.subStack[2].cathode_channel.channel.h_start_in
stack.subStack[2].cathode_channel.channel.h_start_out
stack.subStack[2].cathode_channel.channel.h_start[1]
stack.subStack[2].cathode_channel.channel.h_start[2]
stack.subStack[2].cathode_channel.channel.h_start[3]
stack.subStack[2].cathode_channel.channel.h_start[4]
stack.subStack[2].cathode_channel.channel.h_start[5]
stack.subStack[2].cathode_channel.channel.T_start_in
stack.subStack[2].cathode_channel.channel.T_start_out
stack.subStack[2].cathode_channel.channel.T_start[1]
stack.subStack[2].cathode_channel.channel.T_start[2]
stack.subStack[2].cathode_channel.channel.T_start[3]
stack.subStack[2].cathode_channel.channel.T_start[4]
stack.subStack[2].cathode_channel.channel.T_start[5]
stack.subStack[2].cathode_channel.channel.X_start[1]
stack.subStack[2].cathode_channel.channel.X_start[2]
stack.subStack[2].cathode_channel.channel.X_start[3]
stack.subStack[2].cathode_channel.channel.X_start[4]
stack.subStack[2].cathode_channel.channel.X_start[5]
stack.subStack[2].cathode_channel.channel.m_flow_start
stack.subStack[2].cathode_channel.channel.positiveFlow
stack.subStack[2].cathode_channel.channel.from_dp
stack.subStack[2].cathode_channel.channel.dp_smooth
stack.subStack[2].cathode_channel.channel.mflow_smooth
stack.subStack[2].cathode_channel.channel.generateEventForReversal
stack.subStack[2].cathode_channel.channel.NA
stack.subStack[2].cathode_channel.channel.NB
stack.subStack[2].cathode_channel.channel.T[1]
stack.subStack[2].cathode_channel.channel.der(T[1])
stack.subStack[2].cathode_channel.channel.T[2]
stack.subStack[2].cathode_channel.channel.der(T[2])
stack.subStack[2].cathode_channel.channel.T[3]
stack.subStack[2].cathode_channel.channel.der(T[3])
stack.subStack[2].cathode_channel.channel.T[4]
stack.subStack[2].cathode_channel.channel.der(T[4])
stack.subStack[2].cathode_channel.channel.dp_asState
stack.subStack[2].cathode_channel.channel.frictionDistribution
stack.subStack[2].cathode_channel.channel.n_fric
stack.subStack[2].cathode_channel.channel.CF_PressureLoss
stack.subStack[2].cathode_channel.channel.CF_HeatTransfer
stack.subStack[2].cathode_channel.channel.includeStaticHead
stack.subStack[2].cathode_channel.channel.levels[1]
stack.subStack[2].cathode_channel.channel.levels[2]
stack.subStack[2].cathode_channel.channel.levels[3]
stack.subStack[2].cathode_channel.channel.levels[4]
stack.subStack[2].cathode_channel.channel.g
stack.subStack[2].cathode_channel.channel.friction[1].A
stack.subStack[2].cathode_channel.channel.friction[1].Dhyd
stack.subStack[2].cathode_channel.channel.friction[1].n_channels
stack.subStack[2].cathode_channel.channel.friction[1].lengthFraction
stack.subStack[2].cathode_channel.channel.friction[1].flowFraction0
stack.subStack[2].cathode_channel.channel.friction[1].dpFraction0
stack.subStack[2].cathode_channel.channel.friction[1].from_dp
stack.subStack[2].cathode_channel.channel.friction[1].positiveFlow
stack.subStack[2].cathode_channel.channel.friction[1].dp_smooth
stack.subStack[2].cathode_channel.channel.friction[1].mflow_smooth
stack.subStack[2].cathode_channel.channel.friction[1].useFixedDensity
stack.subStack[2].cathode_channel.channel.friction[1].reference_d
stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[1].dp_from_isothermal
stack.subStack[2].cathode_channel.channel.friction[1].dA
stack.subStack[2].cathode_channel.channel.friction[1].dB
stack.subStack[2].cathode_channel.channel.friction[1].d0
stack.subStack[2].cathode_channel.channel.friction[1].dp0
stack.subStack[2].cathode_channel.channel.friction[1].m_flow0
stack.subStack[2].cathode_channel.channel.friction[2].A
stack.subStack[2].cathode_channel.channel.friction[2].Dhyd
stack.subStack[2].cathode_channel.channel.friction[2].n_channels
stack.subStack[2].cathode_channel.channel.friction[2].lengthFraction
stack.subStack[2].cathode_channel.channel.friction[2].flowFraction0
stack.subStack[2].cathode_channel.channel.friction[2].dpFraction0
stack.subStack[2].cathode_channel.channel.friction[2].from_dp
stack.subStack[2].cathode_channel.channel.friction[2].positiveFlow
stack.subStack[2].cathode_channel.channel.friction[2].dp_smooth
stack.subStack[2].cathode_channel.channel.friction[2].mflow_smooth
stack.subStack[2].cathode_channel.channel.friction[2].useFixedDensity
stack.subStack[2].cathode_channel.channel.friction[2].reference_d
stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[2].dp_from_isothermal
stack.subStack[2].cathode_channel.channel.friction[2].dA
stack.subStack[2].cathode_channel.channel.friction[2].dB
stack.subStack[2].cathode_channel.channel.friction[2].d0
stack.subStack[2].cathode_channel.channel.friction[2].dp0
stack.subStack[2].cathode_channel.channel.friction[2].m_flow0
stack.subStack[2].cathode_channel.channel.friction[3].A
stack.subStack[2].cathode_channel.channel.friction[3].Dhyd
stack.subStack[2].cathode_channel.channel.friction[3].n_channels
stack.subStack[2].cathode_channel.channel.friction[3].lengthFraction
stack.subStack[2].cathode_channel.channel.friction[3].flowFraction0
stack.subStack[2].cathode_channel.channel.friction[3].dpFraction0
stack.subStack[2].cathode_channel.channel.friction[3].from_dp
stack.subStack[2].cathode_channel.channel.friction[3].positiveFlow
stack.subStack[2].cathode_channel.channel.friction[3].dp_smooth
stack.subStack[2].cathode_channel.channel.friction[3].mflow_smooth
stack.subStack[2].cathode_channel.channel.friction[3].useFixedDensity
stack.subStack[2].cathode_channel.channel.friction[3].reference_d
stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[3].dp_from_isothermal
stack.subStack[2].cathode_channel.channel.friction[3].dA
stack.subStack[2].cathode_channel.channel.friction[3].dB
stack.subStack[2].cathode_channel.channel.friction[3].d0
stack.subStack[2].cathode_channel.channel.friction[3].dp0
stack.subStack[2].cathode_channel.channel.friction[3].m_flow0
stack.subStack[2].cathode_channel.channel.friction[4].A
stack.subStack[2].cathode_channel.channel.friction[4].Dhyd
stack.subStack[2].cathode_channel.channel.friction[4].n_channels
stack.subStack[2].cathode_channel.channel.friction[4].lengthFraction
stack.subStack[2].cathode_channel.channel.friction[4].flowFraction0
stack.subStack[2].cathode_channel.channel.friction[4].dpFraction0
stack.subStack[2].cathode_channel.channel.friction[4].from_dp
stack.subStack[2].cathode_channel.channel.friction[4].positiveFlow
stack.subStack[2].cathode_channel.channel.friction[4].dp_smooth
stack.subStack[2].cathode_channel.channel.friction[4].mflow_smooth
stack.subStack[2].cathode_channel.channel.friction[4].useFixedDensity
stack.subStack[2].cathode_channel.channel.friction[4].reference_d
stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[1]
stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[2]
stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[3]
stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[4]
stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[5]
stack.subStack[2].cathode_channel.channel.friction[4].dp_from_isothermal
stack.subStack[2].cathode_channel.channel.friction[4].dA
stack.subStack[2].cathode_channel.channel.friction[4].dB
stack.subStack[2].cathode_channel.channel.friction[4].d0
stack.subStack[2].cathode_channel.channel.friction[4].dp0
stack.subStack[2].cathode_channel.channel.friction[4].m_flow0
stack.subStack[2].cathode_channel.channel.htcoeff[1].A
stack.subStack[2].cathode_channel.channel.htcoeff[1].L
stack.subStack[2].cathode_channel.channel.htcoeff[1].Dhyd
stack.subStack[2].cathode_channel.channel.htcoeff[1].ht_from_isothermal
stack.subStack[2].cathode_channel.channel.htcoeff[1].CF_length
stack.subStack[2].cathode_channel.channel.htcoeff[1].alpha
stack.subStack[2].cathode_channel.channel.htcoeff[2].A
stack.subStack[2].cathode_channel.channel.htcoeff[2].L
stack.subStack[2].cathode_channel.channel.htcoeff[2].Dhyd
stack.subStack[2].cathode_channel.channel.htcoeff[2].ht_from_isothermal
stack.subStack[2].cathode_channel.channel.htcoeff[2].CF_length
stack.subStack[2].cathode_channel.channel.htcoeff[2].alpha
stack.subStack[2].cathode_channel.channel.htcoeff[3].A
stack.subStack[2].cathode_channel.channel.htcoeff[3].L
stack.subStack[2].cathode_channel.channel.htcoeff[3].Dhyd
stack.subStack[2].cathode_channel.channel.htcoeff[3].ht_from_isothermal
stack.subStack[2].cathode_channel.channel.htcoeff[3].CF_length
stack.subStack[2].cathode_channel.channel.htcoeff[3].alpha
stack.subStack[2].cathode_channel.channel.htcoeff[4].A
stack.subStack[2].cathode_channel.channel.htcoeff[4].L
stack.subStack[2].cathode_channel.channel.htcoeff[4].Dhyd
stack.subStack[2].cathode_channel.channel.htcoeff[4].ht_from_isothermal
stack.subStack[2].cathode_channel.channel.htcoeff[4].CF_length
stack.subStack[2].cathode_channel.channel.htcoeff[4].alpha
stack.subStack[2].cathode_channel.channel.reaction.N
stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[1]
stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[2]
stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[3]
stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[4]
stack.subStack[2].cathode_channel.channel.reaction.Q[1]
stack.subStack[2].cathode_channel.channel.reaction.Q[2]
stack.subStack[2].cathode_channel.channel.reaction.Q[3]
stack.subStack[2].cathode_channel.channel.reaction.Q[4]
stack.subStack[2].cathode_channel.channel.reaction.mX_flow[1, 5]
stack.subStack[2].cathode_channel.channel.reaction.mX_flow[2, 5]
stack.subStack[2].cathode_channel.channel.reaction.mX_flow[3, 5]
stack.subStack[2].cathode_channel.channel.reaction.mX_flow[4, 5]
stack.subStack[2].cathode_channel.channel.reaction.n_reac
stack.subStack[2].cathode_channel.channel.reaction.pstart
stack.subStack[2].cathode_channel.channel.reaction.Tstart
stack.subStack[2].cathode_channel.channel.reaction.Xstart[1]
stack.subStack[2].cathode_channel.channel.reaction.Xstart[2]
stack.subStack[2].cathode_channel.channel.reaction.Xstart[3]
stack.subStack[2].cathode_channel.channel.reaction.Xstart[4]
stack.subStack[2].cathode_channel.channel.reaction.Xstart[5]
stack.subStack[2].cathode_channel.channel.reaction.V
stack.subStack[2].cathode_channel.channel.reaction.scale
stack.subStack[2].cathode_channel.channel.reaction.MMX[1]
stack.subStack[2].cathode_channel.channel.reaction.MMX[2]
stack.subStack[2].cathode_channel.channel.reaction.MMX[3]
stack.subStack[2].cathode_channel.channel.reaction.MMX[4]
stack.subStack[2].cathode_channel.channel.reaction.MMX[5]
stack.subStack[2].cathode_channel.channel.reaction.MM[1]
stack.subStack[2].cathode_channel.channel.reaction.MM[2]
stack.subStack[2].cathode_channel.channel.reaction.MM[3]
stack.subStack[2].cathode_channel.channel.reaction.MM[4]
stack.subStack[2].cathode_channel.channel.reaction.der(MM[1])
stack.subStack[2].cathode_channel.channel.reaction.der(MM[2])
stack.subStack[2].cathode_channel.channel.reaction.der(MM[3])
stack.subStack[2].cathode_channel.channel.reaction.der(MM[4])
stack.subStack[2].cathode_channel.channel.reaction.y_start[1]
stack.subStack[2].cathode_channel.channel.reaction.y_start[2]
stack.subStack[2].cathode_channel.channel.reaction.y_start[3]
stack.subStack[2].cathode_channel.channel.reaction.y_start[4]
stack.subStack[2].cathode_channel.channel.reaction.y_start[5]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[1]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[2]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[3]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[4]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[5]
stack.subStack[2].cathode_channel.channel.reaction.pref
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 1]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 2]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 3]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 4]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 5]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 1]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 2]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 3]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 4]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 5]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 1]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 2]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 3]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 4]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 5]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 1]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 2]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 3]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 4]
stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 5]
stack.subStack[2].cathode_channel.channel.reaction.Ztot_start
stack.subStack[2].cathode_channel.channel.reaction.Zx_start[1]
stack.subStack[2].cathode_channel.channel.reaction.Zx_start[2]
stack.subStack[2].cathode_channel.channel.reaction.Zx_start[3]
stack.subStack[2].cathode_channel.channel.reaction.Zx_start[4]
stack.subStack[2].cathode_channel.channel.reaction.Zx_start[5]
stack.subStack[2].cathode_channel.channel.reaction.CF_conversion
stack.subStack[2].cathode_channel.channel.reaction.Tscale
stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 1]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 1])
stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 2]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 2])
stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 3]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 3])
stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 4]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 4])
stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 5]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 5])
stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 1]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 1])
stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 2]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 2])
stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 3]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 3])
stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 4]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 4])
stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 5]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 5])
stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 1]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 1])
stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 2]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 2])
stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 3]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 3])
stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 4]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 4])
stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 5]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 5])
stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 1]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 1])
stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 2]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 2])
stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 3]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 3])
stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 4]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 4])
stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 5]
stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 5])
stack.subStack[2].cathode_channel.channel.reaction.Ztot[1]
stack.subStack[2].cathode_channel.channel.reaction.Ztot[2]
stack.subStack[2].cathode_channel.channel.reaction.Ztot[3]
stack.subStack[2].cathode_channel.channel.reaction.Ztot[4]
stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[1])
stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[2])
stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[3])
stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[4])
stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 1]
stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 2]
stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 3]
stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 4]
stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 5]
stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 1]
stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 2]
stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 3]
stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 4]
stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 5]
stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 1]
stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 2]
stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 3]
stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 4]
stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 5]
stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 1]
stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 2]
stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 3]
stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 4]
stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 5]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 1]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 2]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 3]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 4]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 5]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 1]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 2]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 3]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 4]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 5]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 1]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 2]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 3]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 4]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 5]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 1]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 2]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 3]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 4]
stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 5]
stack.subStack[2].cathode_channel.channel.reaction.Zx_nominal
stack.subStack[2].cathode_channel.channel.reaction.epsZ
stack.subStack[2].cathode_channel.channel.reaction.state[1].p
stack.subStack[2].cathode_channel.channel.reaction.state[1].T
stack.subStack[2].cathode_channel.channel.reaction.state[1].X[1]
stack.subStack[2].cathode_channel.channel.reaction.state[1].X[2]
stack.subStack[2].cathode_channel.channel.reaction.state[1].X[3]
stack.subStack[2].cathode_channel.channel.reaction.state[1].X[4]
stack.subStack[2].cathode_channel.channel.reaction.state[1].X[5]
stack.subStack[2].cathode_channel.channel.reaction.state[2].p
stack.subStack[2].cathode_channel.channel.reaction.state[2].T
stack.subStack[2].cathode_channel.channel.reaction.state[2].X[1]
stack.subStack[2].cathode_channel.channel.reaction.state[2].X[2]
stack.subStack[2].cathode_channel.channel.reaction.state[2].X[3]
stack.subStack[2].cathode_channel.channel.reaction.state[2].X[4]
stack.subStack[2].cathode_channel.channel.reaction.state[2].X[5]
stack.subStack[2].cathode_channel.channel.reaction.state[3].p
stack.subStack[2].cathode_channel.channel.reaction.state[3].T
stack.subStack[2].cathode_channel.channel.reaction.state[3].X[1]
stack.subStack[2].cathode_channel.channel.reaction.state[3].X[2]
stack.subStack[2].cathode_channel.channel.reaction.state[3].X[3]
stack.subStack[2].cathode_channel.channel.reaction.state[3].X[4]
stack.subStack[2].cathode_channel.channel.reaction.state[3].X[5]
stack.subStack[2].cathode_channel.channel.reaction.state[4].p
stack.subStack[2].cathode_channel.channel.reaction.state[4].T
stack.subStack[2].cathode_channel.channel.reaction.state[4].X[1]
stack.subStack[2].cathode_channel.channel.reaction.state[4].X[2]
stack.subStack[2].cathode_channel.channel.reaction.state[4].X[3]
stack.subStack[2].cathode_channel.channel.reaction.state[4].X[4]
stack.subStack[2].cathode_channel.channel.reaction.state[4].X[5]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 1]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 2]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 3]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 4]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 5]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 1]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 2]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 3]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 4]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 5]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 1]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 2]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 3]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 4]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 5]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 1]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 2]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 3]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 4]
stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 5]
stack.subStack[2].cathode_channel.channel.gas[1].X[1]
stack.subStack[2].cathode_channel.channel.gas[1].X[2]
stack.subStack[2].cathode_channel.channel.gas[1].X[3]
stack.subStack[2].cathode_channel.channel.gas[1].X[4]
stack.subStack[2].cathode_channel.channel.gas[1].X[5]
stack.subStack[2].cathode_channel.channel.gas[1].d
stack.subStack[2].cathode_channel.channel.gas[1].der(d)
stack.subStack[2].cathode_channel.channel.gas[1].u
stack.subStack[2].cathode_channel.channel.gas[1].Rg
stack.subStack[2].cathode_channel.channel.gas[1].der(Rg)
stack.subStack[2].cathode_channel.channel.gas[1].MM
stack.subStack[2].cathode_channel.channel.gas[1].assertlevel
stack.subStack[2].cathode_channel.channel.gas[1].state.p
stack.subStack[2].cathode_channel.channel.gas[1].state.T
stack.subStack[2].cathode_channel.channel.gas[1].state.X[1]
stack.subStack[2].cathode_channel.channel.gas[1].state.X[2]
stack.subStack[2].cathode_channel.channel.gas[1].state.X[3]
stack.subStack[2].cathode_channel.channel.gas[1].state.X[4]
stack.subStack[2].cathode_channel.channel.gas[1].state.X[5]
stack.subStack[2].cathode_channel.channel.gas[1].preferredMediumStates
stack.subStack[2].cathode_channel.channel.gas[1].T_degC
stack.subStack[2].cathode_channel.channel.gas[1].p_bar
stack.subStack[2].cathode_channel.channel.gas[1].Z[1]
stack.subStack[2].cathode_channel.channel.gas[1].Z[2]
stack.subStack[2].cathode_channel.channel.gas[1].Z[3]
stack.subStack[2].cathode_channel.channel.gas[1].Z[4]
stack.subStack[2].cathode_channel.channel.gas[1].Z[5]
stack.subStack[2].cathode_channel.channel.gas[1].dUZT[1]
stack.subStack[2].cathode_channel.channel.gas[1].dUZT[2]
stack.subStack[2].cathode_channel.channel.gas[1].dUZT[3]
stack.subStack[2].cathode_channel.channel.gas[1].dUZT[4]
stack.subStack[2].cathode_channel.channel.gas[1].dUZT[5]
stack.subStack[2].cathode_channel.channel.gas[1].h_component[1]
stack.subStack[2].cathode_channel.channel.gas[1].h_component[2]
stack.subStack[2].cathode_channel.channel.gas[1].h_component[3]
stack.subStack[2].cathode_channel.channel.gas[1].h_component[4]
stack.subStack[2].cathode_channel.channel.gas[1].h_component[5]
stack.subStack[2].cathode_channel.channel.gas[1].s_component[1]
stack.subStack[2].cathode_channel.channel.gas[1].s_component[2]
stack.subStack[2].cathode_channel.channel.gas[1].s_component[3]
stack.subStack[2].cathode_channel.channel.gas[1].s_component[4]
stack.subStack[2].cathode_channel.channel.gas[1].s_component[5]
stack.subStack[2].cathode_channel.channel.gas[1].u_comp[1]
stack.subStack[2].cathode_channel.channel.gas[1].u_comp[2]
stack.subStack[2].cathode_channel.channel.gas[1].u_comp[3]
stack.subStack[2].cathode_channel.channel.gas[1].u_comp[4]
stack.subStack[2].cathode_channel.channel.gas[1].u_comp[5]
stack.subStack[2].cathode_channel.channel.gas[1].cp
stack.subStack[2].cathode_channel.channel.gas[1].g_formation[1]
stack.subStack[2].cathode_channel.channel.gas[1].g_formation[2]
stack.subStack[2].cathode_channel.channel.gas[1].g_formation[3]
stack.subStack[2].cathode_channel.channel.gas[1].g_formation[4]
stack.subStack[2].cathode_channel.channel.gas[1].g_formation[5]
stack.subStack[2].cathode_channel.channel.gas[1].ddTp
stack.subStack[2].cathode_channel.channel.gas[1].ddpT
stack.subStack[2].cathode_channel.channel.gas[1].dupT
stack.subStack[2].cathode_channel.channel.gas[1].duTp
stack.subStack[2].cathode_channel.channel.gas[1].ddx[1]
stack.subStack[2].cathode_channel.channel.gas[1].ddx[2]
stack.subStack[2].cathode_channel.channel.gas[1].ddx[3]
stack.subStack[2].cathode_channel.channel.gas[1].ddx[4]
stack.subStack[2].cathode_channel.channel.gas[1].ddx[5]
stack.subStack[2].cathode_channel.channel.gas[2].X[1]
stack.subStack[2].cathode_channel.channel.gas[2].X[2]
stack.subStack[2].cathode_channel.channel.gas[2].X[3]
stack.subStack[2].cathode_channel.channel.gas[2].X[4]
stack.subStack[2].cathode_channel.channel.gas[2].X[5]
stack.subStack[2].cathode_channel.channel.gas[2].d
stack.subStack[2].cathode_channel.channel.gas[2].der(d)
stack.subStack[2].cathode_channel.channel.gas[2].u
stack.subStack[2].cathode_channel.channel.gas[2].Rg
stack.subStack[2].cathode_channel.channel.gas[2].der(Rg)
stack.subStack[2].cathode_channel.channel.gas[2].MM
stack.subStack[2].cathode_channel.channel.gas[2].assertlevel
stack.subStack[2].cathode_channel.channel.gas[2].state.p
stack.subStack[2].cathode_channel.channel.gas[2].state.T
stack.subStack[2].cathode_channel.channel.gas[2].state.X[1]
stack.subStack[2].cathode_channel.channel.gas[2].state.X[2]
stack.subStack[2].cathode_channel.channel.gas[2].state.X[3]
stack.subStack[2].cathode_channel.channel.gas[2].state.X[4]
stack.subStack[2].cathode_channel.channel.gas[2].state.X[5]
stack.subStack[2].cathode_channel.channel.gas[2].preferredMediumStates
stack.subStack[2].cathode_channel.channel.gas[2].T_degC
stack.subStack[2].cathode_channel.channel.gas[2].p_bar
stack.subStack[2].cathode_channel.channel.gas[2].Z[1]
stack.subStack[2].cathode_channel.channel.gas[2].Z[2]
stack.subStack[2].cathode_channel.channel.gas[2].Z[3]
stack.subStack[2].cathode_channel.channel.gas[2].Z[4]
stack.subStack[2].cathode_channel.channel.gas[2].Z[5]
stack.subStack[2].cathode_channel.channel.gas[2].dUZT[1]
stack.subStack[2].cathode_channel.channel.gas[2].dUZT[2]
stack.subStack[2].cathode_channel.channel.gas[2].dUZT[3]
stack.subStack[2].cathode_channel.channel.gas[2].dUZT[4]
stack.subStack[2].cathode_channel.channel.gas[2].dUZT[5]
stack.subStack[2].cathode_channel.channel.gas[2].h_component[1]
stack.subStack[2].cathode_channel.channel.gas[2].h_component[2]
stack.subStack[2].cathode_channel.channel.gas[2].h_component[3]
stack.subStack[2].cathode_channel.channel.gas[2].h_component[4]
stack.subStack[2].cathode_channel.channel.gas[2].h_component[5]
stack.subStack[2].cathode_channel.channel.gas[2].s_component[1]
stack.subStack[2].cathode_channel.channel.gas[2].s_component[2]
stack.subStack[2].cathode_channel.channel.gas[2].s_component[3]
stack.subStack[2].cathode_channel.channel.gas[2].s_component[4]
stack.subStack[2].cathode_channel.channel.gas[2].s_component[5]
stack.subStack[2].cathode_channel.channel.gas[2].u_comp[1]
stack.subStack[2].cathode_channel.channel.gas[2].u_comp[2]
stack.subStack[2].cathode_channel.channel.gas[2].u_comp[3]
stack.subStack[2].cathode_channel.channel.gas[2].u_comp[4]
stack.subStack[2].cathode_channel.channel.gas[2].u_comp[5]
stack.subStack[2].cathode_channel.channel.gas[2].cp
stack.subStack[2].cathode_channel.channel.gas[2].g_formation[1]
stack.subStack[2].cathode_channel.channel.gas[2].g_formation[2]
stack.subStack[2].cathode_channel.channel.gas[2].g_formation[3]
stack.subStack[2].cathode_channel.channel.gas[2].g_formation[4]
stack.subStack[2].cathode_channel.channel.gas[2].g_formation[5]
stack.subStack[2].cathode_channel.channel.gas[2].ddTp
stack.subStack[2].cathode_channel.channel.gas[2].ddpT
stack.subStack[2].cathode_channel.channel.gas[2].dupT
stack.subStack[2].cathode_channel.channel.gas[2].duTp
stack.subStack[2].cathode_channel.channel.gas[2].ddx[1]
stack.subStack[2].cathode_channel.channel.gas[2].ddx[2]
stack.subStack[2].cathode_channel.channel.gas[2].ddx[3]
stack.subStack[2].cathode_channel.channel.gas[2].ddx[4]
stack.subStack[2].cathode_channel.channel.gas[2].ddx[5]
stack.subStack[2].cathode_channel.channel.gas[3].X[1]
stack.subStack[2].cathode_channel.channel.gas[3].X[2]
stack.subStack[2].cathode_channel.channel.gas[3].X[3]
stack.subStack[2].cathode_channel.channel.gas[3].X[4]
stack.subStack[2].cathode_channel.channel.gas[3].X[5]
stack.subStack[2].cathode_channel.channel.gas[3].d
stack.subStack[2].cathode_channel.channel.gas[3].der(d)
stack.subStack[2].cathode_channel.channel.gas[3].u
stack.subStack[2].cathode_channel.channel.gas[3].Rg
stack.subStack[2].cathode_channel.channel.gas[3].der(Rg)
stack.subStack[2].cathode_channel.channel.gas[3].MM
stack.subStack[2].cathode_channel.channel.gas[3].assertlevel
stack.subStack[2].cathode_channel.channel.gas[3].state.p
stack.subStack[2].cathode_channel.channel.gas[3].state.T
stack.subStack[2].cathode_channel.channel.gas[3].state.X[1]
stack.subStack[2].cathode_channel.channel.gas[3].state.X[2]
stack.subStack[2].cathode_channel.channel.gas[3].state.X[3]
stack.subStack[2].cathode_channel.channel.gas[3].state.X[4]
stack.subStack[2].cathode_channel.channel.gas[3].state.X[5]
stack.subStack[2].cathode_channel.channel.gas[3].preferredMediumStates
stack.subStack[2].cathode_channel.channel.gas[3].T_degC
stack.subStack[2].cathode_channel.channel.gas[3].p_bar
stack.subStack[2].cathode_channel.channel.gas[3].Z[1]
stack.subStack[2].cathode_channel.channel.gas[3].Z[2]
stack.subStack[2].cathode_channel.channel.gas[3].Z[3]
stack.subStack[2].cathode_channel.channel.gas[3].Z[4]
stack.subStack[2].cathode_channel.channel.gas[3].Z[5]
stack.subStack[2].cathode_channel.channel.gas[3].dUZT[1]
stack.subStack[2].cathode_channel.channel.gas[3].dUZT[2]
stack.subStack[2].cathode_channel.channel.gas[3].dUZT[3]
stack.subStack[2].cathode_channel.channel.gas[3].dUZT[4]
stack.subStack[2].cathode_channel.channel.gas[3].dUZT[5]
stack.subStack[2].cathode_channel.channel.gas[3].h_component[1]
stack.subStack[2].cathode_channel.channel.gas[3].h_component[2]
stack.subStack[2].cathode_channel.channel.gas[3].h_component[3]
stack.subStack[2].cathode_channel.channel.gas[3].h_component[4]
stack.subStack[2].cathode_channel.channel.gas[3].h_component[5]
stack.subStack[2].cathode_channel.channel.gas[3].s_component[1]
stack.subStack[2].cathode_channel.channel.gas[3].s_component[2]
stack.subStack[2].cathode_channel.channel.gas[3].s_component[3]
stack.subStack[2].cathode_channel.channel.gas[3].s_component[4]
stack.subStack[2].cathode_channel.channel.gas[3].s_component[5]
stack.subStack[2].cathode_channel.channel.gas[3].u_comp[1]
stack.subStack[2].cathode_channel.channel.gas[3].u_comp[2]
stack.subStack[2].cathode_channel.channel.gas[3].u_comp[3]
stack.subStack[2].cathode_channel.channel.gas[3].u_comp[4]
stack.subStack[2].cathode_channel.channel.gas[3].u_comp[5]
stack.subStack[2].cathode_channel.channel.gas[3].cp
stack.subStack[2].cathode_channel.channel.gas[3].g_formation[1]
stack.subStack[2].cathode_channel.channel.gas[3].g_formation[2]
stack.subStack[2].cathode_channel.channel.gas[3].g_formation[3]
stack.subStack[2].cathode_channel.channel.gas[3].g_formation[4]
stack.subStack[2].cathode_channel.channel.gas[3].g_formation[5]
stack.subStack[2].cathode_channel.channel.gas[3].ddTp
stack.subStack[2].cathode_channel.channel.gas[3].ddpT
stack.subStack[2].cathode_channel.channel.gas[3].dupT
stack.subStack[2].cathode_channel.channel.gas[3].duTp
stack.subStack[2].cathode_channel.channel.gas[3].ddx[1]
stack.subStack[2].cathode_channel.channel.gas[3].ddx[2]
stack.subStack[2].cathode_channel.channel.gas[3].ddx[3]
stack.subStack[2].cathode_channel.channel.gas[3].ddx[4]
stack.subStack[2].cathode_channel.channel.gas[3].ddx[5]
stack.subStack[2].cathode_channel.channel.gas[4].X[1]
stack.subStack[2].cathode_channel.channel.gas[4].X[2]
stack.subStack[2].cathode_channel.channel.gas[4].X[3]
stack.subStack[2].cathode_channel.channel.gas[4].X[4]
stack.subStack[2].cathode_channel.channel.gas[4].X[5]
stack.subStack[2].cathode_channel.channel.gas[4].d
stack.subStack[2].cathode_channel.channel.gas[4].der(d)
stack.subStack[2].cathode_channel.channel.gas[4].u
stack.subStack[2].cathode_channel.channel.gas[4].Rg
stack.subStack[2].cathode_channel.channel.gas[4].der(Rg)
stack.subStack[2].cathode_channel.channel.gas[4].MM
stack.subStack[2].cathode_channel.channel.gas[4].assertlevel
stack.subStack[2].cathode_channel.channel.gas[4].state.p
stack.subStack[2].cathode_channel.channel.gas[4].state.T
stack.subStack[2].cathode_channel.channel.gas[4].state.X[1]
stack.subStack[2].cathode_channel.channel.gas[4].state.X[2]
stack.subStack[2].cathode_channel.channel.gas[4].state.X[3]
stack.subStack[2].cathode_channel.channel.gas[4].state.X[4]
stack.subStack[2].cathode_channel.channel.gas[4].state.X[5]
stack.subStack[2].cathode_channel.channel.gas[4].preferredMediumStates
stack.subStack[2].cathode_channel.channel.gas[4].p_bar
stack.subStack[2].cathode_channel.channel.gas[4].Z[1]
stack.subStack[2].cathode_channel.channel.gas[4].Z[2]
stack.subStack[2].cathode_channel.channel.gas[4].Z[3]
stack.subStack[2].cathode_channel.channel.gas[4].Z[4]
stack.subStack[2].cathode_channel.channel.gas[4].Z[5]
stack.subStack[2].cathode_channel.channel.gas[4].dUZT[1]
stack.subStack[2].cathode_channel.channel.gas[4].dUZT[2]
stack.subStack[2].cathode_channel.channel.gas[4].dUZT[3]
stack.subStack[2].cathode_channel.channel.gas[4].dUZT[4]
stack.subStack[2].cathode_channel.channel.gas[4].dUZT[5]
stack.subStack[2].cathode_channel.channel.gas[4].h_component[1]
stack.subStack[2].cathode_channel.channel.gas[4].h_component[2]
stack.subStack[2].cathode_channel.channel.gas[4].h_component[3]
stack.subStack[2].cathode_channel.channel.gas[4].h_component[4]
stack.subStack[2].cathode_channel.channel.gas[4].h_component[5]
stack.subStack[2].cathode_channel.channel.gas[4].s_component[1]
stack.subStack[2].cathode_channel.channel.gas[4].s_component[2]
stack.subStack[2].cathode_channel.channel.gas[4].s_component[3]
stack.subStack[2].cathode_channel.channel.gas[4].s_component[4]
stack.subStack[2].cathode_channel.channel.gas[4].s_component[5]
stack.subStack[2].cathode_channel.channel.gas[4].u_comp[1]
stack.subStack[2].cathode_channel.channel.gas[4].u_comp[2]
stack.subStack[2].cathode_channel.channel.gas[4].u_comp[3]
stack.subStack[2].cathode_channel.channel.gas[4].u_comp[4]
stack.subStack[2].cathode_channel.channel.gas[4].u_comp[5]
stack.subStack[2].cathode_channel.channel.gas[4].cp
stack.subStack[2].cathode_channel.channel.gas[4].g_formation[1]
stack.subStack[2].cathode_channel.channel.gas[4].g_formation[2]
stack.subStack[2].cathode_channel.channel.gas[4].g_formation[3]
stack.subStack[2].cathode_channel.channel.gas[4].g_formation[4]
stack.subStack[2].cathode_channel.channel.gas[4].g_formation[5]
stack.subStack[2].cathode_channel.channel.gas[4].ddTp
stack.subStack[2].cathode_channel.channel.gas[4].ddpT
stack.subStack[2].cathode_channel.channel.gas[4].dupT
stack.subStack[2].cathode_channel.channel.gas[4].duTp
stack.subStack[2].cathode_channel.channel.gas[4].ddx[1]
stack.subStack[2].cathode_channel.channel.gas[4].ddx[2]
stack.subStack[2].cathode_channel.channel.gas[4].ddx[3]
stack.subStack[2].cathode_channel.channel.gas[4].ddx[4]
stack.subStack[2].cathode_channel.channel.gas[4].ddx[5]
stack.subStack[2].cathode_channel.channel.der(p[1])
stack.subStack[2].cathode_channel.channel.der(p[2])
stack.subStack[2].cathode_channel.channel.der(p[3])
stack.subStack[2].cathode_channel.channel.der(p[4])
stack.subStack[2].cathode_channel.channel.M[1]
stack.subStack[2].cathode_channel.channel.M[2]
stack.subStack[2].cathode_channel.channel.M[3]
stack.subStack[2].cathode_channel.channel.M[4]
stack.subStack[2].cathode_channel.channel.der(M[1])
stack.subStack[2].cathode_channel.channel.der(M[2])
stack.subStack[2].cathode_channel.channel.der(M[3])
stack.subStack[2].cathode_channel.channel.der(M[4])
stack.subStack[2].cathode_channel.channel.E_seg[1]
stack.subStack[2].cathode_channel.channel.E_seg[2]
stack.subStack[2].cathode_channel.channel.E_seg[3]
stack.subStack[2].cathode_channel.channel.E_seg[4]
stack.subStack[2].cathode_channel.channel.MXi[1, 1]
stack.subStack[2].cathode_channel.channel.MXi[1, 2]
stack.subStack[2].cathode_channel.channel.MXi[1, 3]
stack.subStack[2].cathode_channel.channel.MXi[1, 4]
stack.subStack[2].cathode_channel.channel.MXi[1, 5]
stack.subStack[2].cathode_channel.channel.MXi[2, 1]
stack.subStack[2].cathode_channel.channel.MXi[2, 2]
stack.subStack[2].cathode_channel.channel.MXi[2, 3]
stack.subStack[2].cathode_channel.channel.MXi[2, 4]
stack.subStack[2].cathode_channel.channel.MXi[2, 5]
stack.subStack[2].cathode_channel.channel.MXi[3, 1]
stack.subStack[2].cathode_channel.channel.MXi[3, 2]
stack.subStack[2].cathode_channel.channel.MXi[3, 3]
stack.subStack[2].cathode_channel.channel.MXi[3, 4]
stack.subStack[2].cathode_channel.channel.MXi[3, 5]
stack.subStack[2].cathode_channel.channel.MXi[4, 1]
stack.subStack[2].cathode_channel.channel.MXi[4, 2]
stack.subStack[2].cathode_channel.channel.MXi[4, 3]
stack.subStack[2].cathode_channel.channel.MXi[4, 4]
stack.subStack[2].cathode_channel.channel.MXi[4, 5]
stack.subStack[2].cathode_channel.channel.dp[1]
stack.subStack[2].cathode_channel.channel.dp[2]
stack.subStack[2].cathode_channel.channel.dp[3]
stack.subStack[2].cathode_channel.channel.dp[4]
stack.subStack[2].cathode_channel.channel.dp[5]
stack.subStack[2].cathode_channel.channel.sh[1]
stack.subStack[2].cathode_channel.channel.sh[2]
stack.subStack[2].cathode_channel.channel.sh[3]
stack.subStack[2].cathode_channel.channel.sh[4]
stack.subStack[2].cathode_channel.channel.state[1].X[1]
stack.subStack[2].cathode_channel.channel.state[1].X[2]
stack.subStack[2].cathode_channel.channel.state[1].X[3]
stack.subStack[2].cathode_channel.channel.state[1].X[4]
stack.subStack[2].cathode_channel.channel.state[1].X[5]
stack.subStack[2].cathode_channel.channel.state[6].T
stack.subStack[2].cathode_channel.channel.Q[1]
stack.subStack[2].cathode_channel.channel.Q[2]
stack.subStack[2].cathode_channel.channel.Q[3]
stack.subStack[2].cathode_channel.channel.Q[4]
stack.subStack[2].cathode_channel.channel.Q_tot
stack.subStack[2].cathode_channel.channel.Q_wall[1]
stack.subStack[2].cathode_channel.channel.Q_wall[2]
stack.subStack[2].cathode_channel.channel.Q_wall[3]
stack.subStack[2].cathode_channel.channel.Q_wall[4]
stack.subStack[2].cathode_channel.channel.alpha[1]
stack.subStack[2].cathode_channel.channel.alpha[2]
stack.subStack[2].cathode_channel.channel.alpha[3]
stack.subStack[2].cathode_channel.channel.alpha[4]
stack.subStack[2].cathode_channel.channel.rMX[1, 1]
stack.subStack[2].cathode_channel.channel.rMX[1, 2]
stack.subStack[2].cathode_channel.channel.rMX[1, 3]
stack.subStack[2].cathode_channel.channel.rMX[1, 4]
stack.subStack[2].cathode_channel.channel.rMX[2, 1]
stack.subStack[2].cathode_channel.channel.rMX[2, 2]
stack.subStack[2].cathode_channel.channel.rMX[2, 3]
stack.subStack[2].cathode_channel.channel.rMX[2, 4]
stack.subStack[2].cathode_channel.channel.rMX[3, 1]
stack.subStack[2].cathode_channel.channel.rMX[3, 2]
stack.subStack[2].cathode_channel.channel.rMX[3, 3]
stack.subStack[2].cathode_channel.channel.rMX[3, 4]
stack.subStack[2].cathode_channel.channel.rMX[4, 1]
stack.subStack[2].cathode_channel.channel.rMX[4, 2]
stack.subStack[2].cathode_channel.channel.rMX[4, 3]
stack.subStack[2].cathode_channel.channel.rMX[4, 4]
stack.subStack[2].cathode_channel.channel.mflow_A_in
stack.subStack[2].cathode_channel.channel.mflow_B_in
stack.subStack[2].cathode_channel.channel.m_flow_fric[1]
stack.subStack[2].cathode_channel.channel.m_flow_fric[2]
stack.subStack[2].cathode_channel.channel.m_flow_fric[3]
stack.subStack[2].cathode_channel.channel.XA[1]
stack.subStack[2].cathode_channel.channel.XA[2]
stack.subStack[2].cathode_channel.channel.XA[3]
stack.subStack[2].cathode_channel.channel.XA[4]
stack.subStack[2].cathode_channel.channel.XA[5]
stack.subStack[2].cathode_channel.channel.XB[1]
stack.subStack[2].cathode_channel.channel.XB[2]
stack.subStack[2].cathode_channel.channel.XB[3]
stack.subStack[2].cathode_channel.channel.XB[4]
stack.subStack[2].cathode_channel.channel.XB[5]
stack.subStack[2].cathode_channel.channel.n_channels_fric[1]
stack.subStack[2].cathode_channel.channel.n_channels_fric[2]
stack.subStack[2].cathode_channel.channel.n_channels_fric[3]
stack.subStack[2].cathode_channel.channel.n_channels_fric[4]
stack.subStack[2].cathode_channel.channel.T_wall[1]
stack.subStack[2].cathode_channel.channel.T_wall[2]
stack.subStack[2].cathode_channel.channel.T_wall[3]
stack.subStack[2].cathode_channel.channel.T_wall[4]
stack.subStack[2].cathode_channel.channel.nS
stack.subStack[2].cathode_channel.channel.mX_flow[1, 1]
stack.subStack[2].cathode_channel.channel.mX_flow[1, 2]
stack.subStack[2].cathode_channel.channel.mX_flow[1, 3]
stack.subStack[2].cathode_channel.channel.mX_flow[1, 4]
stack.subStack[2].cathode_channel.channel.mX_flow[1, 5]
stack.subStack[2].cathode_channel.channel.mX_flow[2, 1]
stack.subStack[2].cathode_channel.channel.mX_flow[2, 2]
stack.subStack[2].cathode_channel.channel.mX_flow[2, 3]
stack.subStack[2].cathode_channel.channel.mX_flow[2, 4]
stack.subStack[2].cathode_channel.channel.mX_flow[2, 5]
stack.subStack[2].cathode_channel.channel.mX_flow[3, 1]
stack.subStack[2].cathode_channel.channel.mX_flow[3, 2]
stack.subStack[2].cathode_channel.channel.mX_flow[3, 3]
stack.subStack[2].cathode_channel.channel.mX_flow[3, 4]
stack.subStack[2].cathode_channel.channel.mX_flow[3, 5]
stack.subStack[2].cathode_channel.channel.mX_flow[4, 1]
stack.subStack[2].cathode_channel.channel.mX_flow[4, 2]
stack.subStack[2].cathode_channel.channel.mX_flow[4, 3]
stack.subStack[2].cathode_channel.channel.mX_flow[4, 4]
stack.subStack[2].cathode_channel.channel.mX_flow[4, 5]
stack.subStack[2].cathode_channel.channel.mX_flow[5, 1]
stack.subStack[2].cathode_channel.channel.mX_flow[5, 2]
stack.subStack[2].cathode_channel.channel.mX_flow[5, 3]
stack.subStack[2].cathode_channel.channel.mX_flow[5, 4]
stack.subStack[2].cathode_channel.channel.mX_flow[5, 5]
stack.subStack[2].cathode_channel.channel.H_flow[1]
stack.subStack[2].cathode_channel.channel.H_flow[2]
stack.subStack[2].cathode_channel.channel.H_flow[3]
stack.subStack[2].cathode_channel.channel.H_flow[4]
stack.subStack[2].cathode_channel.channel.H_flow[5]
stack.subStack[2].cathode_channel.channel.dE[1]
stack.subStack[2].cathode_channel.channel.dE[2]
stack.subStack[2].cathode_channel.channel.dE[3]
stack.subStack[2].cathode_channel.channel.dE[4]
stack.subStack[2].cathode_channel.channel.dMX[1, 1]
stack.subStack[2].cathode_channel.channel.dMX[1, 2]
stack.subStack[2].cathode_channel.channel.dMX[1, 3]
stack.subStack[2].cathode_channel.channel.dMX[1, 4]
stack.subStack[2].cathode_channel.channel.dMX[1, 5]
stack.subStack[2].cathode_channel.channel.dMX[2, 1]
stack.subStack[2].cathode_channel.channel.dMX[2, 2]
stack.subStack[2].cathode_channel.channel.dMX[2, 3]
stack.subStack[2].cathode_channel.channel.dMX[2, 4]
stack.subStack[2].cathode_channel.channel.dMX[2, 5]
stack.subStack[2].cathode_channel.channel.dMX[3, 1]
stack.subStack[2].cathode_channel.channel.dMX[3, 2]
stack.subStack[2].cathode_channel.channel.dMX[3, 3]
stack.subStack[2].cathode_channel.channel.dMX[3, 4]
stack.subStack[2].cathode_channel.channel.dMX[3, 5]
stack.subStack[2].cathode_channel.channel.dMX[4, 1]
stack.subStack[2].cathode_channel.channel.dMX[4, 2]
stack.subStack[2].cathode_channel.channel.dMX[4, 3]
stack.subStack[2].cathode_channel.channel.dMX[4, 4]
stack.subStack[2].cathode_channel.channel.dMX[4, 5]
stack.subStack[2].cathode_channel.channel.dUTZ[1]
stack.subStack[2].cathode_channel.channel.dUTZ[2]
stack.subStack[2].cathode_channel.channel.dUTZ[3]
stack.subStack[2].cathode_channel.channel.dUTZ[4]
stack.subStack[2].cathode_channel.channel.Z[1, 1]
stack.subStack[2].cathode_channel.channel.Z[1, 2]
stack.subStack[2].cathode_channel.channel.Z[1, 3]
stack.subStack[2].cathode_channel.channel.Z[1, 4]
stack.subStack[2].cathode_channel.channel.Z[1, 5]
stack.subStack[2].cathode_channel.channel.Z[2, 1]
stack.subStack[2].cathode_channel.channel.Z[2, 2]
stack.subStack[2].cathode_channel.channel.Z[2, 3]
stack.subStack[2].cathode_channel.channel.Z[2, 4]
stack.subStack[2].cathode_channel.channel.Z[2, 5]
stack.subStack[2].cathode_channel.channel.Z[3, 1]
stack.subStack[2].cathode_channel.channel.Z[3, 2]
stack.subStack[2].cathode_channel.channel.Z[3, 3]
stack.subStack[2].cathode_channel.channel.Z[3, 4]
stack.subStack[2].cathode_channel.channel.Z[3, 5]
stack.subStack[2].cathode_channel.channel.Z[4, 1]
stack.subStack[2].cathode_channel.channel.Z[4, 2]
stack.subStack[2].cathode_channel.channel.Z[4, 3]
stack.subStack[2].cathode_channel.channel.Z[4, 4]
stack.subStack[2].cathode_channel.channel.Z[4, 5]
stack.subStack[2].cathode_channel.channel.der(Z[1, 1])
stack.subStack[2].cathode_channel.channel.der(Z[1, 2])
stack.subStack[2].cathode_channel.channel.der(Z[1, 3])
stack.subStack[2].cathode_channel.channel.der(Z[1, 4])
stack.subStack[2].cathode_channel.channel.der(Z[1, 5])
stack.subStack[2].cathode_channel.channel.der(Z[2, 1])
stack.subStack[2].cathode_channel.channel.der(Z[2, 2])
stack.subStack[2].cathode_channel.channel.der(Z[2, 3])
stack.subStack[2].cathode_channel.channel.der(Z[2, 4])
stack.subStack[2].cathode_channel.channel.der(Z[2, 5])
stack.subStack[2].cathode_channel.channel.der(Z[3, 1])
stack.subStack[2].cathode_channel.channel.der(Z[3, 2])
stack.subStack[2].cathode_channel.channel.der(Z[3, 3])
stack.subStack[2].cathode_channel.channel.der(Z[3, 4])
stack.subStack[2].cathode_channel.channel.der(Z[3, 5])
stack.subStack[2].cathode_channel.channel.der(Z[4, 1])
stack.subStack[2].cathode_channel.channel.der(Z[4, 2])
stack.subStack[2].cathode_channel.channel.der(Z[4, 3])
stack.subStack[2].cathode_channel.channel.der(Z[4, 4])
stack.subStack[2].cathode_channel.channel.der(Z[4, 5])
stack.subStack[2].cathode_channel.port[1].mX_flow[1]
stack.subStack[2].cathode_channel.port[1].mX_flow[2]
stack.subStack[2].cathode_channel.port[1].mX_flow[3]
stack.subStack[2].cathode_channel.port[1].mX_flow[4]
stack.subStack[2].cathode_channel.port[2].mX_flow[1]
stack.subStack[2].cathode_channel.port[2].mX_flow[2]
stack.subStack[2].cathode_channel.port[2].mX_flow[3]
stack.subStack[2].cathode_channel.port[2].mX_flow[4]
stack.subStack[2].cathode_channel.port[3].mX_flow[1]
stack.subStack[2].cathode_channel.port[3].mX_flow[2]
stack.subStack[2].cathode_channel.port[3].mX_flow[3]
stack.subStack[2].cathode_channel.port[3].mX_flow[4]
stack.subStack[2].cathode_channel.port[4].mX_flow[1]
stack.subStack[2].cathode_channel.port[4].mX_flow[2]
stack.subStack[2].cathode_channel.port[4].mX_flow[3]
stack.subStack[2].cathode_channel.port[4].mX_flow[4]
stack.subStack[2].ref[1]
stack.subStack[2].air[1]
stack.subStack[3].N
stack.subStack[3].nX_an
stack.subStack[3].nX_cath
stack.subStack[3].A_cell
stack.subStack[3].kc
stack.subStack[3].includeCellConduction
stack.subStack[3].lambda_cell
stack.subStack[3].A_crosssection_cell
stack.subStack[3].length_cell
stack.subStack[3].G_cell
stack.subStack[3].n_cell
stack.subStack[3].M_cell
stack.subStack[3].Cp_cell
stack.subStack[3].addProxToAnode
stack.subStack[3].P_stack
stack.subStack[3].anode_stoich
stack.subStack[3].cathode_stoich
stack.subStack[3].cell.N
stack.subStack[3].cell.nX_an
stack.subStack[3].cell.nX_cath
stack.subStack[3].cell.A_cell
stack.subStack[3].cell.n_cell
stack.subStack[3].cell.MCp_cell
stack.subStack[3].cell.kc
stack.subStack[3].cell.pstart
stack.subStack[3].cell.Tstart
stack.subStack[3].cell.T_cell[1]
stack.subStack[3].cell.der(T_cell[1])
stack.subStack[3].cell.T_cell[2]
stack.subStack[3].cell.der(T_cell[2])
stack.subStack[3].cell.T_cell[3]
stack.subStack[3].cell.der(T_cell[3])
stack.subStack[3].cell.T_cell[4]
stack.subStack[3].cell.der(T_cell[4])
stack.subStack[3].cell.Q_cell[1]
stack.subStack[3].cell.Q_cell[2]
stack.subStack[3].cell.Q_cell[3]
stack.subStack[3].cell.Q_cell[4]
stack.subStack[3].cell.T_from_h
stack.subStack[3].cell.wall_an[1].Q_flow
stack.subStack[3].cell.wall_an[2].Q_flow
stack.subStack[3].cell.wall_an[3].Q_flow
stack.subStack[3].cell.wall_an[4].Q_flow
stack.subStack[3].cell.wall_cath[1].Q_flow
stack.subStack[3].cell.wall_cath[2].Q_flow
stack.subStack[3].cell.wall_cath[3].Q_flow
stack.subStack[3].cell.wall_cath[4].Q_flow
stack.subStack[3].cell.pin_n.v
stack.subStack[3].cell.port_an[1].m_flow
stack.subStack[3].cell.port_an[1].H_flow
stack.subStack[3].cell.port_an[1].mX_flow[1]
stack.subStack[3].cell.port_an[1].mX_flow[2]
stack.subStack[3].cell.port_an[1].mX_flow[3]
stack.subStack[3].cell.port_an[1].mX_flow[4]
stack.subStack[3].cell.port_an[1].mX_flow[5]
stack.subStack[3].cell.port_an[1].mX_flow[6]
stack.subStack[3].cell.port_an[1].mX_flow[7]
stack.subStack[3].cell.port_an[2].m_flow
stack.subStack[3].cell.port_an[2].h
stack.subStack[3].cell.port_an[2].H_flow
stack.subStack[3].cell.port_an[2].mX_flow[1]
stack.subStack[3].cell.port_an[2].mX_flow[2]
stack.subStack[3].cell.port_an[2].mX_flow[3]
stack.subStack[3].cell.port_an[2].mX_flow[4]
stack.subStack[3].cell.port_an[2].mX_flow[5]
stack.subStack[3].cell.port_an[2].mX_flow[6]
stack.subStack[3].cell.port_an[2].mX_flow[7]
stack.subStack[3].cell.port_an[3].m_flow
stack.subStack[3].cell.port_an[3].h
stack.subStack[3].cell.port_an[3].H_flow
stack.subStack[3].cell.port_an[3].mX_flow[1]
stack.subStack[3].cell.port_an[3].mX_flow[2]
stack.subStack[3].cell.port_an[3].mX_flow[3]
stack.subStack[3].cell.port_an[3].mX_flow[4]
stack.subStack[3].cell.port_an[3].mX_flow[5]
stack.subStack[3].cell.port_an[3].mX_flow[6]
stack.subStack[3].cell.port_an[3].mX_flow[7]
stack.subStack[3].cell.port_an[4].m_flow
stack.subStack[3].cell.port_an[4].H_flow
stack.subStack[3].cell.port_an[4].mX_flow[1]
stack.subStack[3].cell.port_an[4].mX_flow[2]
stack.subStack[3].cell.port_an[4].mX_flow[3]
stack.subStack[3].cell.port_an[4].mX_flow[4]
stack.subStack[3].cell.port_an[4].mX_flow[5]
stack.subStack[3].cell.port_an[4].mX_flow[6]
stack.subStack[3].cell.port_an[4].mX_flow[7]
stack.subStack[3].cell.port_cath[1].m_flow
stack.subStack[3].cell.port_cath[1].H_flow
stack.subStack[3].cell.port_cath[1].mX_flow[1]
stack.subStack[3].cell.port_cath[1].mX_flow[2]
stack.subStack[3].cell.port_cath[1].mX_flow[3]
stack.subStack[3].cell.port_cath[1].mX_flow[4]
stack.subStack[3].cell.port_cath[2].m_flow
stack.subStack[3].cell.port_cath[2].h
stack.subStack[3].cell.port_cath[2].H_flow
stack.subStack[3].cell.port_cath[2].mX_flow[1]
stack.subStack[3].cell.port_cath[2].mX_flow[2]
stack.subStack[3].cell.port_cath[2].mX_flow[3]
stack.subStack[3].cell.port_cath[2].mX_flow[4]
stack.subStack[3].cell.port_cath[3].m_flow
stack.subStack[3].cell.port_cath[3].h
stack.subStack[3].cell.port_cath[3].H_flow
stack.subStack[3].cell.port_cath[3].mX_flow[1]
stack.subStack[3].cell.port_cath[3].mX_flow[2]
stack.subStack[3].cell.port_cath[3].mX_flow[3]
stack.subStack[3].cell.port_cath[3].mX_flow[4]
stack.subStack[3].cell.port_cath[4].m_flow
stack.subStack[3].cell.port_cath[4].H_flow
stack.subStack[3].cell.port_cath[4].mX_flow[1]
stack.subStack[3].cell.port_cath[4].mX_flow[2]
stack.subStack[3].cell.port_cath[4].mX_flow[3]
stack.subStack[3].cell.port_cath[4].mX_flow[4]
stack.subStack[3].cell.T_an[1]
stack.subStack[3].cell.T_an[2]
stack.subStack[3].cell.T_an[3]
stack.subStack[3].cell.T_an[4]
stack.subStack[3].cell.state_an[1].p
stack.subStack[3].cell.state_an[2].p
stack.subStack[3].cell.state_an[3].p
stack.subStack[3].cell.state_an[4].p
stack.subStack[3].cell.anode[1].X[1]
stack.subStack[3].cell.anode[1].X[2]
stack.subStack[3].cell.anode[1].X[3]
stack.subStack[3].cell.anode[1].X[4]
stack.subStack[3].cell.anode[1].X[5]
stack.subStack[3].cell.anode[1].X[6]
stack.subStack[3].cell.anode[1].X[7]
stack.subStack[3].cell.anode[1].Xi[1]
stack.subStack[3].cell.anode[1].Xi[2]
stack.subStack[3].cell.anode[1].Xi[3]
stack.subStack[3].cell.anode[1].Xi[4]
stack.subStack[3].cell.anode[1].Xi[5]
stack.subStack[3].cell.anode[1].Xi[6]
stack.subStack[3].cell.anode[1].Xi[7]
stack.subStack[3].cell.anode[1].d
stack.subStack[3].cell.anode[1].h
stack.subStack[3].cell.anode[1].u
stack.subStack[3].cell.anode[1].Rg
stack.subStack[3].cell.anode[1].MM
stack.subStack[3].cell.anode[1].assertlevel
stack.subStack[3].cell.anode[1].state.p
stack.subStack[3].cell.anode[1].state.T
stack.subStack[3].cell.anode[1].state.X[1]
stack.subStack[3].cell.anode[1].state.X[2]
stack.subStack[3].cell.anode[1].state.X[3]
stack.subStack[3].cell.anode[1].state.X[4]
stack.subStack[3].cell.anode[1].state.X[5]
stack.subStack[3].cell.anode[1].state.X[6]
stack.subStack[3].cell.anode[1].state.X[7]
stack.subStack[3].cell.anode[1].preferredMediumStates
stack.subStack[3].cell.anode[1].T_degC
stack.subStack[3].cell.anode[1].p_bar
stack.subStack[3].cell.anode[1].Z[1]
stack.subStack[3].cell.anode[1].Z[2]
stack.subStack[3].cell.anode[1].Z[3]
stack.subStack[3].cell.anode[1].Z[4]
stack.subStack[3].cell.anode[1].Z[5]
stack.subStack[3].cell.anode[1].Z[6]
stack.subStack[3].cell.anode[1].Z[7]
stack.subStack[3].cell.anode[1].dUZT[1]
stack.subStack[3].cell.anode[1].dUZT[2]
stack.subStack[3].cell.anode[1].dUZT[3]
stack.subStack[3].cell.anode[1].dUZT[4]
stack.subStack[3].cell.anode[1].dUZT[5]
stack.subStack[3].cell.anode[1].dUZT[6]
stack.subStack[3].cell.anode[1].dUZT[7]
stack.subStack[3].cell.anode[1].h_component[1]
stack.subStack[3].cell.anode[1].h_component[2]
stack.subStack[3].cell.anode[1].h_component[3]
stack.subStack[3].cell.anode[1].h_component[4]
stack.subStack[3].cell.anode[1].h_component[5]
stack.subStack[3].cell.anode[1].h_component[6]
stack.subStack[3].cell.anode[1].h_component[7]
stack.subStack[3].cell.anode[1].s_component[1]
stack.subStack[3].cell.anode[1].s_component[2]
stack.subStack[3].cell.anode[1].s_component[3]
stack.subStack[3].cell.anode[1].s_component[4]
stack.subStack[3].cell.anode[1].s_component[5]
stack.subStack[3].cell.anode[1].s_component[6]
stack.subStack[3].cell.anode[1].s_component[7]
stack.subStack[3].cell.anode[1].u_comp[1]
stack.subStack[3].cell.anode[1].u_comp[2]
stack.subStack[3].cell.anode[1].u_comp[3]
stack.subStack[3].cell.anode[1].u_comp[4]
stack.subStack[3].cell.anode[1].u_comp[5]
stack.subStack[3].cell.anode[1].u_comp[6]
stack.subStack[3].cell.anode[1].u_comp[7]
stack.subStack[3].cell.anode[1].cp
stack.subStack[3].cell.anode[1].g_formation[1]
stack.subStack[3].cell.anode[1].g_formation[2]
stack.subStack[3].cell.anode[1].g_formation[3]
stack.subStack[3].cell.anode[1].g_formation[4]
stack.subStack[3].cell.anode[1].g_formation[5]
stack.subStack[3].cell.anode[1].g_formation[6]
stack.subStack[3].cell.anode[1].g_formation[7]
stack.subStack[3].cell.anode[1].ddTp
stack.subStack[3].cell.anode[1].ddpT
stack.subStack[3].cell.anode[1].dupT
stack.subStack[3].cell.anode[1].duTp
stack.subStack[3].cell.anode[1].ddx[1]
stack.subStack[3].cell.anode[1].ddx[2]
stack.subStack[3].cell.anode[1].ddx[3]
stack.subStack[3].cell.anode[1].ddx[4]
stack.subStack[3].cell.anode[1].ddx[5]
stack.subStack[3].cell.anode[1].ddx[6]
stack.subStack[3].cell.anode[1].ddx[7]
stack.subStack[3].cell.anode[2].X[1]
stack.subStack[3].cell.anode[2].X[2]
stack.subStack[3].cell.anode[2].X[3]
stack.subStack[3].cell.anode[2].X[4]
stack.subStack[3].cell.anode[2].X[5]
stack.subStack[3].cell.anode[2].X[6]
stack.subStack[3].cell.anode[2].X[7]
stack.subStack[3].cell.anode[2].Xi[1]
stack.subStack[3].cell.anode[2].Xi[2]
stack.subStack[3].cell.anode[2].Xi[3]
stack.subStack[3].cell.anode[2].Xi[4]
stack.subStack[3].cell.anode[2].Xi[5]
stack.subStack[3].cell.anode[2].Xi[6]
stack.subStack[3].cell.anode[2].Xi[7]
stack.subStack[3].cell.anode[2].d
stack.subStack[3].cell.anode[2].h
stack.subStack[3].cell.anode[2].u
stack.subStack[3].cell.anode[2].Rg
stack.subStack[3].cell.anode[2].MM
stack.subStack[3].cell.anode[2].assertlevel
stack.subStack[3].cell.anode[2].state.p
stack.subStack[3].cell.anode[2].state.T
stack.subStack[3].cell.anode[2].state.X[1]
stack.subStack[3].cell.anode[2].state.X[2]
stack.subStack[3].cell.anode[2].state.X[3]
stack.subStack[3].cell.anode[2].state.X[4]
stack.subStack[3].cell.anode[2].state.X[5]
stack.subStack[3].cell.anode[2].state.X[6]
stack.subStack[3].cell.anode[2].state.X[7]
stack.subStack[3].cell.anode[2].preferredMediumStates
stack.subStack[3].cell.anode[2].T_degC
stack.subStack[3].cell.anode[2].p_bar
stack.subStack[3].cell.anode[2].Z[1]
stack.subStack[3].cell.anode[2].Z[2]
stack.subStack[3].cell.anode[2].Z[3]
stack.subStack[3].cell.anode[2].Z[4]
stack.subStack[3].cell.anode[2].Z[5]
stack.subStack[3].cell.anode[2].Z[6]
stack.subStack[3].cell.anode[2].Z[7]
stack.subStack[3].cell.anode[2].dUZT[1]
stack.subStack[3].cell.anode[2].dUZT[2]
stack.subStack[3].cell.anode[2].dUZT[3]
stack.subStack[3].cell.anode[2].dUZT[4]
stack.subStack[3].cell.anode[2].dUZT[5]
stack.subStack[3].cell.anode[2].dUZT[6]
stack.subStack[3].cell.anode[2].dUZT[7]
stack.subStack[3].cell.anode[2].h_component[1]
stack.subStack[3].cell.anode[2].h_component[2]
stack.subStack[3].cell.anode[2].h_component[3]
stack.subStack[3].cell.anode[2].h_component[4]
stack.subStack[3].cell.anode[2].h_component[5]
stack.subStack[3].cell.anode[2].h_component[6]
stack.subStack[3].cell.anode[2].h_component[7]
stack.subStack[3].cell.anode[2].s_component[1]
stack.subStack[3].cell.anode[2].s_component[2]
stack.subStack[3].cell.anode[2].s_component[3]
stack.subStack[3].cell.anode[2].s_component[4]
stack.subStack[3].cell.anode[2].s_component[5]
stack.subStack[3].cell.anode[2].s_component[6]
stack.subStack[3].cell.anode[2].s_component[7]
stack.subStack[3].cell.anode[2].u_comp[1]
stack.subStack[3].cell.anode[2].u_comp[2]
stack.subStack[3].cell.anode[2].u_comp[3]
stack.subStack[3].cell.anode[2].u_comp[4]
stack.subStack[3].cell.anode[2].u_comp[5]
stack.subStack[3].cell.anode[2].u_comp[6]
stack.subStack[3].cell.anode[2].u_comp[7]
stack.subStack[3].cell.anode[2].cp
stack.subStack[3].cell.anode[2].g_formation[1]
stack.subStack[3].cell.anode[2].g_formation[2]
stack.subStack[3].cell.anode[2].g_formation[3]
stack.subStack[3].cell.anode[2].g_formation[4]
stack.subStack[3].cell.anode[2].g_formation[5]
stack.subStack[3].cell.anode[2].g_formation[6]
stack.subStack[3].cell.anode[2].g_formation[7]
stack.subStack[3].cell.anode[2].ddTp
stack.subStack[3].cell.anode[2].ddpT
stack.subStack[3].cell.anode[2].dupT
stack.subStack[3].cell.anode[2].duTp
stack.subStack[3].cell.anode[2].ddx[1]
stack.subStack[3].cell.anode[2].ddx[2]
stack.subStack[3].cell.anode[2].ddx[3]
stack.subStack[3].cell.anode[2].ddx[4]
stack.subStack[3].cell.anode[2].ddx[5]
stack.subStack[3].cell.anode[2].ddx[6]
stack.subStack[3].cell.anode[2].ddx[7]
stack.subStack[3].cell.anode[3].X[1]
stack.subStack[3].cell.anode[3].X[2]
stack.subStack[3].cell.anode[3].X[3]
stack.subStack[3].cell.anode[3].X[4]
stack.subStack[3].cell.anode[3].X[5]
stack.subStack[3].cell.anode[3].X[6]
stack.subStack[3].cell.anode[3].X[7]
stack.subStack[3].cell.anode[3].Xi[1]
stack.subStack[3].cell.anode[3].Xi[2]
stack.subStack[3].cell.anode[3].Xi[3]
stack.subStack[3].cell.anode[3].Xi[4]
stack.subStack[3].cell.anode[3].Xi[5]
stack.subStack[3].cell.anode[3].Xi[6]
stack.subStack[3].cell.anode[3].Xi[7]
stack.subStack[3].cell.anode[3].d
stack.subStack[3].cell.anode[3].h
stack.subStack[3].cell.anode[3].u
stack.subStack[3].cell.anode[3].Rg
stack.subStack[3].cell.anode[3].MM
stack.subStack[3].cell.anode[3].assertlevel
stack.subStack[3].cell.anode[3].state.p
stack.subStack[3].cell.anode[3].state.T
stack.subStack[3].cell.anode[3].state.X[1]
stack.subStack[3].cell.anode[3].state.X[2]
stack.subStack[3].cell.anode[3].state.X[3]
stack.subStack[3].cell.anode[3].state.X[4]
stack.subStack[3].cell.anode[3].state.X[5]
stack.subStack[3].cell.anode[3].state.X[6]
stack.subStack[3].cell.anode[3].state.X[7]
stack.subStack[3].cell.anode[3].preferredMediumStates
stack.subStack[3].cell.anode[3].T_degC
stack.subStack[3].cell.anode[3].p_bar
stack.subStack[3].cell.anode[3].Z[1]
stack.subStack[3].cell.anode[3].Z[2]
stack.subStack[3].cell.anode[3].Z[3]
stack.subStack[3].cell.anode[3].Z[4]
stack.subStack[3].cell.anode[3].Z[5]
stack.subStack[3].cell.anode[3].Z[6]
stack.subStack[3].cell.anode[3].Z[7]
stack.subStack[3].cell.anode[3].dUZT[1]
stack.subStack[3].cell.anode[3].dUZT[2]
stack.subStack[3].cell.anode[3].dUZT[3]
stack.subStack[3].cell.anode[3].dUZT[4]
stack.subStack[3].cell.anode[3].dUZT[5]
stack.subStack[3].cell.anode[3].dUZT[6]
stack.subStack[3].cell.anode[3].dUZT[7]
stack.subStack[3].cell.anode[3].h_component[1]
stack.subStack[3].cell.anode[3].h_component[2]
stack.subStack[3].cell.anode[3].h_component[3]
stack.subStack[3].cell.anode[3].h_component[4]
stack.subStack[3].cell.anode[3].h_component[5]
stack.subStack[3].cell.anode[3].h_component[6]
stack.subStack[3].cell.anode[3].h_component[7]
stack.subStack[3].cell.anode[3].s_component[1]
stack.subStack[3].cell.anode[3].s_component[2]
stack.subStack[3].cell.anode[3].s_component[3]
stack.subStack[3].cell.anode[3].s_component[4]
stack.subStack[3].cell.anode[3].s_component[5]
stack.subStack[3].cell.anode[3].s_component[6]
stack.subStack[3].cell.anode[3].s_component[7]
stack.subStack[3].cell.anode[3].u_comp[1]
stack.subStack[3].cell.anode[3].u_comp[2]
stack.subStack[3].cell.anode[3].u_comp[3]
stack.subStack[3].cell.anode[3].u_comp[4]
stack.subStack[3].cell.anode[3].u_comp[5]
stack.subStack[3].cell.anode[3].u_comp[6]
stack.subStack[3].cell.anode[3].u_comp[7]
stack.subStack[3].cell.anode[3].cp
stack.subStack[3].cell.anode[3].g_formation[1]
stack.subStack[3].cell.anode[3].g_formation[2]
stack.subStack[3].cell.anode[3].g_formation[3]
stack.subStack[3].cell.anode[3].g_formation[4]
stack.subStack[3].cell.anode[3].g_formation[5]
stack.subStack[3].cell.anode[3].g_formation[6]
stack.subStack[3].cell.anode[3].g_formation[7]
stack.subStack[3].cell.anode[3].ddTp
stack.subStack[3].cell.anode[3].ddpT
stack.subStack[3].cell.anode[3].dupT
stack.subStack[3].cell.anode[3].duTp
stack.subStack[3].cell.anode[3].ddx[1]
stack.subStack[3].cell.anode[3].ddx[2]
stack.subStack[3].cell.anode[3].ddx[3]
stack.subStack[3].cell.anode[3].ddx[4]
stack.subStack[3].cell.anode[3].ddx[5]
stack.subStack[3].cell.anode[3].ddx[6]
stack.subStack[3].cell.anode[3].ddx[7]
stack.subStack[3].cell.anode[4].X[1]
stack.subStack[3].cell.anode[4].X[2]
stack.subStack[3].cell.anode[4].X[3]
stack.subStack[3].cell.anode[4].X[4]
stack.subStack[3].cell.anode[4].X[5]
stack.subStack[3].cell.anode[4].X[6]
stack.subStack[3].cell.anode[4].X[7]
stack.subStack[3].cell.anode[4].Xi[1]
stack.subStack[3].cell.anode[4].Xi[2]
stack.subStack[3].cell.anode[4].Xi[3]
stack.subStack[3].cell.anode[4].Xi[4]
stack.subStack[3].cell.anode[4].Xi[5]
stack.subStack[3].cell.anode[4].Xi[6]
stack.subStack[3].cell.anode[4].Xi[7]
stack.subStack[3].cell.anode[4].d
stack.subStack[3].cell.anode[4].h
stack.subStack[3].cell.anode[4].u
stack.subStack[3].cell.anode[4].Rg
stack.subStack[3].cell.anode[4].MM
stack.subStack[3].cell.anode[4].assertlevel
stack.subStack[3].cell.anode[4].state.p
stack.subStack[3].cell.anode[4].state.T
stack.subStack[3].cell.anode[4].state.X[1]
stack.subStack[3].cell.anode[4].state.X[2]
stack.subStack[3].cell.anode[4].state.X[3]
stack.subStack[3].cell.anode[4].state.X[4]
stack.subStack[3].cell.anode[4].state.X[5]
stack.subStack[3].cell.anode[4].state.X[6]
stack.subStack[3].cell.anode[4].state.X[7]
stack.subStack[3].cell.anode[4].preferredMediumStates
stack.subStack[3].cell.anode[4].T_degC
stack.subStack[3].cell.anode[4].p_bar
stack.subStack[3].cell.anode[4].Z[1]
stack.subStack[3].cell.anode[4].Z[2]
stack.subStack[3].cell.anode[4].Z[3]
stack.subStack[3].cell.anode[4].Z[4]
stack.subStack[3].cell.anode[4].Z[5]
stack.subStack[3].cell.anode[4].Z[6]
stack.subStack[3].cell.anode[4].Z[7]
stack.subStack[3].cell.anode[4].dUZT[1]
stack.subStack[3].cell.anode[4].dUZT[2]
stack.subStack[3].cell.anode[4].dUZT[3]
stack.subStack[3].cell.anode[4].dUZT[4]
stack.subStack[3].cell.anode[4].dUZT[5]
stack.subStack[3].cell.anode[4].dUZT[6]
stack.subStack[3].cell.anode[4].dUZT[7]
stack.subStack[3].cell.anode[4].h_component[1]
stack.subStack[3].cell.anode[4].h_component[2]
stack.subStack[3].cell.anode[4].h_component[3]
stack.subStack[3].cell.anode[4].h_component[4]
stack.subStack[3].cell.anode[4].h_component[5]
stack.subStack[3].cell.anode[4].h_component[6]
stack.subStack[3].cell.anode[4].h_component[7]
stack.subStack[3].cell.anode[4].s_component[1]
stack.subStack[3].cell.anode[4].s_component[2]
stack.subStack[3].cell.anode[4].s_component[3]
stack.subStack[3].cell.anode[4].s_component[4]
stack.subStack[3].cell.anode[4].s_component[5]
stack.subStack[3].cell.anode[4].s_component[6]
stack.subStack[3].cell.anode[4].s_component[7]
stack.subStack[3].cell.anode[4].u_comp[1]
stack.subStack[3].cell.anode[4].u_comp[2]
stack.subStack[3].cell.anode[4].u_comp[3]
stack.subStack[3].cell.anode[4].u_comp[4]
stack.subStack[3].cell.anode[4].u_comp[5]
stack.subStack[3].cell.anode[4].u_comp[6]
stack.subStack[3].cell.anode[4].u_comp[7]
stack.subStack[3].cell.anode[4].cp
stack.subStack[3].cell.anode[4].g_formation[1]
stack.subStack[3].cell.anode[4].g_formation[2]
stack.subStack[3].cell.anode[4].g_formation[3]
stack.subStack[3].cell.anode[4].g_formation[4]
stack.subStack[3].cell.anode[4].g_formation[5]
stack.subStack[3].cell.anode[4].g_formation[6]
stack.subStack[3].cell.anode[4].g_formation[7]
stack.subStack[3].cell.anode[4].ddTp
stack.subStack[3].cell.anode[4].ddpT
stack.subStack[3].cell.anode[4].dupT
stack.subStack[3].cell.anode[4].duTp
stack.subStack[3].cell.anode[4].ddx[1]
stack.subStack[3].cell.anode[4].ddx[2]
stack.subStack[3].cell.anode[4].ddx[3]
stack.subStack[3].cell.anode[4].ddx[4]
stack.subStack[3].cell.anode[4].ddx[5]
stack.subStack[3].cell.anode[4].ddx[6]
stack.subStack[3].cell.anode[4].ddx[7]
stack.subStack[3].cell.cathode[1].X[1]
stack.subStack[3].cell.cathode[1].X[2]
stack.subStack[3].cell.cathode[1].X[3]
stack.subStack[3].cell.cathode[1].X[4]
stack.subStack[3].cell.cathode[1].X[5]
stack.subStack[3].cell.cathode[1].d
stack.subStack[3].cell.cathode[1].h
stack.subStack[3].cell.cathode[1].u
stack.subStack[3].cell.cathode[1].Rg
stack.subStack[3].cell.cathode[1].MM
stack.subStack[3].cell.cathode[1].assertlevel
stack.subStack[3].cell.cathode[1].state.p
stack.subStack[3].cell.cathode[1].state.T
stack.subStack[3].cell.cathode[1].state.X[1]
stack.subStack[3].cell.cathode[1].state.X[2]
stack.subStack[3].cell.cathode[1].state.X[3]
stack.subStack[3].cell.cathode[1].state.X[4]
stack.subStack[3].cell.cathode[1].state.X[5]
stack.subStack[3].cell.cathode[1].preferredMediumStates
stack.subStack[3].cell.cathode[1].T_degC
stack.subStack[3].cell.cathode[1].p_bar
stack.subStack[3].cell.cathode[1].Z[1]
stack.subStack[3].cell.cathode[1].Z[2]
stack.subStack[3].cell.cathode[1].Z[3]
stack.subStack[3].cell.cathode[1].Z[4]
stack.subStack[3].cell.cathode[1].Z[5]
stack.subStack[3].cell.cathode[1].dUZT[1]
stack.subStack[3].cell.cathode[1].dUZT[2]
stack.subStack[3].cell.cathode[1].dUZT[3]
stack.subStack[3].cell.cathode[1].dUZT[4]
stack.subStack[3].cell.cathode[1].dUZT[5]
stack.subStack[3].cell.cathode[1].h_component[1]
stack.subStack[3].cell.cathode[1].h_component[2]
stack.subStack[3].cell.cathode[1].h_component[3]
stack.subStack[3].cell.cathode[1].h_component[4]
stack.subStack[3].cell.cathode[1].h_component[5]
stack.subStack[3].cell.cathode[1].s_component[1]
stack.subStack[3].cell.cathode[1].s_component[2]
stack.subStack[3].cell.cathode[1].s_component[3]
stack.subStack[3].cell.cathode[1].s_component[4]
stack.subStack[3].cell.cathode[1].s_component[5]
stack.subStack[3].cell.cathode[1].u_comp[1]
stack.subStack[3].cell.cathode[1].u_comp[2]
stack.subStack[3].cell.cathode[1].u_comp[3]
stack.subStack[3].cell.cathode[1].u_comp[4]
stack.subStack[3].cell.cathode[1].u_comp[5]
stack.subStack[3].cell.cathode[1].cp
stack.subStack[3].cell.cathode[1].g_formation[1]
stack.subStack[3].cell.cathode[1].g_formation[2]
stack.subStack[3].cell.cathode[1].g_formation[3]
stack.subStack[3].cell.cathode[1].g_formation[4]
stack.subStack[3].cell.cathode[1].g_formation[5]
stack.subStack[3].cell.cathode[1].ddTp
stack.subStack[3].cell.cathode[1].ddpT
stack.subStack[3].cell.cathode[1].dupT
stack.subStack[3].cell.cathode[1].duTp
stack.subStack[3].cell.cathode[1].ddx[1]
stack.subStack[3].cell.cathode[1].ddx[2]
stack.subStack[3].cell.cathode[1].ddx[3]
stack.subStack[3].cell.cathode[1].ddx[4]
stack.subStack[3].cell.cathode[1].ddx[5]
stack.subStack[3].cell.cathode[2].X[1]
stack.subStack[3].cell.cathode[2].X[2]
stack.subStack[3].cell.cathode[2].X[3]
stack.subStack[3].cell.cathode[2].X[4]
stack.subStack[3].cell.cathode[2].X[5]
stack.subStack[3].cell.cathode[2].der(X[1])
stack.subStack[3].cell.cathode[2].der(X[2])
stack.subStack[3].cell.cathode[2].der(X[3])
stack.subStack[3].cell.cathode[2].der(X[4])
stack.subStack[3].cell.cathode[2].der(X[5])
stack.subStack[3].cell.cathode[2].d
stack.subStack[3].cell.cathode[2].h
stack.subStack[3].cell.cathode[2].u
stack.subStack[3].cell.cathode[2].Rg
stack.subStack[3].cell.cathode[2].MM
stack.subStack[3].cell.cathode[2].assertlevel
stack.subStack[3].cell.cathode[2].state.p
stack.subStack[3].cell.cathode[2].state.T
stack.subStack[3].cell.cathode[2].state.X[1]
stack.subStack[3].cell.cathode[2].state.X[2]
stack.subStack[3].cell.cathode[2].state.X[3]
stack.subStack[3].cell.cathode[2].state.X[4]
stack.subStack[3].cell.cathode[2].state.X[5]
stack.subStack[3].cell.cathode[2].preferredMediumStates
stack.subStack[3].cell.cathode[2].T_degC
stack.subStack[3].cell.cathode[2].p_bar
stack.subStack[3].cell.cathode[2].Z[1]
stack.subStack[3].cell.cathode[2].Z[2]
stack.subStack[3].cell.cathode[2].Z[3]
stack.subStack[3].cell.cathode[2].Z[4]
stack.subStack[3].cell.cathode[2].Z[5]
stack.subStack[3].cell.cathode[2].dUZT[1]
stack.subStack[3].cell.cathode[2].dUZT[2]
stack.subStack[3].cell.cathode[2].dUZT[3]
stack.subStack[3].cell.cathode[2].dUZT[4]
stack.subStack[3].cell.cathode[2].dUZT[5]
stack.subStack[3].cell.cathode[2].h_component[1]
stack.subStack[3].cell.cathode[2].h_component[2]
stack.subStack[3].cell.cathode[2].h_component[3]
stack.subStack[3].cell.cathode[2].h_component[4]
stack.subStack[3].cell.cathode[2].h_component[5]
stack.subStack[3].cell.cathode[2].s_component[1]
stack.subStack[3].cell.cathode[2].s_component[2]
stack.subStack[3].cell.cathode[2].s_component[3]
stack.subStack[3].cell.cathode[2].s_component[4]
stack.subStack[3].cell.cathode[2].s_component[5]
stack.subStack[3].cell.cathode[2].u_comp[1]
stack.subStack[3].cell.cathode[2].u_comp[2]
stack.subStack[3].cell.cathode[2].u_comp[3]
stack.subStack[3].cell.cathode[2].u_comp[4]
stack.subStack[3].cell.cathode[2].u_comp[5]
stack.subStack[3].cell.cathode[2].cp
stack.subStack[3].cell.cathode[2].g_formation[1]
stack.subStack[3].cell.cathode[2].g_formation[2]
stack.subStack[3].cell.cathode[2].g_formation[3]
stack.subStack[3].cell.cathode[2].g_formation[4]
stack.subStack[3].cell.cathode[2].g_formation[5]
stack.subStack[3].cell.cathode[2].ddTp
stack.subStack[3].cell.cathode[2].ddpT
stack.subStack[3].cell.cathode[2].dupT
stack.subStack[3].cell.cathode[2].duTp
stack.subStack[3].cell.cathode[2].ddx[1]
stack.subStack[3].cell.cathode[2].ddx[2]
stack.subStack[3].cell.cathode[2].ddx[3]
stack.subStack[3].cell.cathode[2].ddx[4]
stack.subStack[3].cell.cathode[2].ddx[5]
stack.subStack[3].cell.cathode[3].X[1]
stack.subStack[3].cell.cathode[3].X[2]
stack.subStack[3].cell.cathode[3].X[3]
stack.subStack[3].cell.cathode[3].X[4]
stack.subStack[3].cell.cathode[3].X[5]
stack.subStack[3].cell.cathode[3].der(X[1])
stack.subStack[3].cell.cathode[3].der(X[2])
stack.subStack[3].cell.cathode[3].der(X[3])
stack.subStack[3].cell.cathode[3].der(X[4])
stack.subStack[3].cell.cathode[3].der(X[5])
stack.subStack[3].cell.cathode[3].d
stack.subStack[3].cell.cathode[3].h
stack.subStack[3].cell.cathode[3].u
stack.subStack[3].cell.cathode[3].Rg
stack.subStack[3].cell.cathode[3].MM
stack.subStack[3].cell.cathode[3].assertlevel
stack.subStack[3].cell.cathode[3].state.p
stack.subStack[3].cell.cathode[3].state.T
stack.subStack[3].cell.cathode[3].state.X[1]
stack.subStack[3].cell.cathode[3].state.X[2]
stack.subStack[3].cell.cathode[3].state.X[3]
stack.subStack[3].cell.cathode[3].state.X[4]
stack.subStack[3].cell.cathode[3].state.X[5]
stack.subStack[3].cell.cathode[3].preferredMediumStates
stack.subStack[3].cell.cathode[3].T_degC
stack.subStack[3].cell.cathode[3].p_bar
stack.subStack[3].cell.cathode[3].Z[1]
stack.subStack[3].cell.cathode[3].Z[2]
stack.subStack[3].cell.cathode[3].Z[3]
stack.subStack[3].cell.cathode[3].Z[4]
stack.subStack[3].cell.cathode[3].Z[5]
stack.subStack[3].cell.cathode[3].dUZT[1]
stack.subStack[3].cell.cathode[3].dUZT[2]
stack.subStack[3].cell.cathode[3].dUZT[3]
stack.subStack[3].cell.cathode[3].dUZT[4]
stack.subStack[3].cell.cathode[3].dUZT[5]
stack.subStack[3].cell.cathode[3].h_component[1]
stack.subStack[3].cell.cathode[3].h_component[2]
stack.subStack[3].cell.cathode[3].h_component[3]
stack.subStack[3].cell.cathode[3].h_component[4]
stack.subStack[3].cell.cathode[3].h_component[5]
stack.subStack[3].cell.cathode[3].s_component[1]
stack.subStack[3].cell.cathode[3].s_component[2]
stack.subStack[3].cell.cathode[3].s_component[3]
stack.subStack[3].cell.cathode[3].s_component[4]
stack.subStack[3].cell.cathode[3].s_component[5]
stack.subStack[3].cell.cathode[3].u_comp[1]
stack.subStack[3].cell.cathode[3].u_comp[2]
stack.subStack[3].cell.cathode[3].u_comp[3]
stack.subStack[3].cell.cathode[3].u_comp[4]
stack.subStack[3].cell.cathode[3].u_comp[5]
stack.subStack[3].cell.cathode[3].cp
stack.subStack[3].cell.cathode[3].g_formation[1]
stack.subStack[3].cell.cathode[3].g_formation[2]
stack.subStack[3].cell.cathode[3].g_formation[3]
stack.subStack[3].cell.cathode[3].g_formation[4]
stack.subStack[3].cell.cathode[3].g_formation[5]
stack.subStack[3].cell.cathode[3].ddTp
stack.subStack[3].cell.cathode[3].ddpT
stack.subStack[3].cell.cathode[3].dupT
stack.subStack[3].cell.cathode[3].duTp
stack.subStack[3].cell.cathode[3].ddx[1]
stack.subStack[3].cell.cathode[3].ddx[2]
stack.subStack[3].cell.cathode[3].ddx[3]
stack.subStack[3].cell.cathode[3].ddx[4]
stack.subStack[3].cell.cathode[3].ddx[5]
stack.subStack[3].cell.cathode[4].X[1]
stack.subStack[3].cell.cathode[4].X[2]
stack.subStack[3].cell.cathode[4].X[3]
stack.subStack[3].cell.cathode[4].X[4]
stack.subStack[3].cell.cathode[4].X[5]
stack.subStack[3].cell.cathode[4].der(X[1])
stack.subStack[3].cell.cathode[4].der(X[2])
stack.subStack[3].cell.cathode[4].der(X[3])
stack.subStack[3].cell.cathode[4].der(X[4])
stack.subStack[3].cell.cathode[4].der(X[5])
stack.subStack[3].cell.cathode[4].d
stack.subStack[3].cell.cathode[4].h
stack.subStack[3].cell.cathode[4].u
stack.subStack[3].cell.cathode[4].Rg
stack.subStack[3].cell.cathode[4].MM
stack.subStack[3].cell.cathode[4].assertlevel
stack.subStack[3].cell.cathode[4].state.p
stack.subStack[3].cell.cathode[4].state.T
stack.subStack[3].cell.cathode[4].state.X[1]
stack.subStack[3].cell.cathode[4].state.X[2]
stack.subStack[3].cell.cathode[4].state.X[3]
stack.subStack[3].cell.cathode[4].state.X[4]
stack.subStack[3].cell.cathode[4].state.X[5]
stack.subStack[3].cell.cathode[4].preferredMediumStates
stack.subStack[3].cell.cathode[4].T_degC
stack.subStack[3].cell.cathode[4].p_bar
stack.subStack[3].cell.cathode[4].Z[1]
stack.subStack[3].cell.cathode[4].Z[2]
stack.subStack[3].cell.cathode[4].Z[3]
stack.subStack[3].cell.cathode[4].Z[4]
stack.subStack[3].cell.cathode[4].Z[5]
stack.subStack[3].cell.cathode[4].dUZT[1]
stack.subStack[3].cell.cathode[4].dUZT[2]
stack.subStack[3].cell.cathode[4].dUZT[3]
stack.subStack[3].cell.cathode[4].dUZT[4]
stack.subStack[3].cell.cathode[4].dUZT[5]
stack.subStack[3].cell.cathode[4].h_component[1]
stack.subStack[3].cell.cathode[4].h_component[2]
stack.subStack[3].cell.cathode[4].h_component[3]
stack.subStack[3].cell.cathode[4].h_component[4]
stack.subStack[3].cell.cathode[4].h_component[5]
stack.subStack[3].cell.cathode[4].s_component[1]
stack.subStack[3].cell.cathode[4].s_component[2]
stack.subStack[3].cell.cathode[4].s_component[3]
stack.subStack[3].cell.cathode[4].s_component[4]
stack.subStack[3].cell.cathode[4].s_component[5]
stack.subStack[3].cell.cathode[4].u_comp[1]
stack.subStack[3].cell.cathode[4].u_comp[2]
stack.subStack[3].cell.cathode[4].u_comp[3]
stack.subStack[3].cell.cathode[4].u_comp[4]
stack.subStack[3].cell.cathode[4].u_comp[5]
stack.subStack[3].cell.cathode[4].cp
stack.subStack[3].cell.cathode[4].g_formation[1]
stack.subStack[3].cell.cathode[4].g_formation[2]
stack.subStack[3].cell.cathode[4].g_formation[3]
stack.subStack[3].cell.cathode[4].g_formation[4]
stack.subStack[3].cell.cathode[4].g_formation[5]
stack.subStack[3].cell.cathode[4].ddTp
stack.subStack[3].cell.cathode[4].ddpT
stack.subStack[3].cell.cathode[4].dupT
stack.subStack[3].cell.cathode[4].duTp
stack.subStack[3].cell.cathode[4].ddx[1]
stack.subStack[3].cell.cathode[4].ddx[2]
stack.subStack[3].cell.cathode[4].ddx[3]
stack.subStack[3].cell.cathode[4].ddx[4]
stack.subStack[3].cell.cathode[4].ddx[5]
stack.subStack[3].cell.der_T_cell[1]
stack.subStack[3].cell.der_T_cell[2]
stack.subStack[3].cell.der_T_cell[3]
stack.subStack[3].cell.der_T_cell[4]
stack.subStack[3].cell.sum_Q_cell
stack.subStack[3].cell.P_cell[1]
stack.subStack[3].cell.P_cell[2]
stack.subStack[3].cell.P_cell[3]
stack.subStack[3].cell.P_cell[4]
stack.subStack[3].cell.j_Ionic[1]
stack.subStack[3].cell.j_Ionic[2]
stack.subStack[3].cell.j_Ionic[3]
stack.subStack[3].cell.j_Ionic[4]
stack.subStack[3].cell.T_degC
stack.subStack[3].cell.mXi_flow_an[1, 2]
stack.subStack[3].cell.mXi_flow_an[1, 3]
stack.subStack[3].cell.mXi_flow_an[1, 4]
stack.subStack[3].cell.mXi_flow_an[1, 6]
stack.subStack[3].cell.mXi_flow_an[1, 7]
stack.subStack[3].cell.mXi_flow_an[2, 2]
stack.subStack[3].cell.mXi_flow_an[2, 3]
stack.subStack[3].cell.mXi_flow_an[2, 4]
stack.subStack[3].cell.mXi_flow_an[2, 6]
stack.subStack[3].cell.mXi_flow_an[2, 7]
stack.subStack[3].cell.mXi_flow_an[3, 2]
stack.subStack[3].cell.mXi_flow_an[3, 3]
stack.subStack[3].cell.mXi_flow_an[3, 4]
stack.subStack[3].cell.mXi_flow_an[3, 6]
stack.subStack[3].cell.mXi_flow_an[3, 7]
stack.subStack[3].cell.mXi_flow_an[4, 2]
stack.subStack[3].cell.mXi_flow_an[4, 3]
stack.subStack[3].cell.mXi_flow_an[4, 4]
stack.subStack[3].cell.mXi_flow_an[4, 6]
stack.subStack[3].cell.mXi_flow_an[4, 7]
stack.subStack[3].cell.S_ionic[1]
stack.subStack[3].cell.S_ionic[2]
stack.subStack[3].cell.S_ionic[3]
stack.subStack[3].cell.S_ionic[4]
stack.subStack[3].cell.S_ionic[5]
stack.subStack[3].cell.S_ionic[6]
stack.subStack[3].cell.S_ionic[7]
stack.subStack[3].cell.ASR0
stack.subStack[3].cell.Ea
stack.subStack[3].cell.T0
stack.subStack[3].cell.V_nernst[1]
stack.subStack[3].cell.V_nernst[2]
stack.subStack[3].cell.V_nernst[3]
stack.subStack[3].cell.V_nernst[4]
stack.subStack[3].cell.r_Int[1]
stack.subStack[3].cell.r_Int[2]
stack.subStack[3].cell.r_Int[3]
stack.subStack[3].cell.r_Int[4]
stack.subStack[3].cell.ASR[1]
stack.subStack[3].cell.ASR[2]
stack.subStack[3].cell.ASR[3]
stack.subStack[3].cell.ASR[4]
stack.subStack[3].cell.g_reaction[1]
stack.subStack[3].cell.g_reaction[2]
stack.subStack[3].cell.g_reaction[3]
stack.subStack[3].cell.g_reaction[4]
stack.subStack[3].cell.pH2[1]
stack.subStack[3].cell.pH2[2]
stack.subStack[3].cell.pH2[3]
stack.subStack[3].cell.pH2[4]
stack.subStack[3].cell.pH2O[1]
stack.subStack[3].cell.pH2O[2]
stack.subStack[3].cell.pH2O[3]
stack.subStack[3].cell.pH2O[4]
stack.subStack[3].cell.pO2[1]
stack.subStack[3].cell.pO2[2]
stack.subStack[3].cell.pO2[3]
stack.subStack[3].cell.pO2[4]
stack.subStack[3].cell.internalRes[1].T_ref
stack.subStack[3].cell.internalRes[1].alpha
stack.subStack[3].cell.internalRes[1].v
stack.subStack[3].cell.internalRes[1].i
stack.subStack[3].cell.internalRes[1].useHeatPort
stack.subStack[3].cell.internalRes[1].T
stack.subStack[3].cell.internalRes[1].LossPower
stack.subStack[3].cell.internalRes[1].R_actual
stack.subStack[3].cell.internalRes[2].T_ref
stack.subStack[3].cell.internalRes[2].alpha
stack.subStack[3].cell.internalRes[2].v
stack.subStack[3].cell.internalRes[2].i
stack.subStack[3].cell.internalRes[2].useHeatPort
stack.subStack[3].cell.internalRes[2].T
stack.subStack[3].cell.internalRes[2].LossPower
stack.subStack[3].cell.internalRes[2].R_actual
stack.subStack[3].cell.internalRes[3].T_ref
stack.subStack[3].cell.internalRes[3].alpha
stack.subStack[3].cell.internalRes[3].v
stack.subStack[3].cell.internalRes[3].i
stack.subStack[3].cell.internalRes[3].useHeatPort
stack.subStack[3].cell.internalRes[3].T
stack.subStack[3].cell.internalRes[3].LossPower
stack.subStack[3].cell.internalRes[3].R_actual
stack.subStack[3].cell.internalRes[4].T_ref
stack.subStack[3].cell.internalRes[4].alpha
stack.subStack[3].cell.internalRes[4].v
stack.subStack[3].cell.internalRes[4].i
stack.subStack[3].cell.internalRes[4].useHeatPort
stack.subStack[3].cell.internalRes[4].T
stack.subStack[3].cell.internalRes[4].LossPower
stack.subStack[3].cell.internalRes[4].R_actual
stack.subStack[3].cell.sourceV[1].n.v
stack.subStack[3].cell.sourceV[2].n.v
stack.subStack[3].cell.sourceV[3].n.v
stack.subStack[3].cell.sourceV[4].n.v
stack.subStack[3].cell.ref[1]
stack.subStack[3].cell.ref[2]
stack.subStack[3].cell.air[1]
stack.subStack[3].pin_n.v
stack.subStack[3].feed_anode.h_outflow
stack.subStack[3].drain_anode.h_outflow
stack.subStack[3].feed_cathode.h_outflow
stack.subStack[3].drain_cathode.h_outflow
stack.subStack[3].wall[1].Q_flow
stack.subStack[3].wall[2].Q_flow
stack.subStack[3].wall[3].Q_flow
stack.subStack[3].wall[4].Q_flow
stack.subStack[3].pi
stack.subStack[3].n_channels_anode
stack.subStack[3].L_anode
stack.subStack[3].D_anode
stack.subStack[3].Dhyd_anode
stack.subStack[3].C_anode
stack.subStack[3].A_anode
stack.subStack[3].V_anode
stack.subStack[3].A_heat_anode
stack.subStack[3].n_channels_cathode
stack.subStack[3].L_cathode
stack.subStack[3].D_cathode
stack.subStack[3].Dhyd_cathode
stack.subStack[3].C_cathode
stack.subStack[3].A_cathode
stack.subStack[3].V_cathode
stack.subStack[3].A_heat_cathode
stack.subStack[3].n
stack.subStack[3].initOpt_anode
stack.subStack[3].p_start_in_anode
stack.subStack[3].p_start_out_anode
stack.subStack[3].p_start_anode[1]
stack.subStack[3].p_start_anode[2]
stack.subStack[3].p_start_anode[3]
stack.subStack[3].p_start_anode[4]
stack.subStack[3].p_start_anode[5]
stack.subStack[3].initFromEnthalpy_anode
stack.subStack[3].h_start_in_anode
stack.subStack[3].h_start_out_anode
stack.subStack[3].h_start_anode[1]
stack.subStack[3].h_start_anode[2]
stack.subStack[3].h_start_anode[3]
stack.subStack[3].h_start_anode[4]
stack.subStack[3].h_start_anode[5]
stack.subStack[3].T_start_in_anode
stack.subStack[3].T_start_out_anode
stack.subStack[3].T_start_anode[1]
stack.subStack[3].T_start_anode[2]
stack.subStack[3].T_start_anode[3]
stack.subStack[3].T_start_anode[4]
stack.subStack[3].T_start_anode[5]
stack.subStack[3].X_start_anode[1]
stack.subStack[3].X_start_anode[2]
stack.subStack[3].X_start_anode[3]
stack.subStack[3].X_start_anode[4]
stack.subStack[3].X_start_anode[5]
stack.subStack[3].X_start_anode[6]
stack.subStack[3].X_start_anode[7]
stack.subStack[3].m_flow_start_anode
stack.subStack[3].initOpt_cathode
stack.subStack[3].p_start_in_cathode
stack.subStack[3].p_start_out_cathode
stack.subStack[3].p_start_cathode[1]
stack.subStack[3].p_start_cathode[2]
stack.subStack[3].p_start_cathode[3]
stack.subStack[3].p_start_cathode[4]
stack.subStack[3].p_start_cathode[5]
stack.subStack[3].initFromEnthalpy_cathode
stack.subStack[3].h_start_in_cathode
stack.subStack[3].h_start_out_cathode
stack.subStack[3].h_start_cathode[1]
stack.subStack[3].h_start_cathode[2]
stack.subStack[3].h_start_cathode[3]
stack.subStack[3].h_start_cathode[4]
stack.subStack[3].h_start_cathode[5]
stack.subStack[3].T_start_in_cathode
stack.subStack[3].T_start_out_cathode
stack.subStack[3].T_start_cathode[1]
stack.subStack[3].T_start_cathode[2]
stack.subStack[3].T_start_cathode[3]
stack.subStack[3].T_start_cathode[4]
stack.subStack[3].T_start_cathode[5]
stack.subStack[3].X_start_cathode[1]
stack.subStack[3].X_start_cathode[2]
stack.subStack[3].X_start_cathode[3]
stack.subStack[3].X_start_cathode[4]
stack.subStack[3].X_start_cathode[5]
stack.subStack[3].m_flow_start_cathode
stack.subStack[3].dp_smooth
stack.subStack[3].mflow_smooth
stack.subStack[3].from_dp_anode
stack.subStack[3].positiveFlow_anode
stack.subStack[3].generateEventForReversal_anode
stack.subStack[3].from_dp_cathode
stack.subStack[3].positiveFlow_cathode
stack.subStack[3].generateEventForReversal_cathode
stack.subStack[3].useHeatTransfer_anode
stack.subStack[3].useHeatTransfer_cathode
stack.subStack[3].CF_AnodeSidePressureLoss
stack.subStack[3].CF_AnodeSideHeatTransfer
stack.subStack[3].CF_CathodePressureLoss
stack.subStack[3].CF_CathodeSideHeatTransfer
stack.subStack[3].d0_prox
stack.subStack[3].dp0_prox
stack.subStack[3].m_flow_nom_prox
stack.subStack[3].anode_stoich_num
stack.subStack[3].anode_stoich_den
stack.subStack[3].cathode_stoich_num
stack.subStack[3].cathode_stoich_den
stack.subStack[3].summary.N
stack.subStack[3].summary.n_cell
stack.subStack[3].summary.j_external
stack.subStack[3].summary.V_cell
stack.subStack[3].summary.Q_stack
stack.subStack[3].summary.dp_anode
stack.subStack[3].summary.dp_cathode
stack.subStack[3].anode_channel.summary.dp
stack.subStack[3].anode_channel.summary.m_flow
stack.subStack[3].anode_channel.summary.M
stack.subStack[3].anode_channel.summary.V
stack.subStack[3].anode_channel.summary.d_in
stack.subStack[3].anode_channel.n
stack.subStack[3].anode_channel.pi
stack.subStack[3].anode_channel.n_channels
stack.subStack[3].anode_channel.L
stack.subStack[3].anode_channel.D
stack.subStack[3].anode_channel.Dhyd
stack.subStack[3].anode_channel.A
stack.subStack[3].anode_channel.C
stack.subStack[3].anode_channel.V
stack.subStack[3].anode_channel.A_heat
stack.subStack[3].anode_channel.useHeatTransfer
stack.subStack[3].anode_channel.ni
stack.subStack[3].anode_channel.initOpt
stack.subStack[3].anode_channel.p_start_in
stack.subStack[3].anode_channel.p_start_out
stack.subStack[3].anode_channel.p_start[1]
stack.subStack[3].anode_channel.p_start[2]
stack.subStack[3].anode_channel.p_start[3]
stack.subStack[3].anode_channel.p_start[4]
stack.subStack[3].anode_channel.p_start[5]
stack.subStack[3].anode_channel.initFromEnthalpy
stack.subStack[3].anode_channel.h_start_in
stack.subStack[3].anode_channel.h_start_out
stack.subStack[3].anode_channel.h_start[1]
stack.subStack[3].anode_channel.h_start[2]
stack.subStack[3].anode_channel.h_start[3]
stack.subStack[3].anode_channel.h_start[4]
stack.subStack[3].anode_channel.h_start[5]
stack.subStack[3].anode_channel.T_start_in
stack.subStack[3].anode_channel.T_start_out
stack.subStack[3].anode_channel.T_start[1]
stack.subStack[3].anode_channel.T_start[2]
stack.subStack[3].anode_channel.T_start[3]
stack.subStack[3].anode_channel.T_start[4]
stack.subStack[3].anode_channel.T_start[5]
stack.subStack[3].anode_channel.X_start[1]
stack.subStack[3].anode_channel.X_start[2]
stack.subStack[3].anode_channel.X_start[3]
stack.subStack[3].anode_channel.X_start[4]
stack.subStack[3].anode_channel.X_start[5]
stack.subStack[3].anode_channel.X_start[6]
stack.subStack[3].anode_channel.X_start[7]
stack.subStack[3].anode_channel.m_flow_start
stack.subStack[3].anode_channel.positiveFlow
stack.subStack[3].anode_channel.from_dp
stack.subStack[3].anode_channel.dp_smooth
stack.subStack[3].anode_channel.mflow_smooth
stack.subStack[3].anode_channel.generateEventForReversal
stack.subStack[3].anode_channel.CF_PressureLoss
stack.subStack[3].anode_channel.CF_HeatTransfer
stack.subStack[3].anode_channel.X_weight
stack.subStack[3].anode_channel.y_sat
stack.subStack[3].anode_channel.includeStaticHead
stack.subStack[3].anode_channel.height
stack.subStack[3].anode_channel.g
stack.subStack[3].anode_channel.channel.n
stack.subStack[3].anode_channel.channel.n_channels[1]
stack.subStack[3].anode_channel.channel.n_channels[2]
stack.subStack[3].anode_channel.channel.n_channels[3]
stack.subStack[3].anode_channel.channel.n_channels[4]
stack.subStack[3].anode_channel.channel.L[1]
stack.subStack[3].anode_channel.channel.L[2]
stack.subStack[3].anode_channel.channel.L[3]
stack.subStack[3].anode_channel.channel.L[4]
stack.subStack[3].anode_channel.channel.Dhyd[1]
stack.subStack[3].anode_channel.channel.Dhyd[2]
stack.subStack[3].anode_channel.channel.Dhyd[3]
stack.subStack[3].anode_channel.channel.Dhyd[4]
stack.subStack[3].anode_channel.channel.A[1]
stack.subStack[3].anode_channel.channel.A[2]
stack.subStack[3].anode_channel.channel.A[3]
stack.subStack[3].anode_channel.channel.A[4]
stack.subStack[3].anode_channel.channel.L_total
stack.subStack[3].anode_channel.channel.V[1]
stack.subStack[3].anode_channel.channel.V[2]
stack.subStack[3].anode_channel.channel.V[3]
stack.subStack[3].anode_channel.channel.V[4]
stack.subStack[3].anode_channel.channel.V_tot
stack.subStack[3].anode_channel.channel.A_mean
stack.subStack[3].anode_channel.channel.A_heat[1]
stack.subStack[3].anode_channel.channel.A_heat[2]
stack.subStack[3].anode_channel.channel.A_heat[3]
stack.subStack[3].anode_channel.channel.A_heat[4]
stack.subStack[3].anode_channel.channel.ni
stack.subStack[3].anode_channel.channel.initOpt
stack.subStack[3].anode_channel.channel.p_start_in
stack.subStack[3].anode_channel.channel.p_start_out
stack.subStack[3].anode_channel.channel.p_start[1]
stack.subStack[3].anode_channel.channel.p_start[2]
stack.subStack[3].anode_channel.channel.p_start[3]
stack.subStack[3].anode_channel.channel.p_start[4]
stack.subStack[3].anode_channel.channel.p_start[5]
stack.subStack[3].anode_channel.channel.initFromEnthalpy
stack.subStack[3].anode_channel.channel.h_start_in
stack.subStack[3].anode_channel.channel.h_start_out
stack.subStack[3].anode_channel.channel.h_start[1]
stack.subStack[3].anode_channel.channel.h_start[2]
stack.subStack[3].anode_channel.channel.h_start[3]
stack.subStack[3].anode_channel.channel.h_start[4]
stack.subStack[3].anode_channel.channel.h_start[5]
stack.subStack[3].anode_channel.channel.T_start_in
stack.subStack[3].anode_channel.channel.T_start_out
stack.subStack[3].anode_channel.channel.T_start[1]
stack.subStack[3].anode_channel.channel.T_start[2]
stack.subStack[3].anode_channel.channel.T_start[3]
stack.subStack[3].anode_channel.channel.T_start[4]
stack.subStack[3].anode_channel.channel.T_start[5]
stack.subStack[3].anode_channel.channel.X_start[1]
stack.subStack[3].anode_channel.channel.X_start[2]
stack.subStack[3].anode_channel.channel.X_start[3]
stack.subStack[3].anode_channel.channel.X_start[4]
stack.subStack[3].anode_channel.channel.X_start[5]
stack.subStack[3].anode_channel.channel.X_start[6]
stack.subStack[3].anode_channel.channel.X_start[7]
stack.subStack[3].anode_channel.channel.m_flow_start
stack.subStack[3].anode_channel.channel.positiveFlow
stack.subStack[3].anode_channel.channel.from_dp
stack.subStack[3].anode_channel.channel.dp_smooth
stack.subStack[3].anode_channel.channel.mflow_smooth
stack.subStack[3].anode_channel.channel.generateEventForReversal
stack.subStack[3].anode_channel.channel.NA
stack.subStack[3].anode_channel.channel.NB
stack.subStack[3].anode_channel.channel.T[1]
stack.subStack[3].anode_channel.channel.der(T[1])
stack.subStack[3].anode_channel.channel.T[2]
stack.subStack[3].anode_channel.channel.der(T[2])
stack.subStack[3].anode_channel.channel.T[3]
stack.subStack[3].anode_channel.channel.der(T[3])
stack.subStack[3].anode_channel.channel.T[4]
stack.subStack[3].anode_channel.channel.der(T[4])
stack.subStack[3].anode_channel.channel.dp_asState
stack.subStack[3].anode_channel.channel.frictionDistribution
stack.subStack[3].anode_channel.channel.n_fric
stack.subStack[3].anode_channel.channel.CF_PressureLoss
stack.subStack[3].anode_channel.channel.CF_HeatTransfer
stack.subStack[3].anode_channel.channel.includeStaticHead
stack.subStack[3].anode_channel.channel.levels[1]
stack.subStack[3].anode_channel.channel.levels[2]
stack.subStack[3].anode_channel.channel.levels[3]
stack.subStack[3].anode_channel.channel.levels[4]
stack.subStack[3].anode_channel.channel.g
stack.subStack[3].anode_channel.channel.friction[1].A
stack.subStack[3].anode_channel.channel.friction[1].Dhyd
stack.subStack[3].anode_channel.channel.friction[1].n_channels
stack.subStack[3].anode_channel.channel.friction[1].lengthFraction
stack.subStack[3].anode_channel.channel.friction[1].flowFraction0
stack.subStack[3].anode_channel.channel.friction[1].dpFraction0
stack.subStack[3].anode_channel.channel.friction[1].from_dp
stack.subStack[3].anode_channel.channel.friction[1].positiveFlow
stack.subStack[3].anode_channel.channel.friction[1].dp_smooth
stack.subStack[3].anode_channel.channel.friction[1].mflow_smooth
stack.subStack[3].anode_channel.channel.friction[1].useFixedDensity
stack.subStack[3].anode_channel.channel.friction[1].reference_d
stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[1].dp_from_isothermal
stack.subStack[3].anode_channel.channel.friction[1].m_flow
stack.subStack[3].anode_channel.channel.friction[1].dA
stack.subStack[3].anode_channel.channel.friction[1].dB
stack.subStack[3].anode_channel.channel.friction[1].d0
stack.subStack[3].anode_channel.channel.friction[1].dp0
stack.subStack[3].anode_channel.channel.friction[1].m_flow0
stack.subStack[3].anode_channel.channel.friction[2].A
stack.subStack[3].anode_channel.channel.friction[2].Dhyd
stack.subStack[3].anode_channel.channel.friction[2].n_channels
stack.subStack[3].anode_channel.channel.friction[2].lengthFraction
stack.subStack[3].anode_channel.channel.friction[2].flowFraction0
stack.subStack[3].anode_channel.channel.friction[2].dpFraction0
stack.subStack[3].anode_channel.channel.friction[2].from_dp
stack.subStack[3].anode_channel.channel.friction[2].positiveFlow
stack.subStack[3].anode_channel.channel.friction[2].dp_smooth
stack.subStack[3].anode_channel.channel.friction[2].mflow_smooth
stack.subStack[3].anode_channel.channel.friction[2].useFixedDensity
stack.subStack[3].anode_channel.channel.friction[2].reference_d
stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[2].dp_from_isothermal
stack.subStack[3].anode_channel.channel.friction[2].m_flow
stack.subStack[3].anode_channel.channel.friction[2].dA
stack.subStack[3].anode_channel.channel.friction[2].dB
stack.subStack[3].anode_channel.channel.friction[2].d0
stack.subStack[3].anode_channel.channel.friction[2].dp0
stack.subStack[3].anode_channel.channel.friction[2].m_flow0
stack.subStack[3].anode_channel.channel.friction[3].A
stack.subStack[3].anode_channel.channel.friction[3].Dhyd
stack.subStack[3].anode_channel.channel.friction[3].n_channels
stack.subStack[3].anode_channel.channel.friction[3].lengthFraction
stack.subStack[3].anode_channel.channel.friction[3].flowFraction0
stack.subStack[3].anode_channel.channel.friction[3].dpFraction0
stack.subStack[3].anode_channel.channel.friction[3].from_dp
stack.subStack[3].anode_channel.channel.friction[3].positiveFlow
stack.subStack[3].anode_channel.channel.friction[3].dp_smooth
stack.subStack[3].anode_channel.channel.friction[3].mflow_smooth
stack.subStack[3].anode_channel.channel.friction[3].useFixedDensity
stack.subStack[3].anode_channel.channel.friction[3].reference_d
stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[3].dp_from_isothermal
stack.subStack[3].anode_channel.channel.friction[3].m_flow
stack.subStack[3].anode_channel.channel.friction[3].dA
stack.subStack[3].anode_channel.channel.friction[3].dB
stack.subStack[3].anode_channel.channel.friction[3].d0
stack.subStack[3].anode_channel.channel.friction[3].dp0
stack.subStack[3].anode_channel.channel.friction[3].m_flow0
stack.subStack[3].anode_channel.channel.friction[4].A
stack.subStack[3].anode_channel.channel.friction[4].Dhyd
stack.subStack[3].anode_channel.channel.friction[4].n_channels
stack.subStack[3].anode_channel.channel.friction[4].lengthFraction
stack.subStack[3].anode_channel.channel.friction[4].flowFraction0
stack.subStack[3].anode_channel.channel.friction[4].dpFraction0
stack.subStack[3].anode_channel.channel.friction[4].from_dp
stack.subStack[3].anode_channel.channel.friction[4].positiveFlow
stack.subStack[3].anode_channel.channel.friction[4].dp_smooth
stack.subStack[3].anode_channel.channel.friction[4].mflow_smooth
stack.subStack[3].anode_channel.channel.friction[4].useFixedDensity
stack.subStack[3].anode_channel.channel.friction[4].reference_d
stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[1]
stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[2]
stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[3]
stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[4]
stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[5]
stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[6]
stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[7]
stack.subStack[3].anode_channel.channel.friction[4].dp_from_isothermal
stack.subStack[3].anode_channel.channel.friction[4].m_flow
stack.subStack[3].anode_channel.channel.friction[4].dA
stack.subStack[3].anode_channel.channel.friction[4].dB
stack.subStack[3].anode_channel.channel.friction[4].d0
stack.subStack[3].anode_channel.channel.friction[4].dp0
stack.subStack[3].anode_channel.channel.friction[4].m_flow0
stack.subStack[3].anode_channel.channel.htcoeff[1].A
stack.subStack[3].anode_channel.channel.htcoeff[1].L
stack.subStack[3].anode_channel.channel.htcoeff[1].Dhyd
stack.subStack[3].anode_channel.channel.htcoeff[1].m_flow
stack.subStack[3].anode_channel.channel.htcoeff[1].ht_from_isothermal
stack.subStack[3].anode_channel.channel.htcoeff[1].CF_length
stack.subStack[3].anode_channel.channel.htcoeff[1].alpha
stack.subStack[3].anode_channel.channel.htcoeff[2].A
stack.subStack[3].anode_channel.channel.htcoeff[2].L
stack.subStack[3].anode_channel.channel.htcoeff[2].Dhyd
stack.subStack[3].anode_channel.channel.htcoeff[2].m_flow
stack.subStack[3].anode_channel.channel.htcoeff[2].ht_from_isothermal
stack.subStack[3].anode_channel.channel.htcoeff[2].CF_length
stack.subStack[3].anode_channel.channel.htcoeff[2].alpha
stack.subStack[3].anode_channel.channel.htcoeff[3].A
stack.subStack[3].anode_channel.channel.htcoeff[3].L
stack.subStack[3].anode_channel.channel.htcoeff[3].Dhyd
stack.subStack[3].anode_channel.channel.htcoeff[3].m_flow
stack.subStack[3].anode_channel.channel.htcoeff[3].ht_from_isothermal
stack.subStack[3].anode_channel.channel.htcoeff[3].CF_length
stack.subStack[3].anode_channel.channel.htcoeff[3].alpha
stack.subStack[3].anode_channel.channel.htcoeff[4].A
stack.subStack[3].anode_channel.channel.htcoeff[4].L
stack.subStack[3].anode_channel.channel.htcoeff[4].Dhyd
stack.subStack[3].anode_channel.channel.htcoeff[4].m_flow
stack.subStack[3].anode_channel.channel.htcoeff[4].ht_from_isothermal
stack.subStack[3].anode_channel.channel.htcoeff[4].CF_length
stack.subStack[3].anode_channel.channel.htcoeff[4].alpha
stack.subStack[3].anode_channel.channel.reaction.N
stack.subStack[3].anode_channel.channel.reaction.Cp_reac[1]
stack.subStack[3].anode_channel.channel.reaction.Cp_reac[2]
stack.subStack[3].anode_channel.channel.reaction.Cp_reac[3]
stack.subStack[3].anode_channel.channel.reaction.Cp_reac[4]
stack.subStack[3].anode_channel.channel.reaction.Q[1]
stack.subStack[3].anode_channel.channel.reaction.Q[2]
stack.subStack[3].anode_channel.channel.reaction.Q[3]
stack.subStack[3].anode_channel.channel.reaction.Q[4]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[1, 1]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[1, 5]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[2, 1]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[2, 5]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[3, 1]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[3, 5]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[4, 1]
stack.subStack[3].anode_channel.channel.reaction.mX_flow[4, 5]
stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 1]
stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 2]
stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 3]
stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 4]
stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 5]
stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 6]
stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 7]
stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 1]
stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 2]
stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 3]
stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 4]
stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 5]
stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 6]
stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 7]
stack.subStack[3].anode_channel.channel.reaction.n_reac
stack.subStack[3].anode_channel.channel.reaction.comp[1]
stack.subStack[3].anode_channel.channel.reaction.comp[2]
stack.subStack[3].anode_channel.channel.reaction.pstart
stack.subStack[3].anode_channel.channel.reaction.Tstart
stack.subStack[3].anode_channel.channel.reaction.Xstart[1]
stack.subStack[3].anode_channel.channel.reaction.Xstart[2]
stack.subStack[3].anode_channel.channel.reaction.Xstart[3]
stack.subStack[3].anode_channel.channel.reaction.Xstart[4]
stack.subStack[3].anode_channel.channel.reaction.Xstart[5]
stack.subStack[3].anode_channel.channel.reaction.Xstart[6]
stack.subStack[3].anode_channel.channel.reaction.Xstart[7]
stack.subStack[3].anode_channel.channel.reaction.V
stack.subStack[3].anode_channel.channel.reaction.scale
stack.subStack[3].anode_channel.channel.reaction.MMX[1]
stack.subStack[3].anode_channel.channel.reaction.MMX[2]
stack.subStack[3].anode_channel.channel.reaction.MMX[3]
stack.subStack[3].anode_channel.channel.reaction.MMX[4]
stack.subStack[3].anode_channel.channel.reaction.MMX[5]
stack.subStack[3].anode_channel.channel.reaction.MMX[6]
stack.subStack[3].anode_channel.channel.reaction.MMX[7]
stack.subStack[3].anode_channel.channel.reaction.MM[1]
stack.subStack[3].anode_channel.channel.reaction.MM[2]
stack.subStack[3].anode_channel.channel.reaction.MM[3]
stack.subStack[3].anode_channel.channel.reaction.MM[4]
stack.subStack[3].anode_channel.channel.reaction.der(MM[1])
stack.subStack[3].anode_channel.channel.reaction.der(MM[2])
stack.subStack[3].anode_channel.channel.reaction.der(MM[3])
stack.subStack[3].anode_channel.channel.reaction.der(MM[4])
stack.subStack[3].anode_channel.channel.reaction.y_start[1]
stack.subStack[3].anode_channel.channel.reaction.y_start[2]
stack.subStack[3].anode_channel.channel.reaction.y_start[3]
stack.subStack[3].anode_channel.channel.reaction.y_start[4]
stack.subStack[3].anode_channel.channel.reaction.y_start[5]
stack.subStack[3].anode_channel.channel.reaction.y_start[6]
stack.subStack[3].anode_channel.channel.reaction.y_start[7]
stack.subStack[3].anode_channel.channel.reaction.log10_y_start[1]
stack.subStack[3].anode_channel.channel.reaction.log10_y_start[2]
stack.subStack[3].anode_channel.channel.reaction.log10_y_start[3]
stack.subStack[3].anode_channel.channel.reaction.log10_y_start[4]
stack.subStack[3].anode_channel.channel.reaction.log10_y_start[5]
stack.subStack[3].anode_channel.channel.reaction.log10_y_start[6]
stack.subStack[3].anode_channel.channel.reaction.log10_y_start[7]
stack.subStack[3].anode_channel.channel.reaction.pref
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 2]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 3]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 4]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 5]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 6]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 7]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 2]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 3]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 4]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 5]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 6]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 7]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 2]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 3]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 4]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 5]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 6]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 7]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 2]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 3]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 4]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 5]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 6]
stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 7]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[1, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[1, 2]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[2, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[2, 2]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[3, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[3, 2]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[4, 1]
stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[4, 2]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 1]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 2]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 3]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 4]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 5]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 6]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 7]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 1]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 2]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 3]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 4]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 5]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 6]
stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 7]
stack.subStack[3].anode_channel.channel.reaction.Ztot_start
stack.subStack[3].anode_channel.channel.reaction.Zx_start[1]
stack.subStack[3].anode_channel.channel.reaction.Zx_start[2]
stack.subStack[3].anode_channel.channel.reaction.Zx_start[3]
stack.subStack[3].anode_channel.channel.reaction.Zx_start[4]
stack.subStack[3].anode_channel.channel.reaction.Zx_start[5]
stack.subStack[3].anode_channel.channel.reaction.Zx_start[6]
stack.subStack[3].anode_channel.channel.reaction.Zx_start[7]
stack.subStack[3].anode_channel.channel.reaction.CF_conversion
stack.subStack[3].anode_channel.channel.reaction.Tscale
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[1, 1]
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[1, 2]
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[2, 1]
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[2, 2]
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[3, 1]
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[3, 2]
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[4, 1]
stack.subStack[3].anode_channel.channel.reaction.kEq_reac[4, 2]
stack.subStack[3].anode_channel.channel.reaction.Zx[1, 1]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 1])
stack.subStack[3].anode_channel.channel.reaction.Zx[1, 2]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 2])
stack.subStack[3].anode_channel.channel.reaction.Zx[1, 3]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 3])
stack.subStack[3].anode_channel.channel.reaction.Zx[1, 4]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 4])
stack.subStack[3].anode_channel.channel.reaction.Zx[1, 5]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 5])
stack.subStack[3].anode_channel.channel.reaction.Zx[1, 6]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 6])
stack.subStack[3].anode_channel.channel.reaction.Zx[1, 7]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 7])
stack.subStack[3].anode_channel.channel.reaction.Zx[2, 1]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 1])
stack.subStack[3].anode_channel.channel.reaction.Zx[2, 2]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 2])
stack.subStack[3].anode_channel.channel.reaction.Zx[2, 3]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 3])
stack.subStack[3].anode_channel.channel.reaction.Zx[2, 4]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 4])
stack.subStack[3].anode_channel.channel.reaction.Zx[2, 5]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 5])
stack.subStack[3].anode_channel.channel.reaction.Zx[2, 6]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 6])
stack.subStack[3].anode_channel.channel.reaction.Zx[2, 7]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 7])
stack.subStack[3].anode_channel.channel.reaction.Zx[3, 1]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 1])
stack.subStack[3].anode_channel.channel.reaction.Zx[3, 2]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 2])
stack.subStack[3].anode_channel.channel.reaction.Zx[3, 3]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 3])
stack.subStack[3].anode_channel.channel.reaction.Zx[3, 4]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 4])
stack.subStack[3].anode_channel.channel.reaction.Zx[3, 5]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 5])
stack.subStack[3].anode_channel.channel.reaction.Zx[3, 6]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 6])
stack.subStack[3].anode_channel.channel.reaction.Zx[3, 7]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 7])
stack.subStack[3].anode_channel.channel.reaction.Zx[4, 1]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 1])
stack.subStack[3].anode_channel.channel.reaction.Zx[4, 2]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 2])
stack.subStack[3].anode_channel.channel.reaction.Zx[4, 3]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 3])
stack.subStack[3].anode_channel.channel.reaction.Zx[4, 4]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 4])
stack.subStack[3].anode_channel.channel.reaction.Zx[4, 5]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 5])
stack.subStack[3].anode_channel.channel.reaction.Zx[4, 6]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 6])
stack.subStack[3].anode_channel.channel.reaction.Zx[4, 7]
stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 7])
stack.subStack[3].anode_channel.channel.reaction.Ztot[1]
stack.subStack[3].anode_channel.channel.reaction.Ztot[2]
stack.subStack[3].anode_channel.channel.reaction.Ztot[3]
stack.subStack[3].anode_channel.channel.reaction.Ztot[4]
stack.subStack[3].anode_channel.channel.reaction.der(Ztot[1])
stack.subStack[3].anode_channel.channel.reaction.der(Ztot[2])
stack.subStack[3].anode_channel.channel.reaction.der(Ztot[3])
stack.subStack[3].anode_channel.channel.reaction.der(Ztot[4])
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 1]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 2]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 3]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 4]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 5]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 1]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 2]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 3]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 4]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 5]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 1]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 2]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 3]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 4]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 5]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 1]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 2]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 3]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 4]
stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 5]
stack.subStack[3].anode_channel.channel.reaction.krate[1, 1]
stack.subStack[3].anode_channel.channel.reaction.der(krate[1, 1])
stack.subStack[3].anode_channel.channel.reaction.krate[1, 2]
stack.subStack[3].anode_channel.channel.reaction.der(krate[1, 2])
stack.subStack[3].anode_channel.channel.reaction.krate[2, 1]
stack.subStack[3].anode_channel.channel.reaction.der(krate[2, 1])
stack.subStack[3].anode_channel.channel.reaction.krate[2, 2]
stack.subStack[3].anode_channel.channel.reaction.der(krate[2, 2])
stack.subStack[3].anode_channel.channel.reaction.krate[3, 1]
stack.subStack[3].anode_channel.channel.reaction.der(krate[3, 1])
stack.subStack[3].anode_channel.channel.reaction.krate[3, 2]
stack.subStack[3].anode_channel.channel.reaction.der(krate[3, 2])
stack.subStack[3].anode_channel.channel.reaction.krate[4, 1]
stack.subStack[3].anode_channel.channel.reaction.der(krate[4, 1])
stack.subStack[3].anode_channel.channel.reaction.krate[4, 2]
stack.subStack[3].anode_channel.channel.reaction.der(krate[4, 2])
stack.subStack[3].anode_channel.channel.reaction.rZ[1, 1]
stack.subStack[3].anode_channel.channel.reaction.rZ[1, 2]
stack.subStack[3].anode_channel.channel.reaction.rZ[1, 3]
stack.subStack[3].anode_channel.channel.reaction.rZ[1, 4]
stack.subStack[3].anode_channel.channel.reaction.rZ[1, 5]
stack.subStack[3].anode_channel.channel.reaction.rZ[1, 6]
stack.subStack[3].anode_channel.channel.reaction.rZ[1, 7]
stack.subStack[3].anode_channel.channel.reaction.rZ[2, 1]
stack.subStack[3].anode_channel.channel.reaction.rZ[2, 2]
stack.subStack[3].anode_channel.channel.reaction.rZ[2, 3]
stack.subStack[3].anode_channel.channel.reaction.rZ[2, 4]
stack.subStack[3].anode_channel.channel.reaction.rZ[2, 5]
stack.subStack[3].anode_channel.channel.reaction.rZ[2, 6]
stack.subStack[3].anode_channel.channel.reaction.rZ[2, 7]
stack.subStack[3].anode_channel.channel.reaction.rZ[3, 1]
stack.subStack[3].anode_channel.channel.reaction.rZ[3, 2]
stack.subStack[3].anode_channel.channel.reaction.rZ[3, 3]
stack.subStack[3].anode_channel.channel.reaction.rZ[3, 4]
stack.subStack[3].anode_channel.channel.reaction.rZ[3, 5]
stack.subStack[3].anode_channel.channel.reaction.rZ[3, 6]
stack.subStack[3].anode_channel.channel.reaction.rZ[3, 7]
stack.subStack[3].anode_channel.channel.reaction.rZ[4, 1]
stack.subStack[3].anode_channel.channel.reaction.rZ[4, 2]
stack.subStack[3].anode_channel.channel.reaction.rZ[4, 3]
stack.subStack[3].anode_channel.channel.reaction.rZ[4, 4]
stack.subStack[3].anode_channel.channel.reaction.rZ[4, 5]
stack.subStack[3].anode_channel.channel.reaction.rZ[4, 6]
stack.subStack[3].anode_channel.channel.reaction.rZ[4, 7]
stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 1]
stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 2]
stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 3]
stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 4]
stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 5]
stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 6]
stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 7]
stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 1]
stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 2]
stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 3]
stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 4]
stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 5]
stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 6]
stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 7]
stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 1]
stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 2]
stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 3]
stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 4]
stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 5]
stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 6]
stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 7]
stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 1]
stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 2]
stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 3]
stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 4]
stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 5]
stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 6]
stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 7]
stack.subStack[3].anode_channel.channel.reaction.Zx_nominal
stack.subStack[3].anode_channel.channel.reaction.epsZ
stack.subStack[3].anode_channel.channel.reaction.e[1, 1]
stack.subStack[3].anode_channel.channel.reaction.e[1, 2]
stack.subStack[3].anode_channel.channel.reaction.e[2, 1]
stack.subStack[3].anode_channel.channel.reaction.e[2, 2]
stack.subStack[3].anode_channel.channel.reaction.e[3, 1]
stack.subStack[3].anode_channel.channel.reaction.e[3, 2]
stack.subStack[3].anode_channel.channel.reaction.e[4, 1]
stack.subStack[3].anode_channel.channel.reaction.e[4, 2]
stack.subStack[3].anode_channel.channel.reaction.state[1].p
stack.subStack[3].anode_channel.channel.reaction.state[1].T
stack.subStack[3].anode_channel.channel.reaction.state[1].X[1]
stack.subStack[3].anode_channel.channel.reaction.state[1].X[2]
stack.subStack[3].anode_channel.channel.reaction.state[1].X[3]
stack.subStack[3].anode_channel.channel.reaction.state[1].X[4]
stack.subStack[3].anode_channel.channel.reaction.state[1].X[5]
stack.subStack[3].anode_channel.channel.reaction.state[1].X[6]
stack.subStack[3].anode_channel.channel.reaction.state[1].X[7]
stack.subStack[3].anode_channel.channel.reaction.state[2].p
stack.subStack[3].anode_channel.channel.reaction.state[2].T
stack.subStack[3].anode_channel.channel.reaction.state[2].X[1]
stack.subStack[3].anode_channel.channel.reaction.state[2].X[2]
stack.subStack[3].anode_channel.channel.reaction.state[2].X[3]
stack.subStack[3].anode_channel.channel.reaction.state[2].X[4]
stack.subStack[3].anode_channel.channel.reaction.state[2].X[5]
stack.subStack[3].anode_channel.channel.reaction.state[2].X[6]
stack.subStack[3].anode_channel.channel.reaction.state[2].X[7]
stack.subStack[3].anode_channel.channel.reaction.state[3].p
stack.subStack[3].anode_channel.channel.reaction.state[3].T
stack.subStack[3].anode_channel.channel.reaction.state[3].X[1]
stack.subStack[3].anode_channel.channel.reaction.state[3].X[2]
stack.subStack[3].anode_channel.channel.reaction.state[3].X[3]
stack.subStack[3].anode_channel.channel.reaction.state[3].X[4]
stack.subStack[3].anode_channel.channel.reaction.state[3].X[5]
stack.subStack[3].anode_channel.channel.reaction.state[3].X[6]
stack.subStack[3].anode_channel.channel.reaction.state[3].X[7]
stack.subStack[3].anode_channel.channel.reaction.state[4].p
stack.subStack[3].anode_channel.channel.reaction.state[4].T
stack.subStack[3].anode_channel.channel.reaction.state[4].X[1]
stack.subStack[3].anode_channel.channel.reaction.state[4].X[2]
stack.subStack[3].anode_channel.channel.reaction.state[4].X[3]
stack.subStack[3].anode_channel.channel.reaction.state[4].X[4]
stack.subStack[3].anode_channel.channel.reaction.state[4].X[5]
stack.subStack[3].anode_channel.channel.reaction.state[4].X[6]
stack.subStack[3].anode_channel.channel.reaction.state[4].X[7]
stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 1]
stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 2]
stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 3]
stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 4]
stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 5]
stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 6]
stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 7]
stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 1]
stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 2]
stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 3]
stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 4]
stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 5]
stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 6]
stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 7]
stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 1]
stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 2]
stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 3]
stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 4]
stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 5]
stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 6]
stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 7]
stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 1]
stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 2]
stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 3]
stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 4]
stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 5]
stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 6]
stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 7]
stack.subStack[3].anode_channel.channel.reaction.reactant[1, 1]
stack.subStack[3].anode_channel.channel.reaction.reactant[1, 2]
stack.subStack[3].anode_channel.channel.reaction.reactant[1, 3]
stack.subStack[3].anode_channel.channel.reaction.reactant[1, 4]
stack.subStack[3].anode_channel.channel.reaction.reactant[1, 5]
stack.subStack[3].anode_channel.channel.reaction.reactant[1, 6]
stack.subStack[3].anode_channel.channel.reaction.reactant[1, 7]
stack.subStack[3].anode_channel.channel.reaction.reactant[2, 1]
stack.subStack[3].anode_channel.channel.reaction.reactant[2, 2]
stack.subStack[3].anode_channel.channel.reaction.reactant[2, 3]
stack.subStack[3].anode_channel.channel.reaction.reactant[2, 4]
stack.subStack[3].anode_channel.channel.reaction.reactant[2, 5]
stack.subStack[3].anode_channel.channel.reaction.reactant[2, 6]
stack.subStack[3].anode_channel.channel.reaction.reactant[2, 7]
stack.subStack[3].anode_channel.channel.reaction.rate[1, 1]
stack.subStack[3].anode_channel.channel.reaction.rate[1, 2]
stack.subStack[3].anode_channel.channel.reaction.rate[2, 1]
stack.subStack[3].anode_channel.channel.reaction.rate[2, 2]
stack.subStack[3].anode_channel.channel.reaction.rate[3, 1]
stack.subStack[3].anode_channel.channel.reaction.rate[3, 2]
stack.subStack[3].anode_channel.channel.reaction.rate[4, 1]
stack.subStack[3].anode_channel.channel.reaction.rate[4, 2]
stack.subStack[3].anode_channel.channel.reaction.S_ref[1]
stack.subStack[3].anode_channel.channel.reaction.S_ref[2]
stack.subStack[3].anode_channel.channel.reaction.S_ref[3]
stack.subStack[3].anode_channel.channel.reaction.S_ref[4]
stack.subStack[3].anode_channel.channel.reaction.S_ref[5]
stack.subStack[3].anode_channel.channel.reaction.S_ref[6]
stack.subStack[3].anode_channel.channel.reaction.S_ref[7]
stack.subStack[3].anode_channel.channel.reaction.S_wgs[1]
stack.subStack[3].anode_channel.channel.reaction.S_wgs[2]
stack.subStack[3].anode_channel.channel.reaction.S_wgs[3]
stack.subStack[3].anode_channel.channel.reaction.S_wgs[4]
stack.subStack[3].anode_channel.channel.reaction.S_wgs[5]
stack.subStack[3].anode_channel.channel.reaction.S_wgs[6]
stack.subStack[3].anode_channel.channel.reaction.S_wgs[7]
stack.subStack[3].anode_channel.channel.reaction.index[1]
stack.subStack[3].anode_channel.channel.reaction.index[2]
stack.subStack[3].anode_channel.channel.reaction.T_sat_for_WGS
stack.subStack[3].anode_channel.channel.reaction.g_rere[1]
stack.subStack[3].anode_channel.channel.reaction.g_rere[2]
stack.subStack[3].anode_channel.channel.reaction.g_rere[3]
stack.subStack[3].anode_channel.channel.reaction.g_rere[4]
stack.subStack[3].anode_channel.channel.reaction.g_wgs[1]
stack.subStack[3].anode_channel.channel.reaction.g_wgs[2]
stack.subStack[3].anode_channel.channel.reaction.g_wgs[3]
stack.subStack[3].anode_channel.channel.reaction.g_wgs[4]
stack.subStack[3].anode_channel.channel.gas[1].X[1]
stack.subStack[3].anode_channel.channel.gas[1].X[2]
stack.subStack[3].anode_channel.channel.gas[1].X[3]
stack.subStack[3].anode_channel.channel.gas[1].X[4]
stack.subStack[3].anode_channel.channel.gas[1].X[5]
stack.subStack[3].anode_channel.channel.gas[1].X[6]
stack.subStack[3].anode_channel.channel.gas[1].X[7]
stack.subStack[3].anode_channel.channel.gas[1].der(X[1])
stack.subStack[3].anode_channel.channel.gas[1].der(X[2])
stack.subStack[3].anode_channel.channel.gas[1].der(X[3])
stack.subStack[3].anode_channel.channel.gas[1].der(X[4])
stack.subStack[3].anode_channel.channel.gas[1].der(X[5])
stack.subStack[3].anode_channel.channel.gas[1].der(X[6])
stack.subStack[3].anode_channel.channel.gas[1].der(X[7])
stack.subStack[3].anode_channel.channel.gas[1].Xi[1]
stack.subStack[3].anode_channel.channel.gas[1].Xi[2]
stack.subStack[3].anode_channel.channel.gas[1].Xi[3]
stack.subStack[3].anode_channel.channel.gas[1].Xi[4]
stack.subStack[3].anode_channel.channel.gas[1].Xi[5]
stack.subStack[3].anode_channel.channel.gas[1].Xi[6]
stack.subStack[3].anode_channel.channel.gas[1].Xi[7]
stack.subStack[3].anode_channel.channel.gas[1].d
stack.subStack[3].anode_channel.channel.gas[1].der(d)
stack.subStack[3].anode_channel.channel.gas[1].u
stack.subStack[3].anode_channel.channel.gas[1].Rg
stack.subStack[3].anode_channel.channel.gas[1].der(Rg)
stack.subStack[3].anode_channel.channel.gas[1].MM
stack.subStack[3].anode_channel.channel.gas[1].assertlevel
stack.subStack[3].anode_channel.channel.gas[1].state.p
stack.subStack[3].anode_channel.channel.gas[1].state.T
stack.subStack[3].anode_channel.channel.gas[1].state.X[1]
stack.subStack[3].anode_channel.channel.gas[1].state.X[2]
stack.subStack[3].anode_channel.channel.gas[1].state.X[3]
stack.subStack[3].anode_channel.channel.gas[1].state.X[4]
stack.subStack[3].anode_channel.channel.gas[1].state.X[5]
stack.subStack[3].anode_channel.channel.gas[1].state.X[6]
stack.subStack[3].anode_channel.channel.gas[1].state.X[7]
stack.subStack[3].anode_channel.channel.gas[1].preferredMediumStates
stack.subStack[3].anode_channel.channel.gas[1].T_degC
stack.subStack[3].anode_channel.channel.gas[1].p_bar
stack.subStack[3].anode_channel.channel.gas[1].Z[1]
stack.subStack[3].anode_channel.channel.gas[1].Z[2]
stack.subStack[3].anode_channel.channel.gas[1].Z[3]
stack.subStack[3].anode_channel.channel.gas[1].Z[4]
stack.subStack[3].anode_channel.channel.gas[1].Z[5]
stack.subStack[3].anode_channel.channel.gas[1].Z[6]
stack.subStack[3].anode_channel.channel.gas[1].Z[7]
stack.subStack[3].anode_channel.channel.gas[1].dUZT[1]
stack.subStack[3].anode_channel.channel.gas[1].dUZT[2]
stack.subStack[3].anode_channel.channel.gas[1].dUZT[3]
stack.subStack[3].anode_channel.channel.gas[1].dUZT[4]
stack.subStack[3].anode_channel.channel.gas[1].dUZT[5]
stack.subStack[3].anode_channel.channel.gas[1].dUZT[6]
stack.subStack[3].anode_channel.channel.gas[1].dUZT[7]
stack.subStack[3].anode_channel.channel.gas[1].h_component[1]
stack.subStack[3].anode_channel.channel.gas[1].h_component[2]
stack.subStack[3].anode_channel.channel.gas[1].h_component[3]
stack.subStack[3].anode_channel.channel.gas[1].h_component[4]
stack.subStack[3].anode_channel.channel.gas[1].h_component[5]
stack.subStack[3].anode_channel.channel.gas[1].h_component[6]
stack.subStack[3].anode_channel.channel.gas[1].h_component[7]
stack.subStack[3].anode_channel.channel.gas[1].s_component[1]
stack.subStack[3].anode_channel.channel.gas[1].s_component[2]
stack.subStack[3].anode_channel.channel.gas[1].s_component[3]
stack.subStack[3].anode_channel.channel.gas[1].s_component[4]
stack.subStack[3].anode_channel.channel.gas[1].s_component[5]
stack.subStack[3].anode_channel.channel.gas[1].s_component[6]
stack.subStack[3].anode_channel.channel.gas[1].s_component[7]
stack.subStack[3].anode_channel.channel.gas[1].u_comp[1]
stack.subStack[3].anode_channel.channel.gas[1].u_comp[2]
stack.subStack[3].anode_channel.channel.gas[1].u_comp[3]
stack.subStack[3].anode_channel.channel.gas[1].u_comp[4]
stack.subStack[3].anode_channel.channel.gas[1].u_comp[5]
stack.subStack[3].anode_channel.channel.gas[1].u_comp[6]
stack.subStack[3].anode_channel.channel.gas[1].u_comp[7]
stack.subStack[3].anode_channel.channel.gas[1].cp
stack.subStack[3].anode_channel.channel.gas[1].g_formation[1]
stack.subStack[3].anode_channel.channel.gas[1].g_formation[2]
stack.subStack[3].anode_channel.channel.gas[1].g_formation[3]
stack.subStack[3].anode_channel.channel.gas[1].g_formation[4]
stack.subStack[3].anode_channel.channel.gas[1].g_formation[5]
stack.subStack[3].anode_channel.channel.gas[1].g_formation[6]
stack.subStack[3].anode_channel.channel.gas[1].g_formation[7]
stack.subStack[3].anode_channel.channel.gas[1].ddTp
stack.subStack[3].anode_channel.channel.gas[1].ddpT
stack.subStack[3].anode_channel.channel.gas[1].dupT
stack.subStack[3].anode_channel.channel.gas[1].duTp
stack.subStack[3].anode_channel.channel.gas[1].ddx[1]
stack.subStack[3].anode_channel.channel.gas[1].ddx[2]
stack.subStack[3].anode_channel.channel.gas[1].ddx[3]
stack.subStack[3].anode_channel.channel.gas[1].ddx[4]
stack.subStack[3].anode_channel.channel.gas[1].ddx[5]
stack.subStack[3].anode_channel.channel.gas[1].ddx[6]
stack.subStack[3].anode_channel.channel.gas[1].ddx[7]
stack.subStack[3].anode_channel.channel.gas[2].X[1]
stack.subStack[3].anode_channel.channel.gas[2].X[2]
stack.subStack[3].anode_channel.channel.gas[2].X[3]
stack.subStack[3].anode_channel.channel.gas[2].X[4]
stack.subStack[3].anode_channel.channel.gas[2].X[5]
stack.subStack[3].anode_channel.channel.gas[2].X[6]
stack.subStack[3].anode_channel.channel.gas[2].X[7]
stack.subStack[3].anode_channel.channel.gas[2].der(X[1])
stack.subStack[3].anode_channel.channel.gas[2].der(X[2])
stack.subStack[3].anode_channel.channel.gas[2].der(X[3])
stack.subStack[3].anode_channel.channel.gas[2].der(X[4])
stack.subStack[3].anode_channel.channel.gas[2].der(X[5])
stack.subStack[3].anode_channel.channel.gas[2].der(X[6])
stack.subStack[3].anode_channel.channel.gas[2].der(X[7])
stack.subStack[3].anode_channel.channel.gas[2].Xi[1]
stack.subStack[3].anode_channel.channel.gas[2].Xi[2]
stack.subStack[3].anode_channel.channel.gas[2].Xi[3]
stack.subStack[3].anode_channel.channel.gas[2].Xi[4]
stack.subStack[3].anode_channel.channel.gas[2].Xi[5]
stack.subStack[3].anode_channel.channel.gas[2].Xi[6]
stack.subStack[3].anode_channel.channel.gas[2].Xi[7]
stack.subStack[3].anode_channel.channel.gas[2].d
stack.subStack[3].anode_channel.channel.gas[2].der(d)
stack.subStack[3].anode_channel.channel.gas[2].u
stack.subStack[3].anode_channel.channel.gas[2].Rg
stack.subStack[3].anode_channel.channel.gas[2].der(Rg)
stack.subStack[3].anode_channel.channel.gas[2].MM
stack.subStack[3].anode_channel.channel.gas[2].assertlevel
stack.subStack[3].anode_channel.channel.gas[2].state.p
stack.subStack[3].anode_channel.channel.gas[2].state.T
stack.subStack[3].anode_channel.channel.gas[2].state.X[1]
stack.subStack[3].anode_channel.channel.gas[2].state.X[2]
stack.subStack[3].anode_channel.channel.gas[2].state.X[3]
stack.subStack[3].anode_channel.channel.gas[2].state.X[4]
stack.subStack[3].anode_channel.channel.gas[2].state.X[5]
stack.subStack[3].anode_channel.channel.gas[2].state.X[6]
stack.subStack[3].anode_channel.channel.gas[2].state.X[7]
stack.subStack[3].anode_channel.channel.gas[2].preferredMediumStates
stack.subStack[3].anode_channel.channel.gas[2].T_degC
stack.subStack[3].anode_channel.channel.gas[2].p_bar
stack.subStack[3].anode_channel.channel.gas[2].Z[1]
stack.subStack[3].anode_channel.channel.gas[2].Z[2]
stack.subStack[3].anode_channel.channel.gas[2].Z[3]
stack.subStack[3].anode_channel.channel.gas[2].Z[4]
stack.subStack[3].anode_channel.channel.gas[2].Z[5]
stack.subStack[3].anode_channel.channel.gas[2].Z[6]
stack.subStack[3].anode_channel.channel.gas[2].Z[7]
stack.subStack[3].anode_channel.channel.gas[2].dUZT[1]
stack.subStack[3].anode_channel.channel.gas[2].dUZT[2]
stack.subStack[3].anode_channel.channel.gas[2].dUZT[3]
stack.subStack[3].anode_channel.channel.gas[2].dUZT[4]
stack.subStack[3].anode_channel.channel.gas[2].dUZT[5]
stack.subStack[3].anode_channel.channel.gas[2].dUZT[6]
stack.subStack[3].anode_channel.channel.gas[2].dUZT[7]
stack.subStack[3].anode_channel.channel.gas[2].h_component[1]
stack.subStack[3].anode_channel.channel.gas[2].h_component[2]
stack.subStack[3].anode_channel.channel.gas[2].h_component[3]
stack.subStack[3].anode_channel.channel.gas[2].h_component[4]
stack.subStack[3].anode_channel.channel.gas[2].h_component[5]
stack.subStack[3].anode_channel.channel.gas[2].h_component[6]
stack.subStack[3].anode_channel.channel.gas[2].h_component[7]
stack.subStack[3].anode_channel.channel.gas[2].s_component[1]
stack.subStack[3].anode_channel.channel.gas[2].s_component[2]
stack.subStack[3].anode_channel.channel.gas[2].s_component[3]
stack.subStack[3].anode_channel.channel.gas[2].s_component[4]
stack.subStack[3].anode_channel.channel.gas[2].s_component[5]
stack.subStack[3].anode_channel.channel.gas[2].s_component[6]
stack.subStack[3].anode_channel.channel.gas[2].s_component[7]
stack.subStack[3].anode_channel.channel.gas[2].u_comp[1]
stack.subStack[3].anode_channel.channel.gas[2].u_comp[2]
stack.subStack[3].anode_channel.channel.gas[2].u_comp[3]
stack.subStack[3].anode_channel.channel.gas[2].u_comp[4]
stack.subStack[3].anode_channel.channel.gas[2].u_comp[5]
stack.subStack[3].anode_channel.channel.gas[2].u_comp[6]
stack.subStack[3].anode_channel.channel.gas[2].u_comp[7]
stack.subStack[3].anode_channel.channel.gas[2].cp
stack.subStack[3].anode_channel.channel.gas[2].g_formation[1]
stack.subStack[3].anode_channel.channel.gas[2].g_formation[2]
stack.subStack[3].anode_channel.channel.gas[2].g_formation[3]
stack.subStack[3].anode_channel.channel.gas[2].g_formation[4]
stack.subStack[3].anode_channel.channel.gas[2].g_formation[5]
stack.subStack[3].anode_channel.channel.gas[2].g_formation[6]
stack.subStack[3].anode_channel.channel.gas[2].g_formation[7]
stack.subStack[3].anode_channel.channel.gas[2].ddTp
stack.subStack[3].anode_channel.channel.gas[2].ddpT
stack.subStack[3].anode_channel.channel.gas[2].dupT
stack.subStack[3].anode_channel.channel.gas[2].duTp
stack.subStack[3].anode_channel.channel.gas[2].ddx[1]
stack.subStack[3].anode_channel.channel.gas[2].ddx[2]
stack.subStack[3].anode_channel.channel.gas[2].ddx[3]
stack.subStack[3].anode_channel.channel.gas[2].ddx[4]
stack.subStack[3].anode_channel.channel.gas[2].ddx[5]
stack.subStack[3].anode_channel.channel.gas[2].ddx[6]
stack.subStack[3].anode_channel.channel.gas[2].ddx[7]
stack.subStack[3].anode_channel.channel.gas[3].X[1]
stack.subStack[3].anode_channel.channel.gas[3].X[2]
stack.subStack[3].anode_channel.channel.gas[3].X[3]
stack.subStack[3].anode_channel.channel.gas[3].X[4]
stack.subStack[3].anode_channel.channel.gas[3].X[5]
stack.subStack[3].anode_channel.channel.gas[3].X[6]
stack.subStack[3].anode_channel.channel.gas[3].X[7]
stack.subStack[3].anode_channel.channel.gas[3].der(X[1])
stack.subStack[3].anode_channel.channel.gas[3].der(X[2])
stack.subStack[3].anode_channel.channel.gas[3].der(X[3])
stack.subStack[3].anode_channel.channel.gas[3].der(X[4])
stack.subStack[3].anode_channel.channel.gas[3].der(X[5])
stack.subStack[3].anode_channel.channel.gas[3].der(X[6])
stack.subStack[3].anode_channel.channel.gas[3].der(X[7])
stack.subStack[3].anode_channel.channel.gas[3].Xi[1]
stack.subStack[3].anode_channel.channel.gas[3].Xi[2]
stack.subStack[3].anode_channel.channel.gas[3].Xi[3]
stack.subStack[3].anode_channel.channel.gas[3].Xi[4]
stack.subStack[3].anode_channel.channel.gas[3].Xi[5]
stack.subStack[3].anode_channel.channel.gas[3].Xi[6]
stack.subStack[3].anode_channel.channel.gas[3].Xi[7]
stack.subStack[3].anode_channel.channel.gas[3].d
stack.subStack[3].anode_channel.channel.gas[3].der(d)
stack.subStack[3].anode_channel.channel.gas[3].u
stack.subStack[3].anode_channel.channel.gas[3].Rg
stack.subStack[3].anode_channel.channel.gas[3].der(Rg)
stack.subStack[3].anode_channel.channel.gas[3].MM
stack.subStack[3].anode_channel.channel.gas[3].assertlevel
stack.subStack[3].anode_channel.channel.gas[3].state.p
stack.subStack[3].anode_channel.channel.gas[3].state.T
stack.subStack[3].anode_channel.channel.gas[3].state.X[1]
stack.subStack[3].anode_channel.channel.gas[3].state.X[2]
stack.subStack[3].anode_channel.channel.gas[3].state.X[3]
stack.subStack[3].anode_channel.channel.gas[3].state.X[4]
stack.subStack[3].anode_channel.channel.gas[3].state.X[5]
stack.subStack[3].anode_channel.channel.gas[3].state.X[6]
stack.subStack[3].anode_channel.channel.gas[3].state.X[7]
stack.subStack[3].anode_channel.channel.gas[3].preferredMediumStates
stack.subStack[3].anode_channel.channel.gas[3].T_degC
stack.subStack[3].anode_channel.channel.gas[3].p_bar
stack.subStack[3].anode_channel.channel.gas[3].Z[1]
stack.subStack[3].anode_channel.channel.gas[3].Z[2]
stack.subStack[3].anode_channel.channel.gas[3].Z[3]
stack.subStack[3].anode_channel.channel.gas[3].Z[4]
stack.subStack[3].anode_channel.channel.gas[3].Z[5]
stack.subStack[3].anode_channel.channel.gas[3].Z[6]
stack.subStack[3].anode_channel.channel.gas[3].Z[7]
stack.subStack[3].anode_channel.channel.gas[3].dUZT[1]
stack.subStack[3].anode_channel.channel.gas[3].dUZT[2]
stack.subStack[3].anode_channel.channel.gas[3].dUZT[3]
stack.subStack[3].anode_channel.channel.gas[3].dUZT[4]
stack.subStack[3].anode_channel.channel.gas[3].dUZT[5]
stack.subStack[3].anode_channel.channel.gas[3].dUZT[6]
stack.subStack[3].anode_channel.channel.gas[3].dUZT[7]
stack.subStack[3].anode_channel.channel.gas[3].h_component[1]
stack.subStack[3].anode_channel.channel.gas[3].h_component[2]
stack.subStack[3].anode_channel.channel.gas[3].h_component[3]
stack.subStack[3].anode_channel.channel.gas[3].h_component[4]
stack.subStack[3].anode_channel.channel.gas[3].h_component[5]
stack.subStack[3].anode_channel.channel.gas[3].h_component[6]
stack.subStack[3].anode_channel.channel.gas[3].h_component[7]
stack.subStack[3].anode_channel.channel.gas[3].s_component[1]
stack.subStack[3].anode_channel.channel.gas[3].s_component[2]
stack.subStack[3].anode_channel.channel.gas[3].s_component[3]
stack.subStack[3].anode_channel.channel.gas[3].s_component[4]
stack.subStack[3].anode_channel.channel.gas[3].s_component[5]
stack.subStack[3].anode_channel.channel.gas[3].s_component[6]
stack.subStack[3].anode_channel.channel.gas[3].s_component[7]
stack.subStack[3].anode_channel.channel.gas[3].u_comp[1]
stack.subStack[3].anode_channel.channel.gas[3].u_comp[2]
stack.subStack[3].anode_channel.channel.gas[3].u_comp[3]
stack.subStack[3].anode_channel.channel.gas[3].u_comp[4]
stack.subStack[3].anode_channel.channel.gas[3].u_comp[5]
stack.subStack[3].anode_channel.channel.gas[3].u_comp[6]
stack.subStack[3].anode_channel.channel.gas[3].u_comp[7]
stack.subStack[3].anode_channel.channel.gas[3].cp
stack.subStack[3].anode_channel.channel.gas[3].g_formation[1]
stack.subStack[3].anode_channel.channel.gas[3].g_formation[2]
stack.subStack[3].anode_channel.channel.gas[3].g_formation[3]
stack.subStack[3].anode_channel.channel.gas[3].g_formation[4]
stack.subStack[3].anode_channel.channel.gas[3].g_formation[5]
stack.subStack[3].anode_channel.channel.gas[3].g_formation[6]
stack.subStack[3].anode_channel.channel.gas[3].g_formation[7]
stack.subStack[3].anode_channel.channel.gas[3].ddTp
stack.subStack[3].anode_channel.channel.gas[3].ddpT
stack.subStack[3].anode_channel.channel.gas[3].dupT
stack.subStack[3].anode_channel.channel.gas[3].duTp
stack.subStack[3].anode_channel.channel.gas[3].ddx[1]
stack.subStack[3].anode_channel.channel.gas[3].ddx[2]
stack.subStack[3].anode_channel.channel.gas[3].ddx[3]
stack.subStack[3].anode_channel.channel.gas[3].ddx[4]
stack.subStack[3].anode_channel.channel.gas[3].ddx[5]
stack.subStack[3].anode_channel.channel.gas[3].ddx[6]
stack.subStack[3].anode_channel.channel.gas[3].ddx[7]
stack.subStack[3].anode_channel.channel.gas[4].X[1]
stack.subStack[3].anode_channel.channel.gas[4].X[2]
stack.subStack[3].anode_channel.channel.gas[4].X[3]
stack.subStack[3].anode_channel.channel.gas[4].X[4]
stack.subStack[3].anode_channel.channel.gas[4].X[5]
stack.subStack[3].anode_channel.channel.gas[4].X[6]
stack.subStack[3].anode_channel.channel.gas[4].X[7]
stack.subStack[3].anode_channel.channel.gas[4].der(X[1])
stack.subStack[3].anode_channel.channel.gas[4].der(X[2])
stack.subStack[3].anode_channel.channel.gas[4].der(X[3])
stack.subStack[3].anode_channel.channel.gas[4].der(X[4])
stack.subStack[3].anode_channel.channel.gas[4].der(X[5])
stack.subStack[3].anode_channel.channel.gas[4].der(X[6])
stack.subStack[3].anode_channel.channel.gas[4].der(X[7])
stack.subStack[3].anode_channel.channel.gas[4].Xi[1]
stack.subStack[3].anode_channel.channel.gas[4].Xi[2]
stack.subStack[3].anode_channel.channel.gas[4].Xi[3]
stack.subStack[3].anode_channel.channel.gas[4].Xi[4]
stack.subStack[3].anode_channel.channel.gas[4].Xi[5]
stack.subStack[3].anode_channel.channel.gas[4].Xi[6]
stack.subStack[3].anode_channel.channel.gas[4].Xi[7]
stack.subStack[3].anode_channel.channel.gas[4].d
stack.subStack[3].anode_channel.channel.gas[4].der(d)
stack.subStack[3].anode_channel.channel.gas[4].u
stack.subStack[3].anode_channel.channel.gas[4].Rg
stack.subStack[3].anode_channel.channel.gas[4].der(Rg)
stack.subStack[3].anode_channel.channel.gas[4].MM
stack.subStack[3].anode_channel.channel.gas[4].assertlevel
stack.subStack[3].anode_channel.channel.gas[4].state.p
stack.subStack[3].anode_channel.channel.gas[4].state.T
stack.subStack[3].anode_channel.channel.gas[4].state.X[1]
stack.subStack[3].anode_channel.channel.gas[4].state.X[2]
stack.subStack[3].anode_channel.channel.gas[4].state.X[3]
stack.subStack[3].anode_channel.channel.gas[4].state.X[4]
stack.subStack[3].anode_channel.channel.gas[4].state.X[5]
stack.subStack[3].anode_channel.channel.gas[4].state.X[6]
stack.subStack[3].anode_channel.channel.gas[4].state.X[7]
stack.subStack[3].anode_channel.channel.gas[4].preferredMediumStates
stack.subStack[3].anode_channel.channel.gas[4].p_bar
stack.subStack[3].anode_channel.channel.gas[4].Z[1]
stack.subStack[3].anode_channel.channel.gas[4].Z[2]
stack.subStack[3].anode_channel.channel.gas[4].Z[3]
stack.subStack[3].anode_channel.channel.gas[4].Z[4]
stack.subStack[3].anode_channel.channel.gas[4].Z[5]
stack.subStack[3].anode_channel.channel.gas[4].Z[6]
stack.subStack[3].anode_channel.channel.gas[4].Z[7]
stack.subStack[3].anode_channel.channel.gas[4].dUZT[1]
stack.subStack[3].anode_channel.channel.gas[4].dUZT[2]
stack.subStack[3].anode_channel.channel.gas[4].dUZT[3]
stack.subStack[3].anode_channel.channel.gas[4].dUZT[4]
stack.subStack[3].anode_channel.channel.gas[4].dUZT[5]
stack.subStack[3].anode_channel.channel.gas[4].dUZT[6]
stack.subStack[3].anode_channel.channel.gas[4].dUZT[7]
stack.subStack[3].anode_channel.channel.gas[4].h_component[1]
stack.subStack[3].anode_channel.channel.gas[4].h_component[2]
stack.subStack[3].anode_channel.channel.gas[4].h_component[3]
stack.subStack[3].anode_channel.channel.gas[4].h_component[4]
stack.subStack[3].anode_channel.channel.gas[4].h_component[5]
stack.subStack[3].anode_channel.channel.gas[4].h_component[6]
stack.subStack[3].anode_channel.channel.gas[4].h_component[7]
stack.subStack[3].anode_channel.channel.gas[4].s_component[1]
stack.subStack[3].anode_channel.channel.gas[4].s_component[2]
stack.subStack[3].anode_channel.channel.gas[4].s_component[3]
stack.subStack[3].anode_channel.channel.gas[4].s_component[4]
stack.subStack[3].anode_channel.channel.gas[4].s_component[5]
stack.subStack[3].anode_channel.channel.gas[4].s_component[6]
stack.subStack[3].anode_channel.channel.gas[4].s_component[7]
stack.subStack[3].anode_channel.channel.gas[4].u_comp[1]
stack.subStack[3].anode_channel.channel.gas[4].u_comp[2]
stack.subStack[3].anode_channel.channel.gas[4].u_comp[3]
stack.subStack[3].anode_channel.channel.gas[4].u_comp[4]
stack.subStack[3].anode_channel.channel.gas[4].u_comp[5]
stack.subStack[3].anode_channel.channel.gas[4].u_comp[6]
stack.subStack[3].anode_channel.channel.gas[4].u_comp[7]
stack.subStack[3].anode_channel.channel.gas[4].cp
stack.subStack[3].anode_channel.channel.gas[4].g_formation[1]
stack.subStack[3].anode_channel.channel.gas[4].g_formation[2]
stack.subStack[3].anode_channel.channel.gas[4].g_formation[3]
stack.subStack[3].anode_channel.channel.gas[4].g_formation[4]
stack.subStack[3].anode_channel.channel.gas[4].g_formation[5]
stack.subStack[3].anode_channel.channel.gas[4].g_formation[6]
stack.subStack[3].anode_channel.channel.gas[4].g_formation[7]
stack.subStack[3].anode_channel.channel.gas[4].ddTp
stack.subStack[3].anode_channel.channel.gas[4].ddpT
stack.subStack[3].anode_channel.channel.gas[4].dupT
stack.subStack[3].anode_channel.channel.gas[4].duTp
stack.subStack[3].anode_channel.channel.gas[4].ddx[1]
stack.subStack[3].anode_channel.channel.gas[4].ddx[2]
stack.subStack[3].anode_channel.channel.gas[4].ddx[3]
stack.subStack[3].anode_channel.channel.gas[4].ddx[4]
stack.subStack[3].anode_channel.channel.gas[4].ddx[5]
stack.subStack[3].anode_channel.channel.gas[4].ddx[6]
stack.subStack[3].anode_channel.channel.gas[4].ddx[7]
stack.subStack[3].anode_channel.channel.p[1]
stack.subStack[3].anode_channel.channel.p[2]
stack.subStack[3].anode_channel.channel.p[3]
stack.subStack[3].anode_channel.channel.p[4]
stack.subStack[3].anode_channel.channel.der(p[1])
stack.subStack[3].anode_channel.channel.der(p[2])
stack.subStack[3].anode_channel.channel.der(p[3])
stack.subStack[3].anode_channel.channel.der(p[4])
stack.subStack[3].anode_channel.channel.M[1]
stack.subStack[3].anode_channel.channel.M[2]
stack.subStack[3].anode_channel.channel.M[3]
stack.subStack[3].anode_channel.channel.M[4]
stack.subStack[3].anode_channel.channel.der(M[1])
stack.subStack[3].anode_channel.channel.der(M[2])
stack.subStack[3].anode_channel.channel.der(M[3])
stack.subStack[3].anode_channel.channel.der(M[4])
stack.subStack[3].anode_channel.channel.E_seg[1]
stack.subStack[3].anode_channel.channel.E_seg[2]
stack.subStack[3].anode_channel.channel.E_seg[3]
stack.subStack[3].anode_channel.channel.E_seg[4]
stack.subStack[3].anode_channel.channel.MXi[1, 1]
stack.subStack[3].anode_channel.channel.MXi[1, 2]
stack.subStack[3].anode_channel.channel.MXi[1, 3]
stack.subStack[3].anode_channel.channel.MXi[1, 4]
stack.subStack[3].anode_channel.channel.MXi[1, 5]
stack.subStack[3].anode_channel.channel.MXi[1, 6]
stack.subStack[3].anode_channel.channel.MXi[1, 7]
stack.subStack[3].anode_channel.channel.MXi[2, 1]
stack.subStack[3].anode_channel.channel.MXi[2, 2]
stack.subStack[3].anode_channel.channel.MXi[2, 3]
stack.subStack[3].anode_channel.channel.MXi[2, 4]
stack.subStack[3].anode_channel.channel.MXi[2, 5]
stack.subStack[3].anode_channel.channel.MXi[2, 6]
stack.subStack[3].anode_channel.channel.MXi[2, 7]
stack.subStack[3].anode_channel.channel.MXi[3, 1]
stack.subStack[3].anode_channel.channel.MXi[3, 2]
stack.subStack[3].anode_channel.channel.MXi[3, 3]
stack.subStack[3].anode_channel.channel.MXi[3, 4]
stack.subStack[3].anode_channel.channel.MXi[3, 5]
stack.subStack[3].anode_channel.channel.MXi[3, 6]
stack.subStack[3].anode_channel.channel.MXi[3, 7]
stack.subStack[3].anode_channel.channel.MXi[4, 1]
stack.subStack[3].anode_channel.channel.MXi[4, 2]
stack.subStack[3].anode_channel.channel.MXi[4, 3]
stack.subStack[3].anode_channel.channel.MXi[4, 4]
stack.subStack[3].anode_channel.channel.MXi[4, 5]
stack.subStack[3].anode_channel.channel.MXi[4, 6]
stack.subStack[3].anode_channel.channel.MXi[4, 7]
stack.subStack[3].anode_channel.channel.dp[1]
stack.subStack[3].anode_channel.channel.dp[2]
stack.subStack[3].anode_channel.channel.dp[3]
stack.subStack[3].anode_channel.channel.dp[4]
stack.subStack[3].anode_channel.channel.dp[5]
stack.subStack[3].anode_channel.channel.sh[1]
stack.subStack[3].anode_channel.channel.sh[2]
stack.subStack[3].anode_channel.channel.sh[3]
stack.subStack[3].anode_channel.channel.sh[4]
stack.subStack[3].anode_channel.channel.state[1].p
stack.subStack[3].anode_channel.channel.state[1].T
stack.subStack[3].anode_channel.channel.state[1].X[1]
stack.subStack[3].anode_channel.channel.state[1].X[2]
stack.subStack[3].anode_channel.channel.state[1].X[3]
stack.subStack[3].anode_channel.channel.state[1].X[4]
stack.subStack[3].anode_channel.channel.state[1].X[5]
stack.subStack[3].anode_channel.channel.state[1].X[6]
stack.subStack[3].anode_channel.channel.state[1].X[7]
stack.subStack[3].anode_channel.channel.state[6].p
stack.subStack[3].anode_channel.channel.state[6].T
stack.subStack[3].anode_channel.channel.state[6].X[1]
stack.subStack[3].anode_channel.channel.state[6].X[2]
stack.subStack[3].anode_channel.channel.state[6].X[3]
stack.subStack[3].anode_channel.channel.state[6].X[4]
stack.subStack[3].anode_channel.channel.state[6].X[5]
stack.subStack[3].anode_channel.channel.state[6].X[6]
stack.subStack[3].anode_channel.channel.state[6].X[7]
stack.subStack[3].anode_channel.channel.Q[1]
stack.subStack[3].anode_channel.channel.Q[2]
stack.subStack[3].anode_channel.channel.Q[3]
stack.subStack[3].anode_channel.channel.Q[4]
stack.subStack[3].anode_channel.channel.Q_tot
stack.subStack[3].anode_channel.channel.Q_wall[1]
stack.subStack[3].anode_channel.channel.Q_wall[2]
stack.subStack[3].anode_channel.channel.Q_wall[3]
stack.subStack[3].anode_channel.channel.Q_wall[4]
stack.subStack[3].anode_channel.channel.alpha[1]
stack.subStack[3].anode_channel.channel.alpha[2]
stack.subStack[3].anode_channel.channel.alpha[3]
stack.subStack[3].anode_channel.channel.alpha[4]
stack.subStack[3].anode_channel.channel.rMX[1, 2]
stack.subStack[3].anode_channel.channel.rMX[1, 3]
stack.subStack[3].anode_channel.channel.rMX[1, 4]
stack.subStack[3].anode_channel.channel.rMX[1, 6]
stack.subStack[3].anode_channel.channel.rMX[1, 7]
stack.subStack[3].anode_channel.channel.rMX[2, 2]
stack.subStack[3].anode_channel.channel.rMX[2, 3]
stack.subStack[3].anode_channel.channel.rMX[2, 4]
stack.subStack[3].anode_channel.channel.rMX[2, 6]
stack.subStack[3].anode_channel.channel.rMX[2, 7]
stack.subStack[3].anode_channel.channel.rMX[3, 2]
stack.subStack[3].anode_channel.channel.rMX[3, 3]
stack.subStack[3].anode_channel.channel.rMX[3, 4]
stack.subStack[3].anode_channel.channel.rMX[3, 6]
stack.subStack[3].anode_channel.channel.rMX[3, 7]
stack.subStack[3].anode_channel.channel.rMX[4, 2]
stack.subStack[3].anode_channel.channel.rMX[4, 3]
stack.subStack[3].anode_channel.channel.rMX[4, 4]
stack.subStack[3].anode_channel.channel.rMX[4, 6]
stack.subStack[3].anode_channel.channel.rMX[4, 7]
stack.subStack[3].anode_channel.channel.mflow_A_in
stack.subStack[3].anode_channel.channel.mflow_B_in
stack.subStack[3].anode_channel.channel.m_flow_fric[1]
stack.subStack[3].anode_channel.channel.m_flow_fric[2]
stack.subStack[3].anode_channel.channel.m_flow_fric[3]
stack.subStack[3].anode_channel.channel.XA[1]
stack.subStack[3].anode_channel.channel.XA[2]
stack.subStack[3].anode_channel.channel.XA[3]
stack.subStack[3].anode_channel.channel.XA[4]
stack.subStack[3].anode_channel.channel.XA[5]
stack.subStack[3].anode_channel.channel.XA[6]
stack.subStack[3].anode_channel.channel.XA[7]
stack.subStack[3].anode_channel.channel.XB[1]
stack.subStack[3].anode_channel.channel.XB[2]
stack.subStack[3].anode_channel.channel.XB[3]
stack.subStack[3].anode_channel.channel.XB[4]
stack.subStack[3].anode_channel.channel.XB[5]
stack.subStack[3].anode_channel.channel.XB[6]
stack.subStack[3].anode_channel.channel.XB[7]
stack.subStack[3].anode_channel.channel.n_channels_fric[1]
stack.subStack[3].anode_channel.channel.n_channels_fric[2]
stack.subStack[3].anode_channel.channel.n_channels_fric[3]
stack.subStack[3].anode_channel.channel.n_channels_fric[4]
stack.subStack[3].anode_channel.channel.T_wall[1]
stack.subStack[3].anode_channel.channel.T_wall[2]
stack.subStack[3].anode_channel.channel.T_wall[3]
stack.subStack[3].anode_channel.channel.T_wall[4]
stack.subStack[3].anode_channel.channel.nS
stack.subStack[3].anode_channel.channel.mX_flow[1, 1]
stack.subStack[3].anode_channel.channel.mX_flow[1, 2]
stack.subStack[3].anode_channel.channel.mX_flow[1, 3]
stack.subStack[3].anode_channel.channel.mX_flow[1, 4]
stack.subStack[3].anode_channel.channel.mX_flow[1, 5]
stack.subStack[3].anode_channel.channel.mX_flow[1, 6]
stack.subStack[3].anode_channel.channel.mX_flow[1, 7]
stack.subStack[3].anode_channel.channel.mX_flow[2, 1]
stack.subStack[3].anode_channel.channel.mX_flow[2, 2]
stack.subStack[3].anode_channel.channel.mX_flow[2, 3]
stack.subStack[3].anode_channel.channel.mX_flow[2, 4]
stack.subStack[3].anode_channel.channel.mX_flow[2, 5]
stack.subStack[3].anode_channel.channel.mX_flow[2, 6]
stack.subStack[3].anode_channel.channel.mX_flow[2, 7]
stack.subStack[3].anode_channel.channel.mX_flow[3, 1]
stack.subStack[3].anode_channel.channel.mX_flow[3, 2]
stack.subStack[3].anode_channel.channel.mX_flow[3, 3]
stack.subStack[3].anode_channel.channel.mX_flow[3, 4]
stack.subStack[3].anode_channel.channel.mX_flow[3, 5]
stack.subStack[3].anode_channel.channel.mX_flow[3, 6]
stack.subStack[3].anode_channel.channel.mX_flow[3, 7]
stack.subStack[3].anode_channel.channel.mX_flow[4, 1]
stack.subStack[3].anode_channel.channel.mX_flow[4, 2]
stack.subStack[3].anode_channel.channel.mX_flow[4, 3]
stack.subStack[3].anode_channel.channel.mX_flow[4, 4]
stack.subStack[3].anode_channel.channel.mX_flow[4, 5]
stack.subStack[3].anode_channel.channel.mX_flow[4, 6]
stack.subStack[3].anode_channel.channel.mX_flow[4, 7]
stack.subStack[3].anode_channel.channel.mX_flow[5, 1]
stack.subStack[3].anode_channel.channel.mX_flow[5, 2]
stack.subStack[3].anode_channel.channel.mX_flow[5, 3]
stack.subStack[3].anode_channel.channel.mX_flow[5, 4]
stack.subStack[3].anode_channel.channel.mX_flow[5, 5]
stack.subStack[3].anode_channel.channel.mX_flow[5, 6]
stack.subStack[3].anode_channel.channel.mX_flow[5, 7]
stack.subStack[3].anode_channel.channel.H_flow[1]
stack.subStack[3].anode_channel.channel.H_flow[2]
stack.subStack[3].anode_channel.channel.H_flow[3]
stack.subStack[3].anode_channel.channel.H_flow[4]
stack.subStack[3].anode_channel.channel.H_flow[5]
stack.subStack[3].anode_channel.channel.dE[1]
stack.subStack[3].anode_channel.channel.dE[2]
stack.subStack[3].anode_channel.channel.dE[3]
stack.subStack[3].anode_channel.channel.dE[4]
stack.subStack[3].anode_channel.channel.dMX[1, 1]
stack.subStack[3].anode_channel.channel.dMX[1, 2]
stack.subStack[3].anode_channel.channel.dMX[1, 3]
stack.subStack[3].anode_channel.channel.dMX[1, 4]
stack.subStack[3].anode_channel.channel.dMX[1, 5]
stack.subStack[3].anode_channel.channel.dMX[1, 6]
stack.subStack[3].anode_channel.channel.dMX[1, 7]
stack.subStack[3].anode_channel.channel.dMX[2, 1]
stack.subStack[3].anode_channel.channel.dMX[2, 2]
stack.subStack[3].anode_channel.channel.dMX[2, 3]
stack.subStack[3].anode_channel.channel.dMX[2, 4]
stack.subStack[3].anode_channel.channel.dMX[2, 5]
stack.subStack[3].anode_channel.channel.dMX[2, 6]
stack.subStack[3].anode_channel.channel.dMX[2, 7]
stack.subStack[3].anode_channel.channel.dMX[3, 1]
stack.subStack[3].anode_channel.channel.dMX[3, 2]
stack.subStack[3].anode_channel.channel.dMX[3, 3]
stack.subStack[3].anode_channel.channel.dMX[3, 4]
stack.subStack[3].anode_channel.channel.dMX[3, 5]
stack.subStack[3].anode_channel.channel.dMX[3, 6]
stack.subStack[3].anode_channel.channel.dMX[3, 7]
stack.subStack[3].anode_channel.channel.dMX[4, 1]
stack.subStack[3].anode_channel.channel.dMX[4, 2]
stack.subStack[3].anode_channel.channel.dMX[4, 3]
stack.subStack[3].anode_channel.channel.dMX[4, 4]
stack.subStack[3].anode_channel.channel.dMX[4, 5]
stack.subStack[3].anode_channel.channel.dMX[4, 6]
stack.subStack[3].anode_channel.channel.dMX[4, 7]
stack.subStack[3].anode_channel.channel.dZ[1, 1]
stack.subStack[3].anode_channel.channel.dZ[1, 2]
stack.subStack[3].anode_channel.channel.dZ[1, 3]
stack.subStack[3].anode_channel.channel.dZ[1, 4]
stack.subStack[3].anode_channel.channel.dZ[1, 5]
stack.subStack[3].anode_channel.channel.dZ[2, 1]
stack.subStack[3].anode_channel.channel.dZ[2, 2]
stack.subStack[3].anode_channel.channel.dZ[2, 3]
stack.subStack[3].anode_channel.channel.dZ[2, 4]
stack.subStack[3].anode_channel.channel.dZ[2, 5]
stack.subStack[3].anode_channel.channel.dZ[3, 1]
stack.subStack[3].anode_channel.channel.dZ[3, 2]
stack.subStack[3].anode_channel.channel.dZ[3, 3]
stack.subStack[3].anode_channel.channel.dZ[3, 4]
stack.subStack[3].anode_channel.channel.dZ[3, 5]
stack.subStack[3].anode_channel.channel.dZ[4, 1]
stack.subStack[3].anode_channel.channel.dZ[4, 2]
stack.subStack[3].anode_channel.channel.dZ[4, 3]
stack.subStack[3].anode_channel.channel.dZ[4, 4]
stack.subStack[3].anode_channel.channel.dZ[4, 5]
stack.subStack[3].anode_channel.channel.dUTZ[1]
stack.subStack[3].anode_channel.channel.dUTZ[2]
stack.subStack[3].anode_channel.channel.dUTZ[3]
stack.subStack[3].anode_channel.channel.dUTZ[4]
stack.subStack[3].anode_channel.channel.Z[1, 1]
stack.subStack[3].anode_channel.channel.Z[1, 2]
stack.subStack[3].anode_channel.channel.Z[1, 3]
stack.subStack[3].anode_channel.channel.Z[1, 4]
stack.subStack[3].anode_channel.channel.Z[1, 5]
stack.subStack[3].anode_channel.channel.Z[1, 6]
stack.subStack[3].anode_channel.channel.Z[1, 7]
stack.subStack[3].anode_channel.channel.Z[2, 1]
stack.subStack[3].anode_channel.channel.Z[2, 2]
stack.subStack[3].anode_channel.channel.Z[2, 3]
stack.subStack[3].anode_channel.channel.Z[2, 4]
stack.subStack[3].anode_channel.channel.Z[2, 5]
stack.subStack[3].anode_channel.channel.Z[2, 6]
stack.subStack[3].anode_channel.channel.Z[2, 7]
stack.subStack[3].anode_channel.channel.Z[3, 1]
stack.subStack[3].anode_channel.channel.Z[3, 2]
stack.subStack[3].anode_channel.channel.Z[3, 3]
stack.subStack[3].anode_channel.channel.Z[3, 4]
stack.subStack[3].anode_channel.channel.Z[3, 5]
stack.subStack[3].anode_channel.channel.Z[3, 6]
stack.subStack[3].anode_channel.channel.Z[3, 7]
stack.subStack[3].anode_channel.channel.Z[4, 1]
stack.subStack[3].anode_channel.channel.Z[4, 2]
stack.subStack[3].anode_channel.channel.Z[4, 3]
stack.subStack[3].anode_channel.channel.Z[4, 4]
stack.subStack[3].anode_channel.channel.Z[4, 5]
stack.subStack[3].anode_channel.channel.Z[4, 6]
stack.subStack[3].anode_channel.channel.Z[4, 7]
stack.subStack[3].anode_channel.channel.der(Z[1, 1])
stack.subStack[3].anode_channel.channel.der(Z[1, 2])
stack.subStack[3].anode_channel.channel.der(Z[1, 3])
stack.subStack[3].anode_channel.channel.der(Z[1, 4])
stack.subStack[3].anode_channel.channel.der(Z[1, 5])
stack.subStack[3].anode_channel.channel.der(Z[1, 6])
stack.subStack[3].anode_channel.channel.der(Z[1, 7])
stack.subStack[3].anode_channel.channel.der(Z[2, 1])
stack.subStack[3].anode_channel.channel.der(Z[2, 2])
stack.subStack[3].anode_channel.channel.der(Z[2, 3])
stack.subStack[3].anode_channel.channel.der(Z[2, 4])
stack.subStack[3].anode_channel.channel.der(Z[2, 5])
stack.subStack[3].anode_channel.channel.der(Z[2, 6])
stack.subStack[3].anode_channel.channel.der(Z[2, 7])
stack.subStack[3].anode_channel.channel.der(Z[3, 1])
stack.subStack[3].anode_channel.channel.der(Z[3, 2])
stack.subStack[3].anode_channel.channel.der(Z[3, 3])
stack.subStack[3].anode_channel.channel.der(Z[3, 4])
stack.subStack[3].anode_channel.channel.der(Z[3, 5])
stack.subStack[3].anode_channel.channel.der(Z[3, 6])
stack.subStack[3].anode_channel.channel.der(Z[3, 7])
stack.subStack[3].anode_channel.channel.der(Z[4, 1])
stack.subStack[3].anode_channel.channel.der(Z[4, 2])
stack.subStack[3].anode_channel.channel.der(Z[4, 3])
stack.subStack[3].anode_channel.channel.der(Z[4, 4])
stack.subStack[3].anode_channel.channel.der(Z[4, 5])
stack.subStack[3].anode_channel.channel.der(Z[4, 6])
stack.subStack[3].anode_channel.channel.der(Z[4, 7])
stack.subStack[3].anode_channel.port[1].mX_flow[2]
stack.subStack[3].anode_channel.port[1].mX_flow[3]
stack.subStack[3].anode_channel.port[1].mX_flow[4]
stack.subStack[3].anode_channel.port[1].mX_flow[6]
stack.subStack[3].anode_channel.port[1].mX_flow[7]
stack.subStack[3].anode_channel.port[2].mX_flow[2]
stack.subStack[3].anode_channel.port[2].mX_flow[3]
stack.subStack[3].anode_channel.port[2].mX_flow[4]
stack.subStack[3].anode_channel.port[2].mX_flow[6]
stack.subStack[3].anode_channel.port[2].mX_flow[7]
stack.subStack[3].anode_channel.port[3].mX_flow[2]
stack.subStack[3].anode_channel.port[3].mX_flow[3]
stack.subStack[3].anode_channel.port[3].mX_flow[4]
stack.subStack[3].anode_channel.port[3].mX_flow[6]
stack.subStack[3].anode_channel.port[3].mX_flow[7]
stack.subStack[3].anode_channel.port[4].mX_flow[2]
stack.subStack[3].anode_channel.port[4].mX_flow[3]
stack.subStack[3].anode_channel.port[4].mX_flow[4]
stack.subStack[3].anode_channel.port[4].mX_flow[6]
stack.subStack[3].anode_channel.port[4].mX_flow[7]
stack.subStack[3].cathode_channel.summary.dp
stack.subStack[3].cathode_channel.summary.m_flow
stack.subStack[3].cathode_channel.summary.M
stack.subStack[3].cathode_channel.summary.V
stack.subStack[3].cathode_channel.summary.T_in
stack.subStack[3].cathode_channel.summary.d_in
stack.subStack[3].cathode_channel.n
stack.subStack[3].cathode_channel.pi
stack.subStack[3].cathode_channel.n_channels
stack.subStack[3].cathode_channel.L
stack.subStack[3].cathode_channel.D
stack.subStack[3].cathode_channel.Dhyd
stack.subStack[3].cathode_channel.A
stack.subStack[3].cathode_channel.C
stack.subStack[3].cathode_channel.V
stack.subStack[3].cathode_channel.A_heat
stack.subStack[3].cathode_channel.useHeatTransfer
stack.subStack[3].cathode_channel.ni
stack.subStack[3].cathode_channel.initOpt
stack.subStack[3].cathode_channel.p_start_in
stack.subStack[3].cathode_channel.p_start_out
stack.subStack[3].cathode_channel.p_start[1]
stack.subStack[3].cathode_channel.p_start[2]
stack.subStack[3].cathode_channel.p_start[3]
stack.subStack[3].cathode_channel.p_start[4]
stack.subStack[3].cathode_channel.p_start[5]
stack.subStack[3].cathode_channel.initFromEnthalpy
stack.subStack[3].cathode_channel.h_start_in
stack.subStack[3].cathode_channel.h_start_out
stack.subStack[3].cathode_channel.h_start[1]
stack.subStack[3].cathode_channel.h_start[2]
stack.subStack[3].cathode_channel.h_start[3]
stack.subStack[3].cathode_channel.h_start[4]
stack.subStack[3].cathode_channel.h_start[5]
stack.subStack[3].cathode_channel.T_start_in
stack.subStack[3].cathode_channel.T_start_out
stack.subStack[3].cathode_channel.T_start[1]
stack.subStack[3].cathode_channel.T_start[2]
stack.subStack[3].cathode_channel.T_start[3]
stack.subStack[3].cathode_channel.T_start[4]
stack.subStack[3].cathode_channel.T_start[5]
stack.subStack[3].cathode_channel.X_start[1]
stack.subStack[3].cathode_channel.X_start[2]
stack.subStack[3].cathode_channel.X_start[3]
stack.subStack[3].cathode_channel.X_start[4]
stack.subStack[3].cathode_channel.X_start[5]
stack.subStack[3].cathode_channel.m_flow_start
stack.subStack[3].cathode_channel.positiveFlow
stack.subStack[3].cathode_channel.from_dp
stack.subStack[3].cathode_channel.dp_smooth
stack.subStack[3].cathode_channel.mflow_smooth
stack.subStack[3].cathode_channel.generateEventForReversal
stack.subStack[3].cathode_channel.CF_PressureLoss
stack.subStack[3].cathode_channel.CF_HeatTransfer
stack.subStack[3].cathode_channel.X_weight
stack.subStack[3].cathode_channel.y_sat
stack.subStack[3].cathode_channel.includeStaticHead
stack.subStack[3].cathode_channel.height
stack.subStack[3].cathode_channel.g
stack.subStack[3].cathode_channel.channel.n
stack.subStack[3].cathode_channel.channel.n_channels[1]
stack.subStack[3].cathode_channel.channel.n_channels[2]
stack.subStack[3].cathode_channel.channel.n_channels[3]
stack.subStack[3].cathode_channel.channel.n_channels[4]
stack.subStack[3].cathode_channel.channel.L[1]
stack.subStack[3].cathode_channel.channel.L[2]
stack.subStack[3].cathode_channel.channel.L[3]
stack.subStack[3].cathode_channel.channel.L[4]
stack.subStack[3].cathode_channel.channel.Dhyd[1]
stack.subStack[3].cathode_channel.channel.Dhyd[2]
stack.subStack[3].cathode_channel.channel.Dhyd[3]
stack.subStack[3].cathode_channel.channel.Dhyd[4]
stack.subStack[3].cathode_channel.channel.A[1]
stack.subStack[3].cathode_channel.channel.A[2]
stack.subStack[3].cathode_channel.channel.A[3]
stack.subStack[3].cathode_channel.channel.A[4]
stack.subStack[3].cathode_channel.channel.L_total
stack.subStack[3].cathode_channel.channel.V[1]
stack.subStack[3].cathode_channel.channel.V[2]
stack.subStack[3].cathode_channel.channel.V[3]
stack.subStack[3].cathode_channel.channel.V[4]
stack.subStack[3].cathode_channel.channel.V_tot
stack.subStack[3].cathode_channel.channel.A_mean
stack.subStack[3].cathode_channel.channel.A_heat[1]
stack.subStack[3].cathode_channel.channel.A_heat[2]
stack.subStack[3].cathode_channel.channel.A_heat[3]
stack.subStack[3].cathode_channel.channel.A_heat[4]
stack.subStack[3].cathode_channel.channel.ni
stack.subStack[3].cathode_channel.channel.initOpt
stack.subStack[3].cathode_channel.channel.p_start_in
stack.subStack[3].cathode_channel.channel.p_start_out
stack.subStack[3].cathode_channel.channel.p_start[1]
stack.subStack[3].cathode_channel.channel.p_start[2]
stack.subStack[3].cathode_channel.channel.p_start[3]
stack.subStack[3].cathode_channel.channel.p_start[4]
stack.subStack[3].cathode_channel.channel.p_start[5]
stack.subStack[3].cathode_channel.channel.initFromEnthalpy
stack.subStack[3].cathode_channel.channel.h_start_in
stack.subStack[3].cathode_channel.channel.h_start_out
stack.subStack[3].cathode_channel.channel.h_start[1]
stack.subStack[3].cathode_channel.channel.h_start[2]
stack.subStack[3].cathode_channel.channel.h_start[3]
stack.subStack[3].cathode_channel.channel.h_start[4]
stack.subStack[3].cathode_channel.channel.h_start[5]
stack.subStack[3].cathode_channel.channel.T_start_in
stack.subStack[3].cathode_channel.channel.T_start_out
stack.subStack[3].cathode_channel.channel.T_start[1]
stack.subStack[3].cathode_channel.channel.T_start[2]
stack.subStack[3].cathode_channel.channel.T_start[3]
stack.subStack[3].cathode_channel.channel.T_start[4]
stack.subStack[3].cathode_channel.channel.T_start[5]
stack.subStack[3].cathode_channel.channel.X_start[1]
stack.subStack[3].cathode_channel.channel.X_start[2]
stack.subStack[3].cathode_channel.channel.X_start[3]
stack.subStack[3].cathode_channel.channel.X_start[4]
stack.subStack[3].cathode_channel.channel.X_start[5]
stack.subStack[3].cathode_channel.channel.m_flow_start
stack.subStack[3].cathode_channel.channel.positiveFlow
stack.subStack[3].cathode_channel.channel.from_dp
stack.subStack[3].cathode_channel.channel.dp_smooth
stack.subStack[3].cathode_channel.channel.mflow_smooth
stack.subStack[3].cathode_channel.channel.generateEventForReversal
stack.subStack[3].cathode_channel.channel.NA
stack.subStack[3].cathode_channel.channel.NB
stack.subStack[3].cathode_channel.channel.T[1]
stack.subStack[3].cathode_channel.channel.der(T[1])
stack.subStack[3].cathode_channel.channel.T[2]
stack.subStack[3].cathode_channel.channel.der(T[2])
stack.subStack[3].cathode_channel.channel.T[3]
stack.subStack[3].cathode_channel.channel.der(T[3])
stack.subStack[3].cathode_channel.channel.T[4]
stack.subStack[3].cathode_channel.channel.der(T[4])
stack.subStack[3].cathode_channel.channel.dp_asState
stack.subStack[3].cathode_channel.channel.frictionDistribution
stack.subStack[3].cathode_channel.channel.n_fric
stack.subStack[3].cathode_channel.channel.CF_PressureLoss
stack.subStack[3].cathode_channel.channel.CF_HeatTransfer
stack.subStack[3].cathode_channel.channel.includeStaticHead
stack.subStack[3].cathode_channel.channel.levels[1]
stack.subStack[3].cathode_channel.channel.levels[2]
stack.subStack[3].cathode_channel.channel.levels[3]
stack.subStack[3].cathode_channel.channel.levels[4]
stack.subStack[3].cathode_channel.channel.g
stack.subStack[3].cathode_channel.channel.friction[1].A
stack.subStack[3].cathode_channel.channel.friction[1].Dhyd
stack.subStack[3].cathode_channel.channel.friction[1].n_channels
stack.subStack[3].cathode_channel.channel.friction[1].lengthFraction
stack.subStack[3].cathode_channel.channel.friction[1].flowFraction0
stack.subStack[3].cathode_channel.channel.friction[1].dpFraction0
stack.subStack[3].cathode_channel.channel.friction[1].from_dp
stack.subStack[3].cathode_channel.channel.friction[1].positiveFlow
stack.subStack[3].cathode_channel.channel.friction[1].dp_smooth
stack.subStack[3].cathode_channel.channel.friction[1].mflow_smooth
stack.subStack[3].cathode_channel.channel.friction[1].useFixedDensity
stack.subStack[3].cathode_channel.channel.friction[1].reference_d
stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[1].dp_from_isothermal
stack.subStack[3].cathode_channel.channel.friction[1].dA
stack.subStack[3].cathode_channel.channel.friction[1].dB
stack.subStack[3].cathode_channel.channel.friction[1].d0
stack.subStack[3].cathode_channel.channel.friction[1].dp0
stack.subStack[3].cathode_channel.channel.friction[1].m_flow0
stack.subStack[3].cathode_channel.channel.friction[2].A
stack.subStack[3].cathode_channel.channel.friction[2].Dhyd
stack.subStack[3].cathode_channel.channel.friction[2].n_channels
stack.subStack[3].cathode_channel.channel.friction[2].lengthFraction
stack.subStack[3].cathode_channel.channel.friction[2].flowFraction0
stack.subStack[3].cathode_channel.channel.friction[2].dpFraction0
stack.subStack[3].cathode_channel.channel.friction[2].from_dp
stack.subStack[3].cathode_channel.channel.friction[2].positiveFlow
stack.subStack[3].cathode_channel.channel.friction[2].dp_smooth
stack.subStack[3].cathode_channel.channel.friction[2].mflow_smooth
stack.subStack[3].cathode_channel.channel.friction[2].useFixedDensity
stack.subStack[3].cathode_channel.channel.friction[2].reference_d
stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[2].dp_from_isothermal
stack.subStack[3].cathode_channel.channel.friction[2].dA
stack.subStack[3].cathode_channel.channel.friction[2].dB
stack.subStack[3].cathode_channel.channel.friction[2].d0
stack.subStack[3].cathode_channel.channel.friction[2].dp0
stack.subStack[3].cathode_channel.channel.friction[2].m_flow0
stack.subStack[3].cathode_channel.channel.friction[3].A
stack.subStack[3].cathode_channel.channel.friction[3].Dhyd
stack.subStack[3].cathode_channel.channel.friction[3].n_channels
stack.subStack[3].cathode_channel.channel.friction[3].lengthFraction
stack.subStack[3].cathode_channel.channel.friction[3].flowFraction0
stack.subStack[3].cathode_channel.channel.friction[3].dpFraction0
stack.subStack[3].cathode_channel.channel.friction[3].from_dp
stack.subStack[3].cathode_channel.channel.friction[3].positiveFlow
stack.subStack[3].cathode_channel.channel.friction[3].dp_smooth
stack.subStack[3].cathode_channel.channel.friction[3].mflow_smooth
stack.subStack[3].cathode_channel.channel.friction[3].useFixedDensity
stack.subStack[3].cathode_channel.channel.friction[3].reference_d
stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[3].dp_from_isothermal
stack.subStack[3].cathode_channel.channel.friction[3].dA
stack.subStack[3].cathode_channel.channel.friction[3].dB
stack.subStack[3].cathode_channel.channel.friction[3].d0
stack.subStack[3].cathode_channel.channel.friction[3].dp0
stack.subStack[3].cathode_channel.channel.friction[3].m_flow0
stack.subStack[3].cathode_channel.channel.friction[4].A
stack.subStack[3].cathode_channel.channel.friction[4].Dhyd
stack.subStack[3].cathode_channel.channel.friction[4].n_channels
stack.subStack[3].cathode_channel.channel.friction[4].lengthFraction
stack.subStack[3].cathode_channel.channel.friction[4].flowFraction0
stack.subStack[3].cathode_channel.channel.friction[4].dpFraction0
stack.subStack[3].cathode_channel.channel.friction[4].from_dp
stack.subStack[3].cathode_channel.channel.friction[4].positiveFlow
stack.subStack[3].cathode_channel.channel.friction[4].dp_smooth
stack.subStack[3].cathode_channel.channel.friction[4].mflow_smooth
stack.subStack[3].cathode_channel.channel.friction[4].useFixedDensity
stack.subStack[3].cathode_channel.channel.friction[4].reference_d
stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[1]
stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[2]
stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[3]
stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[4]
stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[5]
stack.subStack[3].cathode_channel.channel.friction[4].dp_from_isothermal
stack.subStack[3].cathode_channel.channel.friction[4].dA
stack.subStack[3].cathode_channel.channel.friction[4].dB
stack.subStack[3].cathode_channel.channel.friction[4].d0
stack.subStack[3].cathode_channel.channel.friction[4].dp0
stack.subStack[3].cathode_channel.channel.friction[4].m_flow0
stack.subStack[3].cathode_channel.channel.htcoeff[1].A
stack.subStack[3].cathode_channel.channel.htcoeff[1].L
stack.subStack[3].cathode_channel.channel.htcoeff[1].Dhyd
stack.subStack[3].cathode_channel.channel.htcoeff[1].ht_from_isothermal
stack.subStack[3].cathode_channel.channel.htcoeff[1].CF_length
stack.subStack[3].cathode_channel.channel.htcoeff[1].alpha
stack.subStack[3].cathode_channel.channel.htcoeff[2].A
stack.subStack[3].cathode_channel.channel.htcoeff[2].L
stack.subStack[3].cathode_channel.channel.htcoeff[2].Dhyd
stack.subStack[3].cathode_channel.channel.htcoeff[2].ht_from_isothermal
stack.subStack[3].cathode_channel.channel.htcoeff[2].CF_length
stack.subStack[3].cathode_channel.channel.htcoeff[2].alpha
stack.subStack[3].cathode_channel.channel.htcoeff[3].A
stack.subStack[3].cathode_channel.channel.htcoeff[3].L
stack.subStack[3].cathode_channel.channel.htcoeff[3].Dhyd
stack.subStack[3].cathode_channel.channel.htcoeff[3].ht_from_isothermal
stack.subStack[3].cathode_channel.channel.htcoeff[3].CF_length
stack.subStack[3].cathode_channel.channel.htcoeff[3].alpha
stack.subStack[3].cathode_channel.channel.htcoeff[4].A
stack.subStack[3].cathode_channel.channel.htcoeff[4].L
stack.subStack[3].cathode_channel.channel.htcoeff[4].Dhyd
stack.subStack[3].cathode_channel.channel.htcoeff[4].ht_from_isothermal
stack.subStack[3].cathode_channel.channel.htcoeff[4].CF_length
stack.subStack[3].cathode_channel.channel.htcoeff[4].alpha
stack.subStack[3].cathode_channel.channel.reaction.N
stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[1]
stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[2]
stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[3]
stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[4]
stack.subStack[3].cathode_channel.channel.reaction.Q[1]
stack.subStack[3].cathode_channel.channel.reaction.Q[2]
stack.subStack[3].cathode_channel.channel.reaction.Q[3]
stack.subStack[3].cathode_channel.channel.reaction.Q[4]
stack.subStack[3].cathode_channel.channel.reaction.mX_flow[1, 5]
stack.subStack[3].cathode_channel.channel.reaction.mX_flow[2, 5]
stack.subStack[3].cathode_channel.channel.reaction.mX_flow[3, 5]
stack.subStack[3].cathode_channel.channel.reaction.mX_flow[4, 5]
stack.subStack[3].cathode_channel.channel.reaction.n_reac
stack.subStack[3].cathode_channel.channel.reaction.pstart
stack.subStack[3].cathode_channel.channel.reaction.Tstart
stack.subStack[3].cathode_channel.channel.reaction.Xstart[1]
stack.subStack[3].cathode_channel.channel.reaction.Xstart[2]
stack.subStack[3].cathode_channel.channel.reaction.Xstart[3]
stack.subStack[3].cathode_channel.channel.reaction.Xstart[4]
stack.subStack[3].cathode_channel.channel.reaction.Xstart[5]
stack.subStack[3].cathode_channel.channel.reaction.V
stack.subStack[3].cathode_channel.channel.reaction.scale
stack.subStack[3].cathode_channel.channel.reaction.MMX[1]
stack.subStack[3].cathode_channel.channel.reaction.MMX[2]
stack.subStack[3].cathode_channel.channel.reaction.MMX[3]
stack.subStack[3].cathode_channel.channel.reaction.MMX[4]
stack.subStack[3].cathode_channel.channel.reaction.MMX[5]
stack.subStack[3].cathode_channel.channel.reaction.MM[1]
stack.subStack[3].cathode_channel.channel.reaction.MM[2]
stack.subStack[3].cathode_channel.channel.reaction.MM[3]
stack.subStack[3].cathode_channel.channel.reaction.MM[4]
stack.subStack[3].cathode_channel.channel.reaction.der(MM[1])
stack.subStack[3].cathode_channel.channel.reaction.der(MM[2])
stack.subStack[3].cathode_channel.channel.reaction.der(MM[3])
stack.subStack[3].cathode_channel.channel.reaction.der(MM[4])
stack.subStack[3].cathode_channel.channel.reaction.y_start[1]
stack.subStack[3].cathode_channel.channel.reaction.y_start[2]
stack.subStack[3].cathode_channel.channel.reaction.y_start[3]
stack.subStack[3].cathode_channel.channel.reaction.y_start[4]
stack.subStack[3].cathode_channel.channel.reaction.y_start[5]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[1]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[2]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[3]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[4]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[5]
stack.subStack[3].cathode_channel.channel.reaction.pref
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 1]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 2]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 3]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 4]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 5]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 1]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 2]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 3]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 4]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 5]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 1]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 2]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 3]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 4]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 5]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 1]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 2]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 3]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 4]
stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 5]
stack.subStack[3].cathode_channel.channel.reaction.Ztot_start
stack.subStack[3].cathode_channel.channel.reaction.Zx_start[1]
stack.subStack[3].cathode_channel.channel.reaction.Zx_start[2]
stack.subStack[3].cathode_channel.channel.reaction.Zx_start[3]
stack.subStack[3].cathode_channel.channel.reaction.Zx_start[4]
stack.subStack[3].cathode_channel.channel.reaction.Zx_start[5]
stack.subStack[3].cathode_channel.channel.reaction.CF_conversion
stack.subStack[3].cathode_channel.channel.reaction.Tscale
stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 1]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 1])
stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 2]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 2])
stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 3]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 3])
stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 4]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 4])
stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 5]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 5])
stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 1]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 1])
stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 2]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 2])
stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 3]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 3])
stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 4]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 4])
stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 5]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 5])
stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 1]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 1])
stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 2]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 2])
stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 3]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 3])
stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 4]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 4])
stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 5]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 5])
stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 1]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 1])
stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 2]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 2])
stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 3]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 3])
stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 4]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 4])
stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 5]
stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 5])
stack.subStack[3].cathode_channel.channel.reaction.Ztot[1]
stack.subStack[3].cathode_channel.channel.reaction.Ztot[2]
stack.subStack[3].cathode_channel.channel.reaction.Ztot[3]
stack.subStack[3].cathode_channel.channel.reaction.Ztot[4]
stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[1])
stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[2])
stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[3])
stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[4])
stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 1]
stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 2]
stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 3]
stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 4]
stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 5]
stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 1]
stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 2]
stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 3]
stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 4]
stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 5]
stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 1]
stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 2]
stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 3]
stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 4]
stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 5]
stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 1]
stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 2]
stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 3]
stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 4]
stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 5]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 1]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 2]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 3]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 4]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 5]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 1]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 2]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 3]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 4]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 5]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 1]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 2]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 3]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 4]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 5]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 1]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 2]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 3]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 4]
stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 5]
stack.subStack[3].cathode_channel.channel.reaction.Zx_nominal
stack.subStack[3].cathode_channel.channel.reaction.epsZ
stack.subStack[3].cathode_channel.channel.reaction.state[1].p
stack.subStack[3].cathode_channel.channel.reaction.state[1].T
stack.subStack[3].cathode_channel.channel.reaction.state[1].X[1]
stack.subStack[3].cathode_channel.channel.reaction.state[1].X[2]
stack.subStack[3].cathode_channel.channel.reaction.state[1].X[3]
stack.subStack[3].cathode_channel.channel.reaction.state[1].X[4]
stack.subStack[3].cathode_channel.channel.reaction.state[1].X[5]
stack.subStack[3].cathode_channel.channel.reaction.state[2].p
stack.subStack[3].cathode_channel.channel.reaction.state[2].T
stack.subStack[3].cathode_channel.channel.reaction.state[2].X[1]
stack.subStack[3].cathode_channel.channel.reaction.state[2].X[2]
stack.subStack[3].cathode_channel.channel.reaction.state[2].X[3]
stack.subStack[3].cathode_channel.channel.reaction.state[2].X[4]
stack.subStack[3].cathode_channel.channel.reaction.state[2].X[5]
stack.subStack[3].cathode_channel.channel.reaction.state[3].p
stack.subStack[3].cathode_channel.channel.reaction.state[3].T
stack.subStack[3].cathode_channel.channel.reaction.state[3].X[1]
stack.subStack[3].cathode_channel.channel.reaction.state[3].X[2]
stack.subStack[3].cathode_channel.channel.reaction.state[3].X[3]
stack.subStack[3].cathode_channel.channel.reaction.state[3].X[4]
stack.subStack[3].cathode_channel.channel.reaction.state[3].X[5]
stack.subStack[3].cathode_channel.channel.reaction.state[4].p
stack.subStack[3].cathode_channel.channel.reaction.state[4].T
stack.subStack[3].cathode_channel.channel.reaction.state[4].X[1]
stack.subStack[3].cathode_channel.channel.reaction.state[4].X[2]
stack.subStack[3].cathode_channel.channel.reaction.state[4].X[3]
stack.subStack[3].cathode_channel.channel.reaction.state[4].X[4]
stack.subStack[3].cathode_channel.channel.reaction.state[4].X[5]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 1]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 2]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 3]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 4]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 5]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 1]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 2]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 3]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 4]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 5]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 1]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 2]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 3]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 4]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 5]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 1]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 2]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 3]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 4]
stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 5]
stack.subStack[3].cathode_channel.channel.gas[1].X[1]
stack.subStack[3].cathode_channel.channel.gas[1].X[2]
stack.subStack[3].cathode_channel.channel.gas[1].X[3]
stack.subStack[3].cathode_channel.channel.gas[1].X[4]
stack.subStack[3].cathode_channel.channel.gas[1].X[5]
stack.subStack[3].cathode_channel.channel.gas[1].d
stack.subStack[3].cathode_channel.channel.gas[1].der(d)
stack.subStack[3].cathode_channel.channel.gas[1].u
stack.subStack[3].cathode_channel.channel.gas[1].Rg
stack.subStack[3].cathode_channel.channel.gas[1].der(Rg)
stack.subStack[3].cathode_channel.channel.gas[1].MM
stack.subStack[3].cathode_channel.channel.gas[1].assertlevel
stack.subStack[3].cathode_channel.channel.gas[1].state.p
stack.subStack[3].cathode_channel.channel.gas[1].state.T
stack.subStack[3].cathode_channel.channel.gas[1].state.X[1]
stack.subStack[3].cathode_channel.channel.gas[1].state.X[2]
stack.subStack[3].cathode_channel.channel.gas[1].state.X[3]
stack.subStack[3].cathode_channel.channel.gas[1].state.X[4]
stack.subStack[3].cathode_channel.channel.gas[1].state.X[5]
stack.subStack[3].cathode_channel.channel.gas[1].preferredMediumStates
stack.subStack[3].cathode_channel.channel.gas[1].T_degC
stack.subStack[3].cathode_channel.channel.gas[1].p_bar
stack.subStack[3].cathode_channel.channel.gas[1].Z[1]
stack.subStack[3].cathode_channel.channel.gas[1].Z[2]
stack.subStack[3].cathode_channel.channel.gas[1].Z[3]
stack.subStack[3].cathode_channel.channel.gas[1].Z[4]
stack.subStack[3].cathode_channel.channel.gas[1].Z[5]
stack.subStack[3].cathode_channel.channel.gas[1].dUZT[1]
stack.subStack[3].cathode_channel.channel.gas[1].dUZT[2]
stack.subStack[3].cathode_channel.channel.gas[1].dUZT[3]
stack.subStack[3].cathode_channel.channel.gas[1].dUZT[4]
stack.subStack[3].cathode_channel.channel.gas[1].dUZT[5]
stack.subStack[3].cathode_channel.channel.gas[1].h_component[1]
stack.subStack[3].cathode_channel.channel.gas[1].h_component[2]
stack.subStack[3].cathode_channel.channel.gas[1].h_component[3]
stack.subStack[3].cathode_channel.channel.gas[1].h_component[4]
stack.subStack[3].cathode_channel.channel.gas[1].h_component[5]
stack.subStack[3].cathode_channel.channel.gas[1].s_component[1]
stack.subStack[3].cathode_channel.channel.gas[1].s_component[2]
stack.subStack[3].cathode_channel.channel.gas[1].s_component[3]
stack.subStack[3].cathode_channel.channel.gas[1].s_component[4]
stack.subStack[3].cathode_channel.channel.gas[1].s_component[5]
stack.subStack[3].cathode_channel.channel.gas[1].u_comp[1]
stack.subStack[3].cathode_channel.channel.gas[1].u_comp[2]
stack.subStack[3].cathode_channel.channel.gas[1].u_comp[3]
stack.subStack[3].cathode_channel.channel.gas[1].u_comp[4]
stack.subStack[3].cathode_channel.channel.gas[1].u_comp[5]
stack.subStack[3].cathode_channel.channel.gas[1].cp
stack.subStack[3].cathode_channel.channel.gas[1].g_formation[1]
stack.subStack[3].cathode_channel.channel.gas[1].g_formation[2]
stack.subStack[3].cathode_channel.channel.gas[1].g_formation[3]
stack.subStack[3].cathode_channel.channel.gas[1].g_formation[4]
stack.subStack[3].cathode_channel.channel.gas[1].g_formation[5]
stack.subStack[3].cathode_channel.channel.gas[1].ddTp
stack.subStack[3].cathode_channel.channel.gas[1].ddpT
stack.subStack[3].cathode_channel.channel.gas[1].dupT
stack.subStack[3].cathode_channel.channel.gas[1].duTp
stack.subStack[3].cathode_channel.channel.gas[1].ddx[1]
stack.subStack[3].cathode_channel.channel.gas[1].ddx[2]
stack.subStack[3].cathode_channel.channel.gas[1].ddx[3]
stack.subStack[3].cathode_channel.channel.gas[1].ddx[4]
stack.subStack[3].cathode_channel.channel.gas[1].ddx[5]
stack.subStack[3].cathode_channel.channel.gas[2].X[1]
stack.subStack[3].cathode_channel.channel.gas[2].X[2]
stack.subStack[3].cathode_channel.channel.gas[2].X[3]
stack.subStack[3].cathode_channel.channel.gas[2].X[4]
stack.subStack[3].cathode_channel.channel.gas[2].X[5]
stack.subStack[3].cathode_channel.channel.gas[2].d
stack.subStack[3].cathode_channel.channel.gas[2].der(d)
stack.subStack[3].cathode_channel.channel.gas[2].u
stack.subStack[3].cathode_channel.channel.gas[2].Rg
stack.subStack[3].cathode_channel.channel.gas[2].der(Rg)
stack.subStack[3].cathode_channel.channel.gas[2].MM
stack.subStack[3].cathode_channel.channel.gas[2].assertlevel
stack.subStack[3].cathode_channel.channel.gas[2].state.p
stack.subStack[3].cathode_channel.channel.gas[2].state.T
stack.subStack[3].cathode_channel.channel.gas[2].state.X[1]
stack.subStack[3].cathode_channel.channel.gas[2].state.X[2]
stack.subStack[3].cathode_channel.channel.gas[2].state.X[3]
stack.subStack[3].cathode_channel.channel.gas[2].state.X[4]
stack.subStack[3].cathode_channel.channel.gas[2].state.X[5]
stack.subStack[3].cathode_channel.channel.gas[2].preferredMediumStates
stack.subStack[3].cathode_channel.channel.gas[2].T_degC
stack.subStack[3].cathode_channel.channel.gas[2].p_bar
stack.subStack[3].cathode_channel.channel.gas[2].Z[1]
stack.subStack[3].cathode_channel.channel.gas[2].Z[2]
stack.subStack[3].cathode_channel.channel.gas[2].Z[3]
stack.subStack[3].cathode_channel.channel.gas[2].Z[4]
stack.subStack[3].cathode_channel.channel.gas[2].Z[5]
stack.subStack[3].cathode_channel.channel.gas[2].dUZT[1]
stack.subStack[3].cathode_channel.channel.gas[2].dUZT[2]
stack.subStack[3].cathode_channel.channel.gas[2].dUZT[3]
stack.subStack[3].cathode_channel.channel.gas[2].dUZT[4]
stack.subStack[3].cathode_channel.channel.gas[2].dUZT[5]
stack.subStack[3].cathode_channel.channel.gas[2].h_component[1]
stack.subStack[3].cathode_channel.channel.gas[2].h_component[2]
stack.subStack[3].cathode_channel.channel.gas[2].h_component[3]
stack.subStack[3].cathode_channel.channel.gas[2].h_component[4]
stack.subStack[3].cathode_channel.channel.gas[2].h_component[5]
stack.subStack[3].cathode_channel.channel.gas[2].s_component[1]
stack.subStack[3].cathode_channel.channel.gas[2].s_component[2]
stack.subStack[3].cathode_channel.channel.gas[2].s_component[3]
stack.subStack[3].cathode_channel.channel.gas[2].s_component[4]
stack.subStack[3].cathode_channel.channel.gas[2].s_component[5]
stack.subStack[3].cathode_channel.channel.gas[2].u_comp[1]
stack.subStack[3].cathode_channel.channel.gas[2].u_comp[2]
stack.subStack[3].cathode_channel.channel.gas[2].u_comp[3]
stack.subStack[3].cathode_channel.channel.gas[2].u_comp[4]
stack.subStack[3].cathode_channel.channel.gas[2].u_comp[5]
stack.subStack[3].cathode_channel.channel.gas[2].cp
stack.subStack[3].cathode_channel.channel.gas[2].g_formation[1]
stack.subStack[3].cathode_channel.channel.gas[2].g_formation[2]
stack.subStack[3].cathode_channel.channel.gas[2].g_formation[3]
stack.subStack[3].cathode_channel.channel.gas[2].g_formation[4]
stack.subStack[3].cathode_channel.channel.gas[2].g_formation[5]
stack.subStack[3].cathode_channel.channel.gas[2].ddTp
stack.subStack[3].cathode_channel.channel.gas[2].ddpT
stack.subStack[3].cathode_channel.channel.gas[2].dupT
stack.subStack[3].cathode_channel.channel.gas[2].duTp
stack.subStack[3].cathode_channel.channel.gas[2].ddx[1]
stack.subStack[3].cathode_channel.channel.gas[2].ddx[2]
stack.subStack[3].cathode_channel.channel.gas[2].ddx[3]
stack.subStack[3].cathode_channel.channel.gas[2].ddx[4]
stack.subStack[3].cathode_channel.channel.gas[2].ddx[5]
stack.subStack[3].cathode_channel.channel.gas[3].X[1]
stack.subStack[3].cathode_channel.channel.gas[3].X[2]
stack.subStack[3].cathode_channel.channel.gas[3].X[3]
stack.subStack[3].cathode_channel.channel.gas[3].X[4]
stack.subStack[3].cathode_channel.channel.gas[3].X[5]
stack.subStack[3].cathode_channel.channel.gas[3].d
stack.subStack[3].cathode_channel.channel.gas[3].der(d)
stack.subStack[3].cathode_channel.channel.gas[3].u
stack.subStack[3].cathode_channel.channel.gas[3].Rg
stack.subStack[3].cathode_channel.channel.gas[3].der(Rg)
stack.subStack[3].cathode_channel.channel.gas[3].MM
stack.subStack[3].cathode_channel.channel.gas[3].assertlevel
stack.subStack[3].cathode_channel.channel.gas[3].state.p
stack.subStack[3].cathode_channel.channel.gas[3].state.T
stack.subStack[3].cathode_channel.channel.gas[3].state.X[1]
stack.subStack[3].cathode_channel.channel.gas[3].state.X[2]
stack.subStack[3].cathode_channel.channel.gas[3].state.X[3]
stack.subStack[3].cathode_channel.channel.gas[3].state.X[4]
stack.subStack[3].cathode_channel.channel.gas[3].state.X[5]
stack.subStack[3].cathode_channel.channel.gas[3].preferredMediumStates
stack.subStack[3].cathode_channel.channel.gas[3].T_degC
stack.subStack[3].cathode_channel.channel.gas[3].p_bar
stack.subStack[3].cathode_channel.channel.gas[3].Z[1]
stack.subStack[3].cathode_channel.channel.gas[3].Z[2]
stack.subStack[3].cathode_channel.channel.gas[3].Z[3]
stack.subStack[3].cathode_channel.channel.gas[3].Z[4]
stack.subStack[3].cathode_channel.channel.gas[3].Z[5]
stack.subStack[3].cathode_channel.channel.gas[3].dUZT[1]
stack.subStack[3].cathode_channel.channel.gas[3].dUZT[2]
stack.subStack[3].cathode_channel.channel.gas[3].dUZT[3]
stack.subStack[3].cathode_channel.channel.gas[3].dUZT[4]
stack.subStack[3].cathode_channel.channel.gas[3].dUZT[5]
stack.subStack[3].cathode_channel.channel.gas[3].h_component[1]
stack.subStack[3].cathode_channel.channel.gas[3].h_component[2]
stack.subStack[3].cathode_channel.channel.gas[3].h_component[3]
stack.subStack[3].cathode_channel.channel.gas[3].h_component[4]
stack.subStack[3].cathode_channel.channel.gas[3].h_component[5]
stack.subStack[3].cathode_channel.channel.gas[3].s_component[1]
stack.subStack[3].cathode_channel.channel.gas[3].s_component[2]
stack.subStack[3].cathode_channel.channel.gas[3].s_component[3]
stack.subStack[3].cathode_channel.channel.gas[3].s_component[4]
stack.subStack[3].cathode_channel.channel.gas[3].s_component[5]
stack.subStack[3].cathode_channel.channel.gas[3].u_comp[1]
stack.subStack[3].cathode_channel.channel.gas[3].u_comp[2]
stack.subStack[3].cathode_channel.channel.gas[3].u_comp[3]
stack.subStack[3].cathode_channel.channel.gas[3].u_comp[4]
stack.subStack[3].cathode_channel.channel.gas[3].u_comp[5]
stack.subStack[3].cathode_channel.channel.gas[3].cp
stack.subStack[3].cathode_channel.channel.gas[3].g_formation[1]
stack.subStack[3].cathode_channel.channel.gas[3].g_formation[2]
stack.subStack[3].cathode_channel.channel.gas[3].g_formation[3]
stack.subStack[3].cathode_channel.channel.gas[3].g_formation[4]
stack.subStack[3].cathode_channel.channel.gas[3].g_formation[5]
stack.subStack[3].cathode_channel.channel.gas[3].ddTp
stack.subStack[3].cathode_channel.channel.gas[3].ddpT
stack.subStack[3].cathode_channel.channel.gas[3].dupT
stack.subStack[3].cathode_channel.channel.gas[3].duTp
stack.subStack[3].cathode_channel.channel.gas[3].ddx[1]
stack.subStack[3].cathode_channel.channel.gas[3].ddx[2]
stack.subStack[3].cathode_channel.channel.gas[3].ddx[3]
stack.subStack[3].cathode_channel.channel.gas[3].ddx[4]
stack.subStack[3].cathode_channel.channel.gas[3].ddx[5]
stack.subStack[3].cathode_channel.channel.gas[4].X[1]
stack.subStack[3].cathode_channel.channel.gas[4].X[2]
stack.subStack[3].cathode_channel.channel.gas[4].X[3]
stack.subStack[3].cathode_channel.channel.gas[4].X[4]
stack.subStack[3].cathode_channel.channel.gas[4].X[5]
stack.subStack[3].cathode_channel.channel.gas[4].d
stack.subStack[3].cathode_channel.channel.gas[4].der(d)
stack.subStack[3].cathode_channel.channel.gas[4].u
stack.subStack[3].cathode_channel.channel.gas[4].Rg
stack.subStack[3].cathode_channel.channel.gas[4].der(Rg)
stack.subStack[3].cathode_channel.channel.gas[4].MM
stack.subStack[3].cathode_channel.channel.gas[4].assertlevel
stack.subStack[3].cathode_channel.channel.gas[4].state.p
stack.subStack[3].cathode_channel.channel.gas[4].state.T
stack.subStack[3].cathode_channel.channel.gas[4].state.X[1]
stack.subStack[3].cathode_channel.channel.gas[4].state.X[2]
stack.subStack[3].cathode_channel.channel.gas[4].state.X[3]
stack.subStack[3].cathode_channel.channel.gas[4].state.X[4]
stack.subStack[3].cathode_channel.channel.gas[4].state.X[5]
stack.subStack[3].cathode_channel.channel.gas[4].preferredMediumStates
stack.subStack[3].cathode_channel.channel.gas[4].p_bar
stack.subStack[3].cathode_channel.channel.gas[4].Z[1]
stack.subStack[3].cathode_channel.channel.gas[4].Z[2]
stack.subStack[3].cathode_channel.channel.gas[4].Z[3]
stack.subStack[3].cathode_channel.channel.gas[4].Z[4]
stack.subStack[3].cathode_channel.channel.gas[4].Z[5]
stack.subStack[3].cathode_channel.channel.gas[4].dUZT[1]
stack.subStack[3].cathode_channel.channel.gas[4].dUZT[2]
stack.subStack[3].cathode_channel.channel.gas[4].dUZT[3]
stack.subStack[3].cathode_channel.channel.gas[4].dUZT[4]
stack.subStack[3].cathode_channel.channel.gas[4].dUZT[5]
stack.subStack[3].cathode_channel.channel.gas[4].h_component[1]
stack.subStack[3].cathode_channel.channel.gas[4].h_component[2]
stack.subStack[3].cathode_channel.channel.gas[4].h_component[3]
stack.subStack[3].cathode_channel.channel.gas[4].h_component[4]
stack.subStack[3].cathode_channel.channel.gas[4].h_component[5]
stack.subStack[3].cathode_channel.channel.gas[4].s_component[1]
stack.subStack[3].cathode_channel.channel.gas[4].s_component[2]
stack.subStack[3].cathode_channel.channel.gas[4].s_component[3]
stack.subStack[3].cathode_channel.channel.gas[4].s_component[4]
stack.subStack[3].cathode_channel.channel.gas[4].s_component[5]
stack.subStack[3].cathode_channel.channel.gas[4].u_comp[1]
stack.subStack[3].cathode_channel.channel.gas[4].u_comp[2]
stack.subStack[3].cathode_channel.channel.gas[4].u_comp[3]
stack.subStack[3].cathode_channel.channel.gas[4].u_comp[4]
stack.subStack[3].cathode_channel.channel.gas[4].u_comp[5]
stack.subStack[3].cathode_channel.channel.gas[4].cp
stack.subStack[3].cathode_channel.channel.gas[4].g_formation[1]
stack.subStack[3].cathode_channel.channel.gas[4].g_formation[2]
stack.subStack[3].cathode_channel.channel.gas[4].g_formation[3]
stack.subStack[3].cathode_channel.channel.gas[4].g_formation[4]
stack.subStack[3].cathode_channel.channel.gas[4].g_formation[5]
stack.subStack[3].cathode_channel.channel.gas[4].ddTp
stack.subStack[3].cathode_channel.channel.gas[4].ddpT
stack.subStack[3].cathode_channel.channel.gas[4].dupT
stack.subStack[3].cathode_channel.channel.gas[4].duTp
stack.subStack[3].cathode_channel.channel.gas[4].ddx[1]
stack.subStack[3].cathode_channel.channel.gas[4].ddx[2]
stack.subStack[3].cathode_channel.channel.gas[4].ddx[3]
stack.subStack[3].cathode_channel.channel.gas[4].ddx[4]
stack.subStack[3].cathode_channel.channel.gas[4].ddx[5]
stack.subStack[3].cathode_channel.channel.der(p[1])
stack.subStack[3].cathode_channel.channel.der(p[2])
stack.subStack[3].cathode_channel.channel.der(p[3])
stack.subStack[3].cathode_channel.channel.der(p[4])
stack.subStack[3].cathode_channel.channel.M[1]
stack.subStack[3].cathode_channel.channel.M[2]
stack.subStack[3].cathode_channel.channel.M[3]
stack.subStack[3].cathode_channel.channel.M[4]
stack.subStack[3].cathode_channel.channel.der(M[1])
stack.subStack[3].cathode_channel.channel.der(M[2])
stack.subStack[3].cathode_channel.channel.der(M[3])
stack.subStack[3].cathode_channel.channel.der(M[4])
stack.subStack[3].cathode_channel.channel.E_seg[1]
stack.subStack[3].cathode_channel.channel.E_seg[2]
stack.subStack[3].cathode_channel.channel.E_seg[3]
stack.subStack[3].cathode_channel.channel.E_seg[4]
stack.subStack[3].cathode_channel.channel.MXi[1, 1]
stack.subStack[3].cathode_channel.channel.MXi[1, 2]
stack.subStack[3].cathode_channel.channel.MXi[1, 3]
stack.subStack[3].cathode_channel.channel.MXi[1, 4]
stack.subStack[3].cathode_channel.channel.MXi[1, 5]
stack.subStack[3].cathode_channel.channel.MXi[2, 1]
stack.subStack[3].cathode_channel.channel.MXi[2, 2]
stack.subStack[3].cathode_channel.channel.MXi[2, 3]
stack.subStack[3].cathode_channel.channel.MXi[2, 4]
stack.subStack[3].cathode_channel.channel.MXi[2, 5]
stack.subStack[3].cathode_channel.channel.MXi[3, 1]
stack.subStack[3].cathode_channel.channel.MXi[3, 2]
stack.subStack[3].cathode_channel.channel.MXi[3, 3]
stack.subStack[3].cathode_channel.channel.MXi[3, 4]
stack.subStack[3].cathode_channel.channel.MXi[3, 5]
stack.subStack[3].cathode_channel.channel.MXi[4, 1]
stack.subStack[3].cathode_channel.channel.MXi[4, 2]
stack.subStack[3].cathode_channel.channel.MXi[4, 3]
stack.subStack[3].cathode_channel.channel.MXi[4, 4]
stack.subStack[3].cathode_channel.channel.MXi[4, 5]
stack.subStack[3].cathode_channel.channel.dp[1]
stack.subStack[3].cathode_channel.channel.dp[2]
stack.subStack[3].cathode_channel.channel.dp[3]
stack.subStack[3].cathode_channel.channel.dp[4]
stack.subStack[3].cathode_channel.channel.dp[5]
stack.subStack[3].cathode_channel.channel.sh[1]
stack.subStack[3].cathode_channel.channel.sh[2]
stack.subStack[3].cathode_channel.channel.sh[3]
stack.subStack[3].cathode_channel.channel.sh[4]
stack.subStack[3].cathode_channel.channel.state[1].X[1]
stack.subStack[3].cathode_channel.channel.state[1].X[2]
stack.subStack[3].cathode_channel.channel.state[1].X[3]
stack.subStack[3].cathode_channel.channel.state[1].X[4]
stack.subStack[3].cathode_channel.channel.state[1].X[5]
stack.subStack[3].cathode_channel.channel.state[6].T
stack.subStack[3].cathode_channel.channel.Q[1]
stack.subStack[3].cathode_channel.channel.Q[2]
stack.subStack[3].cathode_channel.channel.Q[3]
stack.subStack[3].cathode_channel.channel.Q[4]
stack.subStack[3].cathode_channel.channel.Q_tot
stack.subStack[3].cathode_channel.channel.Q_wall[1]
stack.subStack[3].cathode_channel.channel.Q_wall[2]
stack.subStack[3].cathode_channel.channel.Q_wall[3]
stack.subStack[3].cathode_channel.channel.Q_wall[4]
stack.subStack[3].cathode_channel.channel.alpha[1]
stack.subStack[3].cathode_channel.channel.alpha[2]
stack.subStack[3].cathode_channel.channel.alpha[3]
stack.subStack[3].cathode_channel.channel.alpha[4]
stack.subStack[3].cathode_channel.channel.rMX[1, 1]
stack.subStack[3].cathode_channel.channel.rMX[1, 2]
stack.subStack[3].cathode_channel.channel.rMX[1, 3]
stack.subStack[3].cathode_channel.channel.rMX[1, 4]
stack.subStack[3].cathode_channel.channel.rMX[2, 1]
stack.subStack[3].cathode_channel.channel.rMX[2, 2]
stack.subStack[3].cathode_channel.channel.rMX[2, 3]
stack.subStack[3].cathode_channel.channel.rMX[2, 4]
stack.subStack[3].cathode_channel.channel.rMX[3, 1]
stack.subStack[3].cathode_channel.channel.rMX[3, 2]
stack.subStack[3].cathode_channel.channel.rMX[3, 3]
stack.subStack[3].cathode_channel.channel.rMX[3, 4]
stack.subStack[3].cathode_channel.channel.rMX[4, 1]
stack.subStack[3].cathode_channel.channel.rMX[4, 2]
stack.subStack[3].cathode_channel.channel.rMX[4, 3]
stack.subStack[3].cathode_channel.channel.rMX[4, 4]
stack.subStack[3].cathode_channel.channel.mflow_A_in
stack.subStack[3].cathode_channel.channel.mflow_B_in
stack.subStack[3].cathode_channel.channel.m_flow_fric[1]
stack.subStack[3].cathode_channel.channel.m_flow_fric[2]
stack.subStack[3].cathode_channel.channel.m_flow_fric[3]
stack.subStack[3].cathode_channel.channel.XA[1]
stack.subStack[3].cathode_channel.channel.XA[2]
stack.subStack[3].cathode_channel.channel.XA[3]
stack.subStack[3].cathode_channel.channel.XA[4]
stack.subStack[3].cathode_channel.channel.XA[5]
stack.subStack[3].cathode_channel.channel.XB[1]
stack.subStack[3].cathode_channel.channel.XB[2]
stack.subStack[3].cathode_channel.channel.XB[3]
stack.subStack[3].cathode_channel.channel.XB[4]
stack.subStack[3].cathode_channel.channel.XB[5]
stack.subStack[3].cathode_channel.channel.n_channels_fric[1]
stack.subStack[3].cathode_channel.channel.n_channels_fric[2]
stack.subStack[3].cathode_channel.channel.n_channels_fric[3]
stack.subStack[3].cathode_channel.channel.n_channels_fric[4]
stack.subStack[3].cathode_channel.channel.T_wall[1]
stack.subStack[3].cathode_channel.channel.T_wall[2]
stack.subStack[3].cathode_channel.channel.T_wall[3]
stack.subStack[3].cathode_channel.channel.T_wall[4]
stack.subStack[3].cathode_channel.channel.nS
stack.subStack[3].cathode_channel.channel.mX_flow[1, 1]
stack.subStack[3].cathode_channel.channel.mX_flow[1, 2]
stack.subStack[3].cathode_channel.channel.mX_flow[1, 3]
stack.subStack[3].cathode_channel.channel.mX_flow[1, 4]
stack.subStack[3].cathode_channel.channel.mX_flow[1, 5]
stack.subStack[3].cathode_channel.channel.mX_flow[2, 1]
stack.subStack[3].cathode_channel.channel.mX_flow[2, 2]
stack.subStack[3].cathode_channel.channel.mX_flow[2, 3]
stack.subStack[3].cathode_channel.channel.mX_flow[2, 4]
stack.subStack[3].cathode_channel.channel.mX_flow[2, 5]
stack.subStack[3].cathode_channel.channel.mX_flow[3, 1]
stack.subStack[3].cathode_channel.channel.mX_flow[3, 2]
stack.subStack[3].cathode_channel.channel.mX_flow[3, 3]
stack.subStack[3].cathode_channel.channel.mX_flow[3, 4]
stack.subStack[3].cathode_channel.channel.mX_flow[3, 5]
stack.subStack[3].cathode_channel.channel.mX_flow[4, 1]
stack.subStack[3].cathode_channel.channel.mX_flow[4, 2]
stack.subStack[3].cathode_channel.channel.mX_flow[4, 3]
stack.subStack[3].cathode_channel.channel.mX_flow[4, 4]
stack.subStack[3].cathode_channel.channel.mX_flow[4, 5]
stack.subStack[3].cathode_channel.channel.mX_flow[5, 1]
stack.subStack[3].cathode_channel.channel.mX_flow[5, 2]
stack.subStack[3].cathode_channel.channel.mX_flow[5, 3]
stack.subStack[3].cathode_channel.channel.mX_flow[5, 4]
stack.subStack[3].cathode_channel.channel.mX_flow[5, 5]
stack.subStack[3].cathode_channel.channel.H_flow[1]
stack.subStack[3].cathode_channel.channel.H_flow[2]
stack.subStack[3].cathode_channel.channel.H_flow[3]
stack.subStack[3].cathode_channel.channel.H_flow[4]
stack.subStack[3].cathode_channel.channel.H_flow[5]
stack.subStack[3].cathode_channel.channel.dE[1]
stack.subStack[3].cathode_channel.channel.dE[2]
stack.subStack[3].cathode_channel.channel.dE[3]
stack.subStack[3].cathode_channel.channel.dE[4]
stack.subStack[3].cathode_channel.channel.dMX[1, 1]
stack.subStack[3].cathode_channel.channel.dMX[1, 2]
stack.subStack[3].cathode_channel.channel.dMX[1, 3]
stack.subStack[3].cathode_channel.channel.dMX[1, 4]
stack.subStack[3].cathode_channel.channel.dMX[1, 5]
stack.subStack[3].cathode_channel.channel.dMX[2, 1]
stack.subStack[3].cathode_channel.channel.dMX[2, 2]
stack.subStack[3].cathode_channel.channel.dMX[2, 3]
stack.subStack[3].cathode_channel.channel.dMX[2, 4]
stack.subStack[3].cathode_channel.channel.dMX[2, 5]
stack.subStack[3].cathode_channel.channel.dMX[3, 1]
stack.subStack[3].cathode_channel.channel.dMX[3, 2]
stack.subStack[3].cathode_channel.channel.dMX[3, 3]
stack.subStack[3].cathode_channel.channel.dMX[3, 4]
stack.subStack[3].cathode_channel.channel.dMX[3, 5]
stack.subStack[3].cathode_channel.channel.dMX[4, 1]
stack.subStack[3].cathode_channel.channel.dMX[4, 2]
stack.subStack[3].cathode_channel.channel.dMX[4, 3]
stack.subStack[3].cathode_channel.channel.dMX[4, 4]
stack.subStack[3].cathode_channel.channel.dMX[4, 5]
stack.subStack[3].cathode_channel.channel.dUTZ[1]
stack.subStack[3].cathode_channel.channel.dUTZ[2]
stack.subStack[3].cathode_channel.channel.dUTZ[3]
stack.subStack[3].cathode_channel.channel.dUTZ[4]
stack.subStack[3].cathode_channel.channel.Z[1, 1]
stack.subStack[3].cathode_channel.channel.Z[1, 2]
stack.subStack[3].cathode_channel.channel.Z[1, 3]
stack.subStack[3].cathode_channel.channel.Z[1, 4]
stack.subStack[3].cathode_channel.channel.Z[1, 5]
stack.subStack[3].cathode_channel.channel.Z[2, 1]
stack.subStack[3].cathode_channel.channel.Z[2, 2]
stack.subStack[3].cathode_channel.channel.Z[2, 3]
stack.subStack[3].cathode_channel.channel.Z[2, 4]
stack.subStack[3].cathode_channel.channel.Z[2, 5]
stack.subStack[3].cathode_channel.channel.Z[3, 1]
stack.subStack[3].cathode_channel.channel.Z[3, 2]
stack.subStack[3].cathode_channel.channel.Z[3, 3]
stack.subStack[3].cathode_channel.channel.Z[3, 4]
stack.subStack[3].cathode_channel.channel.Z[3, 5]
stack.subStack[3].cathode_channel.channel.Z[4, 1]
stack.subStack[3].cathode_channel.channel.Z[4, 2]
stack.subStack[3].cathode_channel.channel.Z[4, 3]
stack.subStack[3].cathode_channel.channel.Z[4, 4]
stack.subStack[3].cathode_channel.channel.Z[4, 5]
stack.subStack[3].cathode_channel.channel.der(Z[1, 1])
stack.subStack[3].cathode_channel.channel.der(Z[1, 2])
stack.subStack[3].cathode_channel.channel.der(Z[1, 3])
stack.subStack[3].cathode_channel.channel.der(Z[1, 4])
stack.subStack[3].cathode_channel.channel.der(Z[1, 5])
stack.subStack[3].cathode_channel.channel.der(Z[2, 1])
stack.subStack[3].cathode_channel.channel.der(Z[2, 2])
stack.subStack[3].cathode_channel.channel.der(Z[2, 3])
stack.subStack[3].cathode_channel.channel.der(Z[2, 4])
stack.subStack[3].cathode_channel.channel.der(Z[2, 5])
stack.subStack[3].cathode_channel.channel.der(Z[3, 1])
stack.subStack[3].cathode_channel.channel.der(Z[3, 2])
stack.subStack[3].cathode_channel.channel.der(Z[3, 3])
stack.subStack[3].cathode_channel.channel.der(Z[3, 4])
stack.subStack[3].cathode_channel.channel.der(Z[3, 5])
stack.subStack[3].cathode_channel.channel.der(Z[4, 1])
stack.subStack[3].cathode_channel.channel.der(Z[4, 2])
stack.subStack[3].cathode_channel.channel.der(Z[4, 3])
stack.subStack[3].cathode_channel.channel.der(Z[4, 4])
stack.subStack[3].cathode_channel.channel.der(Z[4, 5])
stack.subStack[3].cathode_channel.port[1].mX_flow[1]
stack.subStack[3].cathode_channel.port[1].mX_flow[2]
stack.subStack[3].cathode_channel.port[1].mX_flow[3]
stack.subStack[3].cathode_channel.port[1].mX_flow[4]
stack.subStack[3].cathode_channel.port[2].mX_flow[1]
stack.subStack[3].cathode_channel.port[2].mX_flow[2]
stack.subStack[3].cathode_channel.port[2].mX_flow[3]
stack.subStack[3].cathode_channel.port[2].mX_flow[4]
stack.subStack[3].cathode_channel.port[3].mX_flow[1]
stack.subStack[3].cathode_channel.port[3].mX_flow[2]
stack.subStack[3].cathode_channel.port[3].mX_flow[3]
stack.subStack[3].cathode_channel.port[3].mX_flow[4]
stack.subStack[3].cathode_channel.port[4].mX_flow[1]
stack.subStack[3].cathode_channel.port[4].mX_flow[2]
stack.subStack[3].cathode_channel.port[4].mX_flow[3]
stack.subStack[3].cathode_channel.port[4].mX_flow[4]
stack.subStack[3].ref[1]
stack.subStack[3].air[1]
stack.summary.N
stack.summary.VCst
stack.topHeatTransfer.n
stack.topHeatTransfer.Aheatloss
stack.topHeatTransfer.kc
stack.topHeatTransfer.infiniteHT
stack.topHeatTransfer.variableKc
stack.topHeatTransfer.Q_s[1]
stack.topHeatTransfer.Q_s[2]
stack.topHeatTransfer.Q_s[3]
stack.topHeatTransfer.Q_s[4]
stack.topHeatTransfer.qa[1].T
stack.topHeatTransfer.qa[2].T
stack.topHeatTransfer.qa[3].T
stack.topHeatTransfer.qa[4].T
stack.bottomHeatTransfer.n
stack.bottomHeatTransfer.Aheatloss
stack.bottomHeatTransfer.kc
stack.bottomHeatTransfer.infiniteHT
stack.bottomHeatTransfer.variableKc
stack.bottomHeatTransfer.Q_s[1]
stack.bottomHeatTransfer.Q_s[2]
stack.bottomHeatTransfer.Q_s[3]
stack.bottomHeatTransfer.Q_s[4]
stack.bottomHeatTransfer.qb[1].T
stack.bottomHeatTransfer.qb[2].T
stack.bottomHeatTransfer.qb[3].T
stack.bottomHeatTransfer.qb[4].T
stack.bottomWall.n
stack.bottomWall.V_wall[1]
stack.bottomWall.V_wall[2]
stack.bottomWall.V_wall[3]
stack.bottomWall.V_wall[4]
stack.bottomWall.A_wall[1]
stack.bottomWall.A_wall[2]
stack.bottomWall.A_wall[3]
stack.bottomWall.A_wall[4]
stack.bottomWall.dp
stack.bottomWall.includeThermalResistance
stack.bottomWall.massLessWall
stack.bottomWall.CounterTemps
stack.bottomWall.steadyStateInit
stack.bottomWall.Tstart1
stack.bottomWall.TstartN
stack.bottomWall.T0[1]
stack.bottomWall.T0[2]
stack.bottomWall.T0[3]
stack.bottomWall.T0[4]
stack.bottomWall.m[1]
stack.bottomWall.m[2]
stack.bottomWall.m[3]
stack.bottomWall.m[4]
stack.bottomWall.Rw[1]
stack.bottomWall.Rw[2]
stack.bottomWall.Rw[3]
stack.bottomWall.Rw[4]
stack.bottomWall.T[1]
stack.bottomWall.der(T[1])
stack.bottomWall.T[2]
stack.bottomWall.der(T[2])
stack.bottomWall.T[3]
stack.bottomWall.der(T[3])
stack.bottomWall.T[4]
stack.bottomWall.der(T[4])
stack.bottomWall.T_degC[1]
stack.bottomWall.T_degC[2]
stack.bottomWall.T_degC[3]
stack.bottomWall.T_degC[4]
stack.bottomWall.qb_Q_flow[1]
stack.bottomWall.qb_Q_flow[2]
stack.bottomWall.qb_Q_flow[3]
stack.bottomWall.qb_Q_flow[4]
stack.bottomWall.metal_specificHeatCapacity[1]
stack.bottomWall.metal_specificHeatCapacity[2]
stack.bottomWall.metal_specificHeatCapacity[3]
stack.bottomWall.metal_specificHeatCapacity[4]
stack.bottomWall.qb[1].T
stack.bottomWall.qb[2].T
stack.bottomWall.qb[3].T
stack.bottomWall.qb[4].T
stack.topWall.n
stack.topWall.V_wall[1]
stack.topWall.V_wall[2]
stack.topWall.V_wall[3]
stack.topWall.V_wall[4]
stack.topWall.A_wall[1]
stack.topWall.A_wall[2]
stack.topWall.A_wall[3]
stack.topWall.A_wall[4]
stack.topWall.dp
stack.topWall.includeThermalResistance
stack.topWall.massLessWall
stack.topWall.CounterTemps
stack.topWall.steadyStateInit
stack.topWall.Tstart1
stack.topWall.TstartN
stack.topWall.T0[1]
stack.topWall.T0[2]
stack.topWall.T0[3]
stack.topWall.T0[4]
stack.topWall.m[1]
stack.topWall.m[2]
stack.topWall.m[3]
stack.topWall.m[4]
stack.topWall.Rw[1]
stack.topWall.Rw[2]
stack.topWall.Rw[3]
stack.topWall.Rw[4]
stack.topWall.T[1]
stack.topWall.der(T[1])
stack.topWall.T[2]
stack.topWall.der(T[2])
stack.topWall.T[3]
stack.topWall.der(T[3])
stack.topWall.T[4]
stack.topWall.der(T[4])
stack.topWall.T_degC[1]
stack.topWall.T_degC[2]
stack.topWall.T_degC[3]
stack.topWall.T_degC[4]
stack.topWall.qa_Q_flow[1]
stack.topWall.qa_Q_flow[2]
stack.topWall.qa_Q_flow[3]
stack.topWall.qa_Q_flow[4]
stack.topWall.metal_specificHeatCapacity[1]
stack.topWall.metal_specificHeatCapacity[2]
stack.topWall.metal_specificHeatCapacity[3]
stack.topWall.metal_specificHeatCapacity[4]
stack.topWall.qa[1].T
stack.topWall.qa[2].T
stack.topWall.qa[3].T
stack.topWall.qa[4].T
stack.counterFlow
stack.feed_Anode.initFromEnthalpy
stack.feed_Anode.h_start
stack.feed_Anode.T_start
stack.feed_Anode.dp_start
stack.feed_Anode.m_flow_start
stack.feed_Anode.height
stack.feed_Anode.positiveFlow
stack.feed_Anode.N_drain
stack.feed_Anode.heat_port[1].Q_flow
stack.feed_Anode.heat_port[2].Q_flow
stack.feed_Anode.heat_port[3].Q_flow
stack.feed_Anode.drain[1].m_flow
stack.feed_Anode.drain[2].m_flow
stack.feed_Anode.drain[3].m_flow
stack.feed_Anode.pi
stack.feed_Anode.n_volumes
stack.feed_Anode.V_tot
stack.feed_Anode.Nusselt_nbr
stack.feed_Anode.pstart_in
stack.feed_Anode.volume[1].der(V)
stack.feed_Anode.volume[1].initOpt
stack.feed_Anode.volume[1].initFromEnthalpy
stack.feed_Anode.volume[1].p_start
stack.feed_Anode.volume[1].T_start
stack.feed_Anode.volume[1].h_start
stack.feed_Anode.volume[1].X_start[1]
stack.feed_Anode.volume[1].X_start[2]
stack.feed_Anode.volume[1].X_start[3]
stack.feed_Anode.volume[1].X_start[4]
stack.feed_Anode.volume[1].X_start[5]
stack.feed_Anode.volume[1].X_start[6]
stack.feed_Anode.volume[1].X_start[7]
stack.feed_Anode.volume[1].mXs_flow[1]
stack.feed_Anode.volume[1].mXs_flow[2]
stack.feed_Anode.volume[1].mXs_flow[3]
stack.feed_Anode.volume[1].mXs_flow[4]
stack.feed_Anode.volume[1].mXs_flow[5]
stack.feed_Anode.volume[1].mXs_flow[6]
stack.feed_Anode.volume[1].mXs_flow[7]
stack.feed_Anode.volume[1].Q_add
stack.feed_Anode.volume[1].m
stack.feed_Anode.volume[1].N
stack.feed_Anode.volume[1].port[2].X_outflow[1]
stack.feed_Anode.volume[1].port[2].X_outflow[2]
stack.feed_Anode.volume[1].port[2].X_outflow[3]
stack.feed_Anode.volume[1].port[2].X_outflow[4]
stack.feed_Anode.volume[1].port[2].X_outflow[5]
stack.feed_Anode.volume[1].port[2].X_outflow[6]
stack.feed_Anode.volume[1].port[2].X_outflow[7]
stack.feed_Anode.volume[1].port[3].X_outflow[1]
stack.feed_Anode.volume[1].port[3].X_outflow[2]
stack.feed_Anode.volume[1].port[3].X_outflow[3]
stack.feed_Anode.volume[1].port[3].X_outflow[4]
stack.feed_Anode.volume[1].port[3].X_outflow[5]
stack.feed_Anode.volume[1].port[3].X_outflow[6]
stack.feed_Anode.volume[1].port[3].X_outflow[7]
stack.feed_Anode.volume[1].port[4].X_outflow[1]
stack.feed_Anode.volume[1].port[4].X_outflow[2]
stack.feed_Anode.volume[1].port[4].X_outflow[3]
stack.feed_Anode.volume[1].port[4].X_outflow[4]
stack.feed_Anode.volume[1].port[4].X_outflow[5]
stack.feed_Anode.volume[1].port[4].X_outflow[6]
stack.feed_Anode.volume[1].port[4].X_outflow[7]
stack.feed_Anode.volume[1].thermalDynamics
stack.feed_Anode.volume[1].realTimeMode
stack.feed_Anode.volume[1].stepSize
stack.feed_Anode.volume[1].der_p_factor
stack.feed_Anode.volume[1].h_in
stack.feed_Anode.volume[1].X_in[1]
stack.feed_Anode.volume[1].X_in[2]
stack.feed_Anode.volume[1].X_in[3]
stack.feed_Anode.volume[1].X_in[4]
stack.feed_Anode.volume[1].X_in[5]
stack.feed_Anode.volume[1].X_in[6]
stack.feed_Anode.volume[1].X_in[7]
stack.feed_Anode.volume[1].state_in.p
stack.feed_Anode.volume[1].state_in.T
stack.feed_Anode.volume[1].state_in.X[1]
stack.feed_Anode.volume[1].state_in.X[2]
stack.feed_Anode.volume[1].state_in.X[3]
stack.feed_Anode.volume[1].state_in.X[4]
stack.feed_Anode.volume[1].state_in.X[5]
stack.feed_Anode.volume[1].state_in.X[6]
stack.feed_Anode.volume[1].state_in.X[7]
stack.feed_Anode.volume[1].state_default.p
stack.feed_Anode.volume[1].state_default.T
stack.feed_Anode.volume[1].state_default.X[1]
stack.feed_Anode.volume[1].state_default.X[2]
stack.feed_Anode.volume[1].state_default.X[3]
stack.feed_Anode.volume[1].state_default.X[4]
stack.feed_Anode.volume[1].state_default.X[5]
stack.feed_Anode.volume[1].state_default.X[6]
stack.feed_Anode.volume[1].state_default.X[7]
stack.feed_Anode.volume[1].m_flow_in[1]
stack.feed_Anode.volume[1].m_flow_in[2]
stack.feed_Anode.volume[1].m_flow_in[3]
stack.feed_Anode.volume[1].m_flow_in[4]
stack.feed_Anode.volume[1].H_flow_in[1]
stack.feed_Anode.volume[1].H_flow_in[2]
stack.feed_Anode.volume[1].H_flow_in[3]
stack.feed_Anode.volume[1].H_flow_in[4]
stack.feed_Anode.volume[1].MX_flow_in[1, 1]
stack.feed_Anode.volume[1].MX_flow_in[1, 2]
stack.feed_Anode.volume[1].MX_flow_in[1, 3]
stack.feed_Anode.volume[1].MX_flow_in[1, 4]
stack.feed_Anode.volume[1].MX_flow_in[1, 5]
stack.feed_Anode.volume[1].MX_flow_in[1, 6]
stack.feed_Anode.volume[1].MX_flow_in[1, 7]
stack.feed_Anode.volume[1].MX_flow_in[2, 1]
stack.feed_Anode.volume[1].MX_flow_in[2, 2]
stack.feed_Anode.volume[1].MX_flow_in[2, 3]
stack.feed_Anode.volume[1].MX_flow_in[2, 4]
stack.feed_Anode.volume[1].MX_flow_in[2, 5]
stack.feed_Anode.volume[1].MX_flow_in[2, 6]
stack.feed_Anode.volume[1].MX_flow_in[2, 7]
stack.feed_Anode.volume[1].MX_flow_in[3, 1]
stack.feed_Anode.volume[1].MX_flow_in[3, 2]
stack.feed_Anode.volume[1].MX_flow_in[3, 3]
stack.feed_Anode.volume[1].MX_flow_in[3, 4]
stack.feed_Anode.volume[1].MX_flow_in[3, 5]
stack.feed_Anode.volume[1].MX_flow_in[3, 6]
stack.feed_Anode.volume[1].MX_flow_in[3, 7]
stack.feed_Anode.volume[1].MX_flow_in[4, 1]
stack.feed_Anode.volume[1].MX_flow_in[4, 2]
stack.feed_Anode.volume[1].MX_flow_in[4, 3]
stack.feed_Anode.volume[1].MX_flow_in[4, 4]
stack.feed_Anode.volume[1].MX_flow_in[4, 5]
stack.feed_Anode.volume[1].MX_flow_in[4, 6]
stack.feed_Anode.volume[1].MX_flow_in[4, 7]
stack.feed_Anode.volume[1].dE
stack.feed_Anode.volume[1].dMX[1]
stack.feed_Anode.volume[1].dMX[2]
stack.feed_Anode.volume[1].dMX[3]
stack.feed_Anode.volume[1].dMX[4]
stack.feed_Anode.volume[1].dMX[5]
stack.feed_Anode.volume[1].dMX[6]
stack.feed_Anode.volume[1].dMX[7]
stack.feed_Anode.volume[1].H_flow[1]
stack.feed_Anode.volume[1].H_flow[2]
stack.feed_Anode.volume[1].H_flow[3]
stack.feed_Anode.volume[1].H_flow[4]
stack.feed_Anode.volume[1].MX_flow[1, 1]
stack.feed_Anode.volume[1].MX_flow[1, 2]
stack.feed_Anode.volume[1].MX_flow[1, 3]
stack.feed_Anode.volume[1].MX_flow[1, 4]
stack.feed_Anode.volume[1].MX_flow[1, 5]
stack.feed_Anode.volume[1].MX_flow[1, 6]
stack.feed_Anode.volume[1].MX_flow[1, 7]
stack.feed_Anode.volume[1].MX_flow[2, 1]
stack.feed_Anode.volume[1].MX_flow[2, 2]
stack.feed_Anode.volume[1].MX_flow[2, 3]
stack.feed_Anode.volume[1].MX_flow[2, 4]
stack.feed_Anode.volume[1].MX_flow[2, 5]
stack.feed_Anode.volume[1].MX_flow[2, 6]
stack.feed_Anode.volume[1].MX_flow[2, 7]
stack.feed_Anode.volume[1].MX_flow[3, 1]
stack.feed_Anode.volume[1].MX_flow[3, 2]
stack.feed_Anode.volume[1].MX_flow[3, 3]
stack.feed_Anode.volume[1].MX_flow[3, 4]
stack.feed_Anode.volume[1].MX_flow[3, 5]
stack.feed_Anode.volume[1].MX_flow[3, 6]
stack.feed_Anode.volume[1].MX_flow[3, 7]
stack.feed_Anode.volume[1].MX_flow[4, 1]
stack.feed_Anode.volume[1].MX_flow[4, 2]
stack.feed_Anode.volume[1].MX_flow[4, 3]
stack.feed_Anode.volume[1].MX_flow[4, 4]
stack.feed_Anode.volume[1].MX_flow[4, 5]
stack.feed_Anode.volume[1].MX_flow[4, 6]
stack.feed_Anode.volume[1].MX_flow[4, 7]
stack.feed_Anode.volume[1].M
stack.feed_Anode.volume[1].fluid.quasiStatic
stack.feed_Anode.volume[1].fluid.thermalDynamics
stack.feed_Anode.volume[1].fluid.realTimeMode
stack.feed_Anode.volume[1].fluid.stepSize
stack.feed_Anode.volume[1].fluid.der_p_factor
stack.feed_Anode.volume[1].fluid.initOpt
stack.feed_Anode.volume[1].fluid.T_start
stack.feed_Anode.volume[1].fluid.p_start
stack.feed_Anode.volume[1].fluid.h_start
stack.feed_Anode.volume[1].fluid.X_start[1]
stack.feed_Anode.volume[1].fluid.X_start[2]
stack.feed_Anode.volume[1].fluid.X_start[3]
stack.feed_Anode.volume[1].fluid.X_start[4]
stack.feed_Anode.volume[1].fluid.X_start[5]
stack.feed_Anode.volume[1].fluid.X_start[6]
stack.feed_Anode.volume[1].fluid.X_start[7]
stack.feed_Anode.volume[1].fluid.ns
stack.feed_Anode.volume[1].fluid.nC
stack.feed_Anode.volume[1].fluid.der(V_tot)
stack.feed_Anode.volume[1].fluid.p
stack.feed_Anode.volume[1].fluid.der(p)
stack.feed_Anode.volume[1].fluid.d
stack.feed_Anode.volume[1].fluid.T
stack.feed_Anode.volume[1].fluid.der(T)
stack.feed_Anode.volume[1].fluid.X[1]
stack.feed_Anode.volume[1].fluid.der(X[1])
stack.feed_Anode.volume[1].fluid.X[2]
stack.feed_Anode.volume[1].fluid.der(X[2])
stack.feed_Anode.volume[1].fluid.X[3]
stack.feed_Anode.volume[1].fluid.der(X[3])
stack.feed_Anode.volume[1].fluid.X[4]
stack.feed_Anode.volume[1].fluid.der(X[4])
stack.feed_Anode.volume[1].fluid.X[5]
stack.feed_Anode.volume[1].fluid.der(X[5])
stack.feed_Anode.volume[1].fluid.X[6]
stack.feed_Anode.volume[1].fluid.der(X[6])
stack.feed_Anode.volume[1].fluid.X[7]
stack.feed_Anode.volume[1].fluid.state.p
stack.feed_Anode.volume[1].fluid.state.T
stack.feed_Anode.volume[1].fluid.state.X[1]
stack.feed_Anode.volume[1].fluid.state.X[2]
stack.feed_Anode.volume[1].fluid.state.X[3]
stack.feed_Anode.volume[1].fluid.state.X[4]
stack.feed_Anode.volume[1].fluid.state.X[5]
stack.feed_Anode.volume[1].fluid.state.X[6]
stack.feed_Anode.volume[1].fluid.state.X[7]
stack.feed_Anode.volume[1].fluid.u
stack.feed_Anode.volume[1].fluid.v
stack.feed_Anode.volume[1].fluid.MX[1]
stack.feed_Anode.volume[1].fluid.MX[2]
stack.feed_Anode.volume[1].fluid.MX[3]
stack.feed_Anode.volume[1].fluid.MX[4]
stack.feed_Anode.volume[1].fluid.MX[5]
stack.feed_Anode.volume[1].fluid.MX[6]
stack.feed_Anode.volume[1].fluid.MX[7]
stack.feed_Anode.volume[1].fluid.M
stack.feed_Anode.volume[1].fluid.E
stack.feed_Anode.volume[1].fluid.R
stack.feed_Anode.volume[1].fluid.dM
stack.feed_Anode.volume[1].fluid.dX[7]
stack.feed_Anode.volume[1].fluid.R_g[1]
stack.feed_Anode.volume[1].fluid.R_g[2]
stack.feed_Anode.volume[1].fluid.R_g[3]
stack.feed_Anode.volume[1].fluid.R_g[4]
stack.feed_Anode.volume[1].fluid.R_g[5]
stack.feed_Anode.volume[1].fluid.R_g[6]
stack.feed_Anode.volume[1].fluid.R_g[7]
stack.feed_Anode.volume[1].fluid.dd
stack.feed_Anode.volume[1].fluid.dv
stack.feed_Anode.volume[1].fluid.du
stack.feed_Anode.volume[1].fluid.du_dX[1]
stack.feed_Anode.volume[1].fluid.du_dX[2]
stack.feed_Anode.volume[1].fluid.du_dX[3]
stack.feed_Anode.volume[1].fluid.du_dX[4]
stack.feed_Anode.volume[1].fluid.du_dX[5]
stack.feed_Anode.volume[1].fluid.du_dX[6]
stack.feed_Anode.volume[1].fluid.du_dX[7]
stack.feed_Anode.volume[1].usePositiveFlow
stack.feed_Anode.volume[1].positiveFlow[1]
stack.feed_Anode.volume[1].positiveFlow[2]
stack.feed_Anode.volume[1].positiveFlow[3]
stack.feed_Anode.volume[1].positiveFlow[4]
stack.feed_Anode.basicHeatTransfer.n
stack.feed_Anode.basicHeatTransfer.Aheatloss
stack.feed_Anode.basicHeatTransfer.kc
stack.feed_Anode.basicHeatTransfer.infiniteHT
stack.feed_Anode.basicHeatTransfer.variableKc
stack.feed_Anode.frictionLoss[1].portB.X_outflow[1]
stack.feed_Anode.frictionLoss[1].portB.X_outflow[2]
stack.feed_Anode.frictionLoss[1].portB.X_outflow[3]
stack.feed_Anode.frictionLoss[1].portB.X_outflow[4]
stack.feed_Anode.frictionLoss[1].portB.X_outflow[5]
stack.feed_Anode.frictionLoss[1].portB.X_outflow[6]
stack.feed_Anode.frictionLoss[1].portB.X_outflow[7]
stack.feed_Anode.frictionLoss[1].T_start
stack.feed_Anode.frictionLoss[1].mflow_start
stack.feed_Anode.frictionLoss[1].positiveFlow
stack.feed_Anode.frictionLoss[1].dp_asState
stack.feed_Anode.frictionLoss[1].dp
stack.feed_Anode.frictionLoss[1].d
stack.feed_Anode.frictionLoss[1].state_in.p
stack.feed_Anode.frictionLoss[1].state_in.T
stack.feed_Anode.frictionLoss[1].state_in.X[1]
stack.feed_Anode.frictionLoss[1].state_in.X[2]
stack.feed_Anode.frictionLoss[1].state_in.X[3]
stack.feed_Anode.frictionLoss[1].state_in.X[4]
stack.feed_Anode.frictionLoss[1].state_in.X[5]
stack.feed_Anode.frictionLoss[1].state_in.X[6]
stack.feed_Anode.frictionLoss[1].state_in.X[7]
stack.feed_Anode.frictionLoss[1].stateB_in.p
stack.feed_Anode.frictionLoss[1].stateB_in.T
stack.feed_Anode.frictionLoss[1].stateB_in.X[1]
stack.feed_Anode.frictionLoss[1].stateB_in.X[2]
stack.feed_Anode.frictionLoss[1].stateB_in.X[3]
stack.feed_Anode.frictionLoss[1].stateB_in.X[4]
stack.feed_Anode.frictionLoss[1].stateB_in.X[5]
stack.feed_Anode.frictionLoss[1].stateB_in.X[6]
stack.feed_Anode.frictionLoss[1].stateB_in.X[7]
stack.feed_Anode.frictionLoss[1].state_out.p
stack.feed_Anode.frictionLoss[1].state_out.T
stack.feed_Anode.frictionLoss[1].state_out.X[1]
stack.feed_Anode.frictionLoss[1].state_out.X[2]
stack.feed_Anode.frictionLoss[1].state_out.X[3]
stack.feed_Anode.frictionLoss[1].state_out.X[4]
stack.feed_Anode.frictionLoss[1].state_out.X[5]
stack.feed_Anode.frictionLoss[1].state_out.X[6]
stack.feed_Anode.frictionLoss[1].state_out.X[7]
stack.feed_Anode.frictionLoss[1].from_dp
stack.feed_Anode.frictionLoss[1].dp_smooth
stack.feed_Anode.frictionLoss[1].mflow_smooth
stack.feed_Anode.frictionLoss[1].dynamicModel
stack.feed_Anode.frictionLoss[1].T_mflow
stack.feed_Anode.frictionLoss[1].summary.V_flow
stack.feed_Anode.frictionLoss[1].friction.from_dp
stack.feed_Anode.frictionLoss[1].friction.positiveFlow
stack.feed_Anode.frictionLoss[1].friction.dp_smooth
stack.feed_Anode.frictionLoss[1].friction.mflow_smooth
stack.feed_Anode.frictionLoss[1].friction.useFixedDensity
stack.feed_Anode.frictionLoss[1].friction.reference_d
stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[1]
stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[2]
stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[3]
stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[4]
stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[5]
stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[6]
stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[7]
stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[1]
stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[2]
stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[3]
stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[4]
stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[5]
stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[6]
stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[7]
stack.feed_Anode.frictionLoss[1].friction.dA
stack.feed_Anode.frictionLoss[1].friction.dB
stack.feed_Anode.frictionLoss[1].friction.d0
stack.feed_Anode.frictionLoss[1].friction.dp0
stack.feed_Anode.frictionLoss[1].friction.m_flow0
stack.feed_Anode.frictionLoss[2].portB.X_outflow[1]
stack.feed_Anode.frictionLoss[2].portB.X_outflow[2]
stack.feed_Anode.frictionLoss[2].portB.X_outflow[3]
stack.feed_Anode.frictionLoss[2].portB.X_outflow[4]
stack.feed_Anode.frictionLoss[2].portB.X_outflow[5]
stack.feed_Anode.frictionLoss[2].portB.X_outflow[6]
stack.feed_Anode.frictionLoss[2].portB.X_outflow[7]
stack.feed_Anode.frictionLoss[2].T_start
stack.feed_Anode.frictionLoss[2].mflow_start
stack.feed_Anode.frictionLoss[2].positiveFlow
stack.feed_Anode.frictionLoss[2].dp_asState
stack.feed_Anode.frictionLoss[2].dp
stack.feed_Anode.frictionLoss[2].d
stack.feed_Anode.frictionLoss[2].state_in.p
stack.feed_Anode.frictionLoss[2].state_in.T
stack.feed_Anode.frictionLoss[2].state_in.X[1]
stack.feed_Anode.frictionLoss[2].state_in.X[2]
stack.feed_Anode.frictionLoss[2].state_in.X[3]
stack.feed_Anode.frictionLoss[2].state_in.X[4]
stack.feed_Anode.frictionLoss[2].state_in.X[5]
stack.feed_Anode.frictionLoss[2].state_in.X[6]
stack.feed_Anode.frictionLoss[2].state_in.X[7]
stack.feed_Anode.frictionLoss[2].stateB_in.p
stack.feed_Anode.frictionLoss[2].stateB_in.T
stack.feed_Anode.frictionLoss[2].stateB_in.X[1]
stack.feed_Anode.frictionLoss[2].stateB_in.X[2]
stack.feed_Anode.frictionLoss[2].stateB_in.X[3]
stack.feed_Anode.frictionLoss[2].stateB_in.X[4]
stack.feed_Anode.frictionLoss[2].stateB_in.X[5]
stack.feed_Anode.frictionLoss[2].stateB_in.X[6]
stack.feed_Anode.frictionLoss[2].stateB_in.X[7]
stack.feed_Anode.frictionLoss[2].state_out.p
stack.feed_Anode.frictionLoss[2].state_out.T
stack.feed_Anode.frictionLoss[2].state_out.X[1]
stack.feed_Anode.frictionLoss[2].state_out.X[2]
stack.feed_Anode.frictionLoss[2].state_out.X[3]
stack.feed_Anode.frictionLoss[2].state_out.X[4]
stack.feed_Anode.frictionLoss[2].state_out.X[5]
stack.feed_Anode.frictionLoss[2].state_out.X[6]
stack.feed_Anode.frictionLoss[2].state_out.X[7]
stack.feed_Anode.frictionLoss[2].from_dp
stack.feed_Anode.frictionLoss[2].dp_smooth
stack.feed_Anode.frictionLoss[2].mflow_smooth
stack.feed_Anode.frictionLoss[2].dynamicModel
stack.feed_Anode.frictionLoss[2].T_mflow
stack.feed_Anode.frictionLoss[2].summary.V_flow
stack.feed_Anode.frictionLoss[2].friction.from_dp
stack.feed_Anode.frictionLoss[2].friction.positiveFlow
stack.feed_Anode.frictionLoss[2].friction.dp_smooth
stack.feed_Anode.frictionLoss[2].friction.mflow_smooth
stack.feed_Anode.frictionLoss[2].friction.useFixedDensity
stack.feed_Anode.frictionLoss[2].friction.reference_d
stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[1]
stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[2]
stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[3]
stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[4]
stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[5]
stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[6]
stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[7]
stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[1]
stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[2]
stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[3]
stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[4]
stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[5]
stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[6]
stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[7]
stack.feed_Anode.frictionLoss[2].friction.dA
stack.feed_Anode.frictionLoss[2].friction.dB
stack.feed_Anode.frictionLoss[2].friction.d0
stack.feed_Anode.frictionLoss[2].friction.dp0
stack.feed_Anode.frictionLoss[2].friction.m_flow0
stack.feed_Anode.frictionLoss[3].portB.X_outflow[1]
stack.feed_Anode.frictionLoss[3].portB.X_outflow[2]
stack.feed_Anode.frictionLoss[3].portB.X_outflow[3]
stack.feed_Anode.frictionLoss[3].portB.X_outflow[4]
stack.feed_Anode.frictionLoss[3].portB.X_outflow[5]
stack.feed_Anode.frictionLoss[3].portB.X_outflow[6]
stack.feed_Anode.frictionLoss[3].portB.X_outflow[7]
stack.feed_Anode.frictionLoss[3].T_start
stack.feed_Anode.frictionLoss[3].mflow_start
stack.feed_Anode.frictionLoss[3].positiveFlow
stack.feed_Anode.frictionLoss[3].dp_asState
stack.feed_Anode.frictionLoss[3].dp
stack.feed_Anode.frictionLoss[3].d
stack.feed_Anode.frictionLoss[3].state_in.p
stack.feed_Anode.frictionLoss[3].state_in.T
stack.feed_Anode.frictionLoss[3].state_in.X[1]
stack.feed_Anode.frictionLoss[3].state_in.X[2]
stack.feed_Anode.frictionLoss[3].state_in.X[3]
stack.feed_Anode.frictionLoss[3].state_in.X[4]
stack.feed_Anode.frictionLoss[3].state_in.X[5]
stack.feed_Anode.frictionLoss[3].state_in.X[6]
stack.feed_Anode.frictionLoss[3].state_in.X[7]
stack.feed_Anode.frictionLoss[3].stateB_in.p
stack.feed_Anode.frictionLoss[3].stateB_in.T
stack.feed_Anode.frictionLoss[3].stateB_in.X[1]
stack.feed_Anode.frictionLoss[3].stateB_in.X[2]
stack.feed_Anode.frictionLoss[3].stateB_in.X[3]
stack.feed_Anode.frictionLoss[3].stateB_in.X[4]
stack.feed_Anode.frictionLoss[3].stateB_in.X[5]
stack.feed_Anode.frictionLoss[3].stateB_in.X[6]
stack.feed_Anode.frictionLoss[3].stateB_in.X[7]
stack.feed_Anode.frictionLoss[3].state_out.p
stack.feed_Anode.frictionLoss[3].state_out.T
stack.feed_Anode.frictionLoss[3].state_out.X[1]
stack.feed_Anode.frictionLoss[3].state_out.X[2]
stack.feed_Anode.frictionLoss[3].state_out.X[3]
stack.feed_Anode.frictionLoss[3].state_out.X[4]
stack.feed_Anode.frictionLoss[3].state_out.X[5]
stack.feed_Anode.frictionLoss[3].state_out.X[6]
stack.feed_Anode.frictionLoss[3].state_out.X[7]
stack.feed_Anode.frictionLoss[3].from_dp
stack.feed_Anode.frictionLoss[3].dp_smooth
stack.feed_Anode.frictionLoss[3].mflow_smooth
stack.feed_Anode.frictionLoss[3].dynamicModel
stack.feed_Anode.frictionLoss[3].T_mflow
stack.feed_Anode.frictionLoss[3].summary.V_flow
stack.feed_Anode.frictionLoss[3].friction.from_dp
stack.feed_Anode.frictionLoss[3].friction.positiveFlow
stack.feed_Anode.frictionLoss[3].friction.dp_smooth
stack.feed_Anode.frictionLoss[3].friction.mflow_smooth
stack.feed_Anode.frictionLoss[3].friction.useFixedDensity
stack.feed_Anode.frictionLoss[3].friction.reference_d
stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[1]
stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[2]
stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[3]
stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[4]
stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[5]
stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[6]
stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[7]
stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[1]
stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[2]
stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[3]
stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[4]
stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[5]
stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[6]
stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[7]
stack.feed_Anode.frictionLoss[3].friction.dA
stack.feed_Anode.frictionLoss[3].friction.dB
stack.feed_Anode.frictionLoss[3].friction.d0
stack.feed_Anode.frictionLoss[3].friction.dp0
stack.feed_Anode.frictionLoss[3].friction.m_flow0
stack.feed_Anode.summary.nbr
stack.feed_Anode.summary.V_tot
stack.feed_Anode.summary.dp[1]
stack.feed_Anode.summary.dp[2]
stack.feed_Anode.summary.dp[3]
stack.feed_Anode.lambda_fluid
stack.feed_Anode.width
stack.feed_Anode.depth
stack.feed_Anode.thermalCollector.m
stack.feed_Anode.thermalCollector.port_b.Q_flow
stack.feed_Anode.pstart[1]
stack.feed_Anode.Dhyd
stack.feed_Cathode.initFromEnthalpy
stack.feed_Cathode.h_start
stack.feed_Cathode.T_start
stack.feed_Cathode.dp_start
stack.feed_Cathode.m_flow_start
stack.feed_Cathode.height
stack.feed_Cathode.positiveFlow
stack.feed_Cathode.N_drain
stack.feed_Cathode.heat_port[1].Q_flow
stack.feed_Cathode.heat_port[2].Q_flow
stack.feed_Cathode.heat_port[3].Q_flow
stack.feed_Cathode.drain[1].m_flow
stack.feed_Cathode.drain[2].m_flow
stack.feed_Cathode.drain[3].m_flow
stack.feed_Cathode.pi
stack.feed_Cathode.n_volumes
stack.feed_Cathode.V_tot
stack.feed_Cathode.Nusselt_nbr
stack.feed_Cathode.pstart_in
stack.feed_Cathode.volume[1].der(V)
stack.feed_Cathode.volume[1].initOpt
stack.feed_Cathode.volume[1].initFromEnthalpy
stack.feed_Cathode.volume[1].p_start
stack.feed_Cathode.volume[1].T_start
stack.feed_Cathode.volume[1].h_start
stack.feed_Cathode.volume[1].X_start[1]
stack.feed_Cathode.volume[1].X_start[2]
stack.feed_Cathode.volume[1].X_start[3]
stack.feed_Cathode.volume[1].X_start[4]
stack.feed_Cathode.volume[1].X_start[5]
stack.feed_Cathode.volume[1].mXs_flow[1]
stack.feed_Cathode.volume[1].mXs_flow[2]
stack.feed_Cathode.volume[1].mXs_flow[3]
stack.feed_Cathode.volume[1].mXs_flow[4]
stack.feed_Cathode.volume[1].mXs_flow[5]
stack.feed_Cathode.volume[1].Q_add
stack.feed_Cathode.volume[1].m
stack.feed_Cathode.volume[1].N
stack.feed_Cathode.volume[1].port[2].X_outflow[1]
stack.feed_Cathode.volume[1].port[2].X_outflow[2]
stack.feed_Cathode.volume[1].port[2].X_outflow[3]
stack.feed_Cathode.volume[1].port[2].X_outflow[4]
stack.feed_Cathode.volume[1].port[2].X_outflow[5]
stack.feed_Cathode.volume[1].port[3].X_outflow[1]
stack.feed_Cathode.volume[1].port[3].X_outflow[2]
stack.feed_Cathode.volume[1].port[3].X_outflow[3]
stack.feed_Cathode.volume[1].port[3].X_outflow[4]
stack.feed_Cathode.volume[1].port[3].X_outflow[5]
stack.feed_Cathode.volume[1].port[4].X_outflow[1]
stack.feed_Cathode.volume[1].port[4].X_outflow[2]
stack.feed_Cathode.volume[1].port[4].X_outflow[3]
stack.feed_Cathode.volume[1].port[4].X_outflow[4]
stack.feed_Cathode.volume[1].port[4].X_outflow[5]
stack.feed_Cathode.volume[1].thermalDynamics
stack.feed_Cathode.volume[1].realTimeMode
stack.feed_Cathode.volume[1].stepSize
stack.feed_Cathode.volume[1].der_p_factor
stack.feed_Cathode.volume[1].h_in
stack.feed_Cathode.volume[1].T_in
stack.feed_Cathode.volume[1].X_in[1]
stack.feed_Cathode.volume[1].X_in[2]
stack.feed_Cathode.volume[1].X_in[3]
stack.feed_Cathode.volume[1].X_in[4]
stack.feed_Cathode.volume[1].X_in[5]
stack.feed_Cathode.volume[1].state_default.p
stack.feed_Cathode.volume[1].state_default.T
stack.feed_Cathode.volume[1].state_default.X[1]
stack.feed_Cathode.volume[1].state_default.X[2]
stack.feed_Cathode.volume[1].state_default.X[3]
stack.feed_Cathode.volume[1].state_default.X[4]
stack.feed_Cathode.volume[1].state_default.X[5]
stack.feed_Cathode.volume[1].m_flow_in[1]
stack.feed_Cathode.volume[1].m_flow_in[2]
stack.feed_Cathode.volume[1].m_flow_in[3]
stack.feed_Cathode.volume[1].m_flow_in[4]
stack.feed_Cathode.volume[1].H_flow_in[1]
stack.feed_Cathode.volume[1].H_flow_in[2]
stack.feed_Cathode.volume[1].H_flow_in[3]
stack.feed_Cathode.volume[1].H_flow_in[4]
stack.feed_Cathode.volume[1].MX_flow_in[1, 1]
stack.feed_Cathode.volume[1].MX_flow_in[1, 2]
stack.feed_Cathode.volume[1].MX_flow_in[1, 3]
stack.feed_Cathode.volume[1].MX_flow_in[1, 4]
stack.feed_Cathode.volume[1].MX_flow_in[1, 5]
stack.feed_Cathode.volume[1].MX_flow_in[2, 1]
stack.feed_Cathode.volume[1].MX_flow_in[2, 2]
stack.feed_Cathode.volume[1].MX_flow_in[2, 3]
stack.feed_Cathode.volume[1].MX_flow_in[2, 4]
stack.feed_Cathode.volume[1].MX_flow_in[2, 5]
stack.feed_Cathode.volume[1].MX_flow_in[3, 1]
stack.feed_Cathode.volume[1].MX_flow_in[3, 2]
stack.feed_Cathode.volume[1].MX_flow_in[3, 3]
stack.feed_Cathode.volume[1].MX_flow_in[3, 4]
stack.feed_Cathode.volume[1].MX_flow_in[3, 5]
stack.feed_Cathode.volume[1].MX_flow_in[4, 1]
stack.feed_Cathode.volume[1].MX_flow_in[4, 2]
stack.feed_Cathode.volume[1].MX_flow_in[4, 3]
stack.feed_Cathode.volume[1].MX_flow_in[4, 4]
stack.feed_Cathode.volume[1].MX_flow_in[4, 5]
stack.feed_Cathode.volume[1].dE
stack.feed_Cathode.volume[1].dMX[1]
stack.feed_Cathode.volume[1].dMX[2]
stack.feed_Cathode.volume[1].dMX[3]
stack.feed_Cathode.volume[1].dMX[4]
stack.feed_Cathode.volume[1].dMX[5]
stack.feed_Cathode.volume[1].H_flow[1]
stack.feed_Cathode.volume[1].H_flow[2]
stack.feed_Cathode.volume[1].H_flow[3]
stack.feed_Cathode.volume[1].H_flow[4]
stack.feed_Cathode.volume[1].MX_flow[1, 1]
stack.feed_Cathode.volume[1].MX_flow[1, 2]
stack.feed_Cathode.volume[1].MX_flow[1, 3]
stack.feed_Cathode.volume[1].MX_flow[1, 4]
stack.feed_Cathode.volume[1].MX_flow[1, 5]
stack.feed_Cathode.volume[1].MX_flow[2, 1]
stack.feed_Cathode.volume[1].MX_flow[2, 2]
stack.feed_Cathode.volume[1].MX_flow[2, 3]
stack.feed_Cathode.volume[1].MX_flow[2, 4]
stack.feed_Cathode.volume[1].MX_flow[2, 5]
stack.feed_Cathode.volume[1].MX_flow[3, 1]
stack.feed_Cathode.volume[1].MX_flow[3, 2]
stack.feed_Cathode.volume[1].MX_flow[3, 3]
stack.feed_Cathode.volume[1].MX_flow[3, 4]
stack.feed_Cathode.volume[1].MX_flow[3, 5]
stack.feed_Cathode.volume[1].MX_flow[4, 1]
stack.feed_Cathode.volume[1].MX_flow[4, 2]
stack.feed_Cathode.volume[1].MX_flow[4, 3]
stack.feed_Cathode.volume[1].MX_flow[4, 4]
stack.feed_Cathode.volume[1].MX_flow[4, 5]
stack.feed_Cathode.volume[1].M
stack.feed_Cathode.volume[1].fluid.quasiStatic
stack.feed_Cathode.volume[1].fluid.thermalDynamics
stack.feed_Cathode.volume[1].fluid.realTimeMode
stack.feed_Cathode.volume[1].fluid.stepSize
stack.feed_Cathode.volume[1].fluid.der_p_factor
stack.feed_Cathode.volume[1].fluid.initOpt
stack.feed_Cathode.volume[1].fluid.T_start
stack.feed_Cathode.volume[1].fluid.p_start
stack.feed_Cathode.volume[1].fluid.h_start
stack.feed_Cathode.volume[1].fluid.X_start[1]
stack.feed_Cathode.volume[1].fluid.X_start[2]
stack.feed_Cathode.volume[1].fluid.X_start[3]
stack.feed_Cathode.volume[1].fluid.X_start[4]
stack.feed_Cathode.volume[1].fluid.X_start[5]
stack.feed_Cathode.volume[1].fluid.ns
stack.feed_Cathode.volume[1].fluid.nC
stack.feed_Cathode.volume[1].fluid.der(V_tot)
stack.feed_Cathode.volume[1].fluid.p
stack.feed_Cathode.volume[1].fluid.der(p)
stack.feed_Cathode.volume[1].fluid.d
stack.feed_Cathode.volume[1].fluid.T
stack.feed_Cathode.volume[1].fluid.der(T)
stack.feed_Cathode.volume[1].fluid.X[1]
stack.feed_Cathode.volume[1].fluid.der(X[1])
stack.feed_Cathode.volume[1].fluid.X[2]
stack.feed_Cathode.volume[1].fluid.der(X[2])
stack.feed_Cathode.volume[1].fluid.X[3]
stack.feed_Cathode.volume[1].fluid.der(X[3])
stack.feed_Cathode.volume[1].fluid.X[4]
stack.feed_Cathode.volume[1].fluid.der(X[4])
stack.feed_Cathode.volume[1].fluid.X[5]
stack.feed_Cathode.volume[1].fluid.state.p
stack.feed_Cathode.volume[1].fluid.state.T
stack.feed_Cathode.volume[1].fluid.state.X[1]
stack.feed_Cathode.volume[1].fluid.state.X[2]
stack.feed_Cathode.volume[1].fluid.state.X[3]
stack.feed_Cathode.volume[1].fluid.state.X[4]
stack.feed_Cathode.volume[1].fluid.state.X[5]
stack.feed_Cathode.volume[1].fluid.u
stack.feed_Cathode.volume[1].fluid.v
stack.feed_Cathode.volume[1].fluid.MX[1]
stack.feed_Cathode.volume[1].fluid.MX[2]
stack.feed_Cathode.volume[1].fluid.MX[3]
stack.feed_Cathode.volume[1].fluid.MX[4]
stack.feed_Cathode.volume[1].fluid.MX[5]
stack.feed_Cathode.volume[1].fluid.M
stack.feed_Cathode.volume[1].fluid.E
stack.feed_Cathode.volume[1].fluid.R
stack.feed_Cathode.volume[1].fluid.dM
stack.feed_Cathode.volume[1].fluid.dX[5]
stack.feed_Cathode.volume[1].fluid.R_g[1]
stack.feed_Cathode.volume[1].fluid.R_g[2]
stack.feed_Cathode.volume[1].fluid.R_g[3]
stack.feed_Cathode.volume[1].fluid.R_g[4]
stack.feed_Cathode.volume[1].fluid.R_g[5]
stack.feed_Cathode.volume[1].fluid.dd
stack.feed_Cathode.volume[1].fluid.dv
stack.feed_Cathode.volume[1].fluid.du
stack.feed_Cathode.volume[1].fluid.du_dX[1]
stack.feed_Cathode.volume[1].fluid.du_dX[2]
stack.feed_Cathode.volume[1].fluid.du_dX[3]
stack.feed_Cathode.volume[1].fluid.du_dX[4]
stack.feed_Cathode.volume[1].fluid.du_dX[5]
stack.feed_Cathode.volume[1].usePositiveFlow
stack.feed_Cathode.volume[1].positiveFlow[1]
stack.feed_Cathode.volume[1].positiveFlow[2]
stack.feed_Cathode.volume[1].positiveFlow[3]
stack.feed_Cathode.volume[1].positiveFlow[4]
stack.feed_Cathode.basicHeatTransfer.n
stack.feed_Cathode.basicHeatTransfer.Aheatloss
stack.feed_Cathode.basicHeatTransfer.kc
stack.feed_Cathode.basicHeatTransfer.infiniteHT
stack.feed_Cathode.basicHeatTransfer.variableKc
stack.feed_Cathode.frictionLoss[1].portB.X_outflow[1]
stack.feed_Cathode.frictionLoss[1].portB.X_outflow[2]
stack.feed_Cathode.frictionLoss[1].portB.X_outflow[3]
stack.feed_Cathode.frictionLoss[1].portB.X_outflow[4]
stack.feed_Cathode.frictionLoss[1].portB.X_outflow[5]
stack.feed_Cathode.frictionLoss[1].T_start
stack.feed_Cathode.frictionLoss[1].mflow_start
stack.feed_Cathode.frictionLoss[1].positiveFlow
stack.feed_Cathode.frictionLoss[1].dp_asState
stack.feed_Cathode.frictionLoss[1].dp
stack.feed_Cathode.frictionLoss[1].d
stack.feed_Cathode.frictionLoss[1].T_in
stack.feed_Cathode.frictionLoss[1].TB_in
stack.feed_Cathode.frictionLoss[1].T_out
stack.feed_Cathode.frictionLoss[1].state_in.X[1]
stack.feed_Cathode.frictionLoss[1].state_in.X[2]
stack.feed_Cathode.frictionLoss[1].state_in.X[3]
stack.feed_Cathode.frictionLoss[1].state_in.X[4]
stack.feed_Cathode.frictionLoss[1].state_in.X[5]
stack.feed_Cathode.frictionLoss[1].from_dp
stack.feed_Cathode.frictionLoss[1].dp_smooth
stack.feed_Cathode.frictionLoss[1].mflow_smooth
stack.feed_Cathode.frictionLoss[1].dynamicModel
stack.feed_Cathode.frictionLoss[1].T_mflow
stack.feed_Cathode.frictionLoss[1].summary.V_flow
stack.feed_Cathode.frictionLoss[1].friction.from_dp
stack.feed_Cathode.frictionLoss[1].friction.positiveFlow
stack.feed_Cathode.frictionLoss[1].friction.dp_smooth
stack.feed_Cathode.frictionLoss[1].friction.mflow_smooth
stack.feed_Cathode.frictionLoss[1].friction.useFixedDensity
stack.feed_Cathode.frictionLoss[1].friction.reference_d
stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[1]
stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[2]
stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[3]
stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[4]
stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[5]
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[1]
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[2]
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[3]
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[4]
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[5]
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[1])
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[2])
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[3])
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[4])
stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[5])
stack.feed_Cathode.frictionLoss[1].friction.dA
stack.feed_Cathode.frictionLoss[1].friction.dB
stack.feed_Cathode.frictionLoss[1].friction.d0
stack.feed_Cathode.frictionLoss[1].friction.dp0
stack.feed_Cathode.frictionLoss[1].friction.m_flow0
stack.feed_Cathode.frictionLoss[2].portB.X_outflow[1]
stack.feed_Cathode.frictionLoss[2].portB.X_outflow[2]
stack.feed_Cathode.frictionLoss[2].portB.X_outflow[3]
stack.feed_Cathode.frictionLoss[2].portB.X_outflow[4]
stack.feed_Cathode.frictionLoss[2].portB.X_outflow[5]
stack.feed_Cathode.frictionLoss[2].T_start
stack.feed_Cathode.frictionLoss[2].mflow_start
stack.feed_Cathode.frictionLoss[2].positiveFlow
stack.feed_Cathode.frictionLoss[2].dp_asState
stack.feed_Cathode.frictionLoss[2].dp
stack.feed_Cathode.frictionLoss[2].d
stack.feed_Cathode.frictionLoss[2].T_in
stack.feed_Cathode.frictionLoss[2].TB_in
stack.feed_Cathode.frictionLoss[2].T_out
stack.feed_Cathode.frictionLoss[2].state_in.X[1]
stack.feed_Cathode.frictionLoss[2].state_in.X[2]
stack.feed_Cathode.frictionLoss[2].state_in.X[3]
stack.feed_Cathode.frictionLoss[2].state_in.X[4]
stack.feed_Cathode.frictionLoss[2].state_in.X[5]
stack.feed_Cathode.frictionLoss[2].from_dp
stack.feed_Cathode.frictionLoss[2].dp_smooth
stack.feed_Cathode.frictionLoss[2].mflow_smooth
stack.feed_Cathode.frictionLoss[2].dynamicModel
stack.feed_Cathode.frictionLoss[2].T_mflow
stack.feed_Cathode.frictionLoss[2].summary.V_flow
stack.feed_Cathode.frictionLoss[2].friction.from_dp
stack.feed_Cathode.frictionLoss[2].friction.positiveFlow
stack.feed_Cathode.frictionLoss[2].friction.dp_smooth
stack.feed_Cathode.frictionLoss[2].friction.mflow_smooth
stack.feed_Cathode.frictionLoss[2].friction.useFixedDensity
stack.feed_Cathode.frictionLoss[2].friction.reference_d
stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[1]
stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[2]
stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[3]
stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[4]
stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[5]
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[1]
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[2]
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[3]
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[4]
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[5]
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[1])
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[2])
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[3])
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[4])
stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[5])
stack.feed_Cathode.frictionLoss[2].friction.dA
stack.feed_Cathode.frictionLoss[2].friction.dB
stack.feed_Cathode.frictionLoss[2].friction.d0
stack.feed_Cathode.frictionLoss[2].friction.dp0
stack.feed_Cathode.frictionLoss[2].friction.m_flow0
stack.feed_Cathode.frictionLoss[3].portB.X_outflow[1]
stack.feed_Cathode.frictionLoss[3].portB.X_outflow[2]
stack.feed_Cathode.frictionLoss[3].portB.X_outflow[3]
stack.feed_Cathode.frictionLoss[3].portB.X_outflow[4]
stack.feed_Cathode.frictionLoss[3].portB.X_outflow[5]
stack.feed_Cathode.frictionLoss[3].T_start
stack.feed_Cathode.frictionLoss[3].mflow_start
stack.feed_Cathode.frictionLoss[3].positiveFlow
stack.feed_Cathode.frictionLoss[3].dp_asState
stack.feed_Cathode.frictionLoss[3].dp
stack.feed_Cathode.frictionLoss[3].d
stack.feed_Cathode.frictionLoss[3].T_in
stack.feed_Cathode.frictionLoss[3].TB_in
stack.feed_Cathode.frictionLoss[3].T_out
stack.feed_Cathode.frictionLoss[3].state_in.X[1]
stack.feed_Cathode.frictionLoss[3].state_in.X[2]
stack.feed_Cathode.frictionLoss[3].state_in.X[3]
stack.feed_Cathode.frictionLoss[3].state_in.X[4]
stack.feed_Cathode.frictionLoss[3].state_in.X[5]
stack.feed_Cathode.frictionLoss[3].from_dp
stack.feed_Cathode.frictionLoss[3].dp_smooth
stack.feed_Cathode.frictionLoss[3].mflow_smooth
stack.feed_Cathode.frictionLoss[3].dynamicModel
stack.feed_Cathode.frictionLoss[3].T_mflow
stack.feed_Cathode.frictionLoss[3].summary.V_flow
stack.feed_Cathode.frictionLoss[3].friction.from_dp
stack.feed_Cathode.frictionLoss[3].friction.positiveFlow
stack.feed_Cathode.frictionLoss[3].friction.dp_smooth
stack.feed_Cathode.frictionLoss[3].friction.mflow_smooth
stack.feed_Cathode.frictionLoss[3].friction.useFixedDensity
stack.feed_Cathode.frictionLoss[3].friction.reference_d
stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[1]
stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[2]
stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[3]
stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[4]
stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[5]
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[1]
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[2]
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[3]
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[4]
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[5]
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[1])
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[2])
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[3])
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[4])
stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[5])
stack.feed_Cathode.frictionLoss[3].friction.dA
stack.feed_Cathode.frictionLoss[3].friction.dB
stack.feed_Cathode.frictionLoss[3].friction.d0
stack.feed_Cathode.frictionLoss[3].friction.dp0
stack.feed_Cathode.frictionLoss[3].friction.m_flow0
stack.feed_Cathode.summary.nbr
stack.feed_Cathode.summary.V_tot
stack.feed_Cathode.summary.dp[1]
stack.feed_Cathode.summary.dp[2]
stack.feed_Cathode.summary.dp[3]
stack.feed_Cathode.lambda_fluid
stack.feed_Cathode.width
stack.feed_Cathode.depth
stack.feed_Cathode.thermalCollector.m
stack.feed_Cathode.thermalCollector.port_b.Q_flow
stack.feed_Cathode.pstart[1]
stack.feed_Cathode.Dhyd
stack.drain_Anode.initFromEnthalpy
stack.drain_Anode.h_start
stack.drain_Anode.T_start
stack.drain_Anode.dp_start
stack.drain_Anode.m_flow_start
stack.drain_Anode.height
stack.drain_Anode.positiveFlow
stack.drain_Anode.N_feed
stack.drain_Anode.heat_port[1].Q_flow
stack.drain_Anode.heat_port[2].Q_flow
stack.drain_Anode.heat_port[3].Q_flow
stack.drain_Anode.feed[1].m_flow
stack.drain_Anode.feed[2].m_flow
stack.drain_Anode.feed[3].m_flow
stack.drain_Anode.pi
stack.drain_Anode.n_volumes
stack.drain_Anode.V_tot
stack.drain_Anode.Nusselt_nbr
stack.drain_Anode.pstart_out
stack.drain_Anode.volume[1].V
stack.drain_Anode.volume[1].der(V)
stack.drain_Anode.volume[1].initOpt
stack.drain_Anode.volume[1].initFromEnthalpy
stack.drain_Anode.volume[1].p_start
stack.drain_Anode.volume[1].T_start
stack.drain_Anode.volume[1].h_start
stack.drain_Anode.volume[1].X_start[1]
stack.drain_Anode.volume[1].X_start[2]
stack.drain_Anode.volume[1].X_start[3]
stack.drain_Anode.volume[1].X_start[4]
stack.drain_Anode.volume[1].X_start[5]
stack.drain_Anode.volume[1].X_start[6]
stack.drain_Anode.volume[1].X_start[7]
stack.drain_Anode.volume[1].mXs_flow[1]
stack.drain_Anode.volume[1].mXs_flow[2]
stack.drain_Anode.volume[1].mXs_flow[3]
stack.drain_Anode.volume[1].mXs_flow[4]
stack.drain_Anode.volume[1].mXs_flow[5]
stack.drain_Anode.volume[1].mXs_flow[6]
stack.drain_Anode.volume[1].mXs_flow[7]
stack.drain_Anode.volume[1].Q_add
stack.drain_Anode.volume[1].m
stack.drain_Anode.volume[1].N
stack.drain_Anode.volume[1].port[4].X_outflow[1]
stack.drain_Anode.volume[1].port[4].X_outflow[2]
stack.drain_Anode.volume[1].port[4].X_outflow[3]
stack.drain_Anode.volume[1].port[4].X_outflow[4]
stack.drain_Anode.volume[1].port[4].X_outflow[5]
stack.drain_Anode.volume[1].port[4].X_outflow[6]
stack.drain_Anode.volume[1].port[4].X_outflow[7]
stack.drain_Anode.volume[1].thermalDynamics
stack.drain_Anode.volume[1].realTimeMode
stack.drain_Anode.volume[1].stepSize
stack.drain_Anode.volume[1].der_p_factor
stack.drain_Anode.volume[1].h_in
stack.drain_Anode.volume[1].X_in[1]
stack.drain_Anode.volume[1].X_in[2]
stack.drain_Anode.volume[1].X_in[3]
stack.drain_Anode.volume[1].X_in[4]
stack.drain_Anode.volume[1].X_in[5]
stack.drain_Anode.volume[1].X_in[6]
stack.drain_Anode.volume[1].X_in[7]
stack.drain_Anode.volume[1].state_in.p
stack.drain_Anode.volume[1].state_in.T
stack.drain_Anode.volume[1].state_in.X[1]
stack.drain_Anode.volume[1].state_in.X[2]
stack.drain_Anode.volume[1].state_in.X[3]
stack.drain_Anode.volume[1].state_in.X[4]
stack.drain_Anode.volume[1].state_in.X[5]
stack.drain_Anode.volume[1].state_in.X[6]
stack.drain_Anode.volume[1].state_in.X[7]
stack.drain_Anode.volume[1].state_default.p
stack.drain_Anode.volume[1].state_default.T
stack.drain_Anode.volume[1].state_default.X[1]
stack.drain_Anode.volume[1].state_default.X[2]
stack.drain_Anode.volume[1].state_default.X[3]
stack.drain_Anode.volume[1].state_default.X[4]
stack.drain_Anode.volume[1].state_default.X[5]
stack.drain_Anode.volume[1].state_default.X[6]
stack.drain_Anode.volume[1].state_default.X[7]
stack.drain_Anode.volume[1].m_flow_in[1]
stack.drain_Anode.volume[1].m_flow_in[2]
stack.drain_Anode.volume[1].m_flow_in[3]
stack.drain_Anode.volume[1].m_flow_in[4]
stack.drain_Anode.volume[1].H_flow_in[1]
stack.drain_Anode.volume[1].H_flow_in[2]
stack.drain_Anode.volume[1].H_flow_in[3]
stack.drain_Anode.volume[1].H_flow_in[4]
stack.drain_Anode.volume[1].MX_flow_in[1, 1]
stack.drain_Anode.volume[1].MX_flow_in[1, 2]
stack.drain_Anode.volume[1].MX_flow_in[1, 3]
stack.drain_Anode.volume[1].MX_flow_in[1, 4]
stack.drain_Anode.volume[1].MX_flow_in[1, 5]
stack.drain_Anode.volume[1].MX_flow_in[1, 6]
stack.drain_Anode.volume[1].MX_flow_in[1, 7]
stack.drain_Anode.volume[1].MX_flow_in[2, 1]
stack.drain_Anode.volume[1].MX_flow_in[2, 2]
stack.drain_Anode.volume[1].MX_flow_in[2, 3]
stack.drain_Anode.volume[1].MX_flow_in[2, 4]
stack.drain_Anode.volume[1].MX_flow_in[2, 5]
stack.drain_Anode.volume[1].MX_flow_in[2, 6]
stack.drain_Anode.volume[1].MX_flow_in[2, 7]
stack.drain_Anode.volume[1].MX_flow_in[3, 1]
stack.drain_Anode.volume[1].MX_flow_in[3, 2]
stack.drain_Anode.volume[1].MX_flow_in[3, 3]
stack.drain_Anode.volume[1].MX_flow_in[3, 4]
stack.drain_Anode.volume[1].MX_flow_in[3, 5]
stack.drain_Anode.volume[1].MX_flow_in[3, 6]
stack.drain_Anode.volume[1].MX_flow_in[3, 7]
stack.drain_Anode.volume[1].MX_flow_in[4, 1]
stack.drain_Anode.volume[1].MX_flow_in[4, 2]
stack.drain_Anode.volume[1].MX_flow_in[4, 3]
stack.drain_Anode.volume[1].MX_flow_in[4, 4]
stack.drain_Anode.volume[1].MX_flow_in[4, 5]
stack.drain_Anode.volume[1].MX_flow_in[4, 6]
stack.drain_Anode.volume[1].MX_flow_in[4, 7]
stack.drain_Anode.volume[1].dE
stack.drain_Anode.volume[1].dMX[1]
stack.drain_Anode.volume[1].dMX[2]
stack.drain_Anode.volume[1].dMX[3]
stack.drain_Anode.volume[1].dMX[4]
stack.drain_Anode.volume[1].dMX[5]
stack.drain_Anode.volume[1].dMX[6]
stack.drain_Anode.volume[1].dMX[7]
stack.drain_Anode.volume[1].H_flow[1]
stack.drain_Anode.volume[1].H_flow[2]
stack.drain_Anode.volume[1].H_flow[3]
stack.drain_Anode.volume[1].H_flow[4]
stack.drain_Anode.volume[1].MX_flow[1, 1]
stack.drain_Anode.volume[1].MX_flow[1, 2]
stack.drain_Anode.volume[1].MX_flow[1, 3]
stack.drain_Anode.volume[1].MX_flow[1, 4]
stack.drain_Anode.volume[1].MX_flow[1, 5]
stack.drain_Anode.volume[1].MX_flow[1, 6]
stack.drain_Anode.volume[1].MX_flow[1, 7]
stack.drain_Anode.volume[1].MX_flow[2, 1]
stack.drain_Anode.volume[1].MX_flow[2, 2]
stack.drain_Anode.volume[1].MX_flow[2, 3]
stack.drain_Anode.volume[1].MX_flow[2, 4]
stack.drain_Anode.volume[1].MX_flow[2, 5]
stack.drain_Anode.volume[1].MX_flow[2, 6]
stack.drain_Anode.volume[1].MX_flow[2, 7]
stack.drain_Anode.volume[1].MX_flow[3, 1]
stack.drain_Anode.volume[1].MX_flow[3, 2]
stack.drain_Anode.volume[1].MX_flow[3, 3]
stack.drain_Anode.volume[1].MX_flow[3, 4]
stack.drain_Anode.volume[1].MX_flow[3, 5]
stack.drain_Anode.volume[1].MX_flow[3, 6]
stack.drain_Anode.volume[1].MX_flow[3, 7]
stack.drain_Anode.volume[1].MX_flow[4, 1]
stack.drain_Anode.volume[1].MX_flow[4, 2]
stack.drain_Anode.volume[1].MX_flow[4, 3]
stack.drain_Anode.volume[1].MX_flow[4, 4]
stack.drain_Anode.volume[1].MX_flow[4, 5]
stack.drain_Anode.volume[1].MX_flow[4, 6]
stack.drain_Anode.volume[1].MX_flow[4, 7]
stack.drain_Anode.volume[1].M
stack.drain_Anode.volume[1].fluid.quasiStatic
stack.drain_Anode.volume[1].fluid.thermalDynamics
stack.drain_Anode.volume[1].fluid.realTimeMode
stack.drain_Anode.volume[1].fluid.stepSize
stack.drain_Anode.volume[1].fluid.der_p_factor
stack.drain_Anode.volume[1].fluid.initOpt
stack.drain_Anode.volume[1].fluid.T_start
stack.drain_Anode.volume[1].fluid.p_start
stack.drain_Anode.volume[1].fluid.h_start
stack.drain_Anode.volume[1].fluid.X_start[1]
stack.drain_Anode.volume[1].fluid.X_start[2]
stack.drain_Anode.volume[1].fluid.X_start[3]
stack.drain_Anode.volume[1].fluid.X_start[4]
stack.drain_Anode.volume[1].fluid.X_start[5]
stack.drain_Anode.volume[1].fluid.X_start[6]
stack.drain_Anode.volume[1].fluid.X_start[7]
stack.drain_Anode.volume[1].fluid.ns
stack.drain_Anode.volume[1].fluid.nC
stack.drain_Anode.volume[1].fluid.V_tot
stack.drain_Anode.volume[1].fluid.der(V_tot)
stack.drain_Anode.volume[1].fluid.p
stack.drain_Anode.volume[1].fluid.der(p)
stack.drain_Anode.volume[1].fluid.d
stack.drain_Anode.volume[1].fluid.T
stack.drain_Anode.volume[1].fluid.der(T)
stack.drain_Anode.volume[1].fluid.X[1]
stack.drain_Anode.volume[1].fluid.der(X[1])
stack.drain_Anode.volume[1].fluid.X[2]
stack.drain_Anode.volume[1].fluid.der(X[2])
stack.drain_Anode.volume[1].fluid.X[3]
stack.drain_Anode.volume[1].fluid.der(X[3])
stack.drain_Anode.volume[1].fluid.X[4]
stack.drain_Anode.volume[1].fluid.der(X[4])
stack.drain_Anode.volume[1].fluid.X[5]
stack.drain_Anode.volume[1].fluid.der(X[5])
stack.drain_Anode.volume[1].fluid.X[6]
stack.drain_Anode.volume[1].fluid.der(X[6])
stack.drain_Anode.volume[1].fluid.X[7]
stack.drain_Anode.volume[1].fluid.state.p
stack.drain_Anode.volume[1].fluid.state.T
stack.drain_Anode.volume[1].fluid.state.X[1]
stack.drain_Anode.volume[1].fluid.state.X[2]
stack.drain_Anode.volume[1].fluid.state.X[3]
stack.drain_Anode.volume[1].fluid.state.X[4]
stack.drain_Anode.volume[1].fluid.state.X[5]
stack.drain_Anode.volume[1].fluid.state.X[6]
stack.drain_Anode.volume[1].fluid.state.X[7]
stack.drain_Anode.volume[1].fluid.u
stack.drain_Anode.volume[1].fluid.v
stack.drain_Anode.volume[1].fluid.MX[1]
stack.drain_Anode.volume[1].fluid.MX[2]
stack.drain_Anode.volume[1].fluid.MX[3]
stack.drain_Anode.volume[1].fluid.MX[4]
stack.drain_Anode.volume[1].fluid.MX[5]
stack.drain_Anode.volume[1].fluid.MX[6]
stack.drain_Anode.volume[1].fluid.MX[7]
stack.drain_Anode.volume[1].fluid.M
stack.drain_Anode.volume[1].fluid.E
stack.drain_Anode.volume[1].fluid.R
stack.drain_Anode.volume[1].fluid.dM
stack.drain_Anode.volume[1].fluid.dX[7]
stack.drain_Anode.volume[1].fluid.R_g[1]
stack.drain_Anode.volume[1].fluid.R_g[2]
stack.drain_Anode.volume[1].fluid.R_g[3]
stack.drain_Anode.volume[1].fluid.R_g[4]
stack.drain_Anode.volume[1].fluid.R_g[5]
stack.drain_Anode.volume[1].fluid.R_g[6]
stack.drain_Anode.volume[1].fluid.R_g[7]
stack.drain_Anode.volume[1].fluid.dd
stack.drain_Anode.volume[1].fluid.dv
stack.drain_Anode.volume[1].fluid.du
stack.drain_Anode.volume[1].fluid.du_dX[1]
stack.drain_Anode.volume[1].fluid.du_dX[2]
stack.drain_Anode.volume[1].fluid.du_dX[3]
stack.drain_Anode.volume[1].fluid.du_dX[4]
stack.drain_Anode.volume[1].fluid.du_dX[5]
stack.drain_Anode.volume[1].fluid.du_dX[6]
stack.drain_Anode.volume[1].fluid.du_dX[7]
stack.drain_Anode.volume[1].usePositiveFlow
stack.drain_Anode.volume[1].positiveFlow[1]
stack.drain_Anode.volume[1].positiveFlow[2]
stack.drain_Anode.volume[1].positiveFlow[3]
stack.drain_Anode.volume[1].positiveFlow[4]
stack.drain_Anode.volume[1].summary.V
stack.drain_Anode.basicHeatTransfer.n
stack.drain_Anode.basicHeatTransfer.Aheatloss
stack.drain_Anode.basicHeatTransfer.kc
stack.drain_Anode.basicHeatTransfer.infiniteHT
stack.drain_Anode.basicHeatTransfer.variableKc
stack.drain_Anode.frictionLoss.portB.X_outflow[1]
stack.drain_Anode.frictionLoss.portB.X_outflow[2]
stack.drain_Anode.frictionLoss.portB.X_outflow[3]
stack.drain_Anode.frictionLoss.portB.X_outflow[4]
stack.drain_Anode.frictionLoss.portB.X_outflow[5]
stack.drain_Anode.frictionLoss.portB.X_outflow[6]
stack.drain_Anode.frictionLoss.portB.X_outflow[7]
stack.drain_Anode.frictionLoss.T_start
stack.drain_Anode.frictionLoss.mflow_start
stack.drain_Anode.frictionLoss.positiveFlow
stack.drain_Anode.frictionLoss.dp_asState
stack.drain_Anode.frictionLoss.dp
stack.drain_Anode.frictionLoss.d
stack.drain_Anode.frictionLoss.state_in.p
stack.drain_Anode.frictionLoss.state_in.T
stack.drain_Anode.frictionLoss.state_in.X[1]
stack.drain_Anode.frictionLoss.state_in.X[2]
stack.drain_Anode.frictionLoss.state_in.X[3]
stack.drain_Anode.frictionLoss.state_in.X[4]
stack.drain_Anode.frictionLoss.state_in.X[5]
stack.drain_Anode.frictionLoss.state_in.X[6]
stack.drain_Anode.frictionLoss.state_in.X[7]
stack.drain_Anode.frictionLoss.stateB_in.p
stack.drain_Anode.frictionLoss.stateB_in.T
stack.drain_Anode.frictionLoss.stateB_in.X[1]
stack.drain_Anode.frictionLoss.stateB_in.X[2]
stack.drain_Anode.frictionLoss.stateB_in.X[3]
stack.drain_Anode.frictionLoss.stateB_in.X[4]
stack.drain_Anode.frictionLoss.stateB_in.X[5]
stack.drain_Anode.frictionLoss.stateB_in.X[6]
stack.drain_Anode.frictionLoss.stateB_in.X[7]
stack.drain_Anode.frictionLoss.state_out.p
stack.drain_Anode.frictionLoss.state_out.T
stack.drain_Anode.frictionLoss.state_out.X[1]
stack.drain_Anode.frictionLoss.state_out.X[2]
stack.drain_Anode.frictionLoss.state_out.X[3]
stack.drain_Anode.frictionLoss.state_out.X[4]
stack.drain_Anode.frictionLoss.state_out.X[5]
stack.drain_Anode.frictionLoss.state_out.X[6]
stack.drain_Anode.frictionLoss.state_out.X[7]
stack.drain_Anode.frictionLoss.from_dp
stack.drain_Anode.frictionLoss.dp_smooth
stack.drain_Anode.frictionLoss.mflow_smooth
stack.drain_Anode.frictionLoss.dynamicModel
stack.drain_Anode.frictionLoss.T_mflow
stack.drain_Anode.frictionLoss.summary.V_flow
stack.drain_Anode.frictionLoss.friction.from_dp
stack.drain_Anode.frictionLoss.friction.positiveFlow
stack.drain_Anode.frictionLoss.friction.dp_smooth
stack.drain_Anode.frictionLoss.friction.mflow_smooth
stack.drain_Anode.frictionLoss.friction.useFixedDensity
stack.drain_Anode.frictionLoss.friction.reference_d
stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[1]
stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[2]
stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[3]
stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[4]
stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[5]
stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[6]
stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[7]
stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[1]
stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[2]
stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[3]
stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[4]
stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[5]
stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[6]
stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[7]
stack.drain_Anode.frictionLoss.friction.dA
stack.drain_Anode.frictionLoss.friction.dB
stack.drain_Anode.frictionLoss.friction.d0
stack.drain_Anode.frictionLoss.friction.dp0
stack.drain_Anode.frictionLoss.friction.m_flow0
stack.drain_Anode.summary.nbr
stack.drain_Anode.summary.V_tot
stack.drain_Anode.summary.dp[1]
stack.drain_Anode.summary.dp[2]
stack.drain_Anode.summary.dp[3]
stack.drain_Anode.lambda_fluid
stack.drain_Anode.width
stack.drain_Anode.depth
stack.drain_Anode.pstart[1]
stack.drain_Anode.Dhyd
stack.drain_Anode.thermalCollector.m
stack.drain_Anode.thermalCollector.port_b.Q_flow
stack.drain_Cathode.initFromEnthalpy
stack.drain_Cathode.h_start
stack.drain_Cathode.T_start
stack.drain_Cathode.dp_start
stack.drain_Cathode.m_flow_start
stack.drain_Cathode.height
stack.drain_Cathode.positiveFlow
stack.drain_Cathode.N_feed
stack.drain_Cathode.heat_port[1].Q_flow
stack.drain_Cathode.heat_port[2].Q_flow
stack.drain_Cathode.heat_port[3].Q_flow
stack.drain_Cathode.feed[1].m_flow
stack.drain_Cathode.feed[2].m_flow
stack.drain_Cathode.feed[3].m_flow
stack.drain_Cathode.pi
stack.drain_Cathode.n_volumes
stack.drain_Cathode.V_tot
stack.drain_Cathode.Nusselt_nbr
stack.drain_Cathode.pstart_out
stack.drain_Cathode.volume[1].V
stack.drain_Cathode.volume[1].der(V)
stack.drain_Cathode.volume[1].initOpt
stack.drain_Cathode.volume[1].initFromEnthalpy
stack.drain_Cathode.volume[1].p_start
stack.drain_Cathode.volume[1].T_start
stack.drain_Cathode.volume[1].h_start
stack.drain_Cathode.volume[1].X_start[1]
stack.drain_Cathode.volume[1].X_start[2]
stack.drain_Cathode.volume[1].X_start[3]
stack.drain_Cathode.volume[1].X_start[4]
stack.drain_Cathode.volume[1].X_start[5]
stack.drain_Cathode.volume[1].mXs_flow[1]
stack.drain_Cathode.volume[1].mXs_flow[2]
stack.drain_Cathode.volume[1].mXs_flow[3]
stack.drain_Cathode.volume[1].mXs_flow[4]
stack.drain_Cathode.volume[1].mXs_flow[5]
stack.drain_Cathode.volume[1].Q_add
stack.drain_Cathode.volume[1].m
stack.drain_Cathode.volume[1].N
stack.drain_Cathode.volume[1].port[4].X_outflow[1]
stack.drain_Cathode.volume[1].port[4].X_outflow[2]
stack.drain_Cathode.volume[1].port[4].X_outflow[3]
stack.drain_Cathode.volume[1].port[4].X_outflow[4]
stack.drain_Cathode.volume[1].port[4].X_outflow[5]
stack.drain_Cathode.volume[1].thermalDynamics
stack.drain_Cathode.volume[1].realTimeMode
stack.drain_Cathode.volume[1].stepSize
stack.drain_Cathode.volume[1].der_p_factor
stack.drain_Cathode.volume[1].h_in
stack.drain_Cathode.volume[1].T_in
stack.drain_Cathode.volume[1].X_in[1]
stack.drain_Cathode.volume[1].X_in[2]
stack.drain_Cathode.volume[1].X_in[3]
stack.drain_Cathode.volume[1].X_in[4]
stack.drain_Cathode.volume[1].X_in[5]
stack.drain_Cathode.volume[1].state_default.p
stack.drain_Cathode.volume[1].state_default.T
stack.drain_Cathode.volume[1].state_default.X[1]
stack.drain_Cathode.volume[1].state_default.X[2]
stack.drain_Cathode.volume[1].state_default.X[3]
stack.drain_Cathode.volume[1].state_default.X[4]
stack.drain_Cathode.volume[1].state_default.X[5]
stack.drain_Cathode.volume[1].m_flow_in[1]
stack.drain_Cathode.volume[1].m_flow_in[2]
stack.drain_Cathode.volume[1].m_flow_in[3]
stack.drain_Cathode.volume[1].m_flow_in[4]
stack.drain_Cathode.volume[1].H_flow_in[1]
stack.drain_Cathode.volume[1].H_flow_in[2]
stack.drain_Cathode.volume[1].H_flow_in[3]
stack.drain_Cathode.volume[1].H_flow_in[4]
stack.drain_Cathode.volume[1].MX_flow_in[1, 1]
stack.drain_Cathode.volume[1].MX_flow_in[1, 2]
stack.drain_Cathode.volume[1].MX_flow_in[1, 3]
stack.drain_Cathode.volume[1].MX_flow_in[1, 4]
stack.drain_Cathode.volume[1].MX_flow_in[1, 5]
stack.drain_Cathode.volume[1].MX_flow_in[2, 1]
stack.drain_Cathode.volume[1].MX_flow_in[2, 2]
stack.drain_Cathode.volume[1].MX_flow_in[2, 3]
stack.drain_Cathode.volume[1].MX_flow_in[2, 4]
stack.drain_Cathode.volume[1].MX_flow_in[2, 5]
stack.drain_Cathode.volume[1].MX_flow_in[3, 1]
stack.drain_Cathode.volume[1].MX_flow_in[3, 2]
stack.drain_Cathode.volume[1].MX_flow_in[3, 3]
stack.drain_Cathode.volume[1].MX_flow_in[3, 4]
stack.drain_Cathode.volume[1].MX_flow_in[3, 5]
stack.drain_Cathode.volume[1].MX_flow_in[4, 1]
stack.drain_Cathode.volume[1].MX_flow_in[4, 2]
stack.drain_Cathode.volume[1].MX_flow_in[4, 3]
stack.drain_Cathode.volume[1].MX_flow_in[4, 4]
stack.drain_Cathode.volume[1].MX_flow_in[4, 5]
stack.drain_Cathode.volume[1].dE
stack.drain_Cathode.volume[1].dMX[1]
stack.drain_Cathode.volume[1].dMX[2]
stack.drain_Cathode.volume[1].dMX[3]
stack.drain_Cathode.volume[1].dMX[4]
stack.drain_Cathode.volume[1].dMX[5]
stack.drain_Cathode.volume[1].H_flow[1]
stack.drain_Cathode.volume[1].H_flow[2]
stack.drain_Cathode.volume[1].H_flow[3]
stack.drain_Cathode.volume[1].H_flow[4]
stack.drain_Cathode.volume[1].MX_flow[1, 1]
stack.drain_Cathode.volume[1].MX_flow[1, 2]
stack.drain_Cathode.volume[1].MX_flow[1, 3]
stack.drain_Cathode.volume[1].MX_flow[1, 4]
stack.drain_Cathode.volume[1].MX_flow[1, 5]
stack.drain_Cathode.volume[1].MX_flow[2, 1]
stack.drain_Cathode.volume[1].MX_flow[2, 2]
stack.drain_Cathode.volume[1].MX_flow[2, 3]
stack.drain_Cathode.volume[1].MX_flow[2, 4]
stack.drain_Cathode.volume[1].MX_flow[2, 5]
stack.drain_Cathode.volume[1].MX_flow[3, 1]
stack.drain_Cathode.volume[1].MX_flow[3, 2]
stack.drain_Cathode.volume[1].MX_flow[3, 3]
stack.drain_Cathode.volume[1].MX_flow[3, 4]
stack.drain_Cathode.volume[1].MX_flow[3, 5]
stack.drain_Cathode.volume[1].MX_flow[4, 1]
stack.drain_Cathode.volume[1].MX_flow[4, 2]
stack.drain_Cathode.volume[1].MX_flow[4, 3]
stack.drain_Cathode.volume[1].MX_flow[4, 4]
stack.drain_Cathode.volume[1].MX_flow[4, 5]
stack.drain_Cathode.volume[1].M
stack.drain_Cathode.volume[1].fluid.quasiStatic
stack.drain_Cathode.volume[1].fluid.thermalDynamics
stack.drain_Cathode.volume[1].fluid.realTimeMode
stack.drain_Cathode.volume[1].fluid.stepSize
stack.drain_Cathode.volume[1].fluid.der_p_factor
stack.drain_Cathode.volume[1].fluid.initOpt
stack.drain_Cathode.volume[1].fluid.T_start
stack.drain_Cathode.volume[1].fluid.p_start
stack.drain_Cathode.volume[1].fluid.h_start
stack.drain_Cathode.volume[1].fluid.X_start[1]
stack.drain_Cathode.volume[1].fluid.X_start[2]
stack.drain_Cathode.volume[1].fluid.X_start[3]
stack.drain_Cathode.volume[1].fluid.X_start[4]
stack.drain_Cathode.volume[1].fluid.X_start[5]
stack.drain_Cathode.volume[1].fluid.ns
stack.drain_Cathode.volume[1].fluid.nC
stack.drain_Cathode.volume[1].fluid.V_tot
stack.drain_Cathode.volume[1].fluid.der(V_tot)
stack.drain_Cathode.volume[1].fluid.p
stack.drain_Cathode.volume[1].fluid.der(p)
stack.drain_Cathode.volume[1].fluid.d
stack.drain_Cathode.volume[1].fluid.T
stack.drain_Cathode.volume[1].fluid.der(T)
stack.drain_Cathode.volume[1].fluid.X[1]
stack.drain_Cathode.volume[1].fluid.der(X[1])
stack.drain_Cathode.volume[1].fluid.X[2]
stack.drain_Cathode.volume[1].fluid.der(X[2])
stack.drain_Cathode.volume[1].fluid.X[3]
stack.drain_Cathode.volume[1].fluid.der(X[3])
stack.drain_Cathode.volume[1].fluid.X[4]
stack.drain_Cathode.volume[1].fluid.der(X[4])
stack.drain_Cathode.volume[1].fluid.X[5]
stack.drain_Cathode.volume[1].fluid.state.p
stack.drain_Cathode.volume[1].fluid.state.T
stack.drain_Cathode.volume[1].fluid.state.X[1]
stack.drain_Cathode.volume[1].fluid.state.X[2]
stack.drain_Cathode.volume[1].fluid.state.X[3]
stack.drain_Cathode.volume[1].fluid.state.X[4]
stack.drain_Cathode.volume[1].fluid.state.X[5]
stack.drain_Cathode.volume[1].fluid.u
stack.drain_Cathode.volume[1].fluid.v
stack.drain_Cathode.volume[1].fluid.MX[1]
stack.drain_Cathode.volume[1].fluid.MX[2]
stack.drain_Cathode.volume[1].fluid.MX[3]
stack.drain_Cathode.volume[1].fluid.MX[4]
stack.drain_Cathode.volume[1].fluid.MX[5]
stack.drain_Cathode.volume[1].fluid.M
stack.drain_Cathode.volume[1].fluid.E
stack.drain_Cathode.volume[1].fluid.R
stack.drain_Cathode.volume[1].fluid.dM
stack.drain_Cathode.volume[1].fluid.dX[5]
stack.drain_Cathode.volume[1].fluid.R_g[1]
stack.drain_Cathode.volume[1].fluid.R_g[2]
stack.drain_Cathode.volume[1].fluid.R_g[3]
stack.drain_Cathode.volume[1].fluid.R_g[4]
stack.drain_Cathode.volume[1].fluid.R_g[5]
stack.drain_Cathode.volume[1].fluid.dd
stack.drain_Cathode.volume[1].fluid.dv
stack.drain_Cathode.volume[1].fluid.du
stack.drain_Cathode.volume[1].fluid.du_dX[1]
stack.drain_Cathode.volume[1].fluid.du_dX[2]
stack.drain_Cathode.volume[1].fluid.du_dX[3]
stack.drain_Cathode.volume[1].fluid.du_dX[4]
stack.drain_Cathode.volume[1].fluid.du_dX[5]
stack.drain_Cathode.volume[1].usePositiveFlow
stack.drain_Cathode.volume[1].positiveFlow[1]
stack.drain_Cathode.volume[1].positiveFlow[2]
stack.drain_Cathode.volume[1].positiveFlow[3]
stack.drain_Cathode.volume[1].positiveFlow[4]
stack.drain_Cathode.volume[1].summary.V
stack.drain_Cathode.basicHeatTransfer.n
stack.drain_Cathode.basicHeatTransfer.Aheatloss
stack.drain_Cathode.basicHeatTransfer.kc
stack.drain_Cathode.basicHeatTransfer.infiniteHT
stack.drain_Cathode.basicHeatTransfer.variableKc
stack.drain_Cathode.frictionLoss.portB.X_outflow[1]
stack.drain_Cathode.frictionLoss.portB.X_outflow[2]
stack.drain_Cathode.frictionLoss.portB.X_outflow[3]
stack.drain_Cathode.frictionLoss.portB.X_outflow[4]
stack.drain_Cathode.frictionLoss.portB.X_outflow[5]
stack.drain_Cathode.frictionLoss.T_start
stack.drain_Cathode.frictionLoss.mflow_start
stack.drain_Cathode.frictionLoss.positiveFlow
stack.drain_Cathode.frictionLoss.dp_asState
stack.drain_Cathode.frictionLoss.dp
stack.drain_Cathode.frictionLoss.d
stack.drain_Cathode.frictionLoss.T_in
stack.drain_Cathode.frictionLoss.TB_in
stack.drain_Cathode.frictionLoss.T_out
stack.drain_Cathode.frictionLoss.state_in.X[1]
stack.drain_Cathode.frictionLoss.state_in.X[2]
stack.drain_Cathode.frictionLoss.state_in.X[3]
stack.drain_Cathode.frictionLoss.state_in.X[4]
stack.drain_Cathode.frictionLoss.state_in.X[5]
stack.drain_Cathode.frictionLoss.from_dp
stack.drain_Cathode.frictionLoss.dp_smooth
stack.drain_Cathode.frictionLoss.mflow_smooth
stack.drain_Cathode.frictionLoss.dynamicModel
stack.drain_Cathode.frictionLoss.T_mflow
stack.drain_Cathode.frictionLoss.summary.V_flow
stack.drain_Cathode.frictionLoss.friction.from_dp
stack.drain_Cathode.frictionLoss.friction.positiveFlow
stack.drain_Cathode.frictionLoss.friction.dp_smooth
stack.drain_Cathode.frictionLoss.friction.mflow_smooth
stack.drain_Cathode.frictionLoss.friction.useFixedDensity
stack.drain_Cathode.frictionLoss.friction.reference_d
stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[1]
stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[2]
stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[3]
stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[4]
stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[5]
stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[1]
stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[2]
stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[3]
stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[4]
stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[5]
stack.drain_Cathode.frictionLoss.friction.dA
stack.drain_Cathode.frictionLoss.friction.dB
stack.drain_Cathode.frictionLoss.friction.d0
stack.drain_Cathode.frictionLoss.friction.dp0
stack.drain_Cathode.frictionLoss.friction.m_flow0
stack.drain_Cathode.summary.nbr
stack.drain_Cathode.summary.V_tot
stack.drain_Cathode.summary.dp[1]
stack.drain_Cathode.summary.dp[2]
stack.drain_Cathode.summary.dp[3]
stack.drain_Cathode.lambda_fluid
stack.drain_Cathode.width
stack.drain_Cathode.depth
stack.drain_Cathode.pstart[1]
stack.drain_Cathode.Dhyd
stack.drain_Cathode.thermalCollector.m
stack.drain_Cathode.thermalCollector.port_b.Q_flow
stack.pin_n.v
stack.pin_n.i
stack.feed_cath.h_outflow
stack.feed_an.h_outflow
stack.drain_cath.m_flow
stack.drain_cath.h_outflow
stack.drain_an.m_flow
stack.drain_an.h_outflow
stack.stackHeatLosses.N
stack.stackHeatLosses.nbr
stack.stackHeatLosses.A_topWall
stack.stackHeatLosses.A_bottomWall
stack.stackHeatLosses.A_sideWall
stack.stackHeatLosses.h_conv_top
stack.stackHeatLosses.h_conv_side
stack.stackHeatLosses.e_top
stack.stackHeatLosses.e_side
stack.stackHeatLosses.k_insul
stack.stackHeatLosses.dl_topInsul
stack.stackHeatLosses.dl_bottomInsul
stack.stackHeatLosses.dl_sideInsul
stack.stackHeatLosses.environment.Q_flow
stack.stackHeatLosses.leftWall[1].Q_flow
stack.stackHeatLosses.leftWall[2].Q_flow
stack.stackHeatLosses.leftWall[3].Q_flow
stack.stackHeatLosses.rightWall[1].Q_flow
stack.stackHeatLosses.rightWall[2].Q_flow
stack.stackHeatLosses.rightWall[3].Q_flow
stack.stackHeatLosses.summary.environment_Q
stack.stackHeatLosses.thermalCollector.m
stack.stackHeatLosses.thermalCollector.port_a[1].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[2].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[3].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[4].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[5].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[6].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[7].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[8].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[13].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[14].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[15].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[16].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[17].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[18].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[19].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[20].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[21].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[22].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[23].Q_flow
stack.stackHeatLosses.thermalCollector.port_a[24].Q_flow
stack.stackHeatLosses.thermalCollector.port_b.Q_flow
stack.stackHeatLosses.topConvection[1].dT
stack.stackHeatLosses.topConvection[2].dT
stack.stackHeatLosses.topConvection[3].dT
stack.stackHeatLosses.topConvection[4].dT
stack.stackHeatLosses.topConvectionCoeff[1].k
stack.stackHeatLosses.topConvectionCoeff[2].k
stack.stackHeatLosses.topConvectionCoeff[3].k
stack.stackHeatLosses.topConvectionCoeff[4].k
stack.stackHeatLosses.topRadiation[1].dT
stack.stackHeatLosses.topRadiation[1].Gr
stack.stackHeatLosses.topRadiation[2].dT
stack.stackHeatLosses.topRadiation[2].Gr
stack.stackHeatLosses.topRadiation[3].dT
stack.stackHeatLosses.topRadiation[3].Gr
stack.stackHeatLosses.topRadiation[4].dT
stack.stackHeatLosses.topRadiation[4].Gr
stack.stackHeatLosses.rightRadiation[1].dT
stack.stackHeatLosses.rightRadiation[1].Gr
stack.stackHeatLosses.rightRadiation[2].dT
stack.stackHeatLosses.rightRadiation[2].Gr
stack.stackHeatLosses.rightRadiation[3].dT
stack.stackHeatLosses.rightRadiation[3].Gr
stack.stackHeatLosses.rightConvectionCoeff[1].k
stack.stackHeatLosses.rightConvectionCoeff[2].k
stack.stackHeatLosses.rightConvectionCoeff[3].k
stack.stackHeatLosses.rightConvection[1].dT
stack.stackHeatLosses.rightConvection[2].dT
stack.stackHeatLosses.rightConvection[3].dT
stack.stackHeatLosses.leftRadiation[1].dT
stack.stackHeatLosses.leftRadiation[1].Gr
stack.stackHeatLosses.leftRadiation[2].dT
stack.stackHeatLosses.leftRadiation[2].Gr
stack.stackHeatLosses.leftRadiation[3].dT
stack.stackHeatLosses.leftRadiation[3].Gr
stack.stackHeatLosses.leftConvection[1].dT
stack.stackHeatLosses.leftConvection[2].dT
stack.stackHeatLosses.leftConvection[3].dT
stack.stackHeatLosses.leftConvectionCoeff[1].k
stack.stackHeatLosses.leftConvectionCoeff[2].k
stack.stackHeatLosses.leftConvectionCoeff[3].k
stack.stackHeatLosses.bottomConduction[1].dT
stack.stackHeatLosses.bottomConduction[1].G
stack.stackHeatLosses.bottomConduction[2].dT
stack.stackHeatLosses.bottomConduction[2].G
stack.stackHeatLosses.bottomConduction[3].dT
stack.stackHeatLosses.bottomConduction[3].G
stack.stackHeatLosses.bottomConduction[4].dT
stack.stackHeatLosses.bottomConduction[4].G
stack.heat_port.T
stack.heat_port.Q_flow
stack.fuel_in
stack.fuel_used
stack.utilization
stack.ref[1]
stack.ref[2]
summary.N
summary.fuel_nS
summary.dmFuelStkIn
summary.tAirStkOut[1]
summary.tAirStkOut[2]
summary.tAirStkOut[3]
summary.tFuelStkOut[1]
summary.tFuelStkOut[2]
summary.tFuelStkOut[3]
summary.tStkOut[1]
summary.tStkOut[2]
summary.tStkOut[3]
summary.tStkTopWall
summary.tStkBottomWall
summary.QStkHeat
summary.PStkElec
summary.VCst
summary.PStk
summary.VCstZone[1]
summary.VCstZone[2]
summary.VCstZone[3]
summary.facFuelStkUtil[1]
summary.facFuelStkUtil[2]
summary.facFuelStkUtil[3]
summary.ATRutilCH4
summary.ATRutilO2
summary.ATRthermEff
summary.ATRinletSteamCarb
summary.ATRinletOxCarb
summary.tSteamMix
summary.tGenSteam
summary.tSteamGenLiq
WaterSource.fluidPort.h_outflow
WaterSource.massFlowBoundary.flowDefinition
WaterSource.massFlowBoundary.energyDefinition
WaterSource.massFlowBoundary.m_flow
WaterSource.massFlowBoundary.V_flow
WaterSource.massFlowBoundary.T
WaterSource.massFlowBoundary.h
WaterSource.massFlowBoundary.X[1]
WaterSource.massFlowBoundary.VFlowUnit
WaterSource.massFlowBoundary.temperatureUnit
WaterSource.massFlowBoundary.use_flow_in
WaterSource.massFlowBoundary.use_Th_in
WaterSource.massFlowBoundary.use_X_in
WaterSource.massFlowBoundary.use_C_in
WaterSource.massFlowBoundary.Vflow_scale
WaterSource.massFlowBoundary.p_start
WaterSource.massFlowBoundary.d
WaterSource.flowDefinition
WaterSource.energyDefinition
WaterSource.m_flow
WaterSource.V_flow
WaterSource.T
WaterSource.h
WaterSource.X[1]
WaterSource.VFlowUnit
WaterSource.temperatureUnit
WaterSource.use_flow_in
WaterSource.use_Th_in
WaterSource.use_X_in
NGSource.fluidPort.p
NGSource.fluidPort.h_outflow
NGSource.fluidPort.X_outflow[1]
NGSource.fluidPort.X_outflow[2]
NGSource.fluidPort.X_outflow[3]
NGSource.fluidPort.X_outflow[4]
NGSource.fluidPort.X_outflow[5]
NGSource.fluidPort.X_outflow[6]
NGSource.fluidPort.X_outflow[7]
NGSource.massFlowBoundary.fluidPort.X_outflow[1]
NGSource.massFlowBoundary.fluidPort.X_outflow[2]
NGSource.massFlowBoundary.fluidPort.X_outflow[3]
NGSource.massFlowBoundary.fluidPort.X_outflow[4]
NGSource.massFlowBoundary.fluidPort.X_outflow[5]
NGSource.massFlowBoundary.fluidPort.X_outflow[6]
NGSource.massFlowBoundary.fluidPort.X_outflow[7]
NGSource.massFlowBoundary.flowDefinition
NGSource.massFlowBoundary.energyDefinition
NGSource.massFlowBoundary.m_flow
NGSource.massFlowBoundary.V_flow
NGSource.massFlowBoundary.T
NGSource.massFlowBoundary.h
NGSource.massFlowBoundary.X[1]
NGSource.massFlowBoundary.X[2]
NGSource.massFlowBoundary.X[3]
NGSource.massFlowBoundary.X[4]
NGSource.massFlowBoundary.X[5]
NGSource.massFlowBoundary.X[6]
NGSource.massFlowBoundary.X[7]
NGSource.massFlowBoundary.VFlowUnit
NGSource.massFlowBoundary.temperatureUnit
NGSource.massFlowBoundary.use_flow_in
NGSource.massFlowBoundary.use_Th_in
NGSource.massFlowBoundary.use_X_in
NGSource.massFlowBoundary.use_C_in
NGSource.massFlowBoundary.Vflow_scale
NGSource.massFlowBoundary.p_start
NGSource.massFlowBoundary.X_set[1]
NGSource.massFlowBoundary.X_set[2]
NGSource.massFlowBoundary.X_set[3]
NGSource.massFlowBoundary.X_set[4]
NGSource.massFlowBoundary.X_set[5]
NGSource.massFlowBoundary.X_set[6]
NGSource.massFlowBoundary.X_set[7]
NGSource.massFlowBoundary.state.p
NGSource.massFlowBoundary.state.T
NGSource.massFlowBoundary.state.X[1]
NGSource.massFlowBoundary.state.X[2]
NGSource.massFlowBoundary.state.X[3]
NGSource.massFlowBoundary.state.X[4]
NGSource.massFlowBoundary.state.X[5]
NGSource.massFlowBoundary.state.X[6]
NGSource.massFlowBoundary.state.X[7]
NGSource.massFlowBoundary.d
NGSource.flowDefinition
NGSource.energyDefinition
NGSource.m_flow
NGSource.V_flow
NGSource.T
NGSource.h
NGSource.X[1]
NGSource.X[2]
NGSource.X[3]
NGSource.X[4]
NGSource.X[5]
NGSource.X[6]
NGSource.X[7]
NGSource.VFlowUnit
NGSource.temperatureUnit
NGSource.use_flow_in
NGSource.use_Th_in
NGSource.use_X_in
ATRAirSource.fluidPort.h_outflow
ATRAirSource.fluidPort.X_outflow[1]
ATRAirSource.fluidPort.X_outflow[2]
ATRAirSource.fluidPort.X_outflow[3]
ATRAirSource.fluidPort.X_outflow[4]
ATRAirSource.fluidPort.X_outflow[5]
ATRAirSource.massFlowBoundary.flowDefinition
ATRAirSource.massFlowBoundary.energyDefinition
ATRAirSource.massFlowBoundary.m_flow
ATRAirSource.massFlowBoundary.V_flow
ATRAirSource.massFlowBoundary.T
ATRAirSource.massFlowBoundary.h
ATRAirSource.massFlowBoundary.X[1]
ATRAirSource.massFlowBoundary.X[2]
ATRAirSource.massFlowBoundary.X[3]
ATRAirSource.massFlowBoundary.X[4]
ATRAirSource.massFlowBoundary.X[5]
ATRAirSource.massFlowBoundary.VFlowUnit
ATRAirSource.massFlowBoundary.temperatureUnit
ATRAirSource.massFlowBoundary.use_flow_in
ATRAirSource.massFlowBoundary.use_Th_in
ATRAirSource.massFlowBoundary.use_X_in
ATRAirSource.massFlowBoundary.use_C_in
ATRAirSource.massFlowBoundary.Vflow_scale
ATRAirSource.massFlowBoundary.p_start
ATRAirSource.massFlowBoundary.X_set[1]
ATRAirSource.massFlowBoundary.X_set[2]
ATRAirSource.massFlowBoundary.X_set[3]
ATRAirSource.massFlowBoundary.X_set[4]
ATRAirSource.massFlowBoundary.X_set[5]
ATRAirSource.massFlowBoundary.state.p
ATRAirSource.massFlowBoundary.state.T
ATRAirSource.massFlowBoundary.state.X[1]
ATRAirSource.massFlowBoundary.state.X[2]
ATRAirSource.massFlowBoundary.state.X[3]
ATRAirSource.massFlowBoundary.state.X[4]
ATRAirSource.massFlowBoundary.state.X[5]
ATRAirSource.massFlowBoundary.d
ATRAirSource.flowDefinition
ATRAirSource.energyDefinition
ATRAirSource.m_flow
ATRAirSource.V_flow
ATRAirSource.T
ATRAirSource.h
ATRAirSource.X[1]
ATRAirSource.X[2]
ATRAirSource.X[3]
ATRAirSource.X[4]
ATRAirSource.X[5]
ATRAirSource.VFlowUnit
ATRAirSource.temperatureUnit
ATRAirSource.use_flow_in
ATRAirSource.use_Th_in
ATRAirSource.use_X_in
exhaustSink.fluidPort.m_flow
exhaustSink.fluidPort.h_outflow
exhaustSink.pressureBoundary.N
exhaustSink.pressureBoundary.energyDefinition
exhaustSink.pressureBoundary.p
exhaustSink.pressureBoundary.T
exhaustSink.pressureBoundary.h
exhaustSink.pressureBoundary.X[1]
exhaustSink.pressureBoundary.X[2]
exhaustSink.pressureBoundary.X[3]
exhaustSink.pressureBoundary.X[4]
exhaustSink.pressureBoundary.X[5]
exhaustSink.pressureBoundary.pressureUnit
exhaustSink.pressureBoundary.temperatureUnit
exhaustSink.pressureBoundary.p_scale
exhaustSink.pressureBoundary.use_p_in
exhaustSink.pressureBoundary.use_Th_in
exhaustSink.pressureBoundary.use_X_in
exhaustSink.pressureBoundary.use_C_in
exhaustSink.pressureBoundary.filter_port_state
exhaustSink.pressureBoundary.Tc_port_state
exhaustSink.pressureBoundary.steady_state_port_init
exhaustSink.pressureBoundary.m_flow_start[1]
exhaustSink.pressureBoundary.X_set[1]
exhaustSink.pressureBoundary.X_set[2]
exhaustSink.pressureBoundary.X_set[3]
exhaustSink.pressureBoundary.X_set[4]
exhaustSink.pressureBoundary.X_set[5]
exhaustSink.pressureBoundary.state.p
exhaustSink.pressureBoundary.state.T
exhaustSink.pressureBoundary.state.X[1]
exhaustSink.pressureBoundary.state.X[2]
exhaustSink.pressureBoundary.state.X[3]
exhaustSink.pressureBoundary.state.X[4]
exhaustSink.pressureBoundary.state.X[5]
exhaustSink.pressureBoundary.h_port[1]
exhaustSink.pressureBoundary.X_port[1, 1]
exhaustSink.pressureBoundary.X_port[1, 2]
exhaustSink.pressureBoundary.X_port[1, 3]
exhaustSink.pressureBoundary.X_port[1, 4]
exhaustSink.pressureBoundary.X_port[1, 5]
exhaustSink.energyDefinition
exhaustSink.p
exhaustSink.T
exhaustSink.h
exhaustSink.X[1]
exhaustSink.X[2]
exhaustSink.X[3]
exhaustSink.X[4]
exhaustSink.X[5]
exhaustSink.pressureUnit
exhaustSink.temperatureUnit
exhaustSink.use_p_in
exhaustSink.use_Th_in
exhaustSink.use_X_in
preprocessor.steam_geoHX.N_parallel
preprocessor.steam_geoHX.L
preprocessor.steam_geoHX.Dhyd
preprocessor.steam_geoHX.Across
preprocessor.steam_geoHX.C
preprocessor.steam_geoHX.V
preprocessor.steam_geoHX.Aheat
preprocessor.reformer.gas.X[1]
preprocessor.reformer.gas.X[2]
preprocessor.reformer.gas.X[3]
preprocessor.reformer.gas.X[4]
preprocessor.reformer.gas.X[5]
preprocessor.reformer.gas.X[6]
preprocessor.reformer.gas.X[7]
preprocessor.reformer.gas.Xi[1]
preprocessor.reformer.gas.Xi[2]
preprocessor.reformer.gas.Xi[3]
preprocessor.reformer.gas.Xi[4]
preprocessor.reformer.gas.Xi[5]
preprocessor.reformer.gas.Xi[6]
preprocessor.reformer.gas.Xi[7]
preprocessor.reformer.gas.d
preprocessor.reformer.gas.der(d)
preprocessor.reformer.gas.u
preprocessor.reformer.gas.Rg
preprocessor.reformer.gas.der(Rg)
preprocessor.reformer.gas.MM
preprocessor.reformer.gas.assertlevel
preprocessor.reformer.gas.state.p
preprocessor.reformer.gas.state.T
preprocessor.reformer.gas.state.X[1]
preprocessor.reformer.gas.state.X[2]
preprocessor.reformer.gas.state.X[3]
preprocessor.reformer.gas.state.X[4]
preprocessor.reformer.gas.state.X[5]
preprocessor.reformer.gas.state.X[6]
preprocessor.reformer.gas.state.X[7]
preprocessor.reformer.gas.preferredMediumStates
preprocessor.reformer.gas.T_degC
preprocessor.reformer.gas.p_bar
preprocessor.reformer.gas.Z[1]
preprocessor.reformer.gas.Z[2]
preprocessor.reformer.gas.Z[3]
preprocessor.reformer.gas.Z[4]
preprocessor.reformer.gas.Z[5]
preprocessor.reformer.gas.Z[6]
preprocessor.reformer.gas.Z[7]
preprocessor.reformer.gas.dUZT[1]
preprocessor.reformer.gas.dUZT[2]
preprocessor.reformer.gas.dUZT[3]
preprocessor.reformer.gas.dUZT[4]
preprocessor.reformer.gas.dUZT[5]
preprocessor.reformer.gas.dUZT[6]
preprocessor.reformer.gas.dUZT[7]
preprocessor.reformer.gas.h_component[1]
preprocessor.reformer.gas.h_component[2]
preprocessor.reformer.gas.h_component[3]
preprocessor.reformer.gas.h_component[4]
preprocessor.reformer.gas.h_component[5]
preprocessor.reformer.gas.h_component[6]
preprocessor.reformer.gas.h_component[7]
preprocessor.reformer.gas.s_component[1]
preprocessor.reformer.gas.s_component[2]
preprocessor.reformer.gas.s_component[3]
preprocessor.reformer.gas.s_component[4]
preprocessor.reformer.gas.s_component[5]
preprocessor.reformer.gas.s_component[6]
preprocessor.reformer.gas.s_component[7]
preprocessor.reformer.gas.u_comp[1]
preprocessor.reformer.gas.u_comp[2]
preprocessor.reformer.gas.u_comp[3]
preprocessor.reformer.gas.u_comp[4]
preprocessor.reformer.gas.u_comp[5]
preprocessor.reformer.gas.u_comp[6]
preprocessor.reformer.gas.u_comp[7]
preprocessor.reformer.gas.cp
preprocessor.reformer.gas.g_formation[1]
preprocessor.reformer.gas.g_formation[2]
preprocessor.reformer.gas.g_formation[3]
preprocessor.reformer.gas.g_formation[4]
preprocessor.reformer.gas.g_formation[5]
preprocessor.reformer.gas.g_formation[6]
preprocessor.reformer.gas.g_formation[7]
preprocessor.reformer.gas.ddTp
preprocessor.reformer.gas.ddpT
preprocessor.reformer.gas.dupT
preprocessor.reformer.gas.duTp
preprocessor.reformer.gas.ddx[1]
preprocessor.reformer.gas.ddx[2]
preprocessor.reformer.gas.ddx[3]
preprocessor.reformer.gas.ddx[4]
preprocessor.reformer.gas.ddx[5]
preprocessor.reformer.gas.ddx[6]
preprocessor.reformer.gas.ddx[7]
preprocessor.reformer.initOpt
preprocessor.reformer.pstart
preprocessor.reformer.Tstart
preprocessor.reformer.Xstart[1]
preprocessor.reformer.Xstart[2]
preprocessor.reformer.Xstart[3]
preprocessor.reformer.Xstart[4]
preprocessor.reformer.Xstart[5]
preprocessor.reformer.Xstart[6]
preprocessor.reformer.Xstart[7]
preprocessor.reformer.m_flow_nom
preprocessor.reformer.V_tot
preprocessor.reformer.scale_cat
preprocessor.reformer.LHV_H2
preprocessor.reformer.LHV_CH4
preprocessor.reformer.QuasiStatic
preprocessor.reformer.positiveFlow
preprocessor.reformer.p
preprocessor.reformer.der(p)
preprocessor.reformer.T
preprocessor.reformer.der(T)
preprocessor.reformer.M
preprocessor.reformer.der(M)
preprocessor.reformer.E_tot
preprocessor.reformer.MX[1]
preprocessor.reformer.MX[2]
preprocessor.reformer.MX[3]
preprocessor.reformer.MX[4]
preprocessor.reformer.MX[5]
preprocessor.reformer.MX[6]
preprocessor.reformer.MX[7]
preprocessor.reformer.H2_CO_ratio
preprocessor.reformer.H20_CH4_ratio
preprocessor.reformer.O2_CH4_ratio
preprocessor.reformer.steam_carb_out
preprocessor.reformer.dry_mole[1]
preprocessor.reformer.dry_mole[2]
preprocessor.reformer.dry_mole[3]
preprocessor.reformer.dry_mole[4]
preprocessor.reformer.dry_mole[5]
preprocessor.reformer.dry_mole[6]
preprocessor.reformer.dry_mole[7]
preprocessor.reformer.hydro_yield
preprocessor.reformer.pp[1]
preprocessor.reformer.pp[2]
preprocessor.reformer.pp[3]
preprocessor.reformer.pp[4]
preprocessor.reformer.pp[5]
preprocessor.reformer.pp[6]
preprocessor.reformer.pp[7]
preprocessor.reformer.Tr
preprocessor.reformer.GHSV
preprocessor.reformer.GHSV1
preprocessor.reformer.X_mole[1]
preprocessor.reformer.X_mole[2]
preprocessor.reformer.X_mole[3]
preprocessor.reformer.X_mole[4]
preprocessor.reformer.X_mole[5]
preprocessor.reformer.X_mole[6]
preprocessor.reformer.X_mole[7]
preprocessor.reformer.feed_fuel.m_flow
preprocessor.reformer.feed_air.X_outflow[1]
preprocessor.reformer.feed_air.X_outflow[2]
preprocessor.reformer.feed_air.X_outflow[3]
preprocessor.reformer.feed_air.X_outflow[4]
preprocessor.reformer.feed_air.X_outflow[5]
preprocessor.reformer.drain.X_outflow[1]
preprocessor.reformer.drain.X_outflow[2]
preprocessor.reformer.drain.X_outflow[3]
preprocessor.reformer.drain.X_outflow[4]
preprocessor.reformer.drain.X_outflow[5]
preprocessor.reformer.drain.X_outflow[6]
preprocessor.reformer.drain.X_outflow[7]
preprocessor.reformer.reaction.N
preprocessor.reformer.reaction.Cp_reac[1]
preprocessor.reformer.reaction.Q[1]
preprocessor.reformer.reaction.S_reac[1, 1]
preprocessor.reformer.reaction.S_reac[1, 2]
preprocessor.reformer.reaction.S_reac[1, 3]
preprocessor.reformer.reaction.S_reac[1, 4]
preprocessor.reformer.reaction.S_reac[1, 5]
preprocessor.reformer.reaction.S_reac[1, 6]
preprocessor.reformer.reaction.S_reac[1, 7]
preprocessor.reformer.reaction.S_reac[2, 1]
preprocessor.reformer.reaction.S_reac[2, 2]
preprocessor.reformer.reaction.S_reac[2, 3]
preprocessor.reformer.reaction.S_reac[2, 4]
preprocessor.reformer.reaction.S_reac[2, 5]
preprocessor.reformer.reaction.S_reac[2, 6]
preprocessor.reformer.reaction.S_reac[2, 7]
preprocessor.reformer.reaction.S_reac[3, 1]
preprocessor.reformer.reaction.S_reac[3, 2]
preprocessor.reformer.reaction.S_reac[3, 3]
preprocessor.reformer.reaction.S_reac[3, 4]
preprocessor.reformer.reaction.S_reac[3, 5]
preprocessor.reformer.reaction.S_reac[3, 6]
preprocessor.reformer.reaction.S_reac[3, 7]
preprocessor.reformer.reaction.S_reac[4, 1]
preprocessor.reformer.reaction.S_reac[4, 2]
preprocessor.reformer.reaction.S_reac[4, 3]
preprocessor.reformer.reaction.S_reac[4, 4]
preprocessor.reformer.reaction.S_reac[4, 5]
preprocessor.reformer.reaction.S_reac[4, 6]
preprocessor.reformer.reaction.S_reac[4, 7]
preprocessor.reformer.reaction.n_reac
preprocessor.reformer.reaction.comp[1]
preprocessor.reformer.reaction.comp[2]
preprocessor.reformer.reaction.comp[3]
preprocessor.reformer.reaction.comp[4]
preprocessor.reformer.reaction.pstart
preprocessor.reformer.reaction.Tstart
preprocessor.reformer.reaction.Xstart[1]
preprocessor.reformer.reaction.Xstart[2]
preprocessor.reformer.reaction.Xstart[3]
preprocessor.reformer.reaction.Xstart[4]
preprocessor.reformer.reaction.Xstart[5]
preprocessor.reformer.reaction.Xstart[6]
preprocessor.reformer.reaction.Xstart[7]
preprocessor.reformer.reaction.V
preprocessor.reformer.reaction.scale
preprocessor.reformer.reaction.MMX[1]
preprocessor.reformer.reaction.MMX[2]
preprocessor.reformer.reaction.MMX[3]
preprocessor.reformer.reaction.MMX[4]
preprocessor.reformer.reaction.MMX[5]
preprocessor.reformer.reaction.MMX[6]
preprocessor.reformer.reaction.MMX[7]
preprocessor.reformer.reaction.MM[1]
preprocessor.reformer.reaction.der(MM[1])
preprocessor.reformer.reaction.y_start[1]
preprocessor.reformer.reaction.y_start[2]
preprocessor.reformer.reaction.y_start[3]
preprocessor.reformer.reaction.y_start[4]
preprocessor.reformer.reaction.y_start[5]
preprocessor.reformer.reaction.y_start[6]
preprocessor.reformer.reaction.y_start[7]
preprocessor.reformer.reaction.log10_y_start[1]
preprocessor.reformer.reaction.log10_y_start[2]
preprocessor.reformer.reaction.log10_y_start[3]
preprocessor.reformer.reaction.log10_y_start[4]
preprocessor.reformer.reaction.log10_y_start[5]
preprocessor.reformer.reaction.log10_y_start[6]
preprocessor.reformer.reaction.log10_y_start[7]
preprocessor.reformer.reaction.pref
preprocessor.reformer.reaction.log10_y_out[1, 1]
preprocessor.reformer.reaction.log10_y_out[1, 2]
preprocessor.reformer.reaction.log10_y_out[1, 3]
preprocessor.reformer.reaction.log10_y_out[1, 4]
preprocessor.reformer.reaction.log10_y_out[1, 5]
preprocessor.reformer.reaction.log10_y_out[1, 6]
preprocessor.reformer.reaction.log10_y_out[1, 7]
preprocessor.reformer.reaction.log10_eq_reac[1, 1]
preprocessor.reformer.reaction.log10_eq_reac[1, 2]
preprocessor.reformer.reaction.log10_eq_reac[1, 3]
preprocessor.reformer.reaction.log10_eq_reac[1, 4]
preprocessor.reformer.reaction.Sx_reac[1, 1]
preprocessor.reformer.reaction.Sx_reac[1, 2]
preprocessor.reformer.reaction.Sx_reac[1, 3]
preprocessor.reformer.reaction.Sx_reac[1, 4]
preprocessor.reformer.reaction.Sx_reac[1, 5]
preprocessor.reformer.reaction.Sx_reac[1, 6]
preprocessor.reformer.reaction.Sx_reac[1, 7]
preprocessor.reformer.reaction.Sx_reac[2, 1]
preprocessor.reformer.reaction.Sx_reac[2, 2]
preprocessor.reformer.reaction.Sx_reac[2, 3]
preprocessor.reformer.reaction.Sx_reac[2, 4]
preprocessor.reformer.reaction.Sx_reac[2, 5]
preprocessor.reformer.reaction.Sx_reac[2, 6]
preprocessor.reformer.reaction.Sx_reac[2, 7]
preprocessor.reformer.reaction.Sx_reac[3, 1]
preprocessor.reformer.reaction.Sx_reac[3, 2]
preprocessor.reformer.reaction.Sx_reac[3, 3]
preprocessor.reformer.reaction.Sx_reac[3, 4]
preprocessor.reformer.reaction.Sx_reac[3, 5]
preprocessor.reformer.reaction.Sx_reac[3, 6]
preprocessor.reformer.reaction.Sx_reac[3, 7]
preprocessor.reformer.reaction.Sx_reac[4, 1]
preprocessor.reformer.reaction.Sx_reac[4, 2]
preprocessor.reformer.reaction.Sx_reac[4, 3]
preprocessor.reformer.reaction.Sx_reac[4, 4]
preprocessor.reformer.reaction.Sx_reac[4, 5]
preprocessor.reformer.reaction.Sx_reac[4, 6]
preprocessor.reformer.reaction.Sx_reac[4, 7]
preprocessor.reformer.reaction.Ztot_start
preprocessor.reformer.reaction.Zx_start[1]
preprocessor.reformer.reaction.Zx_start[2]
preprocessor.reformer.reaction.Zx_start[3]
preprocessor.reformer.reaction.Zx_start[4]
preprocessor.reformer.reaction.Zx_start[5]
preprocessor.reformer.reaction.Zx_start[6]
preprocessor.reformer.reaction.Zx_start[7]
preprocessor.reformer.reaction.CF_conversion[1, 1]
preprocessor.reformer.reaction.CF_conversion[1, 2]
preprocessor.reformer.reaction.CF_conversion[1, 3]
preprocessor.reformer.reaction.CF_conversion[1, 4]
preprocessor.reformer.reaction.CF_conversion[2, 1]
preprocessor.reformer.reaction.CF_conversion[2, 2]
preprocessor.reformer.reaction.CF_conversion[2, 3]
preprocessor.reformer.reaction.CF_conversion[2, 4]
preprocessor.reformer.reaction.CF_conversion[3, 1]
preprocessor.reformer.reaction.CF_conversion[3, 2]
preprocessor.reformer.reaction.CF_conversion[3, 3]
preprocessor.reformer.reaction.CF_conversion[3, 4]
preprocessor.reformer.reaction.CF_conversion[4, 1]
preprocessor.reformer.reaction.CF_conversion[4, 2]
preprocessor.reformer.reaction.CF_conversion[4, 3]
preprocessor.reformer.reaction.CF_conversion[4, 4]
preprocessor.reformer.reaction.Tscale
preprocessor.reformer.reaction.epsZ
preprocessor.reformer.reaction.Zx_nominal
preprocessor.reformer.reaction.Zx[1, 1]
preprocessor.reformer.reaction.der(Zx[1, 1])
preprocessor.reformer.reaction.Zx[1, 2]
preprocessor.reformer.reaction.der(Zx[1, 2])
preprocessor.reformer.reaction.Zx[1, 3]
preprocessor.reformer.reaction.der(Zx[1, 3])
preprocessor.reformer.reaction.Zx[1, 4]
preprocessor.reformer.reaction.der(Zx[1, 4])
preprocessor.reformer.reaction.Zx[1, 5]
preprocessor.reformer.reaction.der(Zx[1, 5])
preprocessor.reformer.reaction.Zx[1, 6]
preprocessor.reformer.reaction.der(Zx[1, 6])
preprocessor.reformer.reaction.Zx[1, 7]
preprocessor.reformer.reaction.der(Zx[1, 7])
preprocessor.reformer.reaction.Ztot[1]
preprocessor.reformer.reaction.der(Ztot[1])
preprocessor.reformer.reaction.Zx_flow[1, 1]
preprocessor.reformer.reaction.Zx_flow[1, 2]
preprocessor.reformer.reaction.Zx_flow[1, 3]
preprocessor.reformer.reaction.Zx_flow[1, 4]
preprocessor.reformer.reaction.Zx_flow[1, 5]
preprocessor.reformer.reaction.Zx_flow[1, 7]
preprocessor.reformer.reaction.rZ[1, 1]
preprocessor.reformer.reaction.rZ[1, 2]
preprocessor.reformer.reaction.rZ[1, 3]
preprocessor.reformer.reaction.rZ[1, 4]
preprocessor.reformer.reaction.rZ[1, 5]
preprocessor.reformer.reaction.rZ[1, 6]
preprocessor.reformer.reaction.rZ[1, 7]
preprocessor.reformer.reaction.rate[1, 1]
preprocessor.reformer.reaction.rate[1, 2]
preprocessor.reformer.reaction.rate[1, 3]
preprocessor.reformer.reaction.rate[1, 4]
preprocessor.reformer.reaction.deplZ[1, 1]
preprocessor.reformer.reaction.deplZ[1, 2]
preprocessor.reformer.reaction.deplZ[1, 3]
preprocessor.reformer.reaction.deplZ[1, 4]
preprocessor.reformer.reaction.deplZ[1, 5]
preprocessor.reformer.reaction.deplZ[1, 6]
preprocessor.reformer.reaction.deplZ[1, 7]
preprocessor.reformer.reaction.S_ref[1]
preprocessor.reformer.reaction.S_ref[2]
preprocessor.reformer.reaction.S_ref[3]
preprocessor.reformer.reaction.S_ref[4]
preprocessor.reformer.reaction.S_ref[5]
preprocessor.reformer.reaction.S_ref[6]
preprocessor.reformer.reaction.S_ref[7]
preprocessor.reformer.reaction.S_ref2[1]
preprocessor.reformer.reaction.S_ref2[2]
preprocessor.reformer.reaction.S_ref2[3]
preprocessor.reformer.reaction.S_ref2[4]
preprocessor.reformer.reaction.S_ref2[5]
preprocessor.reformer.reaction.S_ref2[6]
preprocessor.reformer.reaction.S_ref2[7]
preprocessor.reformer.reaction.S_wgs[1]
preprocessor.reformer.reaction.S_wgs[2]
preprocessor.reformer.reaction.S_wgs[3]
preprocessor.reformer.reaction.S_wgs[4]
preprocessor.reformer.reaction.S_wgs[5]
preprocessor.reformer.reaction.S_wgs[6]
preprocessor.reformer.reaction.S_wgs[7]
preprocessor.reformer.reaction.S_totcomb[1]
preprocessor.reformer.reaction.S_totcomb[2]
preprocessor.reformer.reaction.S_totcomb[3]
preprocessor.reformer.reaction.S_totcomb[4]
preprocessor.reformer.reaction.S_totcomb[5]
preprocessor.reformer.reaction.S_totcomb[6]
preprocessor.reformer.reaction.S_totcomb[7]
preprocessor.reformer.reaction.index[1]
preprocessor.reformer.reaction.index[2]
preprocessor.reformer.reaction.index[3]
preprocessor.reformer.reaction.index[4]
preprocessor.reformer.reaction.index[5]
preprocessor.reformer.reaction.index[6]
preprocessor.reformer.reaction.k1[1]
preprocessor.reformer.reaction.k2[1]
preprocessor.reformer.reaction.k3[1]
preprocessor.reformer.reaction.k4a[1]
preprocessor.reformer.reaction.k4b[1]
preprocessor.reformer.reaction.omega[1]
preprocessor.reformer.reaction.Keq_1
preprocessor.reformer.reaction.Keq_2
preprocessor.reformer.reaction.Keq_3
preprocessor.reformer.reaction.K_CH4[1]
preprocessor.reformer.reaction.K_CO[1]
preprocessor.reformer.reaction.K_H2[1]
preprocessor.reformer.reaction.K_H2O[1]
preprocessor.reformer.reaction.Kcomb_CH4[1]
preprocessor.reformer.reaction.Kcomb_O2[1]
preprocessor.reformer.reaction.Ts
preprocessor.reformer.reaction.scale_cat
preprocessor.reformer.reaction.eta_1
preprocessor.reformer.reaction.eta_2
preprocessor.reformer.reaction.eta_3
preprocessor.reformer.reaction.eta_4
preprocessor.reformer.reaction.k_o1
preprocessor.reformer.reaction.k_o2
preprocessor.reformer.reaction.k_o3
preprocessor.reformer.reaction.k_o4a
preprocessor.reformer.reaction.k_o4b
preprocessor.reformer.reaction.Ea_1
preprocessor.reformer.reaction.Ea_2
preprocessor.reformer.reaction.Ea_3
preprocessor.reformer.reaction.Ea_4
preprocessor.reformer.reaction.K_oCH4
preprocessor.reformer.reaction.K_oCO
preprocessor.reformer.reaction.K_oH2
preprocessor.reformer.reaction.K_oH2O
preprocessor.reformer.reaction.Kcomb_oCH4
preprocessor.reformer.reaction.Kcomb_oO2
preprocessor.reformer.reaction.deltaH_CH4
preprocessor.reformer.reaction.deltaH_CO
preprocessor.reformer.reaction.deltaH_H2
preprocessor.reformer.reaction.deltaH_H2O
preprocessor.reformer.reaction.deltaHcomb_CH4
preprocessor.reformer.reaction.deltaHcomb_O2
preprocessor.reformer.reaction.a1
preprocessor.reformer.reaction.b1
preprocessor.reformer.reaction.a3
preprocessor.reformer.reaction.b3
preprocessor.reformer.q.Q_flow
preprocessor.reformer.hi_fuel
preprocessor.reformer.hi_air
preprocessor.reformer.ho
preprocessor.reformer.Xi_fuel[1]
preprocessor.reformer.Xi_fuel[2]
preprocessor.reformer.Xi_fuel[3]
preprocessor.reformer.Xi_fuel[4]
preprocessor.reformer.Xi_fuel[5]
preprocessor.reformer.Xi_fuel[6]
preprocessor.reformer.Xi_fuel[7]
preprocessor.reformer.Xi_air[1]
preprocessor.reformer.Xi_air[2]
preprocessor.reformer.Xi_air[3]
preprocessor.reformer.Xi_air[4]
preprocessor.reformer.Xi_air[5]
preprocessor.reformer.Xi_air[6]
preprocessor.reformer.Xi_air[7]
preprocessor.reformer.X_o[1]
preprocessor.reformer.X_o[2]
preprocessor.reformer.X_o[3]
preprocessor.reformer.X_o[4]
preprocessor.reformer.X_o[5]
preprocessor.reformer.X_o[6]
preprocessor.reformer.X_o[7]
preprocessor.reformer.S_air[1]
preprocessor.reformer.S_air[2]
preprocessor.reformer.S_air[3]
preprocessor.reformer.nXi
preprocessor.reformer.dM
preprocessor.reformer.dE
preprocessor.reformer.dMX[1]
preprocessor.reformer.dMX[2]
preprocessor.reformer.dMX[3]
preprocessor.reformer.dMX[4]
preprocessor.reformer.dMX[5]
preprocessor.reformer.dMX[6]
preprocessor.reformer.dMX[7]
preprocessor.reformer.sE
preprocessor.reformer.dZ[1]
preprocessor.reformer.dZ[2]
preprocessor.reformer.dZ[3]
preprocessor.reformer.dZ[4]
preprocessor.reformer.dZ[5]
preprocessor.reformer.dZ[7]
preprocessor.reformer.dUTZ
preprocessor.reformer.Z[1]
preprocessor.reformer.Z[2]
preprocessor.reformer.Z[3]
preprocessor.reformer.Z[4]
preprocessor.reformer.Z[5]
preprocessor.reformer.Z[6]
preprocessor.reformer.Z[7]
preprocessor.reformer.der(Z[1])
preprocessor.reformer.der(Z[2])
preprocessor.reformer.der(Z[3])
preprocessor.reformer.der(Z[4])
preprocessor.reformer.der(Z[5])
preprocessor.reformer.der(Z[6])
preprocessor.reformer.der(Z[7])
preprocessor.reformer.air[1]
preprocessor.reformer.air[2]
preprocessor.reformer.air[3]
preprocessor.reformer.air[4]
preprocessor.reformer.index[1]
preprocessor.reformer.index[2]
preprocessor.reformer.index[3]
preprocessor.reformer.index[4]
preprocessor.reformer.index[5]
preprocessor.reformer.index[6]
preprocessor.reformer.index[7]
preprocessor.steamMix_TZ.q.Q_flow
preprocessor.steamMix_TZ.feed.m_flow
preprocessor.steamMix_TZ.feed.h_outflow
preprocessor.steamMix_TZ.drain.X_outflow[1]
preprocessor.steamMix_TZ.drain.X_outflow[2]
preprocessor.steamMix_TZ.drain.X_outflow[3]
preprocessor.steamMix_TZ.drain.X_outflow[4]
preprocessor.steamMix_TZ.drain.X_outflow[5]
preprocessor.steamMix_TZ.drain.X_outflow[6]
preprocessor.steamMix_TZ.drain.X_outflow[7]
preprocessor.steamMix_TZ.initOpt
preprocessor.steamMix_TZ.pstart
preprocessor.steamMix_TZ.Tstart
preprocessor.steamMix_TZ.Xstart[1]
preprocessor.steamMix_TZ.Xstart[2]
preprocessor.steamMix_TZ.Xstart[3]
preprocessor.steamMix_TZ.Xstart[4]
preprocessor.steamMix_TZ.Xstart[5]
preprocessor.steamMix_TZ.Xstart[6]
preprocessor.steamMix_TZ.Xstart[7]
preprocessor.steamMix_TZ.m_flow_start
preprocessor.steamMix_TZ.positiveFlow
preprocessor.steamMix_TZ.T
preprocessor.steamMix_TZ.der(T)
preprocessor.steamMix_TZ.hi
preprocessor.steamMix_TZ.X[1]
preprocessor.steamMix_TZ.X[2]
preprocessor.steamMix_TZ.X[3]
preprocessor.steamMix_TZ.X[4]
preprocessor.steamMix_TZ.X[5]
preprocessor.steamMix_TZ.X[6]
preprocessor.steamMix_TZ.X[7]
preprocessor.steamMix_TZ.V_tot
preprocessor.steamMix_TZ.realTimeMode
preprocessor.steamMix_TZ.hSample
preprocessor.steamMix_TZ.sampleStartTime
preprocessor.steamMix_TZ.useDelay
preprocessor.steamMix_TZ.useAssert
preprocessor.steamMix_TZ.Zstart[1]
preprocessor.steamMix_TZ.Zstart[2]
preprocessor.steamMix_TZ.Zstart[3]
preprocessor.steamMix_TZ.Zstart[4]
preprocessor.steamMix_TZ.Zstart[5]
preprocessor.steamMix_TZ.Zstart[6]
preprocessor.steamMix_TZ.Zstart[7]
preprocessor.steamMix_TZ.QuasiStatic
preprocessor.steamMix_TZ.gas.X[1]
preprocessor.steamMix_TZ.gas.X[2]
preprocessor.steamMix_TZ.gas.X[3]
preprocessor.steamMix_TZ.gas.X[4]
preprocessor.steamMix_TZ.gas.X[5]
preprocessor.steamMix_TZ.gas.X[6]
preprocessor.steamMix_TZ.gas.X[7]
preprocessor.steamMix_TZ.gas.Xi[1]
preprocessor.steamMix_TZ.gas.Xi[2]
preprocessor.steamMix_TZ.gas.Xi[3]
preprocessor.steamMix_TZ.gas.Xi[4]
preprocessor.steamMix_TZ.gas.Xi[5]
preprocessor.steamMix_TZ.gas.Xi[6]
preprocessor.steamMix_TZ.gas.Xi[7]
preprocessor.steamMix_TZ.gas.d
preprocessor.steamMix_TZ.gas.u
preprocessor.steamMix_TZ.gas.Rg
preprocessor.steamMix_TZ.gas.MM
preprocessor.steamMix_TZ.gas.assertlevel
preprocessor.steamMix_TZ.gas.state.p
preprocessor.steamMix_TZ.gas.state.T
preprocessor.steamMix_TZ.gas.state.X[1]
preprocessor.steamMix_TZ.gas.state.X[2]
preprocessor.steamMix_TZ.gas.state.X[3]
preprocessor.steamMix_TZ.gas.state.X[4]
preprocessor.steamMix_TZ.gas.state.X[5]
preprocessor.steamMix_TZ.gas.state.X[6]
preprocessor.steamMix_TZ.gas.state.X[7]
preprocessor.steamMix_TZ.gas.preferredMediumStates
preprocessor.steamMix_TZ.gas.T_degC
preprocessor.steamMix_TZ.gas.p_bar
preprocessor.steamMix_TZ.gas.Z[1]
preprocessor.steamMix_TZ.gas.Z[2]
preprocessor.steamMix_TZ.gas.Z[3]
preprocessor.steamMix_TZ.gas.Z[4]
preprocessor.steamMix_TZ.gas.Z[5]
preprocessor.steamMix_TZ.gas.Z[6]
preprocessor.steamMix_TZ.gas.Z[7]
preprocessor.steamMix_TZ.gas.dUZT[1]
preprocessor.steamMix_TZ.gas.dUZT[2]
preprocessor.steamMix_TZ.gas.dUZT[3]
preprocessor.steamMix_TZ.gas.dUZT[4]
preprocessor.steamMix_TZ.gas.dUZT[5]
preprocessor.steamMix_TZ.gas.dUZT[6]
preprocessor.steamMix_TZ.gas.dUZT[7]
preprocessor.steamMix_TZ.gas.h_component[1]
preprocessor.steamMix_TZ.gas.h_component[2]
preprocessor.steamMix_TZ.gas.h_component[3]
preprocessor.steamMix_TZ.gas.h_component[4]
preprocessor.steamMix_TZ.gas.h_component[5]
preprocessor.steamMix_TZ.gas.h_component[6]
preprocessor.steamMix_TZ.gas.h_component[7]
preprocessor.steamMix_TZ.gas.s_component[1]
preprocessor.steamMix_TZ.gas.s_component[2]
preprocessor.steamMix_TZ.gas.s_component[3]
preprocessor.steamMix_TZ.gas.s_component[4]
preprocessor.steamMix_TZ.gas.s_component[5]
preprocessor.steamMix_TZ.gas.s_component[6]
preprocessor.steamMix_TZ.gas.s_component[7]
preprocessor.steamMix_TZ.gas.u_comp[1]
preprocessor.steamMix_TZ.gas.u_comp[2]
preprocessor.steamMix_TZ.gas.u_comp[3]
preprocessor.steamMix_TZ.gas.u_comp[4]
preprocessor.steamMix_TZ.gas.u_comp[5]
preprocessor.steamMix_TZ.gas.u_comp[6]
preprocessor.steamMix_TZ.gas.u_comp[7]
preprocessor.steamMix_TZ.gas.cp
preprocessor.steamMix_TZ.gas.g_formation[1]
preprocessor.steamMix_TZ.gas.g_formation[2]
preprocessor.steamMix_TZ.gas.g_formation[3]
preprocessor.steamMix_TZ.gas.g_formation[4]
preprocessor.steamMix_TZ.gas.g_formation[5]
preprocessor.steamMix_TZ.gas.g_formation[6]
preprocessor.steamMix_TZ.gas.g_formation[7]
preprocessor.steamMix_TZ.gas.ddTp
preprocessor.steamMix_TZ.gas.ddpT
preprocessor.steamMix_TZ.gas.dupT
preprocessor.steamMix_TZ.gas.duTp
preprocessor.steamMix_TZ.gas.ddx[1]
preprocessor.steamMix_TZ.gas.ddx[2]
preprocessor.steamMix_TZ.gas.ddx[3]
preprocessor.steamMix_TZ.gas.ddx[4]
preprocessor.steamMix_TZ.gas.ddx[5]
preprocessor.steamMix_TZ.gas.ddx[6]
preprocessor.steamMix_TZ.gas.ddx[7]
preprocessor.steamMix_TZ.M
preprocessor.steamMix_TZ.E_tot
preprocessor.steamMix_TZ.MX[1]
preprocessor.steamMix_TZ.MX[2]
preprocessor.steamMix_TZ.MX[3]
preprocessor.steamMix_TZ.MX[4]
preprocessor.steamMix_TZ.MX[5]
preprocessor.steamMix_TZ.MX[6]
preprocessor.steamMix_TZ.MX[7]
preprocessor.steamMix_TZ.sE
preprocessor.steamMix_TZ.Moles_z[1]
preprocessor.steamMix_TZ.der(Moles_z[1])
preprocessor.steamMix_TZ.Moles_z[2]
preprocessor.steamMix_TZ.der(Moles_z[2])
preprocessor.steamMix_TZ.Moles_z[3]
preprocessor.steamMix_TZ.der(Moles_z[3])
preprocessor.steamMix_TZ.Moles_z[4]
preprocessor.steamMix_TZ.der(Moles_z[4])
preprocessor.steamMix_TZ.Moles_z[5]
preprocessor.steamMix_TZ.der(Moles_z[5])
preprocessor.steamMix_TZ.Moles_z[6]
preprocessor.steamMix_TZ.der(Moles_z[6])
preprocessor.steamMix_TZ.Moles_z[7]
preprocessor.steamMix_TZ.der(Moles_z[7])
preprocessor.steamMix_TZ.Moles
preprocessor.steamMix_TZ.Z[1]
preprocessor.steamMix_TZ.Z[2]
preprocessor.steamMix_TZ.Z[3]
preprocessor.steamMix_TZ.Z[4]
preprocessor.steamMix_TZ.Z[5]
preprocessor.steamMix_TZ.Z[6]
preprocessor.steamMix_TZ.Z[7]
preprocessor.steamMix_TZ.Rmol[1]
preprocessor.steamMix_TZ.Rmol[2]
preprocessor.steamMix_TZ.Rmol[3]
preprocessor.steamMix_TZ.Rmol[4]
preprocessor.steamMix_TZ.Rmol[5]
preprocessor.steamMix_TZ.Rmol[6]
preprocessor.steamMix_TZ.Rmol[7]
_GlobalScope.Modelon.Media.Templates.IdealGas.R[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.R[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.R[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.R[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.R[5]
_GlobalScope.Modelon.Media.Templates.IdealGas.R[6]
_GlobalScope.Modelon.Media.Templates.IdealGas.R[7]
preprocessor.steamMix_TZ.dUTZ
preprocessor.steamMix_TZ.rZ[1]
preprocessor.steamMix_TZ.rZ[2]
preprocessor.steamMix_TZ.rZ[3]
preprocessor.steamMix_TZ.rZ[4]
preprocessor.steamMix_TZ.rZ[5]
preprocessor.steamMix_TZ.rZ[6]
preprocessor.steamMix_TZ.rZ[7]
preprocessor.steamMix_TZ.Mmix
preprocessor.steamMix_TZ.dM
preprocessor.steamMix_TZ.dE
preprocessor.steamMix_TZ.dMX[1]
preprocessor.steamMix_TZ.dMX[2]
preprocessor.steamMix_TZ.dMX[3]
preprocessor.steamMix_TZ.dMX[4]
preprocessor.steamMix_TZ.dMX[5]
preprocessor.steamMix_TZ.dMX[6]
preprocessor.steamMix_TZ.dMX[7]
preprocessor.steamMix_TZ.Tr
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[7]
preprocessor.steamMix_TZ.feed_steam.m_flow
preprocessor.steamMix_TZ.feed_steam.h_outflow
preprocessor.steamMix_TZ.feed_steam.X_outflow[1]
preprocessor.steamMix_TZ.h_in_steam
preprocessor.steamMix_TZ.h_in_NG
preprocessor.steamMix_TZ.Y[1]
preprocessor.steamMix_TZ.Y[2]
preprocessor.steamMix_TZ.Y[3]
preprocessor.steamMix_TZ.Y[4]
preprocessor.steamMix_TZ.Y[5]
preprocessor.steamMix_TZ.Y[6]
preprocessor.steamMix_TZ.Y[7]
preprocessor.steamMix_TZ.state_water.p
preprocessor.steamMix_TZ.state_water.T
preprocessor.steamMix_TZ.state_water.X[1]
preprocessor.steamMix_TZ.hi_2
preprocessor.steamMix_TZ.X_i2[1]
preprocessor.steamMix_TZ.X_i2[2]
preprocessor.steamMix_TZ.X_i2[3]
preprocessor.steamMix_TZ.X_i2[4]
preprocessor.steamMix_TZ.X_i2[5]
preprocessor.steamMix_TZ.X_i2[6]
preprocessor.steamMix_TZ.X_i2[7]
preprocessor.steamMix_TZ.S_mix[1]
preprocessor.steamMix_TZ.S_mix[2]
preprocessor.steamMix_TZ.S_mix[3]
preprocessor.steamMix_TZ.S_mix[4]
preprocessor.steamMix_TZ.S_mix[5]
preprocessor.steamMix_TZ.S_mix[6]
preprocessor.steamMix_TZ.S_mix[7]
preprocessor.steamMix_TZ.index[1]
preprocessor.steamGeneratorHX.geoHX.N_parallel
preprocessor.steamGeneratorHX.geoHX.L
preprocessor.steamGeneratorHX.geoHX.Dhyd
preprocessor.steamGeneratorHX.geoHX.Across
preprocessor.steamGeneratorHX.geoHX.C
preprocessor.steamGeneratorHX.geoHX.V
preprocessor.steamGeneratorHX.geoHX.Aheat
preprocessor.steamGeneratorHX.Apipe
preprocessor.steamGeneratorHX.dp_nom_gas
preprocessor.steamGeneratorHX.steamGenerator.Apipe
preprocessor.steamGeneratorHX.steamGenerator.kc
preprocessor.steamGeneratorHX.steamGenerator.CF_foul
preprocessor.steamGeneratorHX.steamGenerator.T_start
preprocessor.steamGeneratorHX.steamGenerator.CounterTemps
preprocessor.steamGeneratorHX.steamGenerator.l_pu[1]
preprocessor.steamGeneratorHX.steamGenerator.l_pu[2]
preprocessor.steamGeneratorHX.steamGenerator.l_pu[3]
preprocessor.steamGeneratorHX.steamGenerator.M_wall
preprocessor.steamGeneratorHX.steamGenerator.Cp_wall
preprocessor.steamGeneratorHX.steamGenerator.feed.X_outflow[1]
preprocessor.steamGeneratorHX.steamGenerator.drain.X_outflow[1]
preprocessor.steamGeneratorHX.steamGenerator.ho
preprocessor.steamGeneratorHX.steamGenerator.h_vap
preprocessor.steamGeneratorHX.steamGenerator.Q_flow
preprocessor.steamGeneratorHX.steamGenerator.Q_boil
preprocessor.steamGeneratorHX.steamGenerator.T_liq
preprocessor.steamGeneratorHX.steamGenerator.T_2phase
preprocessor.steamGeneratorHX.steamGenerator.T_steam
preprocessor.steamGeneratorHX.steamGenerator.T_wall
preprocessor.steamGeneratorHX.steamGenerator.der(T_wall)
preprocessor.steamGeneratorHX.steamGenerator.heat.kc
preprocessor.steamGeneratorHX.steamGenerator.heat.capacityFlow
preprocessor.steamGeneratorHX.steamGenerator.in_dT
preprocessor.steamGeneratorHX.steamGenerator.Cp_boil
preprocessor.steamGeneratorHX.steamGenerator.Cmin
preprocessor.steamGeneratorHX.steamGenerator.C
preprocessor.steamGeneratorHX.steamGenerator.eps
preprocessor.steamGeneratorHX.steamGenerator.qmax
preprocessor.steamGeneratorHX.steamGenerator.NTU
preprocessor.steamGeneratorHX.staticHXChannel.geo.N_parallel
preprocessor.steamGeneratorHX.staticHXChannel.geo.L
preprocessor.steamGeneratorHX.staticHXChannel.geo.Dhyd
preprocessor.steamGeneratorHX.staticHXChannel.geo.Across
preprocessor.steamGeneratorHX.staticHXChannel.geo.C
preprocessor.steamGeneratorHX.staticHXChannel.geo.V
preprocessor.steamGeneratorHX.staticHXChannel.geo.Aheat
preprocessor.steamGeneratorHX.staticHXChannel.N
preprocessor.steamGeneratorHX.staticHXChannel.pstart
preprocessor.steamGeneratorHX.staticHXChannel.Tstart
preprocessor.steamGeneratorHX.staticHXChannel.Xstart[1]
preprocessor.steamGeneratorHX.staticHXChannel.Xstart[2]
preprocessor.steamGeneratorHX.staticHXChannel.Xstart[3]
preprocessor.steamGeneratorHX.staticHXChannel.Xstart[4]
preprocessor.steamGeneratorHX.staticHXChannel.Xstart[5]
preprocessor.steamGeneratorHX.staticHXChannel.positiveFlow
preprocessor.steamGeneratorHX.staticHXChannel.C_Re
preprocessor.steamGeneratorHX.staticHXChannel.n_Re
preprocessor.steamGeneratorHX.staticHXChannel.n_Pr
preprocessor.steamGeneratorHX.staticHXChannel.linearFriction
preprocessor.steamGeneratorHX.staticHXChannel.FFtype
preprocessor.steamGeneratorHX.staticHXChannel.Kfnom
preprocessor.steamGeneratorHX.staticHXChannel.m_flow_nom
preprocessor.steamGeneratorHX.staticHXChannel.dpnom
preprocessor.steamGeneratorHX.staticHXChannel.rhonom
preprocessor.steamGeneratorHX.staticHXChannel.Cfnom
preprocessor.steamGeneratorHX.staticHXChannel.e
preprocessor.steamGeneratorHX.staticHXChannel.Kfc
preprocessor.steamGeneratorHX.staticHXChannel.wnf
preprocessor.steamGeneratorHX.staticHXChannel.Q
preprocessor.steamGeneratorHX.staticHXChannel.dp
preprocessor.steamGeneratorHX.staticHXChannel.Re
preprocessor.steamGeneratorHX.staticHXChannel.Nu
preprocessor.steamGeneratorHX.staticHXChannel.Pr
preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.d
preprocessor.steamGeneratorHX.staticHXChannel.fluid.u
preprocessor.steamGeneratorHX.staticHXChannel.fluid.Rg
preprocessor.steamGeneratorHX.staticHXChannel.fluid.MM
preprocessor.steamGeneratorHX.staticHXChannel.fluid.assertlevel
preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.p
preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.T
preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.preferredMediumStates
preprocessor.steamGeneratorHX.staticHXChannel.fluid.T_degC
preprocessor.steamGeneratorHX.staticHXChannel.fluid.p_bar
preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.cp
preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[5]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddTp
preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddpT
preprocessor.steamGeneratorHX.staticHXChannel.fluid.dupT
preprocessor.steamGeneratorHX.staticHXChannel.fluid.duTp
preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[1]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[2]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[3]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[4]
preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[5]
preprocessor.steamGeneratorHX.staticHXChannel.state.p
preprocessor.steamGeneratorHX.staticHXChannel.state.T
preprocessor.steamGeneratorHX.staticHXChannel.state.X[1]
preprocessor.steamGeneratorHX.staticHXChannel.state.X[2]
preprocessor.steamGeneratorHX.staticHXChannel.state.X[3]
preprocessor.steamGeneratorHX.staticHXChannel.state.X[4]
preprocessor.steamGeneratorHX.staticHXChannel.state.X[5]
preprocessor.steamGeneratorHX.staticHXChannel.v_in
preprocessor.steamGeneratorHX.staticHXChannel.eta
preprocessor.steamGeneratorHX.staticHXChannel.lambda
preprocessor.steamGeneratorHX.staticHXChannel.cp_1
preprocessor.steamGeneratorHX.staticHXChannel.cp_est
preprocessor.steamGeneratorHX.staticHXChannel.nonlinear
preprocessor.steamGeneratorHX.staticHXChannel.hi
preprocessor.steamGeneratorHX.staticHXChannel.ho
preprocessor.steamGeneratorHX.staticHXChannel.omega_hyd
preprocessor.steamGeneratorHX.staticHXChannel.Kf
preprocessor.steamGeneratorHX.staticHXChannel.Kfl
preprocessor.steamGeneratorHX.staticHXChannel.Cf
preprocessor.steamGeneratorHX.staticHXChannel.h_start
preprocessor.steamGeneratorHX.feed_water.X_outflow[1]
preprocessor.steamGeneratorHX.drain_steam.h_outflow
preprocessor.steamGeneratorHX.drain_steam.X_outflow[1]
preprocessor.steamGeneratorHX.T_start
preprocessor.steamGeneratorHX.pstart
preprocessor.steamGeneratorHX.m_flow_nom
preprocessor.steamGeneratorHX.positiveFlow
preprocessor.drain_Reformate.h_outflow
preprocessor.drain_Reformate.X_outflow[1]
preprocessor.drain_Reformate.X_outflow[2]
preprocessor.drain_Reformate.X_outflow[3]
preprocessor.drain_Reformate.X_outflow[4]
preprocessor.drain_Reformate.X_outflow[5]
preprocessor.drain_Reformate.X_outflow[6]
preprocessor.drain_Reformate.X_outflow[7]
preprocessor.drain_Reformate.der(X_outflow[1])
preprocessor.drain_Reformate.der(X_outflow[2])
preprocessor.drain_Reformate.der(X_outflow[3])
preprocessor.drain_Reformate.der(X_outflow[4])
preprocessor.drain_Reformate.der(X_outflow[5])
preprocessor.drain_Reformate.der(X_outflow[6])
preprocessor.drain_Reformate.der(X_outflow[7])
preprocessor.AirHeater.n_channels_prim
preprocessor.AirHeater.L_prim
preprocessor.AirHeater.Dhyd_prim
preprocessor.AirHeater.A_prim
preprocessor.AirHeater.V_prim
preprocessor.AirHeater.A_heat_prim
preprocessor.AirHeater.n_channels_sec
preprocessor.AirHeater.L_sec
preprocessor.AirHeater.Dhyd_sec
preprocessor.AirHeater.A_sec
preprocessor.AirHeater.V_sec
preprocessor.AirHeater.A_heat_sec
preprocessor.AirHeater.dp_smooth
preprocessor.AirHeater.mflow_smooth
preprocessor.AirHeater.from_dp_prim
preprocessor.AirHeater.positiveFlow_prim
preprocessor.AirHeater.generateEventForReversal_prim
preprocessor.AirHeater.from_dp_sec
preprocessor.AirHeater.positiveFlow_sec
preprocessor.AirHeater.generateEventForReversal_sec
preprocessor.AirHeater.dp_prim_start
preprocessor.AirHeater.T_prim_start
preprocessor.AirHeater.dp_sec_start
preprocessor.AirHeater.T_sec_start
preprocessor.AirHeater.feed_sec.X_outflow[1]
preprocessor.AirHeater.feed_sec.X_outflow[2]
preprocessor.AirHeater.feed_sec.X_outflow[3]
preprocessor.AirHeater.feed_sec.X_outflow[4]
preprocessor.AirHeater.feed_sec.X_outflow[5]
preprocessor.AirHeater.drain_sec.h_outflow
preprocessor.AirHeater.summary.Q_flow
preprocessor.AirHeater.summary.T_in
preprocessor.AirHeater.summary.T_out
preprocessor.AirHeater.summary.h_in
preprocessor.AirHeater.summary.h_out
preprocessor.AirHeater.summary.dp
preprocessor.AirHeater.summary.T_sec_in
preprocessor.AirHeater.summary.T_sec_out
preprocessor.AirHeater.summary.h_sec_in
preprocessor.AirHeater.summary.h_sec_out
preprocessor.AirHeater.summary.dp_sec
preprocessor.AirHeater.summary.Tpinch_prim_in
preprocessor.AirHeater.summary.Tpinch_prim_out
preprocessor.AirHeater.summary.lmtd
preprocessor.AirHeater.summary.effectiveness
preprocessor.AirHeater.heatExchanger.friction_prim.A
preprocessor.AirHeater.heatExchanger.friction_prim.Dhyd
preprocessor.AirHeater.heatExchanger.friction_prim.n_channels
preprocessor.AirHeater.heatExchanger.friction_prim.lengthFraction
preprocessor.AirHeater.heatExchanger.friction_prim.flowFraction0
preprocessor.AirHeater.heatExchanger.friction_prim.dpFraction0
preprocessor.AirHeater.heatExchanger.friction_prim.F_user
preprocessor.AirHeater.heatExchanger.friction_prim.from_dp
preprocessor.AirHeater.heatExchanger.friction_prim.positiveFlow
preprocessor.AirHeater.heatExchanger.friction_prim.dp_smooth
preprocessor.AirHeater.heatExchanger.friction_prim.mflow_smooth
preprocessor.AirHeater.heatExchanger.friction_prim.useFixedDensity
preprocessor.AirHeater.heatExchanger.friction_prim.reference_d
preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[1]
preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[2]
preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[3]
preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[4]
preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[5]
preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[6]
preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[7]
preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[1]
preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[2]
preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[3]
preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[4]
preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[5]
preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[6]
preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[7]
preprocessor.AirHeater.heatExchanger.friction_prim.dp_from_isothermal
preprocessor.AirHeater.heatExchanger.friction_prim.m_flow
preprocessor.AirHeater.heatExchanger.friction_prim.dA
preprocessor.AirHeater.heatExchanger.friction_prim.dB
preprocessor.AirHeater.heatExchanger.friction_prim.d0
preprocessor.AirHeater.heatExchanger.friction_prim.dp0
preprocessor.AirHeater.heatExchanger.friction_prim.m_flow0
preprocessor.AirHeater.heatExchanger.friction_sec.A
preprocessor.AirHeater.heatExchanger.friction_sec.Dhyd
preprocessor.AirHeater.heatExchanger.friction_sec.n_channels
preprocessor.AirHeater.heatExchanger.friction_sec.lengthFraction
preprocessor.AirHeater.heatExchanger.friction_sec.flowFraction0
preprocessor.AirHeater.heatExchanger.friction_sec.dpFraction0
preprocessor.AirHeater.heatExchanger.friction_sec.F_user
preprocessor.AirHeater.heatExchanger.friction_sec.from_dp
preprocessor.AirHeater.heatExchanger.friction_sec.positiveFlow
preprocessor.AirHeater.heatExchanger.friction_sec.dp_smooth
preprocessor.AirHeater.heatExchanger.friction_sec.mflow_smooth
preprocessor.AirHeater.heatExchanger.friction_sec.useFixedDensity
preprocessor.AirHeater.heatExchanger.friction_sec.reference_d
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[1]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[2]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[3]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[4]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[5]
preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[1]
preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[2]
preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[3]
preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[4]
preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[5]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[1]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[2]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[3]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[4]
preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[5]
preprocessor.AirHeater.heatExchanger.friction_sec.dp_from_isothermal
preprocessor.AirHeater.heatExchanger.friction_sec.m_flow
preprocessor.AirHeater.heatExchanger.friction_sec.dA
preprocessor.AirHeater.heatExchanger.friction_sec.dB
preprocessor.AirHeater.heatExchanger.friction_sec.d0
preprocessor.AirHeater.heatExchanger.friction_sec.dp0
preprocessor.AirHeater.heatExchanger.friction_sec.m_flow0
preprocessor.AirHeater.heatExchanger.CF_Friction
preprocessor.AirHeater.heatExchanger.CF_Friction_sec
preprocessor.AirHeater.heatExchanger.effectivenessStreamChoice
preprocessor.AirHeater.heatExchanger.n_channels_prim
preprocessor.AirHeater.heatExchanger.L_prim
preprocessor.AirHeater.heatExchanger.Dhyd_prim
preprocessor.AirHeater.heatExchanger.A_prim
preprocessor.AirHeater.heatExchanger.V_prim
preprocessor.AirHeater.heatExchanger.A_heat_prim
preprocessor.AirHeater.heatExchanger.n_channels_sec
preprocessor.AirHeater.heatExchanger.L_sec
preprocessor.AirHeater.heatExchanger.Dhyd_sec
preprocessor.AirHeater.heatExchanger.A_sec
preprocessor.AirHeater.heatExchanger.V_sec
preprocessor.AirHeater.heatExchanger.A_heat_sec
preprocessor.AirHeater.heatExchanger.init_prim.m_flow
preprocessor.AirHeater.heatExchanger.init_prim.p_in
preprocessor.AirHeater.heatExchanger.init_prim.dp
preprocessor.AirHeater.heatExchanger.init_prim.p_out
preprocessor.AirHeater.heatExchanger.init_prim.initFromEnthalpy
preprocessor.AirHeater.heatExchanger.init_prim.T_in
preprocessor.AirHeater.heatExchanger.init_prim.dT
preprocessor.AirHeater.heatExchanger.init_prim.T_out
preprocessor.AirHeater.heatExchanger.init_prim.h_in
preprocessor.AirHeater.heatExchanger.init_prim.dh
preprocessor.AirHeater.heatExchanger.init_prim.h_out
preprocessor.AirHeater.heatExchanger.init_prim.X[1]
preprocessor.AirHeater.heatExchanger.init_prim.X[2]
preprocessor.AirHeater.heatExchanger.init_prim.X[3]
preprocessor.AirHeater.heatExchanger.init_prim.X[4]
preprocessor.AirHeater.heatExchanger.init_prim.X[5]
preprocessor.AirHeater.heatExchanger.init_prim.X[6]
preprocessor.AirHeater.heatExchanger.init_prim.X[7]
preprocessor.AirHeater.heatExchanger.init_sec.m_flow
preprocessor.AirHeater.heatExchanger.init_sec.p_in
preprocessor.AirHeater.heatExchanger.init_sec.dp
preprocessor.AirHeater.heatExchanger.init_sec.p_out
preprocessor.AirHeater.heatExchanger.init_sec.initFromEnthalpy
preprocessor.AirHeater.heatExchanger.init_sec.T_in
preprocessor.AirHeater.heatExchanger.init_sec.dT
preprocessor.AirHeater.heatExchanger.init_sec.T_out
preprocessor.AirHeater.heatExchanger.init_sec.h_in
preprocessor.AirHeater.heatExchanger.init_sec.dh
preprocessor.AirHeater.heatExchanger.init_sec.h_out
preprocessor.AirHeater.heatExchanger.init_sec.X[1]
preprocessor.AirHeater.heatExchanger.init_sec.X[2]
preprocessor.AirHeater.heatExchanger.init_sec.X[3]
preprocessor.AirHeater.heatExchanger.init_sec.X[4]
preprocessor.AirHeater.heatExchanger.init_sec.X[5]
preprocessor.AirHeater.heatExchanger.dp_smooth
preprocessor.AirHeater.heatExchanger.mflow_smooth
preprocessor.AirHeater.heatExchanger.from_dp_prim
preprocessor.AirHeater.heatExchanger.positiveFlow_prim
preprocessor.AirHeater.heatExchanger.generateEventForReversal_prim
preprocessor.AirHeater.heatExchanger.from_dp_sec
preprocessor.AirHeater.heatExchanger.positiveFlow_sec
preprocessor.AirHeater.heatExchanger.generateEventForReversal_sec
preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[1]
preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[2]
preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[3]
preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[4]
preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[5]
preprocessor.AirHeater.heatExchanger.pprim_out
preprocessor.AirHeater.heatExchanger.psec_out
preprocessor.AirHeater.heatExchanger.C
preprocessor.AirHeater.heatExchanger.Q_max
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.p
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.T
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[1]
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[2]
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[3]
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[4]
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[5]
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[6]
preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[7]
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.p
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.T
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[1]
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[2]
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[3]
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[4]
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[5]
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[6]
preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[7]
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.p
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.T
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[1]
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[2]
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[3]
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[4]
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[5]
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[6]
preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[7]
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.p
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.T
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[1]
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[2]
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[3]
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[4]
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[5]
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[6]
preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[7]
preprocessor.AirHeater.heatExchanger.TAsec_out
preprocessor.AirHeater.heatExchanger.TBsec_out
preprocessor.AirHeater.heatExchanger.stateAsec_inflow.T
preprocessor.AirHeater.heatExchanger.stateBsec_inflow.T
preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[1]
preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[2]
preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[3]
preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[4]
preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[5]
preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[1]
preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[2]
preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[3]
preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[4]
preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[5]
preprocessor.AirHeater.heatExchanger.hprim_Tsec_in
preprocessor.AirHeater.heatExchanger.hsec_Tprim_in
preprocessor.AirHeater.heatExchanger.XAprim_in[1]
preprocessor.AirHeater.heatExchanger.XAprim_in[2]
preprocessor.AirHeater.heatExchanger.XAprim_in[3]
preprocessor.AirHeater.heatExchanger.XAprim_in[4]
preprocessor.AirHeater.heatExchanger.XAprim_in[5]
preprocessor.AirHeater.heatExchanger.XAprim_in[6]
preprocessor.AirHeater.heatExchanger.XAprim_in[7]
preprocessor.AirHeater.heatExchanger.XBprim_in[1]
preprocessor.AirHeater.heatExchanger.XBprim_in[2]
preprocessor.AirHeater.heatExchanger.XBprim_in[3]
preprocessor.AirHeater.heatExchanger.XBprim_in[4]
preprocessor.AirHeater.heatExchanger.XBprim_in[5]
preprocessor.AirHeater.heatExchanger.XBprim_in[6]
preprocessor.AirHeater.heatExchanger.XBprim_in[7]
preprocessor.AirHeater.heatExchanger.Xprim[1]
preprocessor.AirHeater.heatExchanger.Xprim[2]
preprocessor.AirHeater.heatExchanger.Xprim[3]
preprocessor.AirHeater.heatExchanger.Xprim[4]
preprocessor.AirHeater.heatExchanger.Xprim[5]
preprocessor.AirHeater.heatExchanger.Xprim[6]
preprocessor.AirHeater.heatExchanger.Xprim[7]
preprocessor.AirHeater.heatExchanger.XAsec_in[1]
preprocessor.AirHeater.heatExchanger.XAsec_in[2]
preprocessor.AirHeater.heatExchanger.XAsec_in[3]
preprocessor.AirHeater.heatExchanger.XAsec_in[4]
preprocessor.AirHeater.heatExchanger.XAsec_in[5]
preprocessor.AirHeater.heatExchanger.XBsec_in[1]
preprocessor.AirHeater.heatExchanger.XBsec_in[2]
preprocessor.AirHeater.heatExchanger.XBsec_in[3]
preprocessor.AirHeater.heatExchanger.XBsec_in[4]
preprocessor.AirHeater.heatExchanger.XBsec_in[5]
preprocessor.AirHeater.heatExchanger.Xsec[1]
preprocessor.AirHeater.heatExchanger.Xsec[2]
preprocessor.AirHeater.heatExchanger.Xsec[3]
preprocessor.AirHeater.heatExchanger.Xsec[4]
preprocessor.AirHeater.heatExchanger.Xsec[5]
preprocessor.AirHeater.heatExchanger.CAprim
preprocessor.AirHeater.heatExchanger.CBprim
preprocessor.AirHeater.heatExchanger.CAsec
preprocessor.AirHeater.heatExchanger.CBsec
preprocessor.AirHeater.heatExchanger.Cprim
preprocessor.AirHeater.heatExchanger.Csec
preprocessor.AirHeater.heatExchanger.Cmin
preprocessor.AirHeater.heatExchanger.Cmax
preprocessor.AirHeater.heatExchanger.Q_max_prim
preprocessor.AirHeater.heatExchanger.Q_max_sec
preprocessor.AirHeater.heatExchanger.A_heat
preprocessor.AirHeater.heatExchanger.U
preprocessor.AirHeater.heatExchanger.NTU
preprocessor.AirHeater.heatExchanger.CF_HeatTransfer
preprocessor.AirHeater.heatExchanger.CF_HeatTransfer_sec
preprocessor.AirHeater.heatExchanger.thickness_wall
preprocessor.AirHeater.heatExchanger.heatFlowDynamics
preprocessor.AirHeater.heatExchanger.order
preprocessor.AirHeater.heatExchanger.riseTime
preprocessor.AirHeater.heatExchanger.wall.c
preprocessor.AirHeater.heatExchanger.wall.rho
preprocessor.AirHeater.heatExchanger.wall.lambda
preprocessor.AirHeater.heatExchanger.htcoeff_prim.A
preprocessor.AirHeater.heatExchanger.htcoeff_prim.L
preprocessor.AirHeater.heatExchanger.htcoeff_prim.Dhyd
preprocessor.AirHeater.heatExchanger.htcoeff_prim.F_user
preprocessor.AirHeater.heatExchanger.htcoeff_prim.ht_from_isothermal
preprocessor.AirHeater.heatExchanger.htcoeff_prim.CF_length
preprocessor.AirHeater.heatExchanger.htcoeff_prim.alpha
preprocessor.AirHeater.heatExchanger.htcoeff_sec.A
preprocessor.AirHeater.heatExchanger.htcoeff_sec.L
preprocessor.AirHeater.heatExchanger.htcoeff_sec.Dhyd
preprocessor.AirHeater.heatExchanger.htcoeff_sec.F_user
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[1]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[2]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[3]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[4]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[5]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[1]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[2]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[3]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[4]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[5]
preprocessor.AirHeater.heatExchanger.htcoeff_sec.ht_from_isothermal
preprocessor.AirHeater.heatExchanger.htcoeff_sec.CF_length
preprocessor.AirHeater.heatExchanger.htcoeff_sec.alpha
preprocessor.AirHeater.heatExchanger.kc_prim
preprocessor.AirHeater.heatExchanger.kc_sec
preprocessor.AirHeater.heatExchanger.kc_wall
preprocessor.AirHeater.A_heat
preprocessor.AirHeater.thickness_wall
preprocessor.AirHeater.heatFlowDynamics
preprocessor.AirHeater.order
preprocessor.AirHeater.riseTime
preprocessor.feed_NG.h_outflow
preprocessor.drain_NGHeat.m_flow
preprocessor.drain_NGHeat.h_outflow
preprocessor.feed_SteamHeat.m_flow
preprocessor.feed_SteamHeat.h_outflow
preprocessor.feed_ATRHeat.m_flow
preprocessor.feed_ATRHeat.h_outflow
preprocessor.drain_ATRHeat.h_outflow
preprocessor.feed_Water.X_outflow[1]
preprocessor.feed_ATRAir.h_outflow
preprocessor.feed_ATRAir.X_outflow[1]
preprocessor.feed_ATRAir.X_outflow[2]
preprocessor.feed_ATRAir.X_outflow[3]
preprocessor.feed_ATRAir.X_outflow[4]
preprocessor.feed_ATRAir.X_outflow[5]
preprocessor.Geometry_Record.ATR_V_tot
preprocessor.Geometry_Record.ATR_m_flow_nom
preprocessor.Geometry_Record.ATR_scale_cat
preprocessor.Geometry_Record.Steam_V_tot
preprocessor.Geometry_Record.Hotgas_V_tot
preprocessor.Geometry_Record.Hotgas_m_flow_nom
preprocessor.Geometry_Record.steamGen_Apipe
preprocessor.Geometry_Record.steamGen_dp_nom_gas
preprocessor.Geometry_Record.steamGen_mflow_nom_gas
preprocessor.Geometry_Record.FuelHeat_m_flow_nom_prim
preprocessor.Geometry_Record.FuelHeat_m_flow_nom_sec
preprocessor.Geometry_Record.FuelHeat_length
preprocessor.Geometry_Record.FuelHeat_Dhyd
preprocessor.Geometry_Record.FuelHeat_Across
preprocessor.Geometry_Record.FuelHeat_Aheat
preprocessor.Geometry_Record.FuelHeat_kc
preprocessor.Geometry_Record.AirHeat_m_flow_nom_prim
preprocessor.Geometry_Record.AirHeat_m_flow_nom_sec
preprocessor.Geometry_Record.AirHeat_length
preprocessor.Geometry_Record.AirHeat_Dhyd
preprocessor.Geometry_Record.AirHeat_Across
preprocessor.Geometry_Record.AirHeat_Aheat
preprocessor.Geometry_Record.AirHeat_kc
preprocessor.Initialization_Record.Tstart
preprocessor.Initialization_Record.ATR_pstart
preprocessor.Initialization_Record.steamMix_pstart
preprocessor.Initialization_Record.steamMix_m_flow_start
preprocessor.Initialization_Record.steamGen_pstart
preprocessor.Initialization_Record.FuelHeat_pstart_prim
preprocessor.Initialization_Record.FuelHeat_pstart_sec
preprocessor.Initialization_Record.AirHeat_pstart_prim
preprocessor.Initialization_Record.AirHeat_pstart_sec
preprocessor.summary.fuel_nS
preprocessor.summary.T_outlet
preprocessor.FuelHeater.n_channels_prim
preprocessor.FuelHeater.L_prim
preprocessor.FuelHeater.Dhyd_prim
preprocessor.FuelHeater.A_prim
preprocessor.FuelHeater.V_prim
preprocessor.FuelHeater.A_heat_prim
preprocessor.FuelHeater.n_channels_sec
preprocessor.FuelHeater.L_sec
preprocessor.FuelHeater.Dhyd_sec
preprocessor.FuelHeater.A_sec
preprocessor.FuelHeater.V_sec
preprocessor.FuelHeater.A_heat_sec
preprocessor.FuelHeater.dp_smooth
preprocessor.FuelHeater.mflow_smooth
preprocessor.FuelHeater.from_dp_prim
preprocessor.FuelHeater.positiveFlow_prim
preprocessor.FuelHeater.generateEventForReversal_prim
preprocessor.FuelHeater.from_dp_sec
preprocessor.FuelHeater.positiveFlow_sec
preprocessor.FuelHeater.generateEventForReversal_sec
preprocessor.FuelHeater.dp_prim_start
preprocessor.FuelHeater.T_prim_start
preprocessor.FuelHeater.dp_sec_start
preprocessor.FuelHeater.T_sec_start
preprocessor.FuelHeater.feed_prim.h_outflow
preprocessor.FuelHeater.drain_sec.h_outflow
preprocessor.FuelHeater.drain_sec.X_outflow[1]
preprocessor.FuelHeater.drain_sec.X_outflow[2]
preprocessor.FuelHeater.drain_sec.X_outflow[3]
preprocessor.FuelHeater.drain_sec.X_outflow[4]
preprocessor.FuelHeater.drain_sec.X_outflow[5]
preprocessor.FuelHeater.drain_sec.X_outflow[6]
preprocessor.FuelHeater.drain_sec.X_outflow[7]
preprocessor.FuelHeater.summary.Q_flow
preprocessor.FuelHeater.summary.T_in
preprocessor.FuelHeater.summary.T_out
preprocessor.FuelHeater.summary.h_in
preprocessor.FuelHeater.summary.h_out
preprocessor.FuelHeater.summary.dp
preprocessor.FuelHeater.summary.T_sec_in
preprocessor.FuelHeater.summary.T_sec_out
preprocessor.FuelHeater.summary.h_sec_in
preprocessor.FuelHeater.summary.h_sec_out
preprocessor.FuelHeater.summary.dp_sec
preprocessor.FuelHeater.summary.Tpinch_prim_in
preprocessor.FuelHeater.summary.Tpinch_prim_out
preprocessor.FuelHeater.summary.lmtd
preprocessor.FuelHeater.summary.effectiveness
preprocessor.FuelHeater.heatExchanger.friction_prim.A
preprocessor.FuelHeater.heatExchanger.friction_prim.Dhyd
preprocessor.FuelHeater.heatExchanger.friction_prim.n_channels
preprocessor.FuelHeater.heatExchanger.friction_prim.lengthFraction
preprocessor.FuelHeater.heatExchanger.friction_prim.flowFraction0
preprocessor.FuelHeater.heatExchanger.friction_prim.dpFraction0
preprocessor.FuelHeater.heatExchanger.friction_prim.F_user
preprocessor.FuelHeater.heatExchanger.friction_prim.from_dp
preprocessor.FuelHeater.heatExchanger.friction_prim.positiveFlow
preprocessor.FuelHeater.heatExchanger.friction_prim.dp_smooth
preprocessor.FuelHeater.heatExchanger.friction_prim.mflow_smooth
preprocessor.FuelHeater.heatExchanger.friction_prim.useFixedDensity
preprocessor.FuelHeater.heatExchanger.friction_prim.reference_d
preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[1]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[2]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[3]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[4]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[5]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[1]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[2]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[3]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[4]
preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[5]
preprocessor.FuelHeater.heatExchanger.friction_prim.dp_from_isothermal
preprocessor.FuelHeater.heatExchanger.friction_prim.m_flow
preprocessor.FuelHeater.heatExchanger.friction_prim.dA
preprocessor.FuelHeater.heatExchanger.friction_prim.dB
preprocessor.FuelHeater.heatExchanger.friction_prim.d0
preprocessor.FuelHeater.heatExchanger.friction_prim.dp0
preprocessor.FuelHeater.heatExchanger.friction_prim.m_flow0
preprocessor.FuelHeater.heatExchanger.friction_sec.A
preprocessor.FuelHeater.heatExchanger.friction_sec.Dhyd
preprocessor.FuelHeater.heatExchanger.friction_sec.n_channels
preprocessor.FuelHeater.heatExchanger.friction_sec.lengthFraction
preprocessor.FuelHeater.heatExchanger.friction_sec.flowFraction0
preprocessor.FuelHeater.heatExchanger.friction_sec.dpFraction0
preprocessor.FuelHeater.heatExchanger.friction_sec.F_user
preprocessor.FuelHeater.heatExchanger.friction_sec.from_dp
preprocessor.FuelHeater.heatExchanger.friction_sec.positiveFlow
preprocessor.FuelHeater.heatExchanger.friction_sec.dp_smooth
preprocessor.FuelHeater.heatExchanger.friction_sec.mflow_smooth
preprocessor.FuelHeater.heatExchanger.friction_sec.useFixedDensity
preprocessor.FuelHeater.heatExchanger.friction_sec.reference_d
preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[1]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[2]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[3]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[4]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[5]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[6]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[7]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[1]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[2]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[3]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[4]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[5]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[6]
preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[7]
preprocessor.FuelHeater.heatExchanger.friction_sec.dp_from_isothermal
preprocessor.FuelHeater.heatExchanger.friction_sec.m_flow
preprocessor.FuelHeater.heatExchanger.friction_sec.dA
preprocessor.FuelHeater.heatExchanger.friction_sec.dB
preprocessor.FuelHeater.heatExchanger.friction_sec.d0
preprocessor.FuelHeater.heatExchanger.friction_sec.dp0
preprocessor.FuelHeater.heatExchanger.friction_sec.m_flow0
preprocessor.FuelHeater.heatExchanger.CF_Friction
preprocessor.FuelHeater.heatExchanger.CF_Friction_sec
preprocessor.FuelHeater.heatExchanger.effectivenessStreamChoice
preprocessor.FuelHeater.heatExchanger.n_channels_prim
preprocessor.FuelHeater.heatExchanger.L_prim
preprocessor.FuelHeater.heatExchanger.Dhyd_prim
preprocessor.FuelHeater.heatExchanger.A_prim
preprocessor.FuelHeater.heatExchanger.V_prim
preprocessor.FuelHeater.heatExchanger.A_heat_prim
preprocessor.FuelHeater.heatExchanger.n_channels_sec
preprocessor.FuelHeater.heatExchanger.L_sec
preprocessor.FuelHeater.heatExchanger.Dhyd_sec
preprocessor.FuelHeater.heatExchanger.A_sec
preprocessor.FuelHeater.heatExchanger.V_sec
preprocessor.FuelHeater.heatExchanger.A_heat_sec
preprocessor.FuelHeater.heatExchanger.init_prim.m_flow
preprocessor.FuelHeater.heatExchanger.init_prim.p_in
preprocessor.FuelHeater.heatExchanger.init_prim.dp
preprocessor.FuelHeater.heatExchanger.init_prim.p_out
preprocessor.FuelHeater.heatExchanger.init_prim.initFromEnthalpy
preprocessor.FuelHeater.heatExchanger.init_prim.T_in
preprocessor.FuelHeater.heatExchanger.init_prim.dT
preprocessor.FuelHeater.heatExchanger.init_prim.T_out
preprocessor.FuelHeater.heatExchanger.init_prim.h_in
preprocessor.FuelHeater.heatExchanger.init_prim.dh
preprocessor.FuelHeater.heatExchanger.init_prim.h_out
preprocessor.FuelHeater.heatExchanger.init_prim.X[1]
preprocessor.FuelHeater.heatExchanger.init_prim.X[2]
preprocessor.FuelHeater.heatExchanger.init_prim.X[3]
preprocessor.FuelHeater.heatExchanger.init_prim.X[4]
preprocessor.FuelHeater.heatExchanger.init_prim.X[5]
preprocessor.FuelHeater.heatExchanger.init_sec.m_flow
preprocessor.FuelHeater.heatExchanger.init_sec.p_in
preprocessor.FuelHeater.heatExchanger.init_sec.dp
preprocessor.FuelHeater.heatExchanger.init_sec.p_out
preprocessor.FuelHeater.heatExchanger.init_sec.initFromEnthalpy
preprocessor.FuelHeater.heatExchanger.init_sec.T_in
preprocessor.FuelHeater.heatExchanger.init_sec.dT
preprocessor.FuelHeater.heatExchanger.init_sec.T_out
preprocessor.FuelHeater.heatExchanger.init_sec.h_in
preprocessor.FuelHeater.heatExchanger.init_sec.dh
preprocessor.FuelHeater.heatExchanger.init_sec.h_out
preprocessor.FuelHeater.heatExchanger.init_sec.X[1]
preprocessor.FuelHeater.heatExchanger.init_sec.X[2]
preprocessor.FuelHeater.heatExchanger.init_sec.X[3]
preprocessor.FuelHeater.heatExchanger.init_sec.X[4]
preprocessor.FuelHeater.heatExchanger.init_sec.X[5]
preprocessor.FuelHeater.heatExchanger.init_sec.X[6]
preprocessor.FuelHeater.heatExchanger.init_sec.X[7]
preprocessor.FuelHeater.heatExchanger.dp_smooth
preprocessor.FuelHeater.heatExchanger.mflow_smooth
preprocessor.FuelHeater.heatExchanger.from_dp_prim
preprocessor.FuelHeater.heatExchanger.positiveFlow_prim
preprocessor.FuelHeater.heatExchanger.generateEventForReversal_prim
preprocessor.FuelHeater.heatExchanger.from_dp_sec
preprocessor.FuelHeater.heatExchanger.positiveFlow_sec
preprocessor.FuelHeater.heatExchanger.generateEventForReversal_sec
preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[1]
preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[2]
preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[3]
preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[4]
preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[5]
preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[6]
preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[7]
preprocessor.FuelHeater.heatExchanger.pprim_out
preprocessor.FuelHeater.heatExchanger.psec_out
preprocessor.FuelHeater.heatExchanger.C
preprocessor.FuelHeater.heatExchanger.Q_max
preprocessor.FuelHeater.heatExchanger.stateAprim_inflow.T
preprocessor.FuelHeater.heatExchanger.stateBprim_inflow.T
preprocessor.FuelHeater.heatExchanger.stateAprim_outflow.T
preprocessor.FuelHeater.heatExchanger.stateBprim_outflow.T
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.p
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.T
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[1]
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[2]
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[3]
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[4]
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[5]
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[6]
preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[7]
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.p
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.T
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[1]
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[2]
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[3]
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[4]
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[5]
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[6]
preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[7]
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.p
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.T
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[1]
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[2]
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[3]
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[4]
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[5]
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[6]
preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[7]
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.p
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.T
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[1]
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[2]
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[3]
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[4]
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[5]
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[6]
preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[7]
preprocessor.FuelHeater.heatExchanger.hprim_Tsec_in
preprocessor.FuelHeater.heatExchanger.hsec_Tprim_in
preprocessor.FuelHeater.heatExchanger.XAprim_in[1]
preprocessor.FuelHeater.heatExchanger.XAprim_in[2]
preprocessor.FuelHeater.heatExchanger.XAprim_in[3]
preprocessor.FuelHeater.heatExchanger.XAprim_in[4]
preprocessor.FuelHeater.heatExchanger.XAprim_in[5]
preprocessor.FuelHeater.heatExchanger.XBprim_in[1]
preprocessor.FuelHeater.heatExchanger.XBprim_in[2]
preprocessor.FuelHeater.heatExchanger.XBprim_in[3]
preprocessor.FuelHeater.heatExchanger.XBprim_in[4]
preprocessor.FuelHeater.heatExchanger.XBprim_in[5]
preprocessor.FuelHeater.heatExchanger.Xprim[1]
preprocessor.FuelHeater.heatExchanger.Xprim[2]
preprocessor.FuelHeater.heatExchanger.Xprim[3]
preprocessor.FuelHeater.heatExchanger.Xprim[4]
preprocessor.FuelHeater.heatExchanger.Xprim[5]
preprocessor.FuelHeater.heatExchanger.XAsec_in[1]
preprocessor.FuelHeater.heatExchanger.XAsec_in[2]
preprocessor.FuelHeater.heatExchanger.XAsec_in[3]
preprocessor.FuelHeater.heatExchanger.XAsec_in[4]
preprocessor.FuelHeater.heatExchanger.XAsec_in[5]
preprocessor.FuelHeater.heatExchanger.XAsec_in[6]
preprocessor.FuelHeater.heatExchanger.XAsec_in[7]
preprocessor.FuelHeater.heatExchanger.XBsec_in[1]
preprocessor.FuelHeater.heatExchanger.XBsec_in[2]
preprocessor.FuelHeater.heatExchanger.XBsec_in[3]
preprocessor.FuelHeater.heatExchanger.XBsec_in[4]
preprocessor.FuelHeater.heatExchanger.XBsec_in[5]
preprocessor.FuelHeater.heatExchanger.XBsec_in[6]
preprocessor.FuelHeater.heatExchanger.XBsec_in[7]
preprocessor.FuelHeater.heatExchanger.Xsec[1]
preprocessor.FuelHeater.heatExchanger.Xsec[2]
preprocessor.FuelHeater.heatExchanger.Xsec[3]
preprocessor.FuelHeater.heatExchanger.Xsec[4]
preprocessor.FuelHeater.heatExchanger.Xsec[5]
preprocessor.FuelHeater.heatExchanger.Xsec[6]
preprocessor.FuelHeater.heatExchanger.Xsec[7]
preprocessor.FuelHeater.heatExchanger.CAprim
preprocessor.FuelHeater.heatExchanger.CBprim
preprocessor.FuelHeater.heatExchanger.CAsec
preprocessor.FuelHeater.heatExchanger.CBsec
preprocessor.FuelHeater.heatExchanger.Cprim
preprocessor.FuelHeater.heatExchanger.Csec
preprocessor.FuelHeater.heatExchanger.Cmin
preprocessor.FuelHeater.heatExchanger.Cmax
preprocessor.FuelHeater.heatExchanger.Q_max_prim
preprocessor.FuelHeater.heatExchanger.Q_max_sec
preprocessor.FuelHeater.heatExchanger.A_heat
preprocessor.FuelHeater.heatExchanger.U
preprocessor.FuelHeater.heatExchanger.NTU
preprocessor.FuelHeater.heatExchanger.CF_HeatTransfer
preprocessor.FuelHeater.heatExchanger.CF_HeatTransfer_sec
preprocessor.FuelHeater.heatExchanger.thickness_wall
preprocessor.FuelHeater.heatExchanger.heatFlowDynamics
preprocessor.FuelHeater.heatExchanger.order
preprocessor.FuelHeater.heatExchanger.riseTime
preprocessor.FuelHeater.heatExchanger.wall.c
preprocessor.FuelHeater.heatExchanger.wall.rho
preprocessor.FuelHeater.heatExchanger.wall.lambda
preprocessor.FuelHeater.heatExchanger.htcoeff_prim.A
preprocessor.FuelHeater.heatExchanger.htcoeff_prim.L
preprocessor.FuelHeater.heatExchanger.htcoeff_prim.Dhyd
preprocessor.FuelHeater.heatExchanger.htcoeff_prim.F_user
preprocessor.FuelHeater.heatExchanger.htcoeff_prim.ht_from_isothermal
preprocessor.FuelHeater.heatExchanger.htcoeff_prim.CF_length
preprocessor.FuelHeater.heatExchanger.htcoeff_prim.alpha
preprocessor.FuelHeater.heatExchanger.htcoeff_sec.A
preprocessor.FuelHeater.heatExchanger.htcoeff_sec.L
preprocessor.FuelHeater.heatExchanger.htcoeff_sec.Dhyd
preprocessor.FuelHeater.heatExchanger.htcoeff_sec.F_user
preprocessor.FuelHeater.heatExchanger.htcoeff_sec.ht_from_isothermal
preprocessor.FuelHeater.heatExchanger.htcoeff_sec.CF_length
preprocessor.FuelHeater.heatExchanger.htcoeff_sec.alpha
preprocessor.FuelHeater.heatExchanger.kc_prim
preprocessor.FuelHeater.heatExchanger.kc_sec
preprocessor.FuelHeater.heatExchanger.kc_wall
preprocessor.FuelHeater.A_heat
preprocessor.FuelHeater.thickness_wall
preprocessor.FuelHeater.heatFlowDynamics
preprocessor.FuelHeater.order
preprocessor.FuelHeater.riseTime
preprocessor.fuelLoss.dp
preprocessor.fuelLoss.d
preprocessor.fuelLoss.T
preprocessor.fuelLoss.medium.X[1]
preprocessor.fuelLoss.medium.X[2]
preprocessor.fuelLoss.medium.X[3]
preprocessor.fuelLoss.medium.X[4]
preprocessor.fuelLoss.medium.X[5]
preprocessor.fuelLoss.medium.X[6]
preprocessor.fuelLoss.medium.X[7]
preprocessor.fuelLoss.medium.Xi[1]
preprocessor.fuelLoss.medium.Xi[2]
preprocessor.fuelLoss.medium.Xi[3]
preprocessor.fuelLoss.medium.Xi[4]
preprocessor.fuelLoss.medium.Xi[5]
preprocessor.fuelLoss.medium.Xi[6]
preprocessor.fuelLoss.medium.Xi[7]
preprocessor.fuelLoss.medium.h
preprocessor.fuelLoss.medium.u
preprocessor.fuelLoss.medium.Rg
preprocessor.fuelLoss.medium.MM
preprocessor.fuelLoss.medium.assertlevel
preprocessor.fuelLoss.medium.state.p
preprocessor.fuelLoss.medium.state.T
preprocessor.fuelLoss.medium.state.X[1]
preprocessor.fuelLoss.medium.state.X[2]
preprocessor.fuelLoss.medium.state.X[3]
preprocessor.fuelLoss.medium.state.X[4]
preprocessor.fuelLoss.medium.state.X[5]
preprocessor.fuelLoss.medium.state.X[6]
preprocessor.fuelLoss.medium.state.X[7]
preprocessor.fuelLoss.medium.preferredMediumStates
preprocessor.fuelLoss.medium.T_degC
preprocessor.fuelLoss.medium.p_bar
preprocessor.fuelLoss.medium.Z[1]
preprocessor.fuelLoss.medium.Z[2]
preprocessor.fuelLoss.medium.Z[3]
preprocessor.fuelLoss.medium.Z[4]
preprocessor.fuelLoss.medium.Z[5]
preprocessor.fuelLoss.medium.Z[6]
preprocessor.fuelLoss.medium.Z[7]
preprocessor.fuelLoss.medium.dUZT[1]
preprocessor.fuelLoss.medium.dUZT[2]
preprocessor.fuelLoss.medium.dUZT[3]
preprocessor.fuelLoss.medium.dUZT[4]
preprocessor.fuelLoss.medium.dUZT[5]
preprocessor.fuelLoss.medium.dUZT[6]
preprocessor.fuelLoss.medium.dUZT[7]
preprocessor.fuelLoss.medium.h_component[1]
preprocessor.fuelLoss.medium.h_component[2]
preprocessor.fuelLoss.medium.h_component[3]
preprocessor.fuelLoss.medium.h_component[4]
preprocessor.fuelLoss.medium.h_component[5]
preprocessor.fuelLoss.medium.h_component[6]
preprocessor.fuelLoss.medium.h_component[7]
preprocessor.fuelLoss.medium.s_component[1]
preprocessor.fuelLoss.medium.s_component[2]
preprocessor.fuelLoss.medium.s_component[3]
preprocessor.fuelLoss.medium.s_component[4]
preprocessor.fuelLoss.medium.s_component[5]
preprocessor.fuelLoss.medium.s_component[6]
preprocessor.fuelLoss.medium.s_component[7]
preprocessor.fuelLoss.medium.u_comp[1]
preprocessor.fuelLoss.medium.u_comp[2]
preprocessor.fuelLoss.medium.u_comp[3]
preprocessor.fuelLoss.medium.u_comp[4]
preprocessor.fuelLoss.medium.u_comp[5]
preprocessor.fuelLoss.medium.u_comp[6]
preprocessor.fuelLoss.medium.u_comp[7]
preprocessor.fuelLoss.medium.cp
preprocessor.fuelLoss.medium.g_formation[1]
preprocessor.fuelLoss.medium.g_formation[2]
preprocessor.fuelLoss.medium.g_formation[3]
preprocessor.fuelLoss.medium.g_formation[4]
preprocessor.fuelLoss.medium.g_formation[5]
preprocessor.fuelLoss.medium.g_formation[6]
preprocessor.fuelLoss.medium.g_formation[7]
preprocessor.fuelLoss.medium.ddTp
preprocessor.fuelLoss.medium.ddpT
preprocessor.fuelLoss.medium.dupT
preprocessor.fuelLoss.medium.duTp
preprocessor.fuelLoss.medium.ddx[1]
preprocessor.fuelLoss.medium.ddx[2]
preprocessor.fuelLoss.medium.ddx[3]
preprocessor.fuelLoss.medium.ddx[4]
preprocessor.fuelLoss.medium.ddx[5]
preprocessor.fuelLoss.medium.ddx[6]
preprocessor.fuelLoss.medium.ddx[7]
preprocessor.fuelLoss.d0
preprocessor.fuelLoss.dp0
preprocessor.fuelLoss.m_flow0
preprocessor.fuelLoss.linearLoss
preprocessor.fuelLoss.nonlinear
preprocessor.fuelLoss.linear
preprocessor.fuelLoss.limroot
preprocessor.gasMix.gas.X[1]
preprocessor.gasMix.gas.X[2]
preprocessor.gasMix.gas.der(X[2])
preprocessor.gasMix.gas.X[3]
preprocessor.gasMix.gas.der(X[3])
preprocessor.gasMix.gas.X[4]
preprocessor.gasMix.gas.der(X[4])
preprocessor.gasMix.gas.X[5]
preprocessor.gasMix.gas.der(X[5])
preprocessor.gasMix.gas.der(X[1])
preprocessor.gasMix.gas.d
preprocessor.gasMix.gas.u
preprocessor.gasMix.gas.Rg
preprocessor.gasMix.gas.MM
preprocessor.gasMix.gas.assertlevel
preprocessor.gasMix.gas.state.p
preprocessor.gasMix.gas.state.T
preprocessor.gasMix.gas.state.X[1]
preprocessor.gasMix.gas.state.X[2]
preprocessor.gasMix.gas.state.X[3]
preprocessor.gasMix.gas.state.X[4]
preprocessor.gasMix.gas.state.X[5]
preprocessor.gasMix.gas.preferredMediumStates
preprocessor.gasMix.gas.T_degC
preprocessor.gasMix.gas.p_bar
preprocessor.gasMix.gas.Z[1]
preprocessor.gasMix.gas.Z[2]
preprocessor.gasMix.gas.Z[3]
preprocessor.gasMix.gas.Z[4]
preprocessor.gasMix.gas.Z[5]
preprocessor.gasMix.gas.dUZT[1]
preprocessor.gasMix.gas.dUZT[2]
preprocessor.gasMix.gas.dUZT[3]
preprocessor.gasMix.gas.dUZT[4]
preprocessor.gasMix.gas.dUZT[5]
preprocessor.gasMix.gas.h_component[1]
preprocessor.gasMix.gas.h_component[2]
preprocessor.gasMix.gas.h_component[3]
preprocessor.gasMix.gas.h_component[4]
preprocessor.gasMix.gas.h_component[5]
preprocessor.gasMix.gas.s_component[1]
preprocessor.gasMix.gas.s_component[2]
preprocessor.gasMix.gas.s_component[3]
preprocessor.gasMix.gas.s_component[4]
preprocessor.gasMix.gas.s_component[5]
preprocessor.gasMix.gas.u_comp[1]
preprocessor.gasMix.gas.u_comp[2]
preprocessor.gasMix.gas.u_comp[3]
preprocessor.gasMix.gas.u_comp[4]
preprocessor.gasMix.gas.u_comp[5]
preprocessor.gasMix.gas.cp
preprocessor.gasMix.gas.g_formation[1]
preprocessor.gasMix.gas.g_formation[2]
preprocessor.gasMix.gas.g_formation[3]
preprocessor.gasMix.gas.g_formation[4]
preprocessor.gasMix.gas.g_formation[5]
preprocessor.gasMix.gas.ddTp
preprocessor.gasMix.gas.ddpT
preprocessor.gasMix.gas.dupT
preprocessor.gasMix.gas.duTp
preprocessor.gasMix.gas.ddx[1]
preprocessor.gasMix.gas.ddx[2]
preprocessor.gasMix.gas.ddx[3]
preprocessor.gasMix.gas.ddx[4]
preprocessor.gasMix.gas.ddx[5]
preprocessor.gasMix.N_feed
preprocessor.gasMix.N_drain
preprocessor.gasMix.V_tot
preprocessor.gasMix.initOpt
preprocessor.gasMix.pstart
preprocessor.gasMix.Tstart
preprocessor.gasMix.Xstart[1]
preprocessor.gasMix.Xstart[2]
preprocessor.gasMix.Xstart[3]
preprocessor.gasMix.Xstart[4]
preprocessor.gasMix.Xstart[5]
preprocessor.gasMix.positiveFlow
preprocessor.gasMix.QuasiStatic
preprocessor.gasMix.p
preprocessor.gasMix.der(p)
preprocessor.gasMix.T
preprocessor.gasMix.der(T)
preprocessor.gasMix.M
preprocessor.gasMix.E_tot
preprocessor.gasMix.MXi[1]
preprocessor.gasMix.MXi[2]
preprocessor.gasMix.MXi[3]
preprocessor.gasMix.MXi[4]
preprocessor.gasMix.MXi[5]
preprocessor.gasMix.feed[1].h_outflow
preprocessor.gasMix.q.Q_flow
preprocessor.gasMix.nXi
preprocessor.gasMix.hi[1]
preprocessor.gasMix.ho[1]
preprocessor.gasMix.X_i[1, 1]
preprocessor.gasMix.X_i[1, 2]
preprocessor.gasMix.X_i[1, 3]
preprocessor.gasMix.X_i[1, 4]
preprocessor.gasMix.X_i[1, 5]
preprocessor.gasMix.X_o[1, 1]
preprocessor.gasMix.X_o[1, 2]
preprocessor.gasMix.X_o[1, 3]
preprocessor.gasMix.X_o[1, 4]
preprocessor.gasMix.X_o[1, 5]
preprocessor.gasMix.dM
preprocessor.gasMix.dE
preprocessor.gasMix.dMX[1]
preprocessor.gasMix.dMX[2]
preprocessor.gasMix.dMX[3]
preprocessor.gasMix.dMX[4]
preprocessor.gasMix.dMX[5]
preprocessor.gasMix.ddx[1]
preprocessor.gasMix.ddx[2]
preprocessor.gasMix.ddx[3]
preprocessor.gasMix.ddx[4]
preprocessor.gasMix.ddx[5]
preprocessor.gasMix.duTp
preprocessor.gasMix.ddTp
preprocessor.gasMix.ddpT
preprocessor.NGMix.gas.X[1]
preprocessor.NGMix.gas.X[2]
preprocessor.NGMix.gas.der(X[2])
preprocessor.NGMix.gas.X[3]
preprocessor.NGMix.gas.der(X[3])
preprocessor.NGMix.gas.X[4]
preprocessor.NGMix.gas.der(X[4])
preprocessor.NGMix.gas.X[5]
preprocessor.NGMix.gas.der(X[5])
preprocessor.NGMix.gas.X[6]
preprocessor.NGMix.gas.der(X[6])
preprocessor.NGMix.gas.X[7]
preprocessor.NGMix.gas.der(X[7])
preprocessor.NGMix.gas.der(X[1])
preprocessor.NGMix.gas.Xi[1]
preprocessor.NGMix.gas.Xi[2]
preprocessor.NGMix.gas.Xi[3]
preprocessor.NGMix.gas.Xi[4]
preprocessor.NGMix.gas.Xi[5]
preprocessor.NGMix.gas.Xi[6]
preprocessor.NGMix.gas.Xi[7]
preprocessor.NGMix.gas.d
preprocessor.NGMix.gas.u
preprocessor.NGMix.gas.Rg
preprocessor.NGMix.gas.MM
preprocessor.NGMix.gas.assertlevel
preprocessor.NGMix.gas.state.p
preprocessor.NGMix.gas.state.T
preprocessor.NGMix.gas.state.X[1]
preprocessor.NGMix.gas.state.X[2]
preprocessor.NGMix.gas.state.X[3]
preprocessor.NGMix.gas.state.X[4]
preprocessor.NGMix.gas.state.X[5]
preprocessor.NGMix.gas.state.X[6]
preprocessor.NGMix.gas.state.X[7]
preprocessor.NGMix.gas.preferredMediumStates
preprocessor.NGMix.gas.T_degC
preprocessor.NGMix.gas.p_bar
preprocessor.NGMix.gas.Z[1]
preprocessor.NGMix.gas.Z[2]
preprocessor.NGMix.gas.Z[3]
preprocessor.NGMix.gas.Z[4]
preprocessor.NGMix.gas.Z[5]
preprocessor.NGMix.gas.Z[6]
preprocessor.NGMix.gas.Z[7]
preprocessor.NGMix.gas.dUZT[1]
preprocessor.NGMix.gas.dUZT[2]
preprocessor.NGMix.gas.dUZT[3]
preprocessor.NGMix.gas.dUZT[4]
preprocessor.NGMix.gas.dUZT[5]
preprocessor.NGMix.gas.dUZT[6]
preprocessor.NGMix.gas.dUZT[7]
preprocessor.NGMix.gas.h_component[1]
preprocessor.NGMix.gas.h_component[2]
preprocessor.NGMix.gas.h_component[3]
preprocessor.NGMix.gas.h_component[4]
preprocessor.NGMix.gas.h_component[5]
preprocessor.NGMix.gas.h_component[6]
preprocessor.NGMix.gas.h_component[7]
preprocessor.NGMix.gas.s_component[1]
preprocessor.NGMix.gas.s_component[2]
preprocessor.NGMix.gas.s_component[3]
preprocessor.NGMix.gas.s_component[4]
preprocessor.NGMix.gas.s_component[5]
preprocessor.NGMix.gas.s_component[6]
preprocessor.NGMix.gas.s_component[7]
preprocessor.NGMix.gas.u_comp[1]
preprocessor.NGMix.gas.u_comp[2]
preprocessor.NGMix.gas.u_comp[3]
preprocessor.NGMix.gas.u_comp[4]
preprocessor.NGMix.gas.u_comp[5]
preprocessor.NGMix.gas.u_comp[6]
preprocessor.NGMix.gas.u_comp[7]
preprocessor.NGMix.gas.cp
preprocessor.NGMix.gas.g_formation[1]
preprocessor.NGMix.gas.g_formation[2]
preprocessor.NGMix.gas.g_formation[3]
preprocessor.NGMix.gas.g_formation[4]
preprocessor.NGMix.gas.g_formation[5]
preprocessor.NGMix.gas.g_formation[6]
preprocessor.NGMix.gas.g_formation[7]
preprocessor.NGMix.gas.ddTp
preprocessor.NGMix.gas.ddpT
preprocessor.NGMix.gas.dupT
preprocessor.NGMix.gas.duTp
preprocessor.NGMix.gas.ddx[1]
preprocessor.NGMix.gas.ddx[2]
preprocessor.NGMix.gas.ddx[3]
preprocessor.NGMix.gas.ddx[4]
preprocessor.NGMix.gas.ddx[5]
preprocessor.NGMix.gas.ddx[6]
preprocessor.NGMix.gas.ddx[7]
preprocessor.NGMix.N_feed
preprocessor.NGMix.N_drain
preprocessor.NGMix.V_tot
preprocessor.NGMix.initOpt
preprocessor.NGMix.pstart
preprocessor.NGMix.Tstart
preprocessor.NGMix.Xstart[1]
preprocessor.NGMix.Xstart[2]
preprocessor.NGMix.Xstart[3]
preprocessor.NGMix.Xstart[4]
preprocessor.NGMix.Xstart[5]
preprocessor.NGMix.Xstart[6]
preprocessor.NGMix.Xstart[7]
preprocessor.NGMix.positiveFlow
preprocessor.NGMix.QuasiStatic
preprocessor.NGMix.p
preprocessor.NGMix.der(p)
preprocessor.NGMix.T
preprocessor.NGMix.der(T)
preprocessor.NGMix.M
preprocessor.NGMix.E_tot
preprocessor.NGMix.MXi[1]
preprocessor.NGMix.MXi[2]
preprocessor.NGMix.MXi[3]
preprocessor.NGMix.MXi[4]
preprocessor.NGMix.MXi[5]
preprocessor.NGMix.MXi[6]
preprocessor.NGMix.MXi[7]
preprocessor.NGMix.drain[1].X_outflow[1]
preprocessor.NGMix.drain[1].X_outflow[2]
preprocessor.NGMix.drain[1].X_outflow[3]
preprocessor.NGMix.drain[1].X_outflow[4]
preprocessor.NGMix.drain[1].X_outflow[5]
preprocessor.NGMix.drain[1].X_outflow[6]
preprocessor.NGMix.drain[1].X_outflow[7]
preprocessor.NGMix.q.Q_flow
preprocessor.NGMix.nXi
preprocessor.NGMix.hi[1]
preprocessor.NGMix.ho[1]
preprocessor.NGMix.X_i[1, 1]
preprocessor.NGMix.X_i[1, 2]
preprocessor.NGMix.X_i[1, 3]
preprocessor.NGMix.X_i[1, 4]
preprocessor.NGMix.X_i[1, 5]
preprocessor.NGMix.X_i[1, 6]
preprocessor.NGMix.X_i[1, 7]
preprocessor.NGMix.X_o[1, 1]
preprocessor.NGMix.X_o[1, 2]
preprocessor.NGMix.X_o[1, 3]
preprocessor.NGMix.X_o[1, 4]
preprocessor.NGMix.X_o[1, 5]
preprocessor.NGMix.X_o[1, 6]
preprocessor.NGMix.X_o[1, 7]
preprocessor.NGMix.dM
preprocessor.NGMix.dE
preprocessor.NGMix.dMX[1]
preprocessor.NGMix.dMX[2]
preprocessor.NGMix.dMX[3]
preprocessor.NGMix.dMX[4]
preprocessor.NGMix.dMX[5]
preprocessor.NGMix.dMX[6]
preprocessor.NGMix.dMX[7]
preprocessor.NGMix.ddx[1]
preprocessor.NGMix.ddx[2]
preprocessor.NGMix.ddx[3]
preprocessor.NGMix.ddx[4]
preprocessor.NGMix.ddx[5]
preprocessor.NGMix.ddx[6]
preprocessor.NGMix.ddx[7]
preprocessor.NGMix.duTp
preprocessor.NGMix.ddTp
preprocessor.NGMix.ddpT
preprocessor.NGLoss.dp
preprocessor.NGLoss.d
preprocessor.NGLoss.T
preprocessor.NGLoss.medium.X[1]
preprocessor.NGLoss.medium.X[2]
preprocessor.NGLoss.medium.X[3]
preprocessor.NGLoss.medium.X[4]
preprocessor.NGLoss.medium.X[5]
preprocessor.NGLoss.medium.X[6]
preprocessor.NGLoss.medium.X[7]
preprocessor.NGLoss.medium.Xi[1]
preprocessor.NGLoss.medium.Xi[2]
preprocessor.NGLoss.medium.Xi[3]
preprocessor.NGLoss.medium.Xi[4]
preprocessor.NGLoss.medium.Xi[5]
preprocessor.NGLoss.medium.Xi[6]
preprocessor.NGLoss.medium.Xi[7]
preprocessor.NGLoss.medium.h
preprocessor.NGLoss.medium.u
preprocessor.NGLoss.medium.Rg
preprocessor.NGLoss.medium.MM
preprocessor.NGLoss.medium.assertlevel
preprocessor.NGLoss.medium.state.p
preprocessor.NGLoss.medium.state.T
preprocessor.NGLoss.medium.state.X[1]
preprocessor.NGLoss.medium.state.X[2]
preprocessor.NGLoss.medium.state.X[3]
preprocessor.NGLoss.medium.state.X[4]
preprocessor.NGLoss.medium.state.X[5]
preprocessor.NGLoss.medium.state.X[6]
preprocessor.NGLoss.medium.state.X[7]
preprocessor.NGLoss.medium.preferredMediumStates
preprocessor.NGLoss.medium.T_degC
preprocessor.NGLoss.medium.p_bar
preprocessor.NGLoss.medium.Z[1]
preprocessor.NGLoss.medium.Z[2]
preprocessor.NGLoss.medium.Z[3]
preprocessor.NGLoss.medium.Z[4]
preprocessor.NGLoss.medium.Z[5]
preprocessor.NGLoss.medium.Z[6]
preprocessor.NGLoss.medium.Z[7]
preprocessor.NGLoss.medium.dUZT[1]
preprocessor.NGLoss.medium.dUZT[2]
preprocessor.NGLoss.medium.dUZT[3]
preprocessor.NGLoss.medium.dUZT[4]
preprocessor.NGLoss.medium.dUZT[5]
preprocessor.NGLoss.medium.dUZT[6]
preprocessor.NGLoss.medium.dUZT[7]
preprocessor.NGLoss.medium.h_component[1]
preprocessor.NGLoss.medium.h_component[2]
preprocessor.NGLoss.medium.h_component[3]
preprocessor.NGLoss.medium.h_component[4]
preprocessor.NGLoss.medium.h_component[5]
preprocessor.NGLoss.medium.h_component[6]
preprocessor.NGLoss.medium.h_component[7]
preprocessor.NGLoss.medium.s_component[1]
preprocessor.NGLoss.medium.s_component[2]
preprocessor.NGLoss.medium.s_component[3]
preprocessor.NGLoss.medium.s_component[4]
preprocessor.NGLoss.medium.s_component[5]
preprocessor.NGLoss.medium.s_component[6]
preprocessor.NGLoss.medium.s_component[7]
preprocessor.NGLoss.medium.u_comp[1]
preprocessor.NGLoss.medium.u_comp[2]
preprocessor.NGLoss.medium.u_comp[3]
preprocessor.NGLoss.medium.u_comp[4]
preprocessor.NGLoss.medium.u_comp[5]
preprocessor.NGLoss.medium.u_comp[6]
preprocessor.NGLoss.medium.u_comp[7]
preprocessor.NGLoss.medium.cp
preprocessor.NGLoss.medium.g_formation[1]
preprocessor.NGLoss.medium.g_formation[2]
preprocessor.NGLoss.medium.g_formation[3]
preprocessor.NGLoss.medium.g_formation[4]
preprocessor.NGLoss.medium.g_formation[5]
preprocessor.NGLoss.medium.g_formation[6]
preprocessor.NGLoss.medium.g_formation[7]
preprocessor.NGLoss.medium.ddTp
preprocessor.NGLoss.medium.ddpT
preprocessor.NGLoss.medium.dupT
preprocessor.NGLoss.medium.duTp
preprocessor.NGLoss.medium.ddx[1]
preprocessor.NGLoss.medium.ddx[2]
preprocessor.NGLoss.medium.ddx[3]
preprocessor.NGLoss.medium.ddx[4]
preprocessor.NGLoss.medium.ddx[5]
preprocessor.NGLoss.medium.ddx[6]
preprocessor.NGLoss.medium.ddx[7]
preprocessor.NGLoss.d0
preprocessor.NGLoss.dp0
preprocessor.NGLoss.m_flow0
preprocessor.NGLoss.linearLoss
preprocessor.NGLoss.nonlinear
preprocessor.NGLoss.linear
preprocessor.NGLoss.limroot
anLoss.drain.X_outflow[1]
anLoss.drain.X_outflow[2]
anLoss.drain.X_outflow[3]
anLoss.drain.X_outflow[4]
anLoss.drain.X_outflow[5]
anLoss.drain.X_outflow[6]
anLoss.drain.X_outflow[7]
anLoss.dp
anLoss.d
anLoss.T
anLoss.medium.X[1]
anLoss.medium.X[2]
anLoss.medium.X[3]
anLoss.medium.X[4]
anLoss.medium.X[5]
anLoss.medium.X[6]
anLoss.medium.X[7]
anLoss.medium.Xi[1]
anLoss.medium.Xi[2]
anLoss.medium.Xi[3]
anLoss.medium.Xi[4]
anLoss.medium.Xi[5]
anLoss.medium.Xi[6]
anLoss.medium.Xi[7]
anLoss.medium.h
anLoss.medium.u
anLoss.medium.Rg
anLoss.medium.MM
anLoss.medium.assertlevel
anLoss.medium.state.p
anLoss.medium.state.T
anLoss.medium.state.X[1]
anLoss.medium.state.X[2]
anLoss.medium.state.X[3]
anLoss.medium.state.X[4]
anLoss.medium.state.X[5]
anLoss.medium.state.X[6]
anLoss.medium.state.X[7]
anLoss.medium.preferredMediumStates
anLoss.medium.T_degC
anLoss.medium.p_bar
anLoss.medium.Z[1]
anLoss.medium.Z[2]
anLoss.medium.Z[3]
anLoss.medium.Z[4]
anLoss.medium.Z[5]
anLoss.medium.Z[6]
anLoss.medium.Z[7]
anLoss.medium.dUZT[1]
anLoss.medium.dUZT[2]
anLoss.medium.dUZT[3]
anLoss.medium.dUZT[4]
anLoss.medium.dUZT[5]
anLoss.medium.dUZT[6]
anLoss.medium.dUZT[7]
anLoss.medium.h_component[1]
anLoss.medium.h_component[2]
anLoss.medium.h_component[3]
anLoss.medium.h_component[4]
anLoss.medium.h_component[5]
anLoss.medium.h_component[6]
anLoss.medium.h_component[7]
anLoss.medium.s_component[1]
anLoss.medium.s_component[2]
anLoss.medium.s_component[3]
anLoss.medium.s_component[4]
anLoss.medium.s_component[5]
anLoss.medium.s_component[6]
anLoss.medium.s_component[7]
anLoss.medium.u_comp[1]
anLoss.medium.u_comp[2]
anLoss.medium.u_comp[3]
anLoss.medium.u_comp[4]
anLoss.medium.u_comp[5]
anLoss.medium.u_comp[6]
anLoss.medium.u_comp[7]
anLoss.medium.cp
anLoss.medium.g_formation[1]
anLoss.medium.g_formation[2]
anLoss.medium.g_formation[3]
anLoss.medium.g_formation[4]
anLoss.medium.g_formation[5]
anLoss.medium.g_formation[6]
anLoss.medium.g_formation[7]
anLoss.medium.ddTp
anLoss.medium.ddpT
anLoss.medium.dupT
anLoss.medium.duTp
anLoss.medium.ddx[1]
anLoss.medium.ddx[2]
anLoss.medium.ddx[3]
anLoss.medium.ddx[4]
anLoss.medium.ddx[5]
anLoss.medium.ddx[6]
anLoss.medium.ddx[7]
anLoss.d0
anLoss.dp0
anLoss.m_flow0
anLoss.linearLoss
anLoss.nonlinear
anLoss.linear
anLoss.limroot
exhaustLoss.drain.h_outflow
exhaustLoss.drain.X_outflow[1]
exhaustLoss.drain.X_outflow[2]
exhaustLoss.drain.X_outflow[3]
exhaustLoss.drain.X_outflow[4]
exhaustLoss.drain.X_outflow[5]
exhaustLoss.dp
exhaustLoss.d
exhaustLoss.medium.X[1]
exhaustLoss.medium.X[2]
exhaustLoss.medium.X[3]
exhaustLoss.medium.X[4]
exhaustLoss.medium.X[5]
exhaustLoss.medium.h
exhaustLoss.medium.u
exhaustLoss.medium.Rg
exhaustLoss.medium.MM
exhaustLoss.medium.assertlevel
exhaustLoss.medium.state.p
exhaustLoss.medium.state.T
exhaustLoss.medium.state.X[1]
exhaustLoss.medium.state.X[2]
exhaustLoss.medium.state.X[3]
exhaustLoss.medium.state.X[4]
exhaustLoss.medium.state.X[5]
exhaustLoss.medium.preferredMediumStates
exhaustLoss.medium.T_degC
exhaustLoss.medium.p_bar
exhaustLoss.medium.Z[1]
exhaustLoss.medium.Z[2]
exhaustLoss.medium.Z[3]
exhaustLoss.medium.Z[4]
exhaustLoss.medium.Z[5]
exhaustLoss.medium.dUZT[1]
exhaustLoss.medium.dUZT[2]
exhaustLoss.medium.dUZT[3]
exhaustLoss.medium.dUZT[4]
exhaustLoss.medium.dUZT[5]
exhaustLoss.medium.h_component[1]
exhaustLoss.medium.h_component[2]
exhaustLoss.medium.h_component[3]
exhaustLoss.medium.h_component[4]
exhaustLoss.medium.h_component[5]
exhaustLoss.medium.s_component[1]
exhaustLoss.medium.s_component[2]
exhaustLoss.medium.s_component[3]
exhaustLoss.medium.s_component[4]
exhaustLoss.medium.s_component[5]
exhaustLoss.medium.u_comp[1]
exhaustLoss.medium.u_comp[2]
exhaustLoss.medium.u_comp[3]
exhaustLoss.medium.u_comp[4]
exhaustLoss.medium.u_comp[5]
exhaustLoss.medium.cp
exhaustLoss.medium.g_formation[1]
exhaustLoss.medium.g_formation[2]
exhaustLoss.medium.g_formation[3]
exhaustLoss.medium.g_formation[4]
exhaustLoss.medium.g_formation[5]
exhaustLoss.medium.ddTp
exhaustLoss.medium.ddpT
exhaustLoss.medium.dupT
exhaustLoss.medium.duTp
exhaustLoss.medium.ddx[1]
exhaustLoss.medium.ddx[2]
exhaustLoss.medium.ddx[3]
exhaustLoss.medium.ddx[4]
exhaustLoss.medium.ddx[5]
exhaustLoss.d0
exhaustLoss.dp0
exhaustLoss.m_flow0
exhaustLoss.linearLoss
exhaustLoss.nonlinear
exhaustLoss.linear
exhaustLoss.limroot
exhVol.gas.X[1]
exhVol.gas.X[2]
exhVol.gas.der(X[2])
exhVol.gas.X[3]
exhVol.gas.der(X[3])
exhVol.gas.X[4]
exhVol.gas.der(X[4])
exhVol.gas.X[5]
exhVol.gas.der(X[5])
exhVol.gas.der(X[1])
exhVol.gas.d
exhVol.gas.u
exhVol.gas.Rg
exhVol.gas.MM
exhVol.gas.assertlevel
exhVol.gas.state.p
exhVol.gas.state.T
exhVol.gas.state.X[1]
exhVol.gas.state.X[2]
exhVol.gas.state.X[3]
exhVol.gas.state.X[4]
exhVol.gas.state.X[5]
exhVol.gas.preferredMediumStates
exhVol.gas.T_degC
exhVol.gas.p_bar
exhVol.gas.Z[1]
exhVol.gas.Z[2]
exhVol.gas.Z[3]
exhVol.gas.Z[4]
exhVol.gas.Z[5]
exhVol.gas.dUZT[1]
exhVol.gas.dUZT[2]
exhVol.gas.dUZT[3]
exhVol.gas.dUZT[4]
exhVol.gas.dUZT[5]
exhVol.gas.h_component[1]
exhVol.gas.h_component[2]
exhVol.gas.h_component[3]
exhVol.gas.h_component[4]
exhVol.gas.h_component[5]
exhVol.gas.s_component[1]
exhVol.gas.s_component[2]
exhVol.gas.s_component[3]
exhVol.gas.s_component[4]
exhVol.gas.s_component[5]
exhVol.gas.u_comp[1]
exhVol.gas.u_comp[2]
exhVol.gas.u_comp[3]
exhVol.gas.u_comp[4]
exhVol.gas.u_comp[5]
exhVol.gas.cp
exhVol.gas.g_formation[1]
exhVol.gas.g_formation[2]
exhVol.gas.g_formation[3]
exhVol.gas.g_formation[4]
exhVol.gas.g_formation[5]
exhVol.gas.ddTp
exhVol.gas.ddpT
exhVol.gas.dupT
exhVol.gas.duTp
exhVol.gas.ddx[1]
exhVol.gas.ddx[2]
exhVol.gas.ddx[3]
exhVol.gas.ddx[4]
exhVol.gas.ddx[5]
exhVol.N_feed
exhVol.N_drain
exhVol.V_tot
exhVol.initOpt
exhVol.pstart
exhVol.Tstart
exhVol.Xstart[1]
exhVol.Xstart[2]
exhVol.Xstart[3]
exhVol.Xstart[4]
exhVol.Xstart[5]
exhVol.positiveFlow
exhVol.QuasiStatic
exhVol.p
exhVol.der(p)
exhVol.T
exhVol.der(T)
exhVol.M
exhVol.E_tot
exhVol.MXi[1]
exhVol.MXi[2]
exhVol.MXi[3]
exhVol.MXi[4]
exhVol.MXi[5]
exhVol.drain[1].X_outflow[1]
exhVol.drain[1].X_outflow[2]
exhVol.drain[1].X_outflow[3]
exhVol.drain[1].X_outflow[4]
exhVol.drain[1].X_outflow[5]
exhVol.q.Q_flow
exhVol.nXi
exhVol.hi[1]
exhVol.ho[1]
exhVol.X_i[1, 1]
exhVol.X_i[1, 2]
exhVol.X_i[1, 3]
exhVol.X_i[1, 4]
exhVol.X_i[1, 5]
exhVol.X_o[1, 1]
exhVol.X_o[1, 2]
exhVol.X_o[1, 3]
exhVol.X_o[1, 4]
exhVol.X_o[1, 5]
exhVol.dM
exhVol.dE
exhVol.dMX[1]
exhVol.dMX[2]
exhVol.dMX[3]
exhVol.dMX[4]
exhVol.dMX[5]
exhVol.ddx[1]
exhVol.ddx[2]
exhVol.ddx[3]
exhVol.ddx[4]
exhVol.ddx[5]
exhVol.duTp
exhVol.ddTp
exhVol.ddpT
anVolume.gas.X[1]
anVolume.gas.X[2]
anVolume.gas.der(X[2])
anVolume.gas.X[3]
anVolume.gas.der(X[3])
anVolume.gas.X[4]
anVolume.gas.der(X[4])
anVolume.gas.X[5]
anVolume.gas.der(X[5])
anVolume.gas.X[6]
anVolume.gas.der(X[6])
anVolume.gas.X[7]
anVolume.gas.der(X[7])
anVolume.gas.der(X[1])
anVolume.gas.Xi[1]
anVolume.gas.Xi[2]
anVolume.gas.Xi[3]
anVolume.gas.Xi[4]
anVolume.gas.Xi[5]
anVolume.gas.Xi[6]
anVolume.gas.Xi[7]
anVolume.gas.d
anVolume.gas.u
anVolume.gas.Rg
anVolume.gas.MM
anVolume.gas.assertlevel
anVolume.gas.state.p
anVolume.gas.state.T
anVolume.gas.state.X[1]
anVolume.gas.state.X[2]
anVolume.gas.state.X[3]
anVolume.gas.state.X[4]
anVolume.gas.state.X[5]
anVolume.gas.state.X[6]
anVolume.gas.state.X[7]
anVolume.gas.preferredMediumStates
anVolume.gas.T_degC
anVolume.gas.p_bar
anVolume.gas.Z[1]
anVolume.gas.Z[2]
anVolume.gas.Z[3]
anVolume.gas.Z[4]
anVolume.gas.Z[5]
anVolume.gas.Z[6]
anVolume.gas.Z[7]
anVolume.gas.dUZT[1]
anVolume.gas.dUZT[2]
anVolume.gas.dUZT[3]
anVolume.gas.dUZT[4]
anVolume.gas.dUZT[5]
anVolume.gas.dUZT[6]
anVolume.gas.dUZT[7]
anVolume.gas.h_component[1]
anVolume.gas.h_component[2]
anVolume.gas.h_component[3]
anVolume.gas.h_component[4]
anVolume.gas.h_component[5]
anVolume.gas.h_component[6]
anVolume.gas.h_component[7]
anVolume.gas.s_component[1]
anVolume.gas.s_component[2]
anVolume.gas.s_component[3]
anVolume.gas.s_component[4]
anVolume.gas.s_component[5]
anVolume.gas.s_component[6]
anVolume.gas.s_component[7]
anVolume.gas.u_comp[1]
anVolume.gas.u_comp[2]
anVolume.gas.u_comp[3]
anVolume.gas.u_comp[4]
anVolume.gas.u_comp[5]
anVolume.gas.u_comp[6]
anVolume.gas.u_comp[7]
anVolume.gas.cp
anVolume.gas.g_formation[1]
anVolume.gas.g_formation[2]
anVolume.gas.g_formation[3]
anVolume.gas.g_formation[4]
anVolume.gas.g_formation[5]
anVolume.gas.g_formation[6]
anVolume.gas.g_formation[7]
anVolume.gas.ddTp
anVolume.gas.ddpT
anVolume.gas.dupT
anVolume.gas.duTp
anVolume.gas.ddx[1]
anVolume.gas.ddx[2]
anVolume.gas.ddx[3]
anVolume.gas.ddx[4]
anVolume.gas.ddx[5]
anVolume.gas.ddx[6]
anVolume.gas.ddx[7]
anVolume.N_feed
anVolume.N_drain
anVolume.V_tot
anVolume.initOpt
anVolume.pstart
anVolume.Tstart
anVolume.Xstart[1]
anVolume.Xstart[2]
anVolume.Xstart[3]
anVolume.Xstart[4]
anVolume.Xstart[5]
anVolume.Xstart[6]
anVolume.Xstart[7]
anVolume.positiveFlow
anVolume.QuasiStatic
anVolume.p
anVolume.der(p)
anVolume.T
anVolume.der(T)
anVolume.M
anVolume.E_tot
anVolume.MXi[1]
anVolume.MXi[2]
anVolume.MXi[3]
anVolume.MXi[4]
anVolume.MXi[5]
anVolume.MXi[6]
anVolume.MXi[7]
anVolume.feed[1].h_outflow
anVolume.drain[1].X_outflow[1]
anVolume.drain[1].X_outflow[2]
anVolume.drain[1].X_outflow[3]
anVolume.drain[1].X_outflow[4]
anVolume.drain[1].X_outflow[5]
anVolume.drain[1].X_outflow[6]
anVolume.drain[1].X_outflow[7]
anVolume.q.Q_flow
anVolume.nXi
anVolume.hi[1]
anVolume.ho[1]
anVolume.X_i[1, 1]
anVolume.X_i[1, 2]
anVolume.X_i[1, 3]
anVolume.X_i[1, 4]
anVolume.X_i[1, 5]
anVolume.X_i[1, 6]
anVolume.X_i[1, 7]
anVolume.X_o[1, 1]
anVolume.X_o[1, 2]
anVolume.X_o[1, 3]
anVolume.X_o[1, 4]
anVolume.X_o[1, 5]
anVolume.X_o[1, 6]
anVolume.X_o[1, 7]
anVolume.dM
anVolume.dE
anVolume.dMX[1]
anVolume.dMX[2]
anVolume.dMX[3]
anVolume.dMX[4]
anVolume.dMX[5]
anVolume.dMX[6]
anVolume.dMX[7]
anVolume.ddx[1]
anVolume.ddx[2]
anVolume.ddx[3]
anVolume.ddx[4]
anVolume.ddx[5]
anVolume.ddx[6]
anVolume.ddx[7]
anVolume.duTp
anVolume.ddTp
anVolume.ddpT
cathVolume.gas.X[1]
cathVolume.gas.X[2]
cathVolume.gas.der(X[2])
cathVolume.gas.X[3]
cathVolume.gas.der(X[3])
cathVolume.gas.X[4]
cathVolume.gas.der(X[4])
cathVolume.gas.X[5]
cathVolume.gas.der(X[5])
cathVolume.gas.der(X[1])
cathVolume.gas.d
cathVolume.gas.u
cathVolume.gas.Rg
cathVolume.gas.MM
cathVolume.gas.assertlevel
cathVolume.gas.state.p
cathVolume.gas.state.T
cathVolume.gas.state.X[1]
cathVolume.gas.state.X[2]
cathVolume.gas.state.X[3]
cathVolume.gas.state.X[4]
cathVolume.gas.state.X[5]
cathVolume.gas.preferredMediumStates
cathVolume.gas.T_degC
cathVolume.gas.p_bar
cathVolume.gas.Z[1]
cathVolume.gas.Z[2]
cathVolume.gas.Z[3]
cathVolume.gas.Z[4]
cathVolume.gas.Z[5]
cathVolume.gas.dUZT[1]
cathVolume.gas.dUZT[2]
cathVolume.gas.dUZT[3]
cathVolume.gas.dUZT[4]
cathVolume.gas.dUZT[5]
cathVolume.gas.h_component[1]
cathVolume.gas.h_component[2]
cathVolume.gas.h_component[3]
cathVolume.gas.h_component[4]
cathVolume.gas.h_component[5]
cathVolume.gas.s_component[1]
cathVolume.gas.s_component[2]
cathVolume.gas.s_component[3]
cathVolume.gas.s_component[4]
cathVolume.gas.s_component[5]
cathVolume.gas.u_comp[1]
cathVolume.gas.u_comp[2]
cathVolume.gas.u_comp[3]
cathVolume.gas.u_comp[4]
cathVolume.gas.u_comp[5]
cathVolume.gas.cp
cathVolume.gas.g_formation[1]
cathVolume.gas.g_formation[2]
cathVolume.gas.g_formation[3]
cathVolume.gas.g_formation[4]
cathVolume.gas.g_formation[5]
cathVolume.gas.ddTp
cathVolume.gas.ddpT
cathVolume.gas.dupT
cathVolume.gas.duTp
cathVolume.gas.ddx[1]
cathVolume.gas.ddx[2]
cathVolume.gas.ddx[3]
cathVolume.gas.ddx[4]
cathVolume.gas.ddx[5]
cathVolume.N_feed
cathVolume.N_drain
cathVolume.V_tot
cathVolume.initOpt
cathVolume.pstart
cathVolume.Tstart
cathVolume.Xstart[1]
cathVolume.Xstart[2]
cathVolume.Xstart[3]
cathVolume.Xstart[4]
cathVolume.Xstart[5]
cathVolume.positiveFlow
cathVolume.QuasiStatic
cathVolume.p
cathVolume.der(p)
cathVolume.T
cathVolume.der(T)
cathVolume.M
cathVolume.E_tot
cathVolume.MXi[1]
cathVolume.MXi[2]
cathVolume.MXi[3]
cathVolume.MXi[4]
cathVolume.MXi[5]
cathVolume.feed[1].h_outflow
cathVolume.drain[1].m_flow
cathVolume.drain[1].X_outflow[1]
cathVolume.drain[1].X_outflow[2]
cathVolume.drain[1].X_outflow[3]
cathVolume.drain[1].X_outflow[4]
cathVolume.drain[1].X_outflow[5]
cathVolume.q.Q_flow
cathVolume.nXi
cathVolume.hi[1]
cathVolume.ho[1]
cathVolume.X_i[1, 1]
cathVolume.X_i[1, 2]
cathVolume.X_i[1, 3]
cathVolume.X_i[1, 4]
cathVolume.X_i[1, 5]
cathVolume.X_o[1, 1]
cathVolume.X_o[1, 2]
cathVolume.X_o[1, 3]
cathVolume.X_o[1, 4]
cathVolume.X_o[1, 5]
cathVolume.dM
cathVolume.dE
cathVolume.dMX[1]
cathVolume.dMX[2]
cathVolume.dMX[3]
cathVolume.dMX[4]
cathVolume.dMX[5]
cathVolume.ddx[1]
cathVolume.ddx[2]
cathVolume.ddx[3]
cathVolume.ddx[4]
cathVolume.ddx[5]
cathVolume.duTp
cathVolume.ddTp
cathVolume.ddpT
AirHeater.n_channels_prim
AirHeater.L_prim
AirHeater.Dhyd_prim
AirHeater.A_prim
AirHeater.V_prim
AirHeater.A_heat_prim
AirHeater.n_channels_sec
AirHeater.L_sec
AirHeater.Dhyd_sec
AirHeater.A_sec
AirHeater.V_sec
AirHeater.A_heat_sec
AirHeater.dp_smooth
AirHeater.mflow_smooth
AirHeater.from_dp_prim
AirHeater.positiveFlow_prim
AirHeater.generateEventForReversal_prim
AirHeater.from_dp_sec
AirHeater.positiveFlow_sec
AirHeater.generateEventForReversal_sec
AirHeater.dp_prim_start
AirHeater.T_prim_start
AirHeater.dp_sec_start
AirHeater.T_sec_start
AirHeater.drain_prim.h_outflow
AirHeater.feed_prim.h_outflow
AirHeater.feed_sec.h_outflow
AirHeater.drain_sec.h_outflow
AirHeater.drain_sec.X_outflow[1]
AirHeater.drain_sec.X_outflow[2]
AirHeater.drain_sec.X_outflow[3]
AirHeater.drain_sec.X_outflow[4]
AirHeater.drain_sec.X_outflow[5]
AirHeater.summary.Q_flow
AirHeater.summary.T_in
AirHeater.summary.T_out
AirHeater.summary.h_in
AirHeater.summary.h_out
AirHeater.summary.dp
AirHeater.summary.T_sec_in
AirHeater.summary.T_sec_out
AirHeater.summary.h_sec_in
AirHeater.summary.h_sec_out
AirHeater.summary.dp_sec
AirHeater.summary.Tpinch_prim_in
AirHeater.summary.Tpinch_prim_out
AirHeater.summary.lmtd
AirHeater.summary.effectiveness
AirHeater.heatExchanger.friction_prim.A
AirHeater.heatExchanger.friction_prim.Dhyd
AirHeater.heatExchanger.friction_prim.n_channels
AirHeater.heatExchanger.friction_prim.lengthFraction
AirHeater.heatExchanger.friction_prim.flowFraction0
AirHeater.heatExchanger.friction_prim.dpFraction0
AirHeater.heatExchanger.friction_prim.F_user
AirHeater.heatExchanger.friction_prim.from_dp
AirHeater.heatExchanger.friction_prim.positiveFlow
AirHeater.heatExchanger.friction_prim.dp_smooth
AirHeater.heatExchanger.friction_prim.mflow_smooth
AirHeater.heatExchanger.friction_prim.useFixedDensity
AirHeater.heatExchanger.friction_prim.reference_d
AirHeater.heatExchanger.friction_prim.stateA_inflow.X[1]
AirHeater.heatExchanger.friction_prim.stateA_inflow.X[2]
AirHeater.heatExchanger.friction_prim.stateA_inflow.X[3]
AirHeater.heatExchanger.friction_prim.stateA_inflow.X[4]
AirHeater.heatExchanger.friction_prim.stateA_inflow.X[5]
AirHeater.heatExchanger.friction_prim.stateB_inflow.X[1]
AirHeater.heatExchanger.friction_prim.stateB_inflow.X[2]
AirHeater.heatExchanger.friction_prim.stateB_inflow.X[3]
AirHeater.heatExchanger.friction_prim.stateB_inflow.X[4]
AirHeater.heatExchanger.friction_prim.stateB_inflow.X[5]
AirHeater.heatExchanger.friction_prim.dp_from_isothermal
AirHeater.heatExchanger.friction_prim.m_flow
AirHeater.heatExchanger.friction_prim.dA
AirHeater.heatExchanger.friction_prim.dB
AirHeater.heatExchanger.friction_prim.d0
AirHeater.heatExchanger.friction_prim.dp0
AirHeater.heatExchanger.friction_prim.m_flow0
AirHeater.heatExchanger.friction_sec.A
AirHeater.heatExchanger.friction_sec.Dhyd
AirHeater.heatExchanger.friction_sec.n_channels
AirHeater.heatExchanger.friction_sec.lengthFraction
AirHeater.heatExchanger.friction_sec.flowFraction0
AirHeater.heatExchanger.friction_sec.dpFraction0
AirHeater.heatExchanger.friction_sec.F_user
AirHeater.heatExchanger.friction_sec.from_dp
AirHeater.heatExchanger.friction_sec.positiveFlow
AirHeater.heatExchanger.friction_sec.dp_smooth
AirHeater.heatExchanger.friction_sec.mflow_smooth
AirHeater.heatExchanger.friction_sec.useFixedDensity
AirHeater.heatExchanger.friction_sec.reference_d
AirHeater.heatExchanger.friction_sec.stateA_inflow.X[1]
AirHeater.heatExchanger.friction_sec.stateA_inflow.X[2]
AirHeater.heatExchanger.friction_sec.stateA_inflow.X[3]
AirHeater.heatExchanger.friction_sec.stateA_inflow.X[4]
AirHeater.heatExchanger.friction_sec.stateA_inflow.X[5]
AirHeater.heatExchanger.friction_sec.stateB_inflow.X[1]
AirHeater.heatExchanger.friction_sec.stateB_inflow.X[2]
AirHeater.heatExchanger.friction_sec.stateB_inflow.X[3]
AirHeater.heatExchanger.friction_sec.stateB_inflow.X[4]
AirHeater.heatExchanger.friction_sec.stateB_inflow.X[5]
AirHeater.heatExchanger.friction_sec.dp_from_isothermal
AirHeater.heatExchanger.friction_sec.m_flow
AirHeater.heatExchanger.friction_sec.dA
AirHeater.heatExchanger.friction_sec.dB
AirHeater.heatExchanger.friction_sec.d0
AirHeater.heatExchanger.friction_sec.dp0
AirHeater.heatExchanger.friction_sec.m_flow0
AirHeater.heatExchanger.CF_Friction
AirHeater.heatExchanger.CF_Friction_sec
AirHeater.heatExchanger.effectivenessStreamChoice
AirHeater.heatExchanger.n_channels_prim
AirHeater.heatExchanger.L_prim
AirHeater.heatExchanger.Dhyd_prim
AirHeater.heatExchanger.A_prim
AirHeater.heatExchanger.V_prim
AirHeater.heatExchanger.A_heat_prim
AirHeater.heatExchanger.n_channels_sec
AirHeater.heatExchanger.L_sec
AirHeater.heatExchanger.Dhyd_sec
AirHeater.heatExchanger.A_sec
AirHeater.heatExchanger.V_sec
AirHeater.heatExchanger.A_heat_sec
AirHeater.heatExchanger.init_prim.m_flow
AirHeater.heatExchanger.init_prim.p_in
AirHeater.heatExchanger.init_prim.dp
AirHeater.heatExchanger.init_prim.p_out
AirHeater.heatExchanger.init_prim.initFromEnthalpy
AirHeater.heatExchanger.init_prim.T_in
AirHeater.heatExchanger.init_prim.dT
AirHeater.heatExchanger.init_prim.T_out
AirHeater.heatExchanger.init_prim.h_in
AirHeater.heatExchanger.init_prim.dh
AirHeater.heatExchanger.init_prim.h_out
AirHeater.heatExchanger.init_prim.X[1]
AirHeater.heatExchanger.init_prim.X[2]
AirHeater.heatExchanger.init_prim.X[3]
AirHeater.heatExchanger.init_prim.X[4]
AirHeater.heatExchanger.init_prim.X[5]
AirHeater.heatExchanger.init_sec.m_flow
AirHeater.heatExchanger.init_sec.p_in
AirHeater.heatExchanger.init_sec.dp
AirHeater.heatExchanger.init_sec.p_out
AirHeater.heatExchanger.init_sec.initFromEnthalpy
AirHeater.heatExchanger.init_sec.T_in
AirHeater.heatExchanger.init_sec.dT
AirHeater.heatExchanger.init_sec.T_out
AirHeater.heatExchanger.init_sec.h_in
AirHeater.heatExchanger.init_sec.dh
AirHeater.heatExchanger.init_sec.h_out
AirHeater.heatExchanger.init_sec.X[1]
AirHeater.heatExchanger.init_sec.X[2]
AirHeater.heatExchanger.init_sec.X[3]
AirHeater.heatExchanger.init_sec.X[4]
AirHeater.heatExchanger.init_sec.X[5]
AirHeater.heatExchanger.dp_smooth
AirHeater.heatExchanger.mflow_smooth
AirHeater.heatExchanger.from_dp_prim
AirHeater.heatExchanger.positiveFlow_prim
AirHeater.heatExchanger.generateEventForReversal_prim
AirHeater.heatExchanger.from_dp_sec
AirHeater.heatExchanger.positiveFlow_sec
AirHeater.heatExchanger.generateEventForReversal_sec
AirHeater.heatExchanger.pprim_out
AirHeater.heatExchanger.psec_out
AirHeater.heatExchanger.C
AirHeater.heatExchanger.Q_max
AirHeater.heatExchanger.stateAprim_inflow.T
AirHeater.heatExchanger.stateBprim_inflow.T
AirHeater.heatExchanger.stateAprim_outflow.T
AirHeater.heatExchanger.stateBprim_outflow.T
AirHeater.heatExchanger.TAsec_out
AirHeater.heatExchanger.TBsec_out
AirHeater.heatExchanger.stateAsec_inflow.T
AirHeater.heatExchanger.stateBsec_inflow.T
AirHeater.heatExchanger.hprim_Tsec_in
AirHeater.heatExchanger.hsec_Tprim_in
AirHeater.heatExchanger.XAprim_in[1]
AirHeater.heatExchanger.XAprim_in[2]
AirHeater.heatExchanger.XAprim_in[3]
AirHeater.heatExchanger.XAprim_in[4]
AirHeater.heatExchanger.XAprim_in[5]
AirHeater.heatExchanger.XBprim_in[1]
AirHeater.heatExchanger.XBprim_in[2]
AirHeater.heatExchanger.XBprim_in[3]
AirHeater.heatExchanger.XBprim_in[4]
AirHeater.heatExchanger.XBprim_in[5]
AirHeater.heatExchanger.Xprim[1]
AirHeater.heatExchanger.Xprim[2]
AirHeater.heatExchanger.Xprim[3]
AirHeater.heatExchanger.Xprim[4]
AirHeater.heatExchanger.Xprim[5]
AirHeater.heatExchanger.XAsec_in[1]
AirHeater.heatExchanger.XAsec_in[2]
AirHeater.heatExchanger.XAsec_in[3]
AirHeater.heatExchanger.XAsec_in[4]
AirHeater.heatExchanger.XAsec_in[5]
AirHeater.heatExchanger.XBsec_in[1]
AirHeater.heatExchanger.XBsec_in[2]
AirHeater.heatExchanger.XBsec_in[3]
AirHeater.heatExchanger.XBsec_in[4]
AirHeater.heatExchanger.XBsec_in[5]
AirHeater.heatExchanger.Xsec[1]
AirHeater.heatExchanger.Xsec[2]
AirHeater.heatExchanger.Xsec[3]
AirHeater.heatExchanger.Xsec[4]
AirHeater.heatExchanger.Xsec[5]
AirHeater.heatExchanger.CAprim
AirHeater.heatExchanger.CBprim
AirHeater.heatExchanger.CAsec
AirHeater.heatExchanger.CBsec
AirHeater.heatExchanger.Cprim
AirHeater.heatExchanger.Csec
AirHeater.heatExchanger.Cmin
AirHeater.heatExchanger.Cmax
AirHeater.heatExchanger.Q_max_prim
AirHeater.heatExchanger.Q_max_sec
AirHeater.heatExchanger.A_heat
AirHeater.heatExchanger.U
AirHeater.heatExchanger.NTU
AirHeater.heatExchanger.CF_HeatTransfer
AirHeater.heatExchanger.CF_HeatTransfer_sec
AirHeater.heatExchanger.thickness_wall
AirHeater.heatExchanger.heatFlowDynamics
AirHeater.heatExchanger.order
AirHeater.heatExchanger.riseTime
AirHeater.heatExchanger.wall.c
AirHeater.heatExchanger.wall.rho
AirHeater.heatExchanger.wall.lambda
AirHeater.heatExchanger.htcoeff_prim.A
AirHeater.heatExchanger.htcoeff_prim.L
AirHeater.heatExchanger.htcoeff_prim.Dhyd
AirHeater.heatExchanger.htcoeff_prim.F_user
AirHeater.heatExchanger.htcoeff_prim.ht_from_isothermal
AirHeater.heatExchanger.htcoeff_prim.CF_length
AirHeater.heatExchanger.htcoeff_prim.alpha
AirHeater.heatExchanger.htcoeff_sec.A
AirHeater.heatExchanger.htcoeff_sec.L
AirHeater.heatExchanger.htcoeff_sec.Dhyd
AirHeater.heatExchanger.htcoeff_sec.F_user
AirHeater.heatExchanger.htcoeff_sec.ht_from_isothermal
AirHeater.heatExchanger.htcoeff_sec.CF_length
AirHeater.heatExchanger.htcoeff_sec.alpha
AirHeater.heatExchanger.kc_prim
AirHeater.heatExchanger.kc_sec
AirHeater.heatExchanger.kc_wall
AirHeater.A_heat
AirHeater.thickness_wall
AirHeater.heatFlowDynamics
AirHeater.order
AirHeater.riseTime
metalBurner.initOpt
metalBurner.Mstart
metalBurner.pstart
metalBurner.Tstart
metalBurner.Xstart[1]
metalBurner.Xstart[2]
metalBurner.Xstart[3]
metalBurner.Xstart[4]
metalBurner.Xstart[5]
metalBurner.startBurning
metalBurner.V
metalBurner.positiveFlow
metalBurner.lam_eff
metalBurner.q.T
metalBurner.q.Q_flow
metalBurner.summary.lambda_extinguish
metalBurner.summary.AFR_mass
metalBurner.summary.FAR_mass
metalBurner.S[1, 1]
metalBurner.S[1, 2]
metalBurner.S[1, 3]
metalBurner.S[1, 4]
metalBurner.S[1, 5]
metalBurner.S[1, 6]
metalBurner.S[1, 7]
metalBurner.S[2, 1]
metalBurner.S[2, 2]
metalBurner.S[2, 3]
metalBurner.S[2, 4]
metalBurner.S[2, 5]
metalBurner.S[2, 6]
metalBurner.S[2, 7]
metalBurner.S[3, 1]
metalBurner.S[3, 2]
metalBurner.S[3, 3]
metalBurner.S[3, 4]
metalBurner.S[3, 5]
metalBurner.S[3, 6]
metalBurner.S[3, 7]
metalBurner.S[4, 1]
metalBurner.S[4, 2]
metalBurner.S[4, 3]
metalBurner.S[4, 4]
metalBurner.S[4, 5]
metalBurner.S[4, 6]
metalBurner.S[4, 7]
metalBurner.S[5, 1]
metalBurner.S[5, 2]
metalBurner.S[5, 3]
metalBurner.S[5, 4]
metalBurner.S[5, 5]
metalBurner.S[5, 6]
metalBurner.S[5, 7]
metalBurner.wallmaterial.c
metalBurner.wallmaterial.rho
metalBurner.wallmaterial.lambda
metalBurner.M_w
metalBurner.wallthickness
metalBurner.A_heat
metalBurner.Cp_w
metalBurner.Rw
metalBurner.burner.initOpt
metalBurner.burner.Mstart
metalBurner.burner.pstart
metalBurner.burner.Tstart
metalBurner.burner.Xstart[1]
metalBurner.burner.Xstart[2]
metalBurner.burner.Xstart[3]
metalBurner.burner.Xstart[4]
metalBurner.burner.Xstart[5]
metalBurner.burner.startBurning
metalBurner.burner.V
metalBurner.burner.positiveFlow
metalBurner.burner.lam_eff
metalBurner.burner.ignition
metalBurner.burner.q.Q_flow
metalBurner.burner.summary.lambda_extinguish
metalBurner.burner.S[1, 1]
metalBurner.burner.S[1, 2]
metalBurner.burner.S[1, 3]
metalBurner.burner.S[1, 4]
metalBurner.burner.S[1, 5]
metalBurner.burner.S[1, 6]
metalBurner.burner.S[1, 7]
metalBurner.burner.S[2, 1]
metalBurner.burner.S[2, 2]
metalBurner.burner.S[2, 3]
metalBurner.burner.S[2, 4]
metalBurner.burner.S[2, 5]
metalBurner.burner.S[2, 6]
metalBurner.burner.S[2, 7]
metalBurner.burner.S[3, 1]
metalBurner.burner.S[3, 2]
metalBurner.burner.S[3, 3]
metalBurner.burner.S[3, 4]
metalBurner.burner.S[3, 5]
metalBurner.burner.S[3, 6]
metalBurner.burner.S[3, 7]
metalBurner.burner.S[4, 1]
metalBurner.burner.S[4, 2]
metalBurner.burner.S[4, 3]
metalBurner.burner.S[4, 4]
metalBurner.burner.S[4, 5]
metalBurner.burner.S[4, 6]
metalBurner.burner.S[4, 7]
metalBurner.burner.S[5, 1]
metalBurner.burner.S[5, 2]
metalBurner.burner.S[5, 3]
metalBurner.burner.S[5, 4]
metalBurner.burner.S[5, 5]
metalBurner.burner.S[5, 6]
metalBurner.burner.S[5, 7]
metalBurner.burner.fluegas.T
metalBurner.burner.fluegas.der(T)
metalBurner.burner.fluegas.X[1]
metalBurner.burner.fluegas.X[2]
metalBurner.burner.fluegas.X[3]
metalBurner.burner.fluegas.X[4]
metalBurner.burner.fluegas.X[5]
metalBurner.burner.fluegas.d
metalBurner.burner.fluegas.u
metalBurner.burner.fluegas.Rg
metalBurner.burner.fluegas.MM
metalBurner.burner.fluegas.assertlevel
metalBurner.burner.fluegas.state.p
metalBurner.burner.fluegas.state.T
metalBurner.burner.fluegas.state.X[1]
metalBurner.burner.fluegas.state.X[2]
metalBurner.burner.fluegas.state.X[3]
metalBurner.burner.fluegas.state.X[4]
metalBurner.burner.fluegas.state.X[5]
metalBurner.burner.fluegas.preferredMediumStates
metalBurner.burner.fluegas.T_degC
metalBurner.burner.fluegas.p_bar
metalBurner.burner.fluegas.Z[1]
metalBurner.burner.fluegas.Z[2]
metalBurner.burner.fluegas.Z[3]
metalBurner.burner.fluegas.Z[4]
metalBurner.burner.fluegas.Z[5]
metalBurner.burner.fluegas.dUZT[1]
metalBurner.burner.fluegas.dUZT[2]
metalBurner.burner.fluegas.dUZT[3]
metalBurner.burner.fluegas.dUZT[4]
metalBurner.burner.fluegas.dUZT[5]
metalBurner.burner.fluegas.h_component[1]
metalBurner.burner.fluegas.h_component[2]
metalBurner.burner.fluegas.h_component[3]
metalBurner.burner.fluegas.h_component[4]
metalBurner.burner.fluegas.h_component[5]
metalBurner.burner.fluegas.s_component[1]
metalBurner.burner.fluegas.s_component[2]
metalBurner.burner.fluegas.s_component[3]
metalBurner.burner.fluegas.s_component[4]
metalBurner.burner.fluegas.s_component[5]
metalBurner.burner.fluegas.u_comp[1]
metalBurner.burner.fluegas.u_comp[2]
metalBurner.burner.fluegas.u_comp[3]
metalBurner.burner.fluegas.u_comp[4]
metalBurner.burner.fluegas.u_comp[5]
metalBurner.burner.fluegas.cp
metalBurner.burner.fluegas.g_formation[1]
metalBurner.burner.fluegas.g_formation[2]
metalBurner.burner.fluegas.g_formation[3]
metalBurner.burner.fluegas.g_formation[4]
metalBurner.burner.fluegas.g_formation[5]
metalBurner.burner.fluegas.ddTp
metalBurner.burner.fluegas.ddpT
metalBurner.burner.fluegas.dupT
metalBurner.burner.fluegas.duTp
metalBurner.burner.fluegas.ddx[1]
metalBurner.burner.fluegas.ddx[2]
metalBurner.burner.fluegas.ddx[3]
metalBurner.burner.fluegas.ddx[4]
metalBurner.burner.fluegas.ddx[5]
metalBurner.burner.M
metalBurner.burner.MX[1]
metalBurner.burner.der(MX[1])
metalBurner.burner.MX[2]
metalBurner.burner.der(MX[2])
metalBurner.burner.MX[3]
metalBurner.burner.der(MX[3])
metalBurner.burner.MX[4]
metalBurner.burner.der(MX[4])
metalBurner.burner.MX[5]
metalBurner.burner.der(MX[5])
metalBurner.burner.E
metalBurner.burner.dE
metalBurner.burner.Tr
metalBurner.burner.lambda
metalBurner.burner.lambda_extinguish
metalBurner.burner.burning
metalBurner.burner.lambda_max_ignite
metalBurner.burner.blowOff
metalBurner.burner.Y[1]
metalBurner.burner.Y[2]
metalBurner.burner.Y[3]
metalBurner.burner.Y[4]
metalBurner.burner.Y[5]
metalBurner.burner.m_flow_oxygen
metalBurner.burner.m_flow_oxygen_stoich
metalBurner.burner.m_flow_ox_fuel
metalBurner.burner.S_Burning[1, 1]
metalBurner.burner.S_Burning[1, 2]
metalBurner.burner.S_Burning[1, 3]
metalBurner.burner.S_Burning[1, 4]
metalBurner.burner.S_Burning[1, 5]
metalBurner.burner.S_Burning[1, 6]
metalBurner.burner.S_Burning[1, 7]
metalBurner.burner.S_Burning[2, 1]
metalBurner.burner.S_Burning[2, 2]
metalBurner.burner.S_Burning[2, 3]
metalBurner.burner.S_Burning[2, 4]
metalBurner.burner.S_Burning[2, 5]
metalBurner.burner.S_Burning[2, 6]
metalBurner.burner.S_Burning[2, 7]
metalBurner.burner.S_Burning[3, 1]
metalBurner.burner.S_Burning[3, 2]
metalBurner.burner.S_Burning[3, 3]
metalBurner.burner.S_Burning[3, 4]
metalBurner.burner.S_Burning[3, 5]
metalBurner.burner.S_Burning[3, 6]
metalBurner.burner.S_Burning[3, 7]
metalBurner.burner.S_Burning[4, 1]
metalBurner.burner.S_Burning[4, 2]
metalBurner.burner.S_Burning[4, 3]
metalBurner.burner.S_Burning[4, 4]
metalBurner.burner.S_Burning[4, 5]
metalBurner.burner.S_Burning[4, 6]
metalBurner.burner.S_Burning[4, 7]
metalBurner.burner.S_Burning[5, 1]
metalBurner.burner.S_Burning[5, 2]
metalBurner.burner.S_Burning[5, 3]
metalBurner.burner.S_Burning[5, 4]
metalBurner.burner.S_Burning[5, 5]
metalBurner.burner.S_Burning[5, 6]
metalBurner.burner.S_Burning[5, 7]
metalBurner.burner.S_Mixing[1, 1]
metalBurner.burner.S_Mixing[1, 2]
metalBurner.burner.S_Mixing[1, 3]
metalBurner.burner.S_Mixing[1, 4]
metalBurner.burner.S_Mixing[1, 5]
metalBurner.burner.S_Mixing[1, 6]
metalBurner.burner.S_Mixing[1, 7]
metalBurner.burner.S_Mixing[2, 1]
metalBurner.burner.S_Mixing[2, 2]
metalBurner.burner.S_Mixing[2, 3]
metalBurner.burner.S_Mixing[2, 4]
metalBurner.burner.S_Mixing[2, 5]
metalBurner.burner.S_Mixing[2, 6]
metalBurner.burner.S_Mixing[2, 7]
metalBurner.burner.S_Mixing[3, 1]
metalBurner.burner.S_Mixing[3, 2]
metalBurner.burner.S_Mixing[3, 3]
metalBurner.burner.S_Mixing[3, 4]
metalBurner.burner.S_Mixing[3, 5]
metalBurner.burner.S_Mixing[3, 6]
metalBurner.burner.S_Mixing[3, 7]
metalBurner.burner.S_Mixing[4, 1]
metalBurner.burner.S_Mixing[4, 2]
metalBurner.burner.S_Mixing[4, 3]
metalBurner.burner.S_Mixing[4, 4]
metalBurner.burner.S_Mixing[4, 5]
metalBurner.burner.S_Mixing[4, 6]
metalBurner.burner.S_Mixing[4, 7]
metalBurner.burner.S_Mixing[5, 1]
metalBurner.burner.S_Mixing[5, 2]
metalBurner.burner.S_Mixing[5, 3]
metalBurner.burner.S_Mixing[5, 4]
metalBurner.burner.S_Mixing[5, 5]
metalBurner.burner.S_Mixing[5, 6]
metalBurner.burner.S_Mixing[5, 7]
metalBurner.burner.air[1]
metalBurner.burner.air[2]
metalBurner.burner.fuel[1]
metalBurner.burner.fuel_O2[1]
metalBurner.burner.Zia[1]
metalBurner.burner.Zia[2]
metalBurner.burner.Zia[3]
metalBurner.burner.Zia[4]
metalBurner.burner.Zia[5]
metalBurner.burner.Zif[1]
metalBurner.burner.Zif[2]
metalBurner.burner.Zif[3]
metalBurner.burner.Zif[4]
metalBurner.burner.Zif[5]
metalBurner.burner.Zif[6]
metalBurner.burner.Zif[7]
metalBurner.burner.z_flow_air[1]
metalBurner.burner.z_flow_air[2]
metalBurner.burner.z_flow_air[3]
metalBurner.burner.z_flow_air[4]
metalBurner.burner.z_flow_air[5]
metalBurner.burner.z_flow_fuel[1]
metalBurner.burner.z_flow_fuel[2]
metalBurner.burner.z_flow_fuel[3]
metalBurner.burner.z_flow_fuel[4]
metalBurner.burner.z_flow_fuel[5]
metalBurner.burner.z_flow_fuel[6]
metalBurner.burner.z_flow_fuel[7]
metalBurner.burner.lambda_max_ignite_par[1]
metalBurner.burner.lambda_max_ignite_par[2]
metalBurner.burner.scale
metalBurner.burner.krate_comb
metalBurner.burner.der(krate_comb)
metalBurner.burner.lambda2
metalBurner.wall.n
metalBurner.wall.qb[1].Q_flow
metalBurner.wall.n_channels
metalBurner.wall.pars.Cp
metalBurner.wall.pars.Rw
metalBurner.wall.m[1]
metalBurner.wall.Tm[1]
metalBurner.wall.der(Tm[1])
metalBurner.wall.Tm_degC[1]
metalBurner.wall.T0[1]
metalBurner.wall.steadyStateInit
metalBurner.wall.massLessWall
metalBurner.wall.includeThermalResistance
metalBurner.gas_out.h_outflow
metalBurner.gas_out.X_outflow[1]
metalBurner.gas_out.X_outflow[2]
metalBurner.gas_out.X_outflow[3]
metalBurner.gas_out.X_outflow[4]
metalBurner.gas_out.X_outflow[5]
metalBurner.air_in.m_flow
metalBurner.fuel_in.m_flow
metalBurner.fuel_in.h_outflow
fuelMix.gas.X[1]
fuelMix.gas.X[2]
fuelMix.gas.der(X[2])
fuelMix.gas.X[3]
fuelMix.gas.der(X[3])
fuelMix.gas.X[4]
fuelMix.gas.der(X[4])
fuelMix.gas.X[5]
fuelMix.gas.der(X[5])
fuelMix.gas.X[6]
fuelMix.gas.der(X[6])
fuelMix.gas.X[7]
fuelMix.gas.der(X[7])
fuelMix.gas.der(X[1])
fuelMix.gas.Xi[1]
fuelMix.gas.Xi[2]
fuelMix.gas.Xi[3]
fuelMix.gas.Xi[4]
fuelMix.gas.Xi[5]
fuelMix.gas.Xi[6]
fuelMix.gas.Xi[7]
fuelMix.gas.d
fuelMix.gas.u
fuelMix.gas.Rg
fuelMix.gas.MM
fuelMix.gas.assertlevel
fuelMix.gas.state.p
fuelMix.gas.state.T
fuelMix.gas.state.X[1]
fuelMix.gas.state.X[2]
fuelMix.gas.state.X[3]
fuelMix.gas.state.X[4]
fuelMix.gas.state.X[5]
fuelMix.gas.state.X[6]
fuelMix.gas.state.X[7]
fuelMix.gas.preferredMediumStates
fuelMix.gas.T_degC
fuelMix.gas.p_bar
fuelMix.gas.Z[1]
fuelMix.gas.Z[2]
fuelMix.gas.Z[3]
fuelMix.gas.Z[4]
fuelMix.gas.Z[5]
fuelMix.gas.Z[6]
fuelMix.gas.Z[7]
fuelMix.gas.dUZT[1]
fuelMix.gas.dUZT[2]
fuelMix.gas.dUZT[3]
fuelMix.gas.dUZT[4]
fuelMix.gas.dUZT[5]
fuelMix.gas.dUZT[6]
fuelMix.gas.dUZT[7]
fuelMix.gas.h_component[1]
fuelMix.gas.h_component[2]
fuelMix.gas.h_component[3]
fuelMix.gas.h_component[4]
fuelMix.gas.h_component[5]
fuelMix.gas.h_component[6]
fuelMix.gas.h_component[7]
fuelMix.gas.s_component[1]
fuelMix.gas.s_component[2]
fuelMix.gas.s_component[3]
fuelMix.gas.s_component[4]
fuelMix.gas.s_component[5]
fuelMix.gas.s_component[6]
fuelMix.gas.s_component[7]
fuelMix.gas.u_comp[1]
fuelMix.gas.u_comp[2]
fuelMix.gas.u_comp[3]
fuelMix.gas.u_comp[4]
fuelMix.gas.u_comp[5]
fuelMix.gas.u_comp[6]
fuelMix.gas.u_comp[7]
fuelMix.gas.cp
fuelMix.gas.g_formation[1]
fuelMix.gas.g_formation[2]
fuelMix.gas.g_formation[3]
fuelMix.gas.g_formation[4]
fuelMix.gas.g_formation[5]
fuelMix.gas.g_formation[6]
fuelMix.gas.g_formation[7]
fuelMix.gas.ddTp
fuelMix.gas.ddpT
fuelMix.gas.dupT
fuelMix.gas.duTp
fuelMix.gas.ddx[1]
fuelMix.gas.ddx[2]
fuelMix.gas.ddx[3]
fuelMix.gas.ddx[4]
fuelMix.gas.ddx[5]
fuelMix.gas.ddx[6]
fuelMix.gas.ddx[7]
fuelMix.N_feed
fuelMix.N_drain
fuelMix.V_tot
fuelMix.initOpt
fuelMix.pstart
fuelMix.Tstart
fuelMix.Xstart[1]
fuelMix.Xstart[2]
fuelMix.Xstart[3]
fuelMix.Xstart[4]
fuelMix.Xstart[5]
fuelMix.Xstart[6]
fuelMix.Xstart[7]
fuelMix.positiveFlow
fuelMix.QuasiStatic
fuelMix.p
fuelMix.der(p)
fuelMix.T
fuelMix.der(T)
fuelMix.M
fuelMix.E_tot
fuelMix.MXi[1]
fuelMix.MXi[2]
fuelMix.MXi[3]
fuelMix.MXi[4]
fuelMix.MXi[5]
fuelMix.MXi[6]
fuelMix.MXi[7]
fuelMix.drain[1].X_outflow[1]
fuelMix.drain[1].X_outflow[2]
fuelMix.drain[1].X_outflow[3]
fuelMix.drain[1].X_outflow[4]
fuelMix.drain[1].X_outflow[5]
fuelMix.drain[1].X_outflow[6]
fuelMix.drain[1].X_outflow[7]
fuelMix.q.Q_flow
fuelMix.nXi
fuelMix.hi[1]
fuelMix.X_i[1, 1]
fuelMix.X_i[1, 2]
fuelMix.X_i[1, 3]
fuelMix.X_i[1, 4]
fuelMix.X_i[1, 5]
fuelMix.X_i[1, 6]
fuelMix.X_i[1, 7]
fuelMix.dM
fuelMix.dE
fuelMix.dMX[1]
fuelMix.dMX[2]
fuelMix.dMX[3]
fuelMix.dMX[4]
fuelMix.dMX[5]
fuelMix.dMX[6]
fuelMix.dMX[7]
fuelMix.ddx[1]
fuelMix.ddx[2]
fuelMix.ddx[3]
fuelMix.ddx[4]
fuelMix.ddx[5]
fuelMix.ddx[6]
fuelMix.ddx[7]
fuelMix.duTp
fuelMix.ddTp
fuelMix.ddpT
fuelLoss.drain.X_outflow[1]
fuelLoss.drain.X_outflow[2]
fuelLoss.drain.X_outflow[3]
fuelLoss.drain.X_outflow[4]
fuelLoss.drain.X_outflow[5]
fuelLoss.drain.X_outflow[6]
fuelLoss.drain.X_outflow[7]
fuelLoss.dp
fuelLoss.d
fuelLoss.T
fuelLoss.medium.X[1]
fuelLoss.medium.X[2]
fuelLoss.medium.X[3]
fuelLoss.medium.X[4]
fuelLoss.medium.X[5]
fuelLoss.medium.X[6]
fuelLoss.medium.X[7]
fuelLoss.medium.Xi[1]
fuelLoss.medium.Xi[2]
fuelLoss.medium.Xi[3]
fuelLoss.medium.Xi[4]
fuelLoss.medium.Xi[5]
fuelLoss.medium.Xi[6]
fuelLoss.medium.Xi[7]
fuelLoss.medium.h
fuelLoss.medium.u
fuelLoss.medium.Rg
fuelLoss.medium.MM
fuelLoss.medium.assertlevel
fuelLoss.medium.state.p
fuelLoss.medium.state.T
fuelLoss.medium.state.X[1]
fuelLoss.medium.state.X[2]
fuelLoss.medium.state.X[3]
fuelLoss.medium.state.X[4]
fuelLoss.medium.state.X[5]
fuelLoss.medium.state.X[6]
fuelLoss.medium.state.X[7]
fuelLoss.medium.preferredMediumStates
fuelLoss.medium.T_degC
fuelLoss.medium.p_bar
fuelLoss.medium.Z[1]
fuelLoss.medium.Z[2]
fuelLoss.medium.Z[3]
fuelLoss.medium.Z[4]
fuelLoss.medium.Z[5]
fuelLoss.medium.Z[6]
fuelLoss.medium.Z[7]
fuelLoss.medium.dUZT[1]
fuelLoss.medium.dUZT[2]
fuelLoss.medium.dUZT[3]
fuelLoss.medium.dUZT[4]
fuelLoss.medium.dUZT[5]
fuelLoss.medium.dUZT[6]
fuelLoss.medium.dUZT[7]
fuelLoss.medium.h_component[1]
fuelLoss.medium.h_component[2]
fuelLoss.medium.h_component[3]
fuelLoss.medium.h_component[4]
fuelLoss.medium.h_component[5]
fuelLoss.medium.h_component[6]
fuelLoss.medium.h_component[7]
fuelLoss.medium.s_component[1]
fuelLoss.medium.s_component[2]
fuelLoss.medium.s_component[3]
fuelLoss.medium.s_component[4]
fuelLoss.medium.s_component[5]
fuelLoss.medium.s_component[6]
fuelLoss.medium.s_component[7]
fuelLoss.medium.u_comp[1]
fuelLoss.medium.u_comp[2]
fuelLoss.medium.u_comp[3]
fuelLoss.medium.u_comp[4]
fuelLoss.medium.u_comp[5]
fuelLoss.medium.u_comp[6]
fuelLoss.medium.u_comp[7]
fuelLoss.medium.cp
fuelLoss.medium.g_formation[1]
fuelLoss.medium.g_formation[2]
fuelLoss.medium.g_formation[3]
fuelLoss.medium.g_formation[4]
fuelLoss.medium.g_formation[5]
fuelLoss.medium.g_formation[6]
fuelLoss.medium.g_formation[7]
fuelLoss.medium.ddTp
fuelLoss.medium.ddpT
fuelLoss.medium.dupT
fuelLoss.medium.duTp
fuelLoss.medium.ddx[1]
fuelLoss.medium.ddx[2]
fuelLoss.medium.ddx[3]
fuelLoss.medium.ddx[4]
fuelLoss.medium.ddx[5]
fuelLoss.medium.ddx[6]
fuelLoss.medium.ddx[7]
fuelLoss.d0
fuelLoss.dp0
fuelLoss.m_flow0
fuelLoss.linearLoss
fuelLoss.nonlinear
fuelLoss.linear
fuelLoss.limroot
airMix.gas.X[1]
airMix.gas.X[2]
airMix.gas.der(X[2])
airMix.gas.X[3]
airMix.gas.der(X[3])
airMix.gas.X[4]
airMix.gas.der(X[4])
airMix.gas.X[5]
airMix.gas.der(X[5])
airMix.gas.der(X[1])
airMix.gas.d
airMix.gas.u
airMix.gas.Rg
airMix.gas.MM
airMix.gas.assertlevel
airMix.gas.state.p
airMix.gas.state.T
airMix.gas.state.X[1]
airMix.gas.state.X[2]
airMix.gas.state.X[3]
airMix.gas.state.X[4]
airMix.gas.state.X[5]
airMix.gas.preferredMediumStates
airMix.gas.T_degC
airMix.gas.p_bar
airMix.gas.Z[1]
airMix.gas.Z[2]
airMix.gas.Z[3]
airMix.gas.Z[4]
airMix.gas.Z[5]
airMix.gas.dUZT[1]
airMix.gas.dUZT[2]
airMix.gas.dUZT[3]
airMix.gas.dUZT[4]
airMix.gas.dUZT[5]
airMix.gas.h_component[1]
airMix.gas.h_component[2]
airMix.gas.h_component[3]
airMix.gas.h_component[4]
airMix.gas.h_component[5]
airMix.gas.s_component[1]
airMix.gas.s_component[2]
airMix.gas.s_component[3]
airMix.gas.s_component[4]
airMix.gas.s_component[5]
airMix.gas.u_comp[1]
airMix.gas.u_comp[2]
airMix.gas.u_comp[3]
airMix.gas.u_comp[4]
airMix.gas.u_comp[5]
airMix.gas.cp
airMix.gas.g_formation[1]
airMix.gas.g_formation[2]
airMix.gas.g_formation[3]
airMix.gas.g_formation[4]
airMix.gas.g_formation[5]
airMix.gas.ddTp
airMix.gas.ddpT
airMix.gas.dupT
airMix.gas.duTp
airMix.gas.ddx[1]
airMix.gas.ddx[2]
airMix.gas.ddx[3]
airMix.gas.ddx[4]
airMix.gas.ddx[5]
airMix.N_feed
airMix.N_drain
airMix.V_tot
airMix.initOpt
airMix.pstart
airMix.Tstart
airMix.Xstart[1]
airMix.Xstart[2]
airMix.Xstart[3]
airMix.Xstart[4]
airMix.Xstart[5]
airMix.positiveFlow
airMix.QuasiStatic
airMix.p
airMix.der(p)
airMix.T
airMix.der(T)
airMix.M
airMix.E_tot
airMix.MXi[1]
airMix.MXi[2]
airMix.MXi[3]
airMix.MXi[4]
airMix.MXi[5]
airMix.feed[1].h_outflow
airMix.drain[1].X_outflow[1]
airMix.drain[1].X_outflow[2]
airMix.drain[1].X_outflow[3]
airMix.drain[1].X_outflow[4]
airMix.drain[1].X_outflow[5]
airMix.q.Q_flow
airMix.nXi
airMix.hi[1]
airMix.ho[1]
airMix.X_i[1, 1]
airMix.X_i[1, 2]
airMix.X_i[1, 3]
airMix.X_i[1, 4]
airMix.X_i[1, 5]
airMix.X_o[1, 1]
airMix.X_o[1, 2]
airMix.X_o[1, 3]
airMix.X_o[1, 4]
airMix.X_o[1, 5]
airMix.dM
airMix.dE
airMix.dMX[1]
airMix.dMX[2]
airMix.dMX[3]
airMix.dMX[4]
airMix.dMX[5]
airMix.ddx[1]
airMix.ddx[2]
airMix.ddx[3]
airMix.ddx[4]
airMix.ddx[5]
airMix.duTp
airMix.ddTp
airMix.ddpT
airLoss.drain.X_outflow[1]
airLoss.drain.X_outflow[2]
airLoss.drain.X_outflow[3]
airLoss.drain.X_outflow[4]
airLoss.drain.X_outflow[5]
airLoss.dp
airLoss.d
airLoss.medium.X[1]
airLoss.medium.X[2]
airLoss.medium.X[3]
airLoss.medium.X[4]
airLoss.medium.X[5]
airLoss.medium.h
airLoss.medium.u
airLoss.medium.Rg
airLoss.medium.MM
airLoss.medium.assertlevel
airLoss.medium.state.p
airLoss.medium.state.T
airLoss.medium.state.X[1]
airLoss.medium.state.X[2]
airLoss.medium.state.X[3]
airLoss.medium.state.X[4]
airLoss.medium.state.X[5]
airLoss.medium.preferredMediumStates
airLoss.medium.T_degC
airLoss.medium.p_bar
airLoss.medium.Z[1]
airLoss.medium.Z[2]
airLoss.medium.Z[3]
airLoss.medium.Z[4]
airLoss.medium.Z[5]
airLoss.medium.dUZT[1]
airLoss.medium.dUZT[2]
airLoss.medium.dUZT[3]
airLoss.medium.dUZT[4]
airLoss.medium.dUZT[5]
airLoss.medium.h_component[1]
airLoss.medium.h_component[2]
airLoss.medium.h_component[3]
airLoss.medium.h_component[4]
airLoss.medium.h_component[5]
airLoss.medium.s_component[1]
airLoss.medium.s_component[2]
airLoss.medium.s_component[3]
airLoss.medium.s_component[4]
airLoss.medium.s_component[5]
airLoss.medium.u_comp[1]
airLoss.medium.u_comp[2]
airLoss.medium.u_comp[3]
airLoss.medium.u_comp[4]
airLoss.medium.u_comp[5]
airLoss.medium.cp
airLoss.medium.g_formation[1]
airLoss.medium.g_formation[2]
airLoss.medium.g_formation[3]
airLoss.medium.g_formation[4]
airLoss.medium.g_formation[5]
airLoss.medium.ddTp
airLoss.medium.ddpT
airLoss.medium.dupT
airLoss.medium.duTp
airLoss.medium.ddx[1]
airLoss.medium.ddx[2]
airLoss.medium.ddx[3]
airLoss.medium.ddx[4]
airLoss.medium.ddx[5]
airLoss.d0
airLoss.dp0
airLoss.m_flow0
airLoss.linearLoss
airLoss.nonlinear
airLoss.linear
airLoss.limroot
ignition.k
checkMassBalanceSystem.nS_fuel
checkMassBalanceSystem.nS_air
checkMassBalanceSystem.nS_exhaust
checkMassBalanceSystem.MMX_fuel[1]
checkMassBalanceSystem.MMX_fuel[2]
checkMassBalanceSystem.MMX_fuel[3]
checkMassBalanceSystem.MMX_fuel[4]
checkMassBalanceSystem.MMX_fuel[5]
checkMassBalanceSystem.MMX_fuel[6]
checkMassBalanceSystem.MMX_fuel[7]
checkMassBalanceSystem.MMX_air[1]
checkMassBalanceSystem.MMX_air[2]
checkMassBalanceSystem.MMX_air[3]
checkMassBalanceSystem.MMX_air[4]
checkMassBalanceSystem.MMX_air[5]
checkMassBalanceSystem.MMX_water[1]
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].molarMass
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalTemperature
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalPressure
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalMolarVolume
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalDensity
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalEnthalpy
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalEntropy
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].acentricFactor
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].triplePointTemperature
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].triplePointPressure
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].meltingPoint
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].normalBoilingPoint
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].dipoleMoment
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasIdealGasHeatCapacity
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasCriticalData
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasDipoleMoment
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasFundamentalEquation
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasLiquidHeatCapacity
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasSolidHeatCapacity
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasAccurateViscosityData
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasAccurateConductivityData
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasVapourPressureCurve
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasAcentricFactor
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].HCRIT0
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].SCRIT0
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].deltah
_GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].deltas
checkMassBalanceSystem.MMX_exhaust[1]
checkMassBalanceSystem.MMX_exhaust[2]
checkMassBalanceSystem.MMX_exhaust[3]
checkMassBalanceSystem.MMX_exhaust[4]
checkMassBalanceSystem.MMX_exhaust[5]
checkMassBalanceSystem.nH_fuel[1]
checkMassBalanceSystem.nH_fuel[2]
checkMassBalanceSystem.nH_fuel[3]
checkMassBalanceSystem.nH_fuel[4]
checkMassBalanceSystem.nH_fuel[5]
checkMassBalanceSystem.nH_fuel[6]
checkMassBalanceSystem.nH_fuel[7]
checkMassBalanceSystem.nC_fuel[1]
checkMassBalanceSystem.nC_fuel[2]
checkMassBalanceSystem.nC_fuel[3]
checkMassBalanceSystem.nC_fuel[4]
checkMassBalanceSystem.nC_fuel[5]
checkMassBalanceSystem.nC_fuel[6]
checkMassBalanceSystem.nC_fuel[7]
checkMassBalanceSystem.nO_fuel[1]
checkMassBalanceSystem.nO_fuel[2]
checkMassBalanceSystem.nO_fuel[3]
checkMassBalanceSystem.nO_fuel[4]
checkMassBalanceSystem.nO_fuel[5]
checkMassBalanceSystem.nO_fuel[6]
checkMassBalanceSystem.nO_fuel[7]
checkMassBalanceSystem.nH_air[1]
checkMassBalanceSystem.nH_air[2]
checkMassBalanceSystem.nH_air[3]
checkMassBalanceSystem.nH_air[4]
checkMassBalanceSystem.nH_air[5]
checkMassBalanceSystem.nC_air[1]
checkMassBalanceSystem.nC_air[2]
checkMassBalanceSystem.nC_air[3]
checkMassBalanceSystem.nC_air[4]
checkMassBalanceSystem.nC_air[5]
checkMassBalanceSystem.nO_air[1]
checkMassBalanceSystem.nO_air[2]
checkMassBalanceSystem.nO_air[3]
checkMassBalanceSystem.nO_air[4]
checkMassBalanceSystem.nO_air[5]
checkMassBalanceSystem.nH_exhaust[1]
checkMassBalanceSystem.nH_exhaust[2]
checkMassBalanceSystem.nH_exhaust[3]
checkMassBalanceSystem.nH_exhaust[4]
checkMassBalanceSystem.nH_exhaust[5]
checkMassBalanceSystem.nC_exhaust[1]
checkMassBalanceSystem.nC_exhaust[2]
checkMassBalanceSystem.nC_exhaust[3]
checkMassBalanceSystem.nC_exhaust[4]
checkMassBalanceSystem.nC_exhaust[5]
checkMassBalanceSystem.nO_exhaust[1]
checkMassBalanceSystem.nO_exhaust[2]
checkMassBalanceSystem.nO_exhaust[3]
checkMassBalanceSystem.nO_exhaust[4]
checkMassBalanceSystem.nO_exhaust[5]
checkMassBalanceSystem.MM_H
checkMassBalanceSystem.MM_C
checkMassBalanceSystem.MM_O
checkMassBalanceSystem.m_flow_air_in
checkMassBalanceSystem.m_flow_in_total
checkMassBalanceSystem.X_fuel_in[1]
checkMassBalanceSystem.X_fuel_in[2]
checkMassBalanceSystem.X_fuel_in[3]
checkMassBalanceSystem.X_fuel_in[4]
checkMassBalanceSystem.X_fuel_in[5]
checkMassBalanceSystem.X_fuel_in[6]
checkMassBalanceSystem.X_fuel_in[7]
checkMassBalanceSystem.X_air_in[1]
checkMassBalanceSystem.X_air_in[2]
checkMassBalanceSystem.X_air_in[3]
checkMassBalanceSystem.X_air_in[4]
checkMassBalanceSystem.X_air_in[5]
checkMassBalanceSystem.X_exhaust_out[1]
checkMassBalanceSystem.X_exhaust_out[2]
checkMassBalanceSystem.X_exhaust_out[3]
checkMassBalanceSystem.X_exhaust_out[4]
checkMassBalanceSystem.X_exhaust_out[5]
checkMassBalanceSystem.change_m_flow
checkMassBalanceSystem.relativeChange_m_flow
checkMassBalanceSystem.mX_fuel_in[1]
checkMassBalanceSystem.mX_fuel_in[2]
checkMassBalanceSystem.mX_fuel_in[3]
checkMassBalanceSystem.mX_fuel_in[4]
checkMassBalanceSystem.mX_fuel_in[5]
checkMassBalanceSystem.mX_fuel_in[6]
checkMassBalanceSystem.mX_fuel_in[7]
checkMassBalanceSystem.mX_air_in[1]
checkMassBalanceSystem.mX_air_in[2]
checkMassBalanceSystem.mX_air_in[3]
checkMassBalanceSystem.mX_air_in[4]
checkMassBalanceSystem.mX_air_in[5]
checkMassBalanceSystem.mX_exhaust_out[1]
checkMassBalanceSystem.mX_exhaust_out[2]
checkMassBalanceSystem.mX_exhaust_out[3]
checkMassBalanceSystem.mX_exhaust_out[4]
checkMassBalanceSystem.mX_exhaust_out[5]
checkMassBalanceSystem.mH_in
checkMassBalanceSystem.mC_in
checkMassBalanceSystem.mO_in
checkMassBalanceSystem.mH_out
checkMassBalanceSystem.mC_out
checkMassBalanceSystem.mO_out
checkMassBalanceSystem.change_mH
checkMassBalanceSystem.change_mC
checkMassBalanceSystem.change_mO
checkMassBalanceSystem.relativeChange_mH
checkMassBalanceSystem.relativeChange_mC
checkMassBalanceSystem.relativeChange_mO
display_I.precision
display_I.use_numberPort
display_I.showText
display_I.hideBackground
display_P.number
display_P.precision
display_P.use_numberPort
display_P.showText
display_P.hideBackground
display_MoleFractions.displayMassUnit
display_MoleFractions.sensorType
display_MoleFractions.H2_index
display_MoleFractions.CH4_index
display_MoleFractions.CO_index
display_MoleFractions.CO2_index
display_MoleFractions.H2O_index
display_MoleFractions.N2_index
display_MoleFractions.O2_index
display_MoleFractions.nbrOfPresentSubstances
display_MoleFractions.compatibleMedium
display_MoleFractions.precision
display_MoleFractions.X_H2
display_MoleFractions.X_CH4
display_MoleFractions.X_CO
display_MoleFractions.X_CO2
display_MoleFractions.X_H2O
display_MoleFractions.X_N2
display_MoleFractions.X_O2
display_MoleFractions.y[1]
display_MoleFractions.y[2]
display_MoleFractions.y[3]
display_MoleFractions.y[4]
display_MoleFractions.y[5]
display_MoleFractions.y[6]
display_MoleFractions.y[7]
display_MoleFractions.flow_conversion
display_MoleFractions.visible_massfraction
display_MoleFractions.visible_molefraction
display_MoleFractions.visible_massflow
display_MoleFractions.visible_moleflow
display_MoleFractions.data.X[1]
display_MoleFractions.data.X[2]
display_MoleFractions.data.X[3]
display_MoleFractions.data.X[4]
display_MoleFractions.data.X[5]
display_MoleFractions.data.X[6]
display_MoleFractions.data.X[7]
display_MoleFractions.data.X_flow[1]
display_MoleFractions.data.X_flow[2]
display_MoleFractions.data.X_flow[3]
display_MoleFractions.data.X_flow[4]
display_MoleFractions.data.X_flow[5]
display_MoleFractions.data.X_flow[6]
display_MoleFractions.data.X_flow[7]
gasSensor.state.p
gasSensor.state.T
gasSensor.state.X[1]
gasSensor.state.X[2]
gasSensor.state.X[3]
gasSensor.state.X[4]
gasSensor.state.X[5]
gasSensor.state.X[6]
gasSensor.state.X[7]
display_phTmdot.h_kJ
display_phTmdot.p_bar
display_phTmdot.T_degC
display_phTmdot.mdot
display_phTmdot.precision_p
display_phTmdot.precision_h
display_phTmdot.precision_T
display_phTmdot.precision_mdot
display_phTmdot.displayUnits
display_cathodeIn.displayMassUnit
display_cathodeIn.Ar_index
display_cathodeIn.CO2_index
display_cathodeIn.H2O_index
display_cathodeIn.N2_index
display_cathodeIn.O2_index
display_cathodeIn.nbrOfPresentSubstances
display_cathodeIn.compatibleMedium
display_cathodeIn.sensorType
display_cathodeIn.precision
display_cathodeIn.X_Ar
display_cathodeIn.X_CO2
display_cathodeIn.X_H2O
display_cathodeIn.X_N2
display_cathodeIn.X_O2
display_cathodeIn.y[1]
display_cathodeIn.y[2]
display_cathodeIn.y[3]
display_cathodeIn.y[4]
display_cathodeIn.y[5]
display_cathodeIn.flow_conversion
display_cathodeIn.visible_massfraction
display_cathodeIn.visible_molefraction
display_cathodeIn.visible_massflow
display_cathodeIn.visible_moleflow
display_cathodeIn.data.temp
display_cathodeIn.data.X[1]
display_cathodeIn.data.X[2]
display_cathodeIn.data.X[3]
display_cathodeIn.data.X[4]
display_cathodeIn.data.X[5]
display_cathodeIn.data.X_flow[1]
display_cathodeIn.data.X_flow[2]
display_cathodeIn.data.X_flow[3]
display_cathodeIn.data.X_flow[4]
display_cathodeIn.data.X_flow[5]
display_phTmdot_cathodeIn.h_kJ
display_phTmdot_cathodeIn.p_bar
display_phTmdot_cathodeIn.T_degC
display_phTmdot_cathodeIn.mdot
display_phTmdot_cathodeIn.precision_p
display_phTmdot_cathodeIn.precision_h
display_phTmdot_cathodeIn.precision_T
display_phTmdot_cathodeIn.precision_mdot
display_phTmdot_cathodeIn.displayUnits
display_phTmdot1.h_kJ
display_phTmdot1.p_bar
display_phTmdot1.T_degC
display_phTmdot1.mdot
display_phTmdot1.y.X_flow[1]
display_phTmdot1.y.X_flow[2]
display_phTmdot1.y.X_flow[3]
display_phTmdot1.y.X_flow[4]
display_phTmdot1.y.X_flow[5]
display_phTmdot1.y.X_flow[6]
display_phTmdot1.y.X_flow[7]
display_phTmdot1.precision_p
display_phTmdot1.precision_h
display_phTmdot1.precision_T
display_phTmdot1.precision_mdot
display_phTmdot1.displayUnits
gasSensor1.state.p
gasSensor1.state.T
gasSensor1.state.X[1]
gasSensor1.state.X[2]
gasSensor1.state.X[3]
gasSensor1.state.X[4]
gasSensor1.state.X[5]
gasSensor1.state.X[6]
gasSensor1.state.X[7]
gasSensor_cathodeIn1.state.T
gasSensor_cathodeIn1.u.X[1]
gasSensor_cathodeIn1.u.X[2]
gasSensor_cathodeIn1.u.X[3]
gasSensor_cathodeIn1.u.X[4]
gasSensor_cathodeIn1.u.X[5]
gasSensor_cathodeIn1.u.X_flow[1]
gasSensor_cathodeIn1.u.X_flow[2]
gasSensor_cathodeIn1.u.X_flow[3]
gasSensor_cathodeIn1.u.X_flow[4]
gasSensor_cathodeIn1.u.X_flow[5]
display_phTmdot_cathodeIn1.h_kJ
display_phTmdot_cathodeIn1.p_bar
display_phTmdot_cathodeIn1.T_degC
display_phTmdot_cathodeIn1.mdot
display_phTmdot_cathodeIn1.precision_p
display_phTmdot_cathodeIn1.precision_h
display_phTmdot_cathodeIn1.precision_T
display_phTmdot_cathodeIn1.precision_mdot
display_phTmdot_cathodeIn1.displayUnits
display_cathodeIn2.displayMassUnit
display_cathodeIn2.Ar_index
display_cathodeIn2.CO2_index
display_cathodeIn2.H2O_index
display_cathodeIn2.N2_index
display_cathodeIn2.O2_index
display_cathodeIn2.nbrOfPresentSubstances
display_cathodeIn2.compatibleMedium
display_cathodeIn2.sensorType
display_cathodeIn2.precision
display_cathodeIn2.X_Ar
display_cathodeIn2.X_CO2
display_cathodeIn2.X_H2O
display_cathodeIn2.X_N2
display_cathodeIn2.X_O2
display_cathodeIn2.y[1]
display_cathodeIn2.y[2]
display_cathodeIn2.y[3]
display_cathodeIn2.y[4]
display_cathodeIn2.y[5]
display_cathodeIn2.flow_conversion
display_cathodeIn2.visible_massfraction
display_cathodeIn2.visible_molefraction
display_cathodeIn2.visible_massflow
display_cathodeIn2.visible_moleflow
display_cathodeIn2.data.temp
display_cathodeIn2.data.X[1]
display_cathodeIn2.data.X[2]
display_cathodeIn2.data.X[3]
display_cathodeIn2.data.X[4]
display_cathodeIn2.data.X[5]
display_cathodeIn2.data.X_flow[1]
display_cathodeIn2.data.X_flow[2]
display_cathodeIn2.data.X_flow[3]
display_cathodeIn2.data.X_flow[4]
display_cathodeIn2.data.X_flow[5]
display_phTmdot_cathodeIn2.h_kJ
display_phTmdot_cathodeIn2.p_bar
display_phTmdot_cathodeIn2.T_degC
display_phTmdot_cathodeIn2.mdot
display_phTmdot_cathodeIn2.precision_p
display_phTmdot_cathodeIn2.precision_h
display_phTmdot_cathodeIn2.precision_T
display_phTmdot_cathodeIn2.precision_mdot
display_phTmdot_cathodeIn2.displayUnits
display_MoleFractions2.displayMassUnit
display_MoleFractions2.sensorType
display_MoleFractions2.H2_index
display_MoleFractions2.CH4_index
display_MoleFractions2.CO_index
display_MoleFractions2.CO2_index
display_MoleFractions2.H2O_index
display_MoleFractions2.N2_index
display_MoleFractions2.O2_index
display_MoleFractions2.nbrOfPresentSubstances
display_MoleFractions2.compatibleMedium
display_MoleFractions2.precision
display_MoleFractions2.X_H2
display_MoleFractions2.X_CH4
display_MoleFractions2.X_CO
display_MoleFractions2.X_CO2
display_MoleFractions2.X_H2O
display_MoleFractions2.X_N2
display_MoleFractions2.X_O2
display_MoleFractions2.y[1]
display_MoleFractions2.y[2]
display_MoleFractions2.y[3]
display_MoleFractions2.y[4]
display_MoleFractions2.y[5]
display_MoleFractions2.y[6]
display_MoleFractions2.y[7]
display_MoleFractions2.flow_conversion
display_MoleFractions2.visible_massfraction
display_MoleFractions2.visible_molefraction
display_MoleFractions2.visible_massflow
display_MoleFractions2.visible_moleflow
display_MoleFractions2.data.X[1]
display_MoleFractions2.data.X[2]
display_MoleFractions2.data.X[3]
display_MoleFractions2.data.X[4]
display_MoleFractions2.data.X[5]
display_MoleFractions2.data.X[6]
display_MoleFractions2.data.X[7]
display_MoleFractions2.data.X_flow[1]
display_MoleFractions2.data.X_flow[2]
display_MoleFractions2.data.X_flow[3]
display_MoleFractions2.data.X_flow[4]
display_MoleFractions2.data.X_flow[5]
display_MoleFractions2.data.X_flow[6]
display_MoleFractions2.data.X_flow[7]
display_phTmdot2.h_kJ
display_phTmdot2.p_bar
display_phTmdot2.T_degC
display_phTmdot2.mdot
display_phTmdot2.precision_p
display_phTmdot2.precision_h
display_phTmdot2.precision_T
display_phTmdot2.precision_mdot
display_phTmdot2.displayUnits
gasSensor2.state.p
gasSensor2.state.T
gasSensor2.state.X[1]
gasSensor2.state.X[2]
gasSensor2.state.X[3]
gasSensor2.state.X[4]
gasSensor2.state.X[5]
gasSensor2.state.X[6]
gasSensor2.state.X[7]
gasSensor_cathodeIn3.state.T
gasSensor_cathodeIn3.u.X_flow[1]
gasSensor_cathodeIn3.u.X_flow[2]
gasSensor_cathodeIn3.u.X_flow[3]
gasSensor_cathodeIn3.u.X_flow[4]
gasSensor_cathodeIn3.u.X_flow[5]
display_cathodeIn3.displayMassUnit
display_cathodeIn3.Ar_index
display_cathodeIn3.CO2_index
display_cathodeIn3.H2O_index
display_cathodeIn3.N2_index
display_cathodeIn3.O2_index
display_cathodeIn3.nbrOfPresentSubstances
display_cathodeIn3.compatibleMedium
display_cathodeIn3.sensorType
display_cathodeIn3.precision
display_cathodeIn3.X_Ar
display_cathodeIn3.X_CO2
display_cathodeIn3.X_H2O
display_cathodeIn3.X_N2
display_cathodeIn3.X_O2
display_cathodeIn3.y[1]
display_cathodeIn3.y[2]
display_cathodeIn3.y[3]
display_cathodeIn3.y[4]
display_cathodeIn3.y[5]
display_cathodeIn3.flow_conversion
display_cathodeIn3.visible_massfraction
display_cathodeIn3.visible_molefraction
display_cathodeIn3.visible_massflow
display_cathodeIn3.visible_moleflow
display_cathodeIn3.data.X[1]
display_cathodeIn3.data.X[2]
display_cathodeIn3.data.X[3]
display_cathodeIn3.data.X[4]
display_cathodeIn3.data.X[5]
display_phTmdot_cathodeIn3.h_kJ
display_phTmdot_cathodeIn3.p_bar
display_phTmdot_cathodeIn3.T_degC
display_phTmdot_cathodeIn3.mdot
display_phTmdot_cathodeIn3.precision_p
display_phTmdot_cathodeIn3.precision_h
display_phTmdot_cathodeIn3.precision_T
display_phTmdot_cathodeIn3.precision_mdot
display_phTmdot_cathodeIn3.displayUnits
gasSensor_cathodeIn4.state.T
gasSensor_cathodeIn4.u.X_flow[1]
gasSensor_cathodeIn4.u.X_flow[2]
gasSensor_cathodeIn4.u.X_flow[3]
gasSensor_cathodeIn4.u.X_flow[4]
gasSensor_cathodeIn4.u.X_flow[5]
display_phTmdot_cathodeIn4.h_kJ
display_phTmdot_cathodeIn4.p_bar
display_phTmdot_cathodeIn4.T_degC
display_phTmdot_cathodeIn4.mdot
display_phTmdot_cathodeIn4.precision_p
display_phTmdot_cathodeIn4.precision_h
display_phTmdot_cathodeIn4.precision_T
display_phTmdot_cathodeIn4.precision_mdot
display_phTmdot_cathodeIn4.displayUnits
gasSensor_cathodeIn5.state.T
gasSensor_cathodeIn5.u.X[1]
gasSensor_cathodeIn5.u.X[2]
gasSensor_cathodeIn5.u.X[3]
gasSensor_cathodeIn5.u.X[4]
gasSensor_cathodeIn5.u.X[5]
gasSensor_cathodeIn5.u.X_flow[1]
gasSensor_cathodeIn5.u.X_flow[2]
gasSensor_cathodeIn5.u.X_flow[3]
gasSensor_cathodeIn5.u.X_flow[4]
gasSensor_cathodeIn5.u.X_flow[5]
display_phTmdot_cathodeIn5.h_kJ
display_phTmdot_cathodeIn5.p_bar
display_phTmdot_cathodeIn5.T_degC
display_phTmdot_cathodeIn5.mdot
display_phTmdot_cathodeIn5.precision_p
display_phTmdot_cathodeIn5.precision_h
display_phTmdot_cathodeIn5.precision_T
display_phTmdot_cathodeIn5.precision_mdot
display_phTmdot_cathodeIn5.displayUnits
display_MoleFractions1.displayMassUnit
display_MoleFractions1.sensorType
display_MoleFractions1.H2_index
display_MoleFractions1.CH4_index
display_MoleFractions1.CO_index
display_MoleFractions1.CO2_index
display_MoleFractions1.H2O_index
display_MoleFractions1.N2_index
display_MoleFractions1.O2_index
display_MoleFractions1.nbrOfPresentSubstances
display_MoleFractions1.compatibleMedium
display_MoleFractions1.precision
display_MoleFractions1.X_H2
display_MoleFractions1.X_CH4
display_MoleFractions1.X_CO
display_MoleFractions1.X_CO2
display_MoleFractions1.X_H2O
display_MoleFractions1.X_N2
display_MoleFractions1.X_O2
display_MoleFractions1.y[1]
display_MoleFractions1.y[2]
display_MoleFractions1.y[3]
display_MoleFractions1.y[4]
display_MoleFractions1.y[5]
display_MoleFractions1.y[6]
display_MoleFractions1.y[7]
display_MoleFractions1.flow_conversion
display_MoleFractions1.visible_massfraction
display_MoleFractions1.visible_molefraction
display_MoleFractions1.visible_massflow
display_MoleFractions1.visible_moleflow
display_MoleFractions1.data.X[1]
display_MoleFractions1.data.X[2]
display_MoleFractions1.data.X[3]
display_MoleFractions1.data.X[4]
display_MoleFractions1.data.X[5]
display_MoleFractions1.data.X[6]
display_MoleFractions1.data.X[7]
display_MoleFractions1.data.X_flow[1]
display_MoleFractions1.data.X_flow[2]
display_MoleFractions1.data.X_flow[3]
display_MoleFractions1.data.X_flow[4]
display_MoleFractions1.data.X_flow[5]
display_MoleFractions1.data.X_flow[6]
display_MoleFractions1.data.X_flow[7]
gasSensor3.state.p
gasSensor3.state.T
gasSensor3.state.X[1]
gasSensor3.state.X[2]
gasSensor3.state.X[3]
gasSensor3.state.X[4]
gasSensor3.state.X[5]
gasSensor3.state.X[6]
gasSensor3.state.X[7]
gasSensor3.portB.X_outflow[1]
gasSensor3.portB.X_outflow[2]
gasSensor3.portB.X_outflow[3]
gasSensor3.portB.X_outflow[4]
gasSensor3.portB.X_outflow[5]
gasSensor3.portB.X_outflow[6]
gasSensor3.portB.X_outflow[7]
display_phTmdot3.h_kJ
display_phTmdot3.p_bar
display_phTmdot3.T_degC
display_phTmdot3.mdot
display_phTmdot3.precision_p
display_phTmdot3.precision_h
display_phTmdot3.precision_T
display_phTmdot3.precision_mdot
display_phTmdot3.displayUnits
gasSensor4.state.T
gasSensor4.portA.X_outflow[1]
gasSensor4.portA.X_outflow[2]
gasSensor4.portA.X_outflow[3]
gasSensor4.portA.X_outflow[4]
gasSensor4.portA.X_outflow[5]
gasSensor4.u.X_flow[1]
gasSensor4.u.X_flow[2]
gasSensor4.u.X_flow[3]
gasSensor4.u.X_flow[4]
gasSensor4.u.X_flow[5]
display_MoleFractions3.displayMassUnit
display_MoleFractions3.Ar_index
display_MoleFractions3.CO2_index
display_MoleFractions3.H2O_index
display_MoleFractions3.N2_index
display_MoleFractions3.O2_index
display_MoleFractions3.nbrOfPresentSubstances
display_MoleFractions3.compatibleMedium
display_MoleFractions3.sensorType
display_MoleFractions3.precision
display_MoleFractions3.X_Ar
display_MoleFractions3.X_CO2
display_MoleFractions3.X_H2O
display_MoleFractions3.X_N2
display_MoleFractions3.X_O2
display_MoleFractions3.y[1]
display_MoleFractions3.y[2]
display_MoleFractions3.y[3]
display_MoleFractions3.y[4]
display_MoleFractions3.y[5]
display_MoleFractions3.flow_conversion
display_MoleFractions3.visible_massfraction
display_MoleFractions3.visible_molefraction
display_MoleFractions3.visible_massflow
display_MoleFractions3.visible_moleflow
display_MoleFractions3.data.X[1]
display_MoleFractions3.data.X[2]
display_MoleFractions3.data.X[3]
display_MoleFractions3.data.X[4]
display_MoleFractions3.data.X[5]
display_phTmdot_cathodeIn6.h_kJ
display_phTmdot_cathodeIn6.p_bar
display_phTmdot_cathodeIn6.T_degC
display_phTmdot_cathodeIn6.mdot
display_phTmdot_cathodeIn6.precision_p
display_phTmdot_cathodeIn6.precision_h
display_phTmdot_cathodeIn6.precision_T
display_phTmdot_cathodeIn6.precision_mdot
display_phTmdot_cathodeIn6.displayUnits
display_MoleFractions4.displayMassUnit
display_MoleFractions4.Ar_index
display_MoleFractions4.CO2_index
display_MoleFractions4.H2O_index
display_MoleFractions4.N2_index
display_MoleFractions4.O2_index
display_MoleFractions4.nbrOfPresentSubstances
display_MoleFractions4.compatibleMedium
display_MoleFractions4.sensorType
display_MoleFractions4.precision
display_MoleFractions4.X_Ar
display_MoleFractions4.X_CO2
display_MoleFractions4.X_H2O
display_MoleFractions4.X_N2
display_MoleFractions4.X_O2
display_MoleFractions4.y[1]
display_MoleFractions4.y[2]
display_MoleFractions4.y[3]
display_MoleFractions4.y[4]
display_MoleFractions4.y[5]
display_MoleFractions4.flow_conversion
display_MoleFractions4.visible_massfraction
display_MoleFractions4.visible_molefraction
display_MoleFractions4.visible_massflow
display_MoleFractions4.visible_moleflow
display_MoleFractions4.data.X[1]
display_MoleFractions4.data.X[2]
display_MoleFractions4.data.X[3]
display_MoleFractions4.data.X[4]
display_MoleFractions4.data.X[5]
multiDisplaySensor4.portA.X_outflow[1]
multiDisplaySensor4.u.temp
multiDisplaySensor4.u.X[1]
multiDisplaySensor4.u.X_flow[1]
multiDisplaySensor4.multiDisplaySensor.portA.X_outflow[1]
display_phTmdot4.h_kJ
display_phTmdot4.p_bar
display_phTmdot4.T_degC
display_phTmdot4.mdot
display_phTmdot4.precision_p
display_phTmdot4.precision_h
display_phTmdot4.precision_T
display_phTmdot4.precision_mdot
display_phTmdot4.displayUnits
display_MoleFractions5.displayMassUnit
display_MoleFractions5.sensorType
display_MoleFractions5.H2_index
display_MoleFractions5.CH4_index
display_MoleFractions5.CO_index
display_MoleFractions5.CO2_index
display_MoleFractions5.H2O_index
display_MoleFractions5.N2_index
display_MoleFractions5.O2_index
display_MoleFractions5.nbrOfPresentSubstances
display_MoleFractions5.compatibleMedium
display_MoleFractions5.precision
display_MoleFractions5.X_H2
display_MoleFractions5.X_CH4
display_MoleFractions5.X_CO
display_MoleFractions5.X_CO2
display_MoleFractions5.X_H2O
display_MoleFractions5.X_N2
display_MoleFractions5.X_O2
display_MoleFractions5.y[1]
display_MoleFractions5.y[2]
display_MoleFractions5.y[3]
display_MoleFractions5.y[4]
display_MoleFractions5.y[5]
display_MoleFractions5.y[6]
display_MoleFractions5.y[7]
display_MoleFractions5.flow_conversion
display_MoleFractions5.visible_massfraction
display_MoleFractions5.visible_molefraction
display_MoleFractions5.visible_massflow
display_MoleFractions5.visible_moleflow
display_MoleFractions5.data.X[1]
display_MoleFractions5.data.X[2]
display_MoleFractions5.data.X[3]
display_MoleFractions5.data.X[4]
display_MoleFractions5.data.X[5]
display_MoleFractions5.data.X[6]
display_MoleFractions5.data.X[7]
display_I1.number
display_I1.precision
display_I1.use_numberPort
display_I1.showText
display_I1.hideBackground
display_P1.number
display_P1.precision
display_P1.use_numberPort
display_P1.showText
display_P1.hideBackground
stack.subStack[1].anode_channel.channel.q[1].Q_flow
stack.subStack[1].anode_channel.channel.q[2].Q_flow
stack.subStack[1].anode_channel.channel.q[3].Q_flow
stack.subStack[1].anode_channel.channel.q[4].Q_flow
stack.subStack[1].cathode_channel.channel.q[1].Q_flow
stack.subStack[1].cathode_channel.channel.q[2].Q_flow
stack.subStack[1].cathode_channel.channel.q[3].Q_flow
stack.subStack[1].cathode_channel.channel.q[4].Q_flow
stack.subStack[2].anode_channel.channel.q[1].Q_flow
stack.subStack[2].anode_channel.channel.q[2].Q_flow
stack.subStack[2].anode_channel.channel.q[3].Q_flow
stack.subStack[2].anode_channel.channel.q[4].Q_flow
stack.subStack[2].cathode_channel.channel.q[1].Q_flow
stack.subStack[2].cathode_channel.channel.q[2].Q_flow
stack.subStack[2].cathode_channel.channel.q[3].Q_flow
stack.subStack[2].cathode_channel.channel.q[4].Q_flow
stack.subStack[3].anode_channel.channel.q[1].Q_flow
stack.subStack[3].anode_channel.channel.q[2].Q_flow
stack.subStack[3].anode_channel.channel.q[3].Q_flow
stack.subStack[3].anode_channel.channel.q[4].Q_flow
stack.subStack[3].cathode_channel.channel.q[1].Q_flow
stack.subStack[3].cathode_channel.channel.q[2].Q_flow
stack.subStack[3].cathode_channel.channel.q[3].Q_flow
stack.subStack[3].cathode_channel.channel.q[4].Q_flow
NGSource.massFlowBoundary.X_in_par[1].y
NGSource.massFlowBoundary.X_in_par[2].y
NGSource.massFlowBoundary.X_in_par[3].y
NGSource.massFlowBoundary.X_in_par[4].y
NGSource.massFlowBoundary.X_in_par[5].y
NGSource.massFlowBoundary.X_in_par[6].y
NGSource.massFlowBoundary.X_in_par[7].y

double initialValue(17456,6)
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # flowCathode.fluidPort.h_outflow
  0       0                       0                       1                
  6   260   # flowCathode.fluidPort.X_outflow[1]
  0       0                       0                       1                
  6   260   # flowCathode.fluidPort.X_outflow[2]
  0       0                       0                       1                
  6   260   # flowCathode.fluidPort.X_outflow[3]
  0       0                       0                       1                
  6   260   # flowCathode.fluidPort.X_outflow[4]
  0       0                       0                       1                
  6   260   # flowCathode.fluidPort.X_outflow[5]
  0       1                       1                       2                
  6   770   # flowCathode.massFlowBoundary.flowDefinition
  0       1                       1                       2                
  6   770   # flowCathode.massFlowBoundary.energyDefinition
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # flowCathode.massFlowBoundary.m_flow
  0       0                       0                       0                
  6   256   # flowCathode.massFlowBoundary.V_flow
  0     300                       0                   10000                
  6   256   # flowCathode.massFlowBoundary.T
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # flowCathode.massFlowBoundary.h
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.X[1]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.X[2]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.X[3]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.X[4]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.X[5]
  0       1                       1                       2                
  6   770   # flowCathode.massFlowBoundary.VFlowUnit
  0       1                       1                       2                
  6   770   # flowCathode.massFlowBoundary.temperatureUnit
  0       0                       0                       0                
  6   769   # flowCathode.massFlowBoundary.use_flow_in
  0       0                       0                       0                
  6   769   # flowCathode.massFlowBoundary.use_Th_in
  0       0                       0                       0                
  6   769   # flowCathode.massFlowBoundary.use_X_in
  0       0                       0                       0                
  6   769   # flowCathode.massFlowBoundary.use_C_in
  0       1                       0                       0                
  6   256   # flowCathode.massFlowBoundary.Vflow_scale
 -1  100000                       0                 1.0000000000000000E+100
  1   280   # flowCathode.massFlowBoundary.p_start
  0       0                       0                       1                
  6  1280   # flowCathode.massFlowBoundary.X_set[1]
  0       0                       0                       1                
  6  1280   # flowCathode.massFlowBoundary.X_set[2]
  0       0                       0                       1                
  6  1280   # flowCathode.massFlowBoundary.X_set[3]
  0       0                       0                       1                
  6  1280   # flowCathode.massFlowBoundary.X_set[4]
  0       0                       0                       1                
  6  1280   # flowCathode.massFlowBoundary.X_set[5]
  0       0                       0                  1.0000000000000000E+08
  6   256   # flowCathode.massFlowBoundary.state.p
  0     300                       0                   10000                
  6   256   # flowCathode.massFlowBoundary.state.T
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.state.X[1]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.state.X[2]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.state.X[3]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.state.X[4]
  0       0                       0                       1                
  6   256   # flowCathode.massFlowBoundary.state.X[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # flowCathode.massFlowBoundary.d
  0  1.5513666684189500E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.npol_Cp
  0  1.6697153818630201E-16       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.cp_coeff[1]
  0  5.2033093020927197E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.cp_coeff[2]
  0  9.1155212797379204E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.s_coeff[1]
  0  5.2033093020927504E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.s_coeff[2]
  0 -2.6715446109808400E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.Ar.TMAX
  0  2.3470323878690100E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.npol_Cp
  0  6.0122595775589305E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.cp_coeff[1]
  0  6.9757076051155605E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.cp_coeff[2]
  0  7.3832346149376394E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.s_coeff[1]
  0  6.8966948447500897E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.s_coeff[2]
  0  6.2781903913576598E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.CO2.TMAX
  0  5.2299644978151500E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.npol_Cp
  0  5.9952394504074102E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.cp_coeff[1]
  0  1.6647646557398200E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.cp_coeff[2]
  0  8.1471193312717503E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.s_coeff[1]
  0  1.6660494985921600E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.s_coeff[2]
  0  5.9034002728275303E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.H2O.TMAX
  0  2.9786512949062203E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.npol_Cp
  0  1.8242801600876599E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.cp_coeff[1]
  0  9.7184908314328300E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.cp_coeff[2]
  0  1.2421320470059200E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.s_coeff[1]
  0  9.7355448661370497E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.s_coeff[2]
  0  1.7454817052710700E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.N2.TMAX
  0  2.6081378708409599E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.npol_Cp
  0  2.7727283217861698E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.cp_coeff[1]
  0  8.3343928081429897E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.cp_coeff[2]
  0  1.6108256826640400E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.s_coeff[1]
  0  8.2740576334422599E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.s_coeff[2]
  0  2.8892738011520902E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.FastIdealGasData.O2.TMAX
  0  1.5513666684189500E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].npol_Cp
  0  1.6697153818630201E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].cp_coeff[1]
  0  5.2033093020927197E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].cp_coeff[2]
  0  9.1155212797379204E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].s_coeff[1]
  0  5.2033093020927504E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].s_coeff[2]
  0 -2.6715446109808400E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[1].TMAX
  0  2.3470323878690100E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].npol_Cp
  0  6.0122595775589305E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].cp_coeff[1]
  0  6.9757076051155605E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].cp_coeff[2]
  0  7.3832346149376394E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].s_coeff[1]
  0  6.8966948447500897E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].s_coeff[2]
  0  6.2781903913576598E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[2].TMAX
  0  5.2299644978151500E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].npol_Cp
  0  5.9952394504074102E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].cp_coeff[1]
  0  1.6647646557398200E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].cp_coeff[2]
  0  8.1471193312717503E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].s_coeff[1]
  0  1.6660494985921600E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].s_coeff[2]
  0  5.9034002728275303E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[3].TMAX
  0  2.9786512949062203E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].npol_Cp
  0  1.8242801600876599E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].cp_coeff[1]
  0  9.7184908314328300E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].cp_coeff[2]
  0  1.2421320470059200E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].s_coeff[1]
  0  9.7355448661370497E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].s_coeff[2]
  0  1.7454817052710700E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[4].TMAX
  0  2.6081378708409599E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].npol_Cp
  0  2.7727283217861698E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].cp_coeff[1]
  0  8.3343928081429897E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].cp_coeff[2]
  0  1.6108256826640400E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].s_coeff[1]
  0  8.2740576334422599E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].s_coeff[2]
  0  2.8892738011520902E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].s_coeff[3]
  0     293                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].TMIN
  0     873                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.data[5].TMAX
  0       1                       1                       2                
  6   770   # flowCathode.flowDefinition
  0       1                       1                       2                
  6   770   # flowCathode.energyDefinition
 -1  2.0000000000000000E-02       0                       0                
  1   280   # flowCathode.m_flow
 -1       0                       0                       0                
  1   280   # flowCathode.V_flow
 -1  9.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # flowCathode.T
 -1  2.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # flowCathode.h
 -1       0                       0                       1                
  1   280   # flowCathode.X[1]
 -1       0                       0                       1                
  1   280   # flowCathode.X[2]
 -1       0                       0                       1                
  1   280   # flowCathode.X[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # flowCathode.X[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # flowCathode.X[5]
  0       1                       1                       2                
  6   770   # flowCathode.VFlowUnit
  0       1                       1                       2                
  6   770   # flowCathode.temperatureUnit
  0       0                       0                       0                
  6   769   # flowCathode.use_flow_in
  0       0                       0                       0                
  6   769   # flowCathode.use_Th_in
  0       0                       0                       0                
  6   769   # flowCathode.use_X_in
  0       0                       0                       0                
  6   260   # ground.p.v
  0       0                       0                       0                
  6   388   # ground.p.i
 -1      90                       0                       0                
  1   280   # current.I
 -1     200                  9.9999999999999997E-61 1.0000000000000000E+100
  1   280   # current.duration
  0       0                       0                       0                
  6   256   # current.v
  0       0                       0                       0                
  6   256   # current.i
  0       0                       0                       0                
  6   260   # current.n.v
 -1      10                       0                       0                
  1   280   # current.offset
 -1      50                       0                       0                
  1   280   # current.startTime
  0       0                       0                       0                
  6   256   # current.signalSource.height
  0       2                       0                 1.0000000000000000E+100
  6   256   # current.signalSource.duration
  0       0                       0                       0                
  6   256   # current.signalSource.offset
  0       0                       0                       0                
  6   256   # current.signalSource.startTime
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.N
  0       3                       2                 1.0000000000000000E+100
  6   258   # stack.nbrSubStacks
 -1      10                       0                       0                
  1   282   # stack.n_cell[1]
 -1      30                       0                       0                
  1   282   # stack.n_cell[2]
 -1      10                       0                       0                
  1   282   # stack.n_cell[3]
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.A_cell
 -1     500                       0                       0                
  1   280   # stack.Cp_cell
 -1     250                       0                       0                
  1   280   # stack.kc_cell
 -1      15                       0                 1.0000000000000000E+100
  1   280   # stack.M_stack
 -1  1.0000000000000000E-02       0                       0                
  1   280   # stack.A_top
 -1     200                       0                       0                
  1   280   # stack.h_top
 -1  1.0000000000000000E-02       0                       0                
  1   280   # stack.dp_top
 -1      12                       0                       0                
  1   280   # stack.h_conv_top
 -1  4.0000000000000001E-02       0                       0                
  1   280   # stack.e_top
 -1  1.0000000000000000E-02       0                       0                
  1   280   # stack.A_bottom
 -1     200                       0                       0                
  1   280   # stack.h_bottom
 -1  1.0000000000000000E-02       0                       0                
  1   280   # stack.dp_bottom
 -1  5.0000000000000000E-01       0                       0                
  1   280   # stack.A_side
 -1       5                       0                       0                
  1   280   # stack.h_conv_side
 -1  4.0000000000000001E-02       0                       0                
  1   280   # stack.e_side
 -1  4.0000000000000001E-02       0                       0                
  1   280   # stack.k_insul
 -1  2.0000000000000000E-02       0                       0                
  1   280   # stack.dl_topInsul
 -1  2.0000000000000000E-02       0                       0                
  1   280   # stack.dl_bottomInsul
 -1  2.0000000000000000E-02       0                       0                
  1   280   # stack.dl_sideInsul
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.n
 -1       1                       1                       5                
  1   282   # stack.initOpt_anode
  0       0                       0                       0                
  6   256   # stack.p_start_in_anode
  0       0                       0                       0                
  6   256   # stack.p_start_out_anode
  0       0                       0                       0                
  6   256   # stack.p_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.p_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.p_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.p_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.p_start_anode[5]
 -1       0                       0                       0                
  1   281   # stack.initFromEnthalpy_anode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.h_start_in_anode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.h_start_out_anode
  0       0                       0                       0                
  6   256   # stack.h_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.h_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.h_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.h_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.h_start_anode[5]
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # stack.T_start_in_anode
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # stack.T_start_out_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_anode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_anode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_anode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_anode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_anode[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.X_start_anode[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.X_start_anode[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.X_start_anode[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.X_start_anode[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.X_start_anode[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.X_start_anode[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.X_start_anode[7]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Hf
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Tlimit
  0  4.0783232100000001E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[1]
  0 -8.0091860399999996E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[2]
  0  8.2147020099999999E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[3]
  0 -1.2697144570000001E-02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[4]
  0  1.7536050760000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[5]
  0 -1.2028602700000000E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[6]
  0  3.3680934900000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[7]
  0  2.6824846649999999E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[1]
  0 -3.0437888439999998E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[2]
  0  5.6081280099999998E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[1]
  0 -8.3715047400000003E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[2]
  0  2.9753645320000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[3]
  0  1.2522491239999999E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[4]
  0 -3.7407161900000001E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[5]
  0  5.9366252000000005E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[6]
  0 -3.6069940999999999E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[7]
  0  5.3398244100000002E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[1]
  0 -2.2027747689999999E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[2]
  0  4.1244875687044860E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.R
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.MM
  0 -4.6501596388583798E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Hf
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Tlimit
  0 -1.7668509980000000E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[1]
  0  2.7861810200000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[2]
  0 -1.2025778499999999E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[3]
  0  3.9176192899999997E-02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[4]
  0 -3.6190544300000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[5]
  0  2.0268530430000001E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[6]
  0 -4.9767054899999986E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[7]
  0 -2.3313143599999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[1]
  0  8.9043227500000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[2]
  0  3.7300427599999998E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[1]
  0 -1.3835014850000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[2]
  0  2.0491070910000001E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[3]
  0 -1.9619747590000000E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[4]
  0  4.7273130399999999E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[5]
  0 -3.7288146900000001E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[6]
  0  1.6237372070000000E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[7]
  0  7.5320669099999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[1]
  0 -1.2191248890000000E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[2]
  0  5.1827911679380850E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.R
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.MM
  0 -3.9462620983145358E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Hf
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Tlimit
  0  1.4890453260000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[1]
  0 -2.9222859390000002E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[2]
  0  5.7245271700000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[3]
  0 -8.1762350300000012E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[4]
  0  1.4569034690000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[5]
  0 -1.0877463020000000E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[6]
  0  3.0279418269999999E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[7]
  0 -1.3031318780000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[1]
  0 -7.8592413499999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[2]
  0  4.6191972499999998E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[1]
  0 -1.9447048629999999E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[2]
  0  5.9167141799999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[3]
  0 -5.6642828300000007E-04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[4]
  0  1.3988145400000001E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[5]
  0 -1.7876803610000000E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[6]
  0  9.6209355700000001E-16       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[7]
  0 -2.4662610840000002E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[1]
  0 -1.3874131080000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[2]
  0  2.9683835473632718E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.R
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].Hf
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].Tlimit
  0  4.0783232100000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[1]
  0 -8.0091860399999996E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[2]
  0  8.2147020099999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[3]
  0 -1.2697144570000001E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[4]
  0  1.7536050760000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[5]
  0 -1.2028602700000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[6]
  0  3.3680934900000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].alow[7]
  0  2.6824846649999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].blow[1]
  0 -3.0437888439999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].blow[2]
  0  5.6081280099999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[1]
  0 -8.3715047400000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[2]
  0  2.9753645320000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[3]
  0  1.2522491239999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[4]
  0 -3.7407161900000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[5]
  0  5.9366252000000005E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[6]
  0 -3.6069940999999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].ahigh[7]
  0  5.3398244100000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].bhigh[1]
  0 -2.2027747689999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].bhigh[2]
  0  4.1244875687044860E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[1].R
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].MM
  0 -4.6501596388583798E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].Hf
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].Tlimit
  0 -1.7668509980000000E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[1]
  0  2.7861810200000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[2]
  0 -1.2025778499999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[3]
  0  3.9176192899999997E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[4]
  0 -3.6190544300000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[5]
  0  2.0268530430000001E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[6]
  0 -4.9767054899999986E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].alow[7]
  0 -2.3313143599999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].blow[1]
  0  8.9043227500000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].blow[2]
  0  3.7300427599999998E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[1]
  0 -1.3835014850000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[2]
  0  2.0491070910000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[3]
  0 -1.9619747590000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[4]
  0  4.7273130399999999E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[5]
  0 -3.7288146900000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[6]
  0  1.6237372070000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].ahigh[7]
  0  7.5320669099999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].bhigh[1]
  0 -1.2191248890000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].bhigh[2]
  0  5.1827911679380850E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[2].R
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].MM
  0 -3.9462620983145358E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].Hf
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].Tlimit
  0  1.4890453260000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[1]
  0 -2.9222859390000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[2]
  0  5.7245271700000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[3]
  0 -8.1762350300000012E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[4]
  0  1.4569034690000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[5]
  0 -1.0877463020000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[6]
  0  3.0279418269999999E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].alow[7]
  0 -1.3031318780000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].blow[1]
  0 -7.8592413499999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].blow[2]
  0  4.6191972499999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[1]
  0 -1.9447048629999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[2]
  0  5.9167141799999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[3]
  0 -5.6642828300000007E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[4]
  0  1.3988145400000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[5]
  0 -1.7876803610000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[6]
  0  9.6209355700000001E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].ahigh[7]
  0 -2.4662610840000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].bhigh[1]
  0 -1.3874131080000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].bhigh[2]
  0  2.9683835473632718E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[3].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[4].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[5].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[6].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData[7].R
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.m_flow_start_anode
 -1       1                       1                       5                
  1   282   # stack.initOpt_cathode
  0       0                       0                       0                
  6   256   # stack.p_start_in_cathode
  0       0                       0                       0                
  6   256   # stack.p_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.p_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.p_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.p_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.p_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.p_start_cathode[5]
 -1       0                       0                       0                
  1   281   # stack.initFromEnthalpy_cathode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.h_start_in_cathode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.h_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.h_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.h_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.h_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.h_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.h_start_cathode[5]
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # stack.T_start_in_cathode
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # stack.T_start_out_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_cathode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_cathode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_cathode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_cathode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.T_start_cathode[5]
  0       0                       0                       1                
  6   256   # stack.X_start_cathode[1]
  0       0                       0                       1                
  6   256   # stack.X_start_cathode[2]
  0       0                       0                       1                
  6   256   # stack.X_start_cathode[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.X_start_cathode[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.X_start_cathode[5]
 -1  2.0000000000000000E-02       0                       0                
  1   280   # stack.m_flow_start_cathode
 -1      10                       0                       0                
  1   280   # stack.dp_smooth
 -1  1.0000000000000000E-04       0                       0                
  1   280   # stack.mflow_smooth
 -1       1                       0                       0                
  1   281   # stack.from_dp_anode
  0       0                       0                       0                
  6   257   # stack.positiveFlow_anode
  0       0                       0                       0                
  6   257   # stack.generateEventForReversal_anode
 -1       1                       0                       0                
  1   281   # stack.from_dp_cathode
 -1       0                       0                       0                
  1   281   # stack.positiveFlow_cathode
  0       0                       0                       0                
  6   257   # stack.generateEventForReversal_cathode
  0       0                       0                       0                
  6   257   # stack.useHeatTransfer_anode
  0       0                       0                       0                
  6   257   # stack.useHeatTransfer_cathode
 -1    5000                       0                       0                
  1   280   # stack.dp_start_anode
 -1    5000                       0                       0                
  1   280   # stack.dp_start_cathode
  0       0                       0                       0                
  6   256   # stack.splitRatio_an[1]
  0       0                       0                       0                
  6   256   # stack.splitRatio_an[2]
  0       0                       0                       0                
  6   256   # stack.splitRatio_an[3]
  0       0                       0                       0                
  6   256   # stack.splitRatio_cath[1]
  0       0                       0                       0                
  6   256   # stack.splitRatio_cath[2]
  0       0                       0                       0                
  6   256   # stack.splitRatio_cath[3]
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.V_manifold_an
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.V_manifold_cath
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.height
 -1  2.9999999999999999E-02       0                       0                
  1   280   # stack.thickness_cell
 -1  1.0000000000000000E-02       0                       0                
  1   280   # stack.wallthickness
 -1  4.0000000000000001E-02  3.6100000000000000E-02 1.0000000000000000E+100
  1   280   # stack.A_cell_tot
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.m_flow_nom_an
 -1  2.0000000000000000E-02       0                       0                
  1   280   # stack.m_flow_nom_cath
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.heat[1].n
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.heat[1].Aheatloss
  0       0                       0                       0                
  6   256   # stack.heat[1].kc
  0       0                       0                       0                
  6   257   # stack.heat[1].infiniteHT
  0       0                       0                       0                
  6   257   # stack.heat[1].variableKc
  0       1                       0                       0                
  6   256   # stack.heat[1].Q_s[1]
  0       1                       0                       0                
  6   256   # stack.heat[1].Q_s[2]
  0       1                       0                       0                
  6   256   # stack.heat[1].Q_s[3]
  0       1                       0                       0                
  6   256   # stack.heat[1].Q_s[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.heat[2].n
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.heat[2].Aheatloss
  0       0                       0                       0                
  6   256   # stack.heat[2].kc
  0       0                       0                       0                
  6   257   # stack.heat[2].infiniteHT
  0       0                       0                       0                
  6   257   # stack.heat[2].variableKc
  0       1                       0                       0                
  6   256   # stack.heat[2].Q_s[1]
  0       1                       0                       0                
  6   256   # stack.heat[2].Q_s[2]
  0       1                       0                       0                
  6   256   # stack.heat[2].Q_s[3]
  0       1                       0                       0                
  6   256   # stack.heat[2].Q_s[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].N
  0       7                       0                       0                
  6   258   # stack.subStack[1].nX_an
  0       5                       0                       0                
  6   258   # stack.subStack[1].nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.subStack[1].A_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].kc
  0       0                       0                       0                
  6   257   # stack.subStack[1].includeCellConduction
 -1      20                       0                       0                
  1   280   # stack.subStack[1].lambda_cell
 -1  3.6000000000000001E-05       0                       0                
  1   280   # stack.subStack[1].A_crosssection_cell
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[1].length_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].G_cell
  0       0                       0                       0                
  6   258   # stack.subStack[1].n_cell
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].M_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].Cp_cell
  0       0                       0                       0                
  6   257   # stack.subStack[1].addProxToAnode
  0       0                       0                       0                
  6   256   # stack.subStack[1].P_stack
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_stoich
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_stoich
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].cell.N
  0       7                       0                       0                
  6   258   # stack.subStack[1].cell.nX_an
  0       5                       0                       0                
  6   258   # stack.subStack[1].cell.nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.subStack[1].cell.A_cell
  0       0                       0                       0                
  6   258   # stack.subStack[1].cell.n_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.MCp_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.kc
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.Tstart
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cell.T_cell[1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cell.der(T_cell[1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cell.T_cell[2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cell.der(T_cell[2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cell.T_cell[3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cell.der(T_cell[3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cell.T_cell[4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cell.der(T_cell[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.Q_cell[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.Q_cell[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.Q_cell[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.Q_cell[4]
 -1       0                       0                       0                
  1   281   # stack.subStack[1].cell.T_from_h
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_an[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_an[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_an[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_an[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_cath[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_cath[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_cath[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cell.wall_cath[4].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].cell.port_an[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[2].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].cell.port_an[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[3].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_an[4].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[2].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].cell.port_cath[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[2].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[3].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].cell.port_cath[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[3].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[4].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[4].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cell.port_cath[4].mX_flow[4]
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.T_an[1]
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.T_an[2]
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.T_an[3]
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.T_an[4]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.state_an[1].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.state_an[2].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.state_an[3].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.state_an[4].p
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].X[7]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].Hf
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].Tlimit
  0  4.0783232100000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[1]
  0 -8.0091860399999996E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[2]
  0  8.2147020099999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[3]
  0 -1.2697144570000001E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[4]
  0  1.7536050760000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[5]
  0 -1.2028602700000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[6]
  0  3.3680934900000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].alow[7]
  0  2.6824846649999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].blow[1]
  0 -3.0437888439999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].blow[2]
  0  5.6081280099999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[1]
  0 -8.3715047400000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[2]
  0  2.9753645320000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[3]
  0  1.2522491239999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[4]
  0 -3.7407161900000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[5]
  0  5.9366252000000005E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[6]
  0 -3.6069940999999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].ahigh[7]
  0  5.3398244100000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].bhigh[1]
  0 -2.2027747689999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].bhigh[2]
  0  4.1244875687044860E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[1].R
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].MM
  0 -4.6501596388583798E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].Hf
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].Tlimit
  0 -1.7668509980000000E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[1]
  0  2.7861810200000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[2]
  0 -1.2025778499999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[3]
  0  3.9176192899999997E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[4]
  0 -3.6190544300000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[5]
  0  2.0268530430000001E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[6]
  0 -4.9767054899999986E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].alow[7]
  0 -2.3313143599999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].blow[1]
  0  8.9043227500000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].blow[2]
  0  3.7300427599999998E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[1]
  0 -1.3835014850000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[2]
  0  2.0491070910000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[3]
  0 -1.9619747590000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[4]
  0  4.7273130399999999E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[5]
  0 -3.7288146900000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[6]
  0  1.6237372070000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].ahigh[7]
  0  7.5320669099999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].bhigh[1]
  0 -1.2191248890000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].bhigh[2]
  0  5.1827911679380850E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[2].R
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].MM
  0 -3.9462620983145358E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].Hf
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].Tlimit
  0  1.4890453260000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[1]
  0 -2.9222859390000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[2]
  0  5.7245271700000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[3]
  0 -8.1762350300000012E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[4]
  0  1.4569034690000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[5]
  0 -1.0877463020000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[6]
  0  3.0279418269999999E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].alow[7]
  0 -1.3031318780000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].blow[1]
  0 -7.8592413499999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].blow[2]
  0  4.6191972499999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[1]
  0 -1.9447048629999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[2]
  0  5.9167141799999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[3]
  0 -5.6642828300000007E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[4]
  0  1.3988145400000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[5]
  0 -1.7876803610000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[6]
  0  9.6209355700000001E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].ahigh[7]
  0 -2.4662610840000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].bhigh[1]
  0 -1.3874131080000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].bhigh[2]
  0  2.9683835473632718E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[3].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[4].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[5].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[6].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.NASAData_Unique30[7].R
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.anode[1].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.anode[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cell.anode[1].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.anode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[1].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[1].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[1].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[1].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[1].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[1].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.anode[2].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.anode[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cell.anode[2].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.anode[2].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[2].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[2].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[2].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[2].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[2].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[2].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[2].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[2].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.anode[3].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.anode[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cell.anode[3].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.anode[3].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[3].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[3].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[3].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[3].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[3].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[3].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[3].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[3].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.anode[4].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.anode[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cell.anode[4].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.anode[4].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[4].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[4].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[1].cell.anode[4].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.anode[4].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.anode[4].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[4].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[4].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.anode[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.anode[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.anode[4].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.cathode[1].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.cathode[1].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.cathode[1].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.cathode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[1].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[1].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[1].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[1].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[1].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[1].ddx[5]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Hf
  0  1.5513737859216981E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Tlimit
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[1]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[2]
  0  2.5000000000000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[3]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[4]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[5]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[6]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[7]
  0 -7.4537500000000000E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[1]
  0  4.3796749100000003E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[2]
  0  2.0105384749999999E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[1]
  0 -5.9926610699999987E-02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[2]
  0  2.5000694010000002E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[3]
  0 -3.9921411600000003E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[4]
  0  1.2052721400000000E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[5]
  0 -1.8190155760000001E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[6]
  0  1.0785766360000000E-19       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[7]
  0 -7.4499396100000001E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[1]
  0  4.3791801100000001E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[2]
  0  2.0813237208370879E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.R
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].Hf
  0  1.5513737859216981E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].Tlimit
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[1]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[2]
  0  2.5000000000000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[3]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[4]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[5]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[6]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].alow[7]
  0 -7.4537500000000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].blow[1]
  0  4.3796749100000003E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].blow[2]
  0  2.0105384749999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[1]
  0 -5.9926610699999987E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[2]
  0  2.5000694010000002E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[3]
  0 -3.9921411600000003E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[4]
  0  1.2052721400000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[5]
  0 -1.8190155760000001E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[6]
  0  1.0785766360000000E-19       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].ahigh[7]
  0 -7.4499396100000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].bhigh[1]
  0  4.3791801100000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].bhigh[2]
  0  2.0813237208370879E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[1].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[2].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[3].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[4].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData[5].R
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[2].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.cathode[2].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.cathode[2].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.cathode[2].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.cathode[2].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[2].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[2].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[2].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[2].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[3].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.cathode[3].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.cathode[3].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.cathode[3].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.cathode[3].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[3].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[3].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[3].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[3].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[4].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[1].cell.cathode[4].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[1].cell.cathode[4].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[1].cell.cathode[4].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[1].cell.cathode[4].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].cell.cathode[4].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[1].cell.cathode[4].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cell.cathode[4].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.cathode[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[1].cell.cathode[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[1].cell.cathode[4].ddx[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.der_T_cell[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.der_T_cell[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.der_T_cell[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cell.der_T_cell[4]
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.npol_Cp
  0  1.1545998913943800E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.cp_coeff[1]
  0  1.3895516149232901E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.cp_coeff[2]
  0 -1.5390430216810500E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.s_coeff[1]
  0  1.4032598149932101E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.s_coeff[2]
  0  9.2612139901696000E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2.TMAX
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.npol_Cp
  0  3.1809023493971602E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.cp_coeff[1]
  0  1.3441572115773599E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.cp_coeff[2]
  0  3.5568449349870102E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.s_coeff[1]
  0  1.2370333258226401E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.s_coeff[2]
  0  3.3647122294806202E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CH4.TMAX
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.npol_Cp
  0  2.1194769545709699E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.cp_coeff[1]
  0  9.6667514896952503E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.cp_coeff[2]
  0  1.5338256542024401E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.s_coeff[1]
  0  9.5782794065836299E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.s_coeff[2]
  0  2.2289103189865000E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO.TMAX
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.npol_Cp
  0  4.4273088156653900E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.cp_coeff[1]
  0  7.7805785332907794E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.cp_coeff[2]
  0  3.6167748192421402E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.s_coeff[1]
  0  7.6270168693354196E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.s_coeff[2]
  0  4.8415610928150898E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.CO2.TMAX
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.npol_Cp
  0  6.5384758305366697E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.cp_coeff[1]
  0  1.6387310572230399E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.cp_coeff[2]
  0  9.6011187045388499E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.s_coeff[1]
  0  1.6377313190079601E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.s_coeff[2]
  0  6.4717737595642799E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.H2O.TMAX
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.npol_Cp
  0  1.9626847191799299E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.cp_coeff[1]
  0  9.6653994770799397E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.cp_coeff[2]
  0  1.3073894341740599E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.s_coeff[1]
  0  9.6073186372932105E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.s_coeff[2]
  0  2.0139745663423100E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.N2.TMAX
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.npol_Cp
  0  2.1675117464016400E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.cp_coeff[1]
  0  8.6607368726792504E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.cp_coeff[2]
  0  1.4789593001105000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.s_coeff[1]
  0  8.5277818728641103E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.s_coeff[2]
  0  2.4073153926586999E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.DataDefinitions.FastReformateData.O2.TMAX
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].npol_Cp
  0  1.1545998913943800E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].cp_coeff[1]
  0  1.3895516149232901E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].cp_coeff[2]
  0 -1.5390430216810500E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].s_coeff[1]
  0  1.4032598149932101E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].s_coeff[2]
  0  9.2612139901696000E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[1].TMAX
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].npol_Cp
  0  3.1809023493971602E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].cp_coeff[1]
  0  1.3441572115773599E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].cp_coeff[2]
  0  3.5568449349870102E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].s_coeff[1]
  0  1.2370333258226401E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].s_coeff[2]
  0  3.3647122294806202E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[2].TMAX
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].npol_Cp
  0  2.1194769545709699E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].cp_coeff[1]
  0  9.6667514896952503E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].cp_coeff[2]
  0  1.5338256542024401E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].s_coeff[1]
  0  9.5782794065836299E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].s_coeff[2]
  0  2.2289103189865000E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[3].TMAX
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].npol_Cp
  0  4.4273088156653900E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].cp_coeff[1]
  0  7.7805785332907794E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].cp_coeff[2]
  0  3.6167748192421402E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].s_coeff[1]
  0  7.6270168693354196E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].s_coeff[2]
  0  4.8415610928150898E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[4].TMAX
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].npol_Cp
  0  6.5384758305366697E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].cp_coeff[1]
  0  1.6387310572230399E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].cp_coeff[2]
  0  9.6011187045388499E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].s_coeff[1]
  0  1.6377313190079601E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].s_coeff[2]
  0  6.4717737595642799E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[5].TMAX
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].npol_Cp
  0  1.9626847191799299E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].cp_coeff[1]
  0  9.6653994770799397E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].cp_coeff[2]
  0  1.3073894341740599E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].s_coeff[1]
  0  9.6073186372932105E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].s_coeff[2]
  0  2.0139745663423100E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[6].TMAX
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].H0
  0       1                       0                 1.0000000000000000E+100
  6  1282   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].npol_Cp
  0  2.1675117464016400E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].cp_coeff[1]
  0  8.6607368726792504E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].cp_coeff[2]
  0  1.4789593001105000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].s_coeff[1]
  0  8.5277818728641103E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].s_coeff[2]
  0  2.4073153926586999E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].s_coeff[3]
  0  2.9814999999999998E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].TMIN
  0  1.2731500000000001E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.EquationsOfState.data[7].TMAX
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.sum_Q_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.P_cell[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.P_cell[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.P_cell[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.P_cell[4]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.j_Ionic[1]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.j_Ionic[2]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.j_Ionic[3]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.j_Ionic[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.mXi_flow_an[4, 7]
  0       1                       0                       0                
  6   256   # stack.subStack[1].cell.S_ionic[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.S_ionic[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.S_ionic[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.S_ionic[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].cell.S_ionic[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.S_ionic[6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.S_ionic[7]
 -1  2.9000000000000000E-05       0                       0                
  1   280   # stack.subStack[1].cell.ASR0
 -1  6.2715461151825861E+04       0                       0                
  1   280   # stack.subStack[1].cell.Ea
 -1    1073                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cell.T0
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.V_nernst[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.V_nernst[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.V_nernst[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.V_nernst[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.r_Int[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.r_Int[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.r_Int[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.r_Int[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.ASR[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.ASR[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.ASR[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.ASR[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.g_reaction[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.g_reaction[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.g_reaction[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.g_reaction[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2O[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2O[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2O[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pH2O[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pO2[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pO2[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pO2[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.pO2[4]
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cell.internalRes[1].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[1].cell.internalRes[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[1].v
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[1].i
  0       0                       0                       0                
  6   260   # stack.subStack[1].cell.internalRes[1].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[1].cell.internalRes[1].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.internalRes[1].T
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[1].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[1].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cell.internalRes[2].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[1].cell.internalRes[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[2].v
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[2].i
  0       0                       0                       0                
  6   260   # stack.subStack[1].cell.internalRes[2].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[1].cell.internalRes[2].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.internalRes[2].T
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[2].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[2].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cell.internalRes[3].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[1].cell.internalRes[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[3].v
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[3].i
  0       0                       0                       0                
  6   260   # stack.subStack[1].cell.internalRes[3].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[1].cell.internalRes[3].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.internalRes[3].T
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[3].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[3].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cell.internalRes[4].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[1].cell.internalRes[4].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[4].v
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[4].i
  0       0                       0                       0                
  6   260   # stack.subStack[1].cell.internalRes[4].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[1].cell.internalRes[4].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cell.internalRes[4].T
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[4].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[1].cell.internalRes[4].R_actual
  0       1                       0                       0                
  6  1282   # stack.subStack[1].cell.ref[1]
  0       5                       0                       0                
  6  1282   # stack.subStack[1].cell.ref[2]
  0       5                       0                       0                
  6  1282   # stack.subStack[1].cell.air[1]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[1]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[2]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[3]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[4]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[5]
  0       0                       0                       0                
  6   260   # stack.subStack[1].pin_n.v
  0       0                       0                       0                
  6   388   # stack.subStack[1].pin_n.i
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].feed_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].drain_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].feed_cathode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[1].drain_cathode.h_outflow
  0       0                       0                       0                
  6   388   # stack.subStack[1].wall[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].wall[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].wall[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].wall[4].Q_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[1].pi
 -1       1                       1                 1.0000000000000000E+100
  1   280   # stack.subStack[1].n_channels_anode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[1].L_anode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # stack.subStack[1].D_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].Dhyd_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].C_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].A_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].V_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].A_heat_anode
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].n_channels_cathode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[1].L_cathode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # stack.subStack[1].D_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].Dhyd_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].C_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].A_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].V_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].A_heat_cathode
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].n
  0       1                       1                       5                
  6   258   # stack.subStack[1].initOpt_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_in_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_out_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_anode[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].initFromEnthalpy_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_in_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_out_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_anode[5]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_in_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_out_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_anode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_anode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_anode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_anode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_anode[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[1].X_start_anode[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[1].X_start_anode[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[1].X_start_anode[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[1].X_start_anode[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[1].X_start_anode[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[1].X_start_anode[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[1].X_start_anode[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].m_flow_start_anode
  0       1                       1                       5                
  6   258   # stack.subStack[1].initOpt_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_in_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].p_start_cathode[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].initFromEnthalpy_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_in_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].h_start_cathode[5]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_in_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_out_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_cathode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_cathode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_cathode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_cathode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].T_start_cathode[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].X_start_cathode[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].X_start_cathode[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].X_start_cathode[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[1].X_start_cathode[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[1].X_start_cathode[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].m_flow_start_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[1].from_dp_anode
  0       0                       0                       0                
  6   257   # stack.subStack[1].positiveFlow_anode
  0       0                       0                       0                
  6   257   # stack.subStack[1].generateEventForReversal_anode
  0       0                       0                       0                
  6   257   # stack.subStack[1].from_dp_cathode
  0       1                       0                       0                
  6   257   # stack.subStack[1].positiveFlow_cathode
  0       0                       0                       0                
  6   257   # stack.subStack[1].generateEventForReversal_cathode
  0       0                       0                       0                
  6   257   # stack.subStack[1].useHeatTransfer_anode
  0       0                       0                       0                
  6   257   # stack.subStack[1].useHeatTransfer_cathode
 -1       1                       0                       0                
  1   280   # stack.subStack[1].CF_AnodeSidePressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[1].CF_AnodeSideHeatTransfer
 -1       1                       0                       0                
  1   280   # stack.subStack[1].CF_CathodePressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[1].CF_CathodeSideHeatTransfer
 -1     400                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].d0_prox
 -1     100                       0                       0                
  1   280   # stack.subStack[1].dp0_prox
 -1  1.0000000000000001E-01       0                       0                
  1   280   # stack.subStack[1].m_flow_nom_prox
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_stoich_num
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_stoich_den
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_stoich_num
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_stoich_den
  0       4                       0                       0                
  6   258   # stack.subStack[1].summary.N
  0       0                       0                       0                
  6   258   # stack.subStack[1].summary.n_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].summary.j_external
  0       0                       0                       0                
  6   256   # stack.subStack[1].summary.V_cell
  0       0                       0                       0                
  6   256   # stack.subStack[1].summary.Q_stack
  0       0                       0                       0                
  6   256   # stack.subStack[1].summary.dp_anode
  0       0                       0                       0                
  6   256   # stack.subStack[1].summary.dp_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.summary.dp
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.summary.M
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.summary.V
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.summary.d_in
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].anode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.n_channels
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.L
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.D
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.A
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.C
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.V
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.A_heat
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.useHeatTransfer
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].anode_channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[1].anode_channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.T_start[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.X_start[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.m_flow_start
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # stack.subStack[1].anode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[1].anode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # stack.subStack[1].anode_channel.X_weight
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.y_sat
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # stack.subStack[1].anode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # stack.subStack[1].anode_channel.g
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].anode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.n_channels[1]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.n_channels[2]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.n_channels[3]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.n_channels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.L[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.L[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.L[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Dhyd[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Dhyd[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Dhyd[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.V[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.V[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.V[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A_heat[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A_heat[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A_heat[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.A_heat[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].anode_channel.channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[1].anode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.T_start[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.X_start[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.m_flow_start
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.NA
  0       1                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].anode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.der(T[1])
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].anode_channel.channel.T[2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.der(T[2])
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].anode_channel.channel.T[3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.der(T[3])
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].anode_channel.channel.T[4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.der(T[4])
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # stack.subStack[1].anode_channel.channel.frictionDistribution
  0       4                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.levels[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.levels[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.levels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.g
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[1].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].anode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[2].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[2].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[2].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[2].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].anode_channel.channel.friction[2].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[2].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[2].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[2].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[2].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[2].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[2].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[3].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[3].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[3].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[3].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].anode_channel.channel.friction[3].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[3].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[3].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[3].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[3].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[3].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[3].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[4].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[4].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[4].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[4].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].anode_channel.channel.friction[4].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[4].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.friction[4].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.friction[4].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.friction[4].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[4].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.friction[4].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[1].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[1].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.htcoeff[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[2].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[2].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[2].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[2].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.htcoeff[2].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[2].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.htcoeff[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[3].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[3].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[3].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[3].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.htcoeff[3].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[3].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.htcoeff[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[4].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[4].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[4].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[4].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.htcoeff[4].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.htcoeff[4].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.htcoeff[4].alpha
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].anode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Cp_reac[2]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Cp_reac[3]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Cp_reac[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Q[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.mX_flow[4, 5]
  0       3                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 1]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 2]
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 4]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[1, 7]
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 2]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 3]
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 4]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_reac[2, 7]
  0       2                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.reaction.n_reac
  0       2                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.reaction.comp[1]
  0       5                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.reaction.comp[2]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Tstart
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Xstart[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Xstart[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Xstart[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Xstart[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Xstart[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Xstart[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Xstart[7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.reaction.scale
  0  2.0158799999999998E-03  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MMX[1]
  0  1.6042460000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MMX[2]
  0  2.8010100000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MMX[3]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MMX[4]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MMX[5]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MMX[6]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MMX[7]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MM[1]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MM[2]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MM[3]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.MM[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(MM[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(MM[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(MM[4])
  0  2.7660000000000001E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.y_start[1]
  0  1.6960000000000000E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.y_start[2]
  0  1.7999999999999999E-02       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.y_start[3]
  0  7.3300000000000004E-02       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.y_start[4]
  0  2.4530000000000002E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.y_start[5]
  0  2.0549999999999999E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.y_start[6]
  0  1.1700000000000000E-02       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.y_start[7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_start[1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_start[2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_start[3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_start[4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_start[5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_start[6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_start[7]
  0  100000                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.pref
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[1, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[2, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[3, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_y_out[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.log10_eq_reac[4, 2]
  0  3.7697709702875987E-01       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 1]
  0      -1                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 2]
  0  1.7459978083161807E+00       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 4]
  0 -1.1229749053449409E+00       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[1, 7]
  0  1.1189834407236522E-01       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 2]
  0 -1.5547968169242996E+00       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 3]
  0  2.4428984728519345E+00       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.Sx_reac[2, 7]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[1]
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[2]
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[3]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[4]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[5]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[6]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique94[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_start[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_start[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_start[7]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # stack.subStack[1].anode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # stack.subStack[1].anode_channel.channel.reaction.Tscale
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.kEq_reac[4, 2]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[1, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[1, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[1, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[2, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[2, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[2, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[2, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[2, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[2, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[3, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[3, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[3, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[3, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[3, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[3, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[4, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[4, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[4, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[4, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].anode_channel.channel.reaction.Zx[4, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(Zx[4, 7])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Ztot[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Ztot[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Ztot[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Ztot[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(Ztot[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(Ztot[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.der(Ztot[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_flow[4, 5]
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[1, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[1, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[2, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[2, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[3, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[3, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[4, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[1].anode_channel.channel.reaction.krate[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].anode_channel.channel.reaction.der(krate[4, 2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.rZ[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_formation[4, 7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].anode_channel.channel.reaction.epsZ
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.e[4, 2]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[2].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[3].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.state[4].X[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[3, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.deplZ[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[1, 1]
  0      -1                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[1, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[2, 2]
  0      -1                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[2, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.reactant[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.reaction.rate[4, 2]
  0       3                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_ref[1]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_ref[2]
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_ref[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_ref[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_ref[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_ref[6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_ref[7]
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_wgs[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_wgs[2]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_wgs[3]
  0       1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_wgs[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_wgs[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_wgs[6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.S_wgs[7]
  0       2                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.reaction.index[1]
  0       5                       0                       0                
  6   258   # stack.subStack[1].anode_channel.channel.reaction.index[2]
  0  7.2314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.reaction.T_sat_for_WGS
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_rere[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_rere[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_rere[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_rere[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_wgs[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_wgs[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_wgs[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.reaction.g_wgs[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].anode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[1].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].anode_channel.channel.gas[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.gas[2].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[2].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].anode_channel.channel.gas[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.gas[3].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[3].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].anode_channel.channel.gas[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[1].anode_channel.channel.gas[4].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].anode_channel.channel.gas[4].ddx[7]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.p[1]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.p[2]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.p[3]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.p[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(p[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(p[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(p[4])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.M[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.M[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.M[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.M[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(M[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(M[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(M[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.der(M[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.E_seg[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.E_seg[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.E_seg[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.E_seg[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[1, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[1, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[2, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[2, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[2, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[2, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[2, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[2, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[2, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[3, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[3, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[3, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[3, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[3, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[3, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[4, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[4, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[4, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[4, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[4, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].anode_channel.channel.MXi[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.dp[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.dp[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.dp[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.sh[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.sh[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.sh[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.sh[4]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.state[1].p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].T
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].anode_channel.channel.state[6].p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].T
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[1].anode_channel.channel.state[6].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q_tot
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q_wall[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q_wall[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q_wall[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.Q_wall[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.alpha[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.alpha[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.alpha[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[1].anode_channel.channel.rMX[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.mflow_B_in
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.m_flow_fric[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.m_flow_fric[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.m_flow_fric[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XA[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XA[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XB[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XB[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.XB[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.n_channels_fric[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.n_channels_fric[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.n_channels_fric[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.n_channels_fric[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].anode_channel.channel.T_wall[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].anode_channel.channel.T_wall[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].anode_channel.channel.T_wall[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].anode_channel.channel.T_wall[4]
  0       7                       0                       0                
  6  1282   # stack.subStack[1].anode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[1, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[2, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[3, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[3, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[3, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[4, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[4, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[4, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[5, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[5, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[5, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[5, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[5, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[5, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.mX_flow[5, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.H_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.H_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.H_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.H_flow[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dE[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dE[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dE[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dE[4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[3, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[3, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[4, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].anode_channel.channel.dMX[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dZ[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dUTZ[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dUTZ[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dUTZ[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.dUTZ[4]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[1, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[1, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[1, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[1, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[1, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[1, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[1, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[2, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[2, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[2, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[2, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[2, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[2, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[2, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[3, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[3, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[3, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[3, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[3, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[3, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[3, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[4, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[4, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[4, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[4, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[4, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[4, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[1].anode_channel.channel.Z[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[1, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[1, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[2, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[2, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[2, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[2, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[2, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[2, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[2, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[3, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[3, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[3, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[3, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[3, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[3, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[3, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[4, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[4, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[4, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[4, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[4, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[4, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].anode_channel.channel.der(Z[4, 7])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[2].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[2].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[3].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[3].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[4].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[4].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].anode_channel.port[4].mX_flow[7]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.summary.dp
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.summary.M
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.summary.V
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.summary.T_in
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.summary.d_in
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].cathode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[1].cathode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.n_channels
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.L
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.D
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.A
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.C
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.V
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.A_heat
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.useHeatTransfer
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].cathode_channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[1].cathode_channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.T_start[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.X_start[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.X_start[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[1].cathode_channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[1].cathode_channel.X_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.m_flow_start
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # stack.subStack[1].cathode_channel.X_weight
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.y_sat
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # stack.subStack[1].cathode_channel.g
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].cathode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.n_channels[1]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.n_channels[2]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.n_channels[3]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.n_channels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.L[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.L[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.L[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Dhyd[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Dhyd[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Dhyd[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.V[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.V[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.V[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A_heat[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A_heat[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A_heat[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.A_heat[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].cathode_channel.channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[1].cathode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.T_start[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.X_start[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.X_start[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.X_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.m_flow_start
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # stack.subStack[1].cathode_channel.channel.NA
  0       1                       0                       0                
  6   258   # stack.subStack[1].cathode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].cathode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.der(T[1])
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].cathode_channel.channel.T[2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.der(T[2])
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].cathode_channel.channel.T[3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.der(T[3])
 -1       0                       0                   10000                
  2   272   # stack.subStack[1].cathode_channel.channel.T[4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.der(T[4])
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # stack.subStack[1].cathode_channel.channel.frictionDistribution
  0       4                       0                       0                
  6   258   # stack.subStack[1].cathode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.levels[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.levels[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.levels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.g
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[1].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].cathode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[2].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[2].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[2].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[2].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].cathode_channel.channel.friction[2].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[2].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[2].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[2].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[2].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[2].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[2].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[3].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[3].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[3].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[3].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].cathode_channel.channel.friction[3].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[3].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[3].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[3].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[3].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[3].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[3].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[4].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[4].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[4].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[4].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[1].cathode_channel.channel.friction[4].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[4].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.friction[4].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.friction[4].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.friction[4].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[4].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.friction[4].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[1].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.htcoeff[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[2].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[2].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[2].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.htcoeff[2].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[2].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.htcoeff[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[3].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[3].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[3].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.htcoeff[3].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[3].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.htcoeff[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[4].A
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[4].L
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[4].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.htcoeff[4].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.htcoeff[4].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.htcoeff[4].alpha
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[1].cathode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[2]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[3]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Cp_reac[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Q[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.mX_flow[4, 5]
  0       0                       0                       0                
  6   258   # stack.subStack[1].cathode_channel.channel.reaction.n_reac
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Tstart
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Xstart[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Xstart[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Xstart[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Xstart[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Xstart[5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.reaction.scale
  0  3.9947999999999997E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MMX[1]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MMX[2]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MMX[3]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MMX[4]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MMX[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MM[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MM[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MM[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.MM[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(MM[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(MM[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(MM[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.y_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.y_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.y_start[3]
  0  7.9270802239664317E-01       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.y_start[4]
  0  2.0729197760335691E-01       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.y_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_start[5]
  0  100000                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.pref
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.log10_y_out[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Zx_start[5]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # stack.subStack[1].cathode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # stack.subStack[1].cathode_channel.channel.reaction.Tscale
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[2, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[2, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[3, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[3, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[1].cathode_channel.channel.reaction.Zx[4, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Zx[4, 5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Ztot[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Ztot[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Ztot[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Ztot[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.der(Ztot[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.rZ[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.g_formation[4, 5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # stack.subStack[1].cathode_channel.channel.reaction.epsZ
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[1].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[2].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[2].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[2].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[3].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[3].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[3].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[4].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[4].T
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.state[4].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.reaction.deplZ[4, 5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].cathode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[1].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].cathode_channel.channel.gas[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.gas[2].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[2].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].cathode_channel.channel.gas[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.gas[3].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[3].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].d
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[1].cathode_channel.channel.gas[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[1].cathode_channel.channel.gas[4].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[1].cathode_channel.channel.gas[4].ddx[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(p[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(p[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(p[4])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.M[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.M[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.M[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.M[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(M[1])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(M[2])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(M[3])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.der(M[4])
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.E_seg[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.E_seg[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.E_seg[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.E_seg[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[2, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[2, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[2, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[2, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[2, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[3, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[3, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[3, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[3, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[4, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[4, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[4, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[4, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[1].cathode_channel.channel.MXi[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.dp[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.dp[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.dp[5]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.sh[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.sh[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.sh[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.sh[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[1].cathode_channel.channel.state[1].X[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[1].cathode_channel.channel.state[6].T
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q_tot
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q_wall[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q_wall[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q_wall[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.Q_wall[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.alpha[2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.alpha[3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.alpha[4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[1].cathode_channel.channel.rMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.mflow_B_in
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.m_flow_fric[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.m_flow_fric[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.m_flow_fric[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.XB[5]
  0       1                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.n_channels_fric[1]
  0       1                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.n_channels_fric[2]
  0       1                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.n_channels_fric[3]
  0       1                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.n_channels_fric[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].cathode_channel.channel.T_wall[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].cathode_channel.channel.T_wall[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].cathode_channel.channel.T_wall[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[1].cathode_channel.channel.T_wall[4]
  0       5                       0                       0                
  6  1282   # stack.subStack[1].cathode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[3, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[4, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[5, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[5, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[5, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[5, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.mX_flow[5, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.H_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.H_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.H_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.H_flow[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dE[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dE[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dE[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dE[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dMX[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dUTZ[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dUTZ[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dUTZ[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.dUTZ[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[1, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[1, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[1, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[1, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[1, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[2, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[2, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[2, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[2, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[2, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[3, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[3, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[3, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[3, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[3, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[4, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[4, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[4, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[4, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[1].cathode_channel.channel.Z[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[2, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[2, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[2, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[2, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[2, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[3, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[3, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[3, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[3, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[3, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[4, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[4, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[4, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[4, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[1].cathode_channel.channel.der(Z[4, 5])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[1].cathode_channel.port[4].mX_flow[4]
  0       1                       0                       0                
  6  1282   # stack.subStack[1].ref[1]
  0       5                       0                       0                
  6  1282   # stack.subStack[1].air[1]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[1]
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[2]
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[3]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[4]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[5]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[6]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique106[7]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[1]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[2]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[3]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[4]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique108[5]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].Hf
  0  1.5513737859216981E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].Tlimit
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[1]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[2]
  0  2.5000000000000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[3]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[4]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[5]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[6]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].alow[7]
  0 -7.4537500000000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].blow[1]
  0  4.3796749100000003E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].blow[2]
  0  2.0105384749999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[1]
  0 -5.9926610699999987E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[2]
  0  2.5000694010000002E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[3]
  0 -3.9921411600000003E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[4]
  0  1.2052721400000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[5]
  0 -1.8190155760000001E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[6]
  0  1.0785766360000000E-19       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].ahigh[7]
  0 -7.4499396100000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].bhigh[1]
  0  4.3791801100000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].bhigh[2]
  0  2.0813237208370879E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[1].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[2].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[3].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[4].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastMoistAir.EquationsOfState.NASAData_Unique109[5].R
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].N
  0       7                       0                       0                
  6   258   # stack.subStack[2].nX_an
  0       5                       0                       0                
  6   258   # stack.subStack[2].nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.subStack[2].A_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].kc
  0       0                       0                       0                
  6   257   # stack.subStack[2].includeCellConduction
 -1      20                       0                       0                
  1   280   # stack.subStack[2].lambda_cell
 -1  3.6000000000000001E-05       0                       0                
  1   280   # stack.subStack[2].A_crosssection_cell
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[2].length_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].G_cell
  0       0                       0                       0                
  6   258   # stack.subStack[2].n_cell
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].M_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].Cp_cell
  0       0                       0                       0                
  6   257   # stack.subStack[2].addProxToAnode
  0       0                       0                       0                
  6   256   # stack.subStack[2].P_stack
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_stoich
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_stoich
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].cell.N
  0       7                       0                       0                
  6   258   # stack.subStack[2].cell.nX_an
  0       5                       0                       0                
  6   258   # stack.subStack[2].cell.nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.subStack[2].cell.A_cell
  0       0                       0                       0                
  6   258   # stack.subStack[2].cell.n_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.MCp_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.kc
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.Tstart
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cell.T_cell[1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cell.der(T_cell[1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cell.T_cell[2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cell.der(T_cell[2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cell.T_cell[3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cell.der(T_cell[3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cell.T_cell[4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cell.der(T_cell[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.Q_cell[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.Q_cell[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.Q_cell[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.Q_cell[4]
 -1       0                       0                       0                
  1   281   # stack.subStack[2].cell.T_from_h
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_an[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_an[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_an[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_an[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_cath[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_cath[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_cath[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cell.wall_cath[4].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].cell.port_an[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[2].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].cell.port_an[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[3].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_an[4].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[2].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].cell.port_cath[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[2].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[3].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].cell.port_cath[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[3].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[4].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[4].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cell.port_cath[4].mX_flow[4]
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.T_an[1]
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.T_an[2]
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.T_an[3]
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.T_an[4]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.state_an[1].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.state_an[2].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.state_an[3].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.state_an[4].p
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.anode[1].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.anode[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cell.anode[1].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.anode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[1].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[1].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[1].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[1].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[1].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[1].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.anode[2].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.anode[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cell.anode[2].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.anode[2].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[2].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[2].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[2].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[2].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[2].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[2].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[2].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[2].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.anode[3].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.anode[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cell.anode[3].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.anode[3].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[3].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[3].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[3].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[3].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[3].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[3].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[3].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[3].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.anode[4].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.anode[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cell.anode[4].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.anode[4].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[4].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[4].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[2].cell.anode[4].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.anode[4].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.anode[4].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[4].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[4].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.anode[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.anode[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.anode[4].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.cathode[1].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.cathode[1].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.cathode[1].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.cathode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[1].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[1].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[1].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[1].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[1].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[1].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[2].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.cathode[2].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.cathode[2].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.cathode[2].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.cathode[2].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[2].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[2].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[2].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[2].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[3].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.cathode[3].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.cathode[3].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.cathode[3].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.cathode[3].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[3].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[3].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[3].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[3].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[4].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[2].cell.cathode[4].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[2].cell.cathode[4].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[2].cell.cathode[4].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[2].cell.cathode[4].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].cell.cathode[4].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[2].cell.cathode[4].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cell.cathode[4].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.cathode[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[2].cell.cathode[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[2].cell.cathode[4].ddx[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.der_T_cell[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.der_T_cell[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.der_T_cell[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cell.der_T_cell[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.sum_Q_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.P_cell[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.P_cell[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.P_cell[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.P_cell[4]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.j_Ionic[1]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.j_Ionic[2]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.j_Ionic[3]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.j_Ionic[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.mXi_flow_an[4, 7]
  0       1                       0                       0                
  6   256   # stack.subStack[2].cell.S_ionic[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.S_ionic[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.S_ionic[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.S_ionic[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].cell.S_ionic[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.S_ionic[6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.S_ionic[7]
 -1  2.9000000000000000E-05       0                       0                
  1   280   # stack.subStack[2].cell.ASR0
 -1  6.2715461151825861E+04       0                       0                
  1   280   # stack.subStack[2].cell.Ea
 -1    1073                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cell.T0
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.V_nernst[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.V_nernst[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.V_nernst[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.V_nernst[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.r_Int[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.r_Int[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.r_Int[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.r_Int[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.ASR[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.ASR[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.ASR[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.ASR[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.g_reaction[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.g_reaction[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.g_reaction[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.g_reaction[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2O[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2O[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2O[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pH2O[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pO2[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pO2[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pO2[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.pO2[4]
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cell.internalRes[1].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[2].cell.internalRes[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[1].v
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[1].i
  0       0                       0                       0                
  6   260   # stack.subStack[2].cell.internalRes[1].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[2].cell.internalRes[1].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.internalRes[1].T
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[1].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[1].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cell.internalRes[2].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[2].cell.internalRes[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[2].v
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[2].i
  0       0                       0                       0                
  6   260   # stack.subStack[2].cell.internalRes[2].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[2].cell.internalRes[2].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.internalRes[2].T
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[2].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[2].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cell.internalRes[3].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[2].cell.internalRes[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[3].v
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[3].i
  0       0                       0                       0                
  6   260   # stack.subStack[2].cell.internalRes[3].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[2].cell.internalRes[3].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.internalRes[3].T
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[3].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[3].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cell.internalRes[4].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[2].cell.internalRes[4].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[4].v
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[4].i
  0       0                       0                       0                
  6   260   # stack.subStack[2].cell.internalRes[4].n.v
  0       0                       0                       0                
  6   769   # stack.subStack[2].cell.internalRes[4].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cell.internalRes[4].T
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[4].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[2].cell.internalRes[4].R_actual
  0       1                       0                       0                
  6  1282   # stack.subStack[2].cell.ref[1]
  0       5                       0                       0                
  6  1282   # stack.subStack[2].cell.ref[2]
  0       5                       0                       0                
  6  1282   # stack.subStack[2].cell.air[1]
  0       0                       0                       0                
  6   388   # stack.subStack[2].pin_n.i
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].feed_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].drain_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].feed_cathode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[2].drain_cathode.h_outflow
  0       0                       0                       0                
  6   388   # stack.subStack[2].wall[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].wall[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].wall[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].wall[4].Q_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[2].pi
 -1       1                       1                 1.0000000000000000E+100
  1   280   # stack.subStack[2].n_channels_anode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[2].L_anode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # stack.subStack[2].D_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].Dhyd_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].C_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].A_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].V_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].A_heat_anode
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].n_channels_cathode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[2].L_cathode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # stack.subStack[2].D_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].Dhyd_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].C_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].A_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].V_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].A_heat_cathode
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].n
  0       1                       1                       5                
  6   258   # stack.subStack[2].initOpt_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_in_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_out_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_anode[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].initFromEnthalpy_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_in_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_out_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_anode[5]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_in_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_out_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_anode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_anode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_anode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_anode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_anode[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[2].X_start_anode[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[2].X_start_anode[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[2].X_start_anode[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[2].X_start_anode[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[2].X_start_anode[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[2].X_start_anode[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[2].X_start_anode[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].m_flow_start_anode
  0       1                       1                       5                
  6   258   # stack.subStack[2].initOpt_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_in_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].p_start_cathode[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].initFromEnthalpy_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_in_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].h_start_cathode[5]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_in_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_out_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_cathode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_cathode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_cathode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_cathode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].T_start_cathode[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].X_start_cathode[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].X_start_cathode[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].X_start_cathode[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[2].X_start_cathode[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[2].X_start_cathode[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].m_flow_start_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[2].from_dp_anode
  0       0                       0                       0                
  6   257   # stack.subStack[2].positiveFlow_anode
  0       0                       0                       0                
  6   257   # stack.subStack[2].generateEventForReversal_anode
  0       0                       0                       0                
  6   257   # stack.subStack[2].from_dp_cathode
  0       1                       0                       0                
  6   257   # stack.subStack[2].positiveFlow_cathode
  0       0                       0                       0                
  6   257   # stack.subStack[2].generateEventForReversal_cathode
  0       0                       0                       0                
  6   257   # stack.subStack[2].useHeatTransfer_anode
  0       0                       0                       0                
  6   257   # stack.subStack[2].useHeatTransfer_cathode
 -1       1                       0                       0                
  1   280   # stack.subStack[2].CF_AnodeSidePressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[2].CF_AnodeSideHeatTransfer
 -1       1                       0                       0                
  1   280   # stack.subStack[2].CF_CathodePressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[2].CF_CathodeSideHeatTransfer
 -1     400                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].d0_prox
 -1     100                       0                       0                
  1   280   # stack.subStack[2].dp0_prox
 -1  1.0000000000000001E-01       0                       0                
  1   280   # stack.subStack[2].m_flow_nom_prox
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_stoich_num
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_stoich_den
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_stoich_num
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_stoich_den
  0       4                       0                       0                
  6   258   # stack.subStack[2].summary.N
  0       0                       0                       0                
  6   258   # stack.subStack[2].summary.n_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].summary.j_external
  0       0                       0                       0                
  6   256   # stack.subStack[2].summary.V_cell
  0       0                       0                       0                
  6   256   # stack.subStack[2].summary.Q_stack
  0       0                       0                       0                
  6   256   # stack.subStack[2].summary.dp_anode
  0       0                       0                       0                
  6   256   # stack.subStack[2].summary.dp_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.summary.dp
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.summary.M
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.summary.V
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.summary.d_in
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].anode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.n_channels
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.L
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.D
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.A
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.C
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.V
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.A_heat
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.useHeatTransfer
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].anode_channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[2].anode_channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.T_start[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.X_start[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.m_flow_start
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # stack.subStack[2].anode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[2].anode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # stack.subStack[2].anode_channel.X_weight
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.y_sat
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # stack.subStack[2].anode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # stack.subStack[2].anode_channel.g
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].anode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.n_channels[1]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.n_channels[2]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.n_channels[3]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.n_channels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.L[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.L[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.L[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Dhyd[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Dhyd[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Dhyd[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.V[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.V[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.V[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A_heat[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A_heat[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A_heat[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.A_heat[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].anode_channel.channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[2].anode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.T_start[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.X_start[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.m_flow_start
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.NA
  0       1                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].anode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.der(T[1])
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].anode_channel.channel.T[2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.der(T[2])
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].anode_channel.channel.T[3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.der(T[3])
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].anode_channel.channel.T[4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.der(T[4])
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # stack.subStack[2].anode_channel.channel.frictionDistribution
  0       4                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.levels[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.levels[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.levels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.g
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[1].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].anode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[2].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[2].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[2].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[2].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].anode_channel.channel.friction[2].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[2].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[2].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[2].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[2].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[2].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[2].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[3].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[3].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[3].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[3].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].anode_channel.channel.friction[3].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[3].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[3].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[3].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[3].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[3].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[3].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[4].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[4].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[4].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[4].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].anode_channel.channel.friction[4].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[4].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.friction[4].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.friction[4].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.friction[4].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[4].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.friction[4].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[1].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[1].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.htcoeff[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[2].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[2].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[2].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[2].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.htcoeff[2].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[2].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.htcoeff[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[3].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[3].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[3].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[3].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.htcoeff[3].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[3].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.htcoeff[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[4].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[4].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[4].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[4].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.htcoeff[4].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.htcoeff[4].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.htcoeff[4].alpha
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].anode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Cp_reac[2]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Cp_reac[3]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Cp_reac[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Q[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.mX_flow[4, 5]
  0       3                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 1]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 2]
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 4]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[1, 7]
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 2]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 3]
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 4]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_reac[2, 7]
  0       2                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.reaction.n_reac
  0       2                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.reaction.comp[1]
  0       5                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.reaction.comp[2]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Tstart
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Xstart[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Xstart[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Xstart[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Xstart[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Xstart[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Xstart[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Xstart[7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.reaction.scale
  0  2.0158799999999998E-03  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MMX[1]
  0  1.6042460000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MMX[2]
  0  2.8010100000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MMX[3]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MMX[4]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MMX[5]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MMX[6]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MMX[7]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MM[1]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MM[2]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MM[3]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.MM[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(MM[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(MM[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(MM[4])
  0  2.7660000000000001E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.y_start[1]
  0  1.6960000000000000E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.y_start[2]
  0  1.7999999999999999E-02       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.y_start[3]
  0  7.3300000000000004E-02       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.y_start[4]
  0  2.4530000000000002E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.y_start[5]
  0  2.0549999999999999E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.y_start[6]
  0  1.1700000000000000E-02       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.y_start[7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_start[1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_start[2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_start[3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_start[4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_start[5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_start[6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_start[7]
  0  100000                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.pref
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[1, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[2, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[3, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_y_out[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.log10_eq_reac[4, 2]
  0  3.7697709702875987E-01       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 1]
  0      -1                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 2]
  0  1.7459978083161807E+00       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 4]
  0 -1.1229749053449409E+00       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[1, 7]
  0  1.1189834407236522E-01       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 2]
  0 -1.5547968169242996E+00       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 3]
  0  2.4428984728519345E+00       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.Sx_reac[2, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_start[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_start[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_start[7]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # stack.subStack[2].anode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # stack.subStack[2].anode_channel.channel.reaction.Tscale
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.kEq_reac[4, 2]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[1, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[1, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[1, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[2, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[2, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[2, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[2, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[2, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[2, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[3, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[3, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[3, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[3, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[3, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[3, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[4, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[4, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[4, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[4, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].anode_channel.channel.reaction.Zx[4, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(Zx[4, 7])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Ztot[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Ztot[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Ztot[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Ztot[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(Ztot[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(Ztot[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.der(Ztot[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_flow[4, 5]
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[1, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[1, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[2, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[2, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[3, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[3, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[4, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[2].anode_channel.channel.reaction.krate[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].anode_channel.channel.reaction.der(krate[4, 2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.rZ[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_formation[4, 7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].anode_channel.channel.reaction.epsZ
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.e[4, 2]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[2].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[3].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.state[4].X[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[3, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.deplZ[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[1, 1]
  0      -1                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[1, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[2, 2]
  0      -1                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[2, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.reactant[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.reaction.rate[4, 2]
  0       3                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_ref[1]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_ref[2]
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_ref[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_ref[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_ref[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_ref[6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_ref[7]
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_wgs[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_wgs[2]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_wgs[3]
  0       1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_wgs[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_wgs[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_wgs[6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.S_wgs[7]
  0       2                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.reaction.index[1]
  0       5                       0                       0                
  6   258   # stack.subStack[2].anode_channel.channel.reaction.index[2]
  0  7.2314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.reaction.T_sat_for_WGS
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_rere[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_rere[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_rere[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_rere[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_wgs[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_wgs[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_wgs[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.reaction.g_wgs[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].anode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[1].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].anode_channel.channel.gas[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.gas[2].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[2].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].anode_channel.channel.gas[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.gas[3].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[3].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].anode_channel.channel.gas[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[2].anode_channel.channel.gas[4].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].anode_channel.channel.gas[4].ddx[7]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.p[1]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.p[2]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.p[3]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.p[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(p[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(p[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(p[4])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.M[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.M[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.M[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.M[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(M[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(M[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(M[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.der(M[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.E_seg[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.E_seg[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.E_seg[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.E_seg[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[1, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[1, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[2, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[2, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[2, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[2, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[2, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[2, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[2, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[3, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[3, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[3, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[3, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[3, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[3, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[4, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[4, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[4, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[4, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[4, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].anode_channel.channel.MXi[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.dp[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.dp[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.dp[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.sh[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.sh[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.sh[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.sh[4]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.state[1].p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].T
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].anode_channel.channel.state[6].p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].T
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[2].anode_channel.channel.state[6].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q_tot
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q_wall[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q_wall[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q_wall[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.Q_wall[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.alpha[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.alpha[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.alpha[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[2].anode_channel.channel.rMX[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.mflow_B_in
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.m_flow_fric[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.m_flow_fric[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.m_flow_fric[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XA[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XA[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XB[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XB[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.XB[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.n_channels_fric[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.n_channels_fric[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.n_channels_fric[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.n_channels_fric[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].anode_channel.channel.T_wall[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].anode_channel.channel.T_wall[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].anode_channel.channel.T_wall[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].anode_channel.channel.T_wall[4]
  0       7                       0                       0                
  6  1282   # stack.subStack[2].anode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[1, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[2, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[3, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[3, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[3, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[4, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[4, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[4, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[5, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[5, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[5, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[5, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[5, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[5, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.mX_flow[5, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.H_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.H_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.H_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.H_flow[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dE[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dE[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dE[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dE[4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[3, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[3, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[4, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].anode_channel.channel.dMX[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dZ[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dUTZ[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dUTZ[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dUTZ[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.dUTZ[4]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[1, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[1, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[1, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[1, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[1, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[1, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[1, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[2, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[2, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[2, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[2, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[2, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[2, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[2, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[3, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[3, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[3, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[3, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[3, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[3, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[3, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[4, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[4, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[4, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[4, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[4, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[4, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[2].anode_channel.channel.Z[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[1, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[1, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[2, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[2, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[2, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[2, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[2, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[2, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[2, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[3, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[3, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[3, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[3, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[3, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[3, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[3, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[4, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[4, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[4, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[4, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[4, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[4, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].anode_channel.channel.der(Z[4, 7])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[2].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[2].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[3].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[3].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[4].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[4].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].anode_channel.port[4].mX_flow[7]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.summary.dp
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.summary.M
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.summary.V
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.summary.T_in
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.summary.d_in
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].cathode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[2].cathode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.n_channels
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.L
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.D
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.A
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.C
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.V
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.A_heat
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.useHeatTransfer
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].cathode_channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[2].cathode_channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.T_start[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.X_start[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.X_start[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[2].cathode_channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[2].cathode_channel.X_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.m_flow_start
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # stack.subStack[2].cathode_channel.X_weight
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.y_sat
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # stack.subStack[2].cathode_channel.g
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].cathode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.n_channels[1]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.n_channels[2]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.n_channels[3]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.n_channels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.L[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.L[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.L[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Dhyd[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Dhyd[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Dhyd[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.V[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.V[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.V[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A_heat[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A_heat[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A_heat[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.A_heat[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].cathode_channel.channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[2].cathode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.T_start[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.X_start[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.X_start[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.X_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.m_flow_start
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # stack.subStack[2].cathode_channel.channel.NA
  0       1                       0                       0                
  6   258   # stack.subStack[2].cathode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].cathode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.der(T[1])
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].cathode_channel.channel.T[2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.der(T[2])
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].cathode_channel.channel.T[3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.der(T[3])
 -1       0                       0                   10000                
  2   272   # stack.subStack[2].cathode_channel.channel.T[4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.der(T[4])
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # stack.subStack[2].cathode_channel.channel.frictionDistribution
  0       4                       0                       0                
  6   258   # stack.subStack[2].cathode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.levels[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.levels[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.levels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.g
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[1].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].cathode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[2].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[2].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[2].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[2].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].cathode_channel.channel.friction[2].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[2].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[2].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[2].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[2].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[2].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[2].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[3].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[3].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[3].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[3].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].cathode_channel.channel.friction[3].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[3].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[3].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[3].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[3].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[3].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[3].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[4].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[4].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[4].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[4].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[2].cathode_channel.channel.friction[4].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[4].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.friction[4].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.friction[4].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.friction[4].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[4].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.friction[4].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[1].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.htcoeff[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[2].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[2].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[2].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.htcoeff[2].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[2].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.htcoeff[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[3].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[3].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[3].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.htcoeff[3].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[3].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.htcoeff[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[4].A
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[4].L
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[4].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.htcoeff[4].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.htcoeff[4].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.htcoeff[4].alpha
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[2].cathode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[2]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[3]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Cp_reac[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Q[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.mX_flow[4, 5]
  0       0                       0                       0                
  6   258   # stack.subStack[2].cathode_channel.channel.reaction.n_reac
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Tstart
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Xstart[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Xstart[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Xstart[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Xstart[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Xstart[5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.reaction.scale
  0  3.9947999999999997E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MMX[1]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MMX[2]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MMX[3]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MMX[4]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MMX[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MM[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MM[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MM[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.MM[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(MM[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(MM[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(MM[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.y_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.y_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.y_start[3]
  0  7.9270802239664317E-01       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.y_start[4]
  0  2.0729197760335691E-01       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.y_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_start[5]
  0  100000                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.pref
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.log10_y_out[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Zx_start[5]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # stack.subStack[2].cathode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # stack.subStack[2].cathode_channel.channel.reaction.Tscale
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[2, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[2, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[3, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[3, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[2].cathode_channel.channel.reaction.Zx[4, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Zx[4, 5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Ztot[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Ztot[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Ztot[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Ztot[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.der(Ztot[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.rZ[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.g_formation[4, 5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # stack.subStack[2].cathode_channel.channel.reaction.epsZ
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[1].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[2].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[2].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[2].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[3].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[3].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[3].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[4].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[4].T
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.state[4].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.reaction.deplZ[4, 5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].cathode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[1].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].cathode_channel.channel.gas[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.gas[2].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[2].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].cathode_channel.channel.gas[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.gas[3].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[3].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].d
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[2].cathode_channel.channel.gas[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[2].cathode_channel.channel.gas[4].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[2].cathode_channel.channel.gas[4].ddx[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(p[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(p[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(p[4])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.M[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.M[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.M[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.M[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(M[1])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(M[2])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(M[3])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.der(M[4])
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.E_seg[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.E_seg[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.E_seg[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.E_seg[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[2, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[2, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[2, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[2, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[2, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[3, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[3, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[3, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[3, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[4, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[4, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[4, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[4, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[2].cathode_channel.channel.MXi[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.dp[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.dp[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.dp[5]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.sh[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.sh[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.sh[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.sh[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[2].cathode_channel.channel.state[1].X[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[2].cathode_channel.channel.state[6].T
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q_tot
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q_wall[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q_wall[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q_wall[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.Q_wall[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.alpha[2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.alpha[3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.alpha[4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[2].cathode_channel.channel.rMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.mflow_B_in
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.m_flow_fric[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.m_flow_fric[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.m_flow_fric[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.XB[5]
  0       1                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.n_channels_fric[1]
  0       1                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.n_channels_fric[2]
  0       1                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.n_channels_fric[3]
  0       1                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.n_channels_fric[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].cathode_channel.channel.T_wall[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].cathode_channel.channel.T_wall[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].cathode_channel.channel.T_wall[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[2].cathode_channel.channel.T_wall[4]
  0       5                       0                       0                
  6  1282   # stack.subStack[2].cathode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[3, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[4, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[5, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[5, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[5, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[5, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.mX_flow[5, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.H_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.H_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.H_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.H_flow[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dE[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dE[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dE[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dE[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dMX[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dUTZ[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dUTZ[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dUTZ[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.dUTZ[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[1, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[1, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[1, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[1, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[1, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[2, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[2, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[2, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[2, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[2, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[3, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[3, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[3, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[3, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[3, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[4, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[4, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[4, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[4, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[2].cathode_channel.channel.Z[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[2, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[2, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[2, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[2, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[2, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[3, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[3, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[3, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[3, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[3, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[4, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[4, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[4, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[4, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[2].cathode_channel.channel.der(Z[4, 5])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[2].cathode_channel.port[4].mX_flow[4]
  0       1                       0                       0                
  6  1282   # stack.subStack[2].ref[1]
  0       5                       0                       0                
  6  1282   # stack.subStack[2].air[1]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].N
  0       7                       0                       0                
  6   258   # stack.subStack[3].nX_an
  0       5                       0                       0                
  6   258   # stack.subStack[3].nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.subStack[3].A_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].kc
  0       0                       0                       0                
  6   257   # stack.subStack[3].includeCellConduction
 -1      20                       0                       0                
  1   280   # stack.subStack[3].lambda_cell
 -1  3.6000000000000001E-05       0                       0                
  1   280   # stack.subStack[3].A_crosssection_cell
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[3].length_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].G_cell
  0       0                       0                       0                
  6   258   # stack.subStack[3].n_cell
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].M_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].Cp_cell
  0       0                       0                       0                
  6   257   # stack.subStack[3].addProxToAnode
  0       0                       0                       0                
  6   256   # stack.subStack[3].P_stack
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_stoich
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_stoich
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].cell.N
  0       7                       0                       0                
  6   258   # stack.subStack[3].cell.nX_an
  0       5                       0                       0                
  6   258   # stack.subStack[3].cell.nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.subStack[3].cell.A_cell
  0       0                       0                       0                
  6   258   # stack.subStack[3].cell.n_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.MCp_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.kc
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.Tstart
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cell.T_cell[1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cell.der(T_cell[1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cell.T_cell[2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cell.der(T_cell[2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cell.T_cell[3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cell.der(T_cell[3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cell.T_cell[4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cell.der(T_cell[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.Q_cell[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.Q_cell[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.Q_cell[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.Q_cell[4]
 -1       0                       0                       0                
  1   281   # stack.subStack[3].cell.T_from_h
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_an[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_an[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_an[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_an[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_cath[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_cath[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_cath[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cell.wall_cath[4].Q_flow
  0       0                       0                       0                
  6   260   # stack.subStack[3].cell.pin_n.v
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].cell.port_an[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[2].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].cell.port_an[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[3].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_an[4].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[2].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].cell.port_cath[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[2].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[3].m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].cell.port_cath[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[3].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[4].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[4].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cell.port_cath[4].mX_flow[4]
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.T_an[1]
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.T_an[2]
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.T_an[3]
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.T_an[4]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.state_an[1].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.state_an[2].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.state_an[3].p
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.state_an[4].p
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.anode[1].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.anode[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cell.anode[1].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.anode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[1].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[1].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[1].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[1].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[1].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[1].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.anode[2].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.anode[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cell.anode[2].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.anode[2].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[2].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[2].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[2].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[2].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[2].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[2].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[2].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[2].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.anode[3].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.anode[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cell.anode[3].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.anode[3].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[3].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[3].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[3].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[3].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[3].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[3].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[3].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[3].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].X[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Xi[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Xi[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Xi[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Xi[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Xi[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Xi[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.anode[4].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.anode[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].state.p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cell.anode[4].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].state.X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].state.X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].state.X[7]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.anode[4].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[4].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[4].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # stack.subStack[3].cell.anode[4].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.anode[4].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.anode[4].g_formation[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[4].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[4].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.anode[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.anode[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.anode[4].ddx[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.cathode[1].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.cathode[1].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.cathode[1].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.cathode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[1].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[1].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[1].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[1].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[1].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[1].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[2].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.cathode[2].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.cathode[2].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.cathode[2].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.cathode[2].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[2].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[2].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[2].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[2].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[3].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.cathode[3].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.cathode[3].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.cathode[3].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.cathode[3].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[3].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[3].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[3].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[3].ddx[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].der(X[1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].der(X[2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].der(X[3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].der(X[4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[4].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # stack.subStack[3].cell.cathode[4].MM
 -1       2                       1                       2                
  1  1306   # stack.subStack[3].cell.cathode[4].assertlevel
  0       0                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].state.p
  0       0                       0                   10000                
  6  1280   # stack.subStack[3].cell.cathode[4].state.T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].state.X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].state.X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].state.X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].state.X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].state.X[5]
  0       0                       0                       0                
  6  1281   # stack.subStack[3].cell.cathode[4].preferredMediumStates
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].T_degC
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].cell.cathode[4].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # stack.subStack[3].cell.cathode[4].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cell.cathode[4].g_formation[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].ddTp
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].ddpT
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.cathode[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # stack.subStack[3].cell.cathode[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # stack.subStack[3].cell.cathode[4].ddx[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.der_T_cell[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.der_T_cell[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.der_T_cell[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cell.der_T_cell[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.sum_Q_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.P_cell[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.P_cell[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.P_cell[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.P_cell[4]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.j_Ionic[1]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.j_Ionic[2]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.j_Ionic[3]
  0     400                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.j_Ionic[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.mXi_flow_an[4, 7]
  0       1                       0                       0                
  6   256   # stack.subStack[3].cell.S_ionic[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.S_ionic[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.S_ionic[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.S_ionic[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].cell.S_ionic[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.S_ionic[6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.S_ionic[7]
 -1  2.9000000000000000E-05       0                       0                
  1   280   # stack.subStack[3].cell.ASR0
 -1  6.2715461151825861E+04       0                       0                
  1   280   # stack.subStack[3].cell.Ea
 -1    1073                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cell.T0
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.V_nernst[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.V_nernst[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.V_nernst[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.V_nernst[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.r_Int[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.r_Int[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.r_Int[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.r_Int[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.ASR[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.ASR[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.ASR[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.ASR[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.g_reaction[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.g_reaction[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.g_reaction[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.g_reaction[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2O[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2O[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2O[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pH2O[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pO2[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pO2[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pO2[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.pO2[4]
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cell.internalRes[1].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[3].cell.internalRes[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[1].v
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[1].i
  0       0                       0                       0                
  6   769   # stack.subStack[3].cell.internalRes[1].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.internalRes[1].T
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[1].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[1].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cell.internalRes[2].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[3].cell.internalRes[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[2].v
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[2].i
  0       0                       0                       0                
  6   769   # stack.subStack[3].cell.internalRes[2].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.internalRes[2].T
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[2].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[2].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cell.internalRes[3].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[3].cell.internalRes[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[3].v
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[3].i
  0       0                       0                       0                
  6   769   # stack.subStack[3].cell.internalRes[3].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.internalRes[3].T
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[3].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[3].R_actual
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cell.internalRes[4].T_ref
 -1       0                       0                       0                
  1   280   # stack.subStack[3].cell.internalRes[4].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[4].v
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[4].i
  0       0                       0                       0                
  6   769   # stack.subStack[3].cell.internalRes[4].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cell.internalRes[4].T
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[4].LossPower
  0       0                       0                       0                
  6   256   # stack.subStack[3].cell.internalRes[4].R_actual
  0       0                       0                       0                
  6   260   # stack.subStack[3].cell.sourceV[1].n.v
  0       0                       0                       0                
  6   260   # stack.subStack[3].cell.sourceV[2].n.v
  0       0                       0                       0                
  6   260   # stack.subStack[3].cell.sourceV[3].n.v
  0       0                       0                       0                
  6   260   # stack.subStack[3].cell.sourceV[4].n.v
  0       1                       0                       0                
  6  1282   # stack.subStack[3].cell.ref[1]
  0       5                       0                       0                
  6  1282   # stack.subStack[3].cell.ref[2]
  0       5                       0                       0                
  6  1282   # stack.subStack[3].cell.air[1]
  0       0                       0                       0                
  6   260   # stack.subStack[3].pin_n.v
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].feed_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].drain_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].feed_cathode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.subStack[3].drain_cathode.h_outflow
  0       0                       0                       0                
  6   388   # stack.subStack[3].wall[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].wall[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].wall[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].wall[4].Q_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[3].pi
 -1       1                       1                 1.0000000000000000E+100
  1   280   # stack.subStack[3].n_channels_anode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[3].L_anode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # stack.subStack[3].D_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].Dhyd_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].C_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].A_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].V_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].A_heat_anode
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].n_channels_cathode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # stack.subStack[3].L_cathode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # stack.subStack[3].D_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].Dhyd_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].C_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].A_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].V_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].A_heat_cathode
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].n
  0       1                       1                       5                
  6   258   # stack.subStack[3].initOpt_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_in_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_out_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_anode[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].initFromEnthalpy_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_in_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_out_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_anode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_anode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_anode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_anode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_anode[5]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_in_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_out_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_anode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_anode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_anode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_anode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_anode[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[3].X_start_anode[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[3].X_start_anode[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[3].X_start_anode[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[3].X_start_anode[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[3].X_start_anode[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[3].X_start_anode[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[3].X_start_anode[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].m_flow_start_anode
  0       1                       1                       5                
  6   258   # stack.subStack[3].initOpt_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_in_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].p_start_cathode[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].initFromEnthalpy_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_in_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_out_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_cathode[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_cathode[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_cathode[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_cathode[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].h_start_cathode[5]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_in_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_out_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_cathode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_cathode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_cathode[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_cathode[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].T_start_cathode[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].X_start_cathode[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].X_start_cathode[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].X_start_cathode[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[3].X_start_cathode[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[3].X_start_cathode[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].m_flow_start_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[3].from_dp_anode
  0       0                       0                       0                
  6   257   # stack.subStack[3].positiveFlow_anode
  0       0                       0                       0                
  6   257   # stack.subStack[3].generateEventForReversal_anode
  0       0                       0                       0                
  6   257   # stack.subStack[3].from_dp_cathode
  0       1                       0                       0                
  6   257   # stack.subStack[3].positiveFlow_cathode
  0       0                       0                       0                
  6   257   # stack.subStack[3].generateEventForReversal_cathode
  0       0                       0                       0                
  6   257   # stack.subStack[3].useHeatTransfer_anode
  0       0                       0                       0                
  6   257   # stack.subStack[3].useHeatTransfer_cathode
 -1       1                       0                       0                
  1   280   # stack.subStack[3].CF_AnodeSidePressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[3].CF_AnodeSideHeatTransfer
 -1       1                       0                       0                
  1   280   # stack.subStack[3].CF_CathodePressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[3].CF_CathodeSideHeatTransfer
 -1     400                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].d0_prox
 -1     100                       0                       0                
  1   280   # stack.subStack[3].dp0_prox
 -1  1.0000000000000001E-01       0                       0                
  1   280   # stack.subStack[3].m_flow_nom_prox
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_stoich_num
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_stoich_den
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_stoich_num
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_stoich_den
  0       4                       0                       0                
  6   258   # stack.subStack[3].summary.N
  0       0                       0                       0                
  6   258   # stack.subStack[3].summary.n_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].summary.j_external
  0       0                       0                       0                
  6   256   # stack.subStack[3].summary.V_cell
  0       0                       0                       0                
  6   256   # stack.subStack[3].summary.Q_stack
  0       0                       0                       0                
  6   256   # stack.subStack[3].summary.dp_anode
  0       0                       0                       0                
  6   256   # stack.subStack[3].summary.dp_cathode
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.summary.dp
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.summary.M
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.summary.V
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.summary.d_in
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].anode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.n_channels
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.L
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.D
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.A
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.C
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.V
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.A_heat
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.useHeatTransfer
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].anode_channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[3].anode_channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.T_start[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.X_start[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.m_flow_start
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # stack.subStack[3].anode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[3].anode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # stack.subStack[3].anode_channel.X_weight
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.y_sat
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # stack.subStack[3].anode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # stack.subStack[3].anode_channel.g
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].anode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.n_channels[1]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.n_channels[2]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.n_channels[3]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.n_channels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.L[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.L[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.L[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Dhyd[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Dhyd[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Dhyd[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.V[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.V[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.V[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A_heat[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A_heat[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A_heat[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.A_heat[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].anode_channel.channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[3].anode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.T_start[5]
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.X_start[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.m_flow_start
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.NA
  0       1                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].anode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.der(T[1])
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].anode_channel.channel.T[2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.der(T[2])
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].anode_channel.channel.T[3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.der(T[3])
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].anode_channel.channel.T[4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.der(T[4])
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # stack.subStack[3].anode_channel.channel.frictionDistribution
  0       4                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.levels[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.levels[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.levels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.g
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[1].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].anode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[2].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[2].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[2].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[2].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].anode_channel.channel.friction[2].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[2].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[2].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[2].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[2].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[2].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[2].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[3].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[3].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[3].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[3].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].anode_channel.channel.friction[3].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[3].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[3].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[3].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[3].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[3].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[3].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[4].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[4].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[4].from_dp
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[4].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].anode_channel.channel.friction[4].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[4].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.friction[4].dp_from_isothermal
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.friction[4].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.friction[4].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[4].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.friction[4].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[1].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[1].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.htcoeff[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[2].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[2].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[2].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[2].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.htcoeff[2].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[2].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.htcoeff[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[3].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[3].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[3].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[3].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.htcoeff[3].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[3].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.htcoeff[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[4].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[4].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[4].Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[4].m_flow
  0       1                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.htcoeff[4].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.htcoeff[4].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.htcoeff[4].alpha
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].anode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Cp_reac[2]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Cp_reac[3]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Cp_reac[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Q[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.mX_flow[4, 5]
  0       3                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 1]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 2]
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 4]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[1, 7]
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 2]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 3]
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 4]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_reac[2, 7]
  0       2                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.reaction.n_reac
  0       2                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.reaction.comp[1]
  0       5                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.reaction.comp[2]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Tstart
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Xstart[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Xstart[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Xstart[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Xstart[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Xstart[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Xstart[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Xstart[7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.reaction.scale
  0  2.0158799999999998E-03  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MMX[1]
  0  1.6042460000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MMX[2]
  0  2.8010100000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MMX[3]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MMX[4]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MMX[5]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MMX[6]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MMX[7]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MM[1]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MM[2]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MM[3]
  0  1.7558759618000002E-02       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.MM[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(MM[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(MM[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(MM[4])
  0  2.7660000000000001E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.y_start[1]
  0  1.6960000000000000E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.y_start[2]
  0  1.7999999999999999E-02       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.y_start[3]
  0  7.3300000000000004E-02       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.y_start[4]
  0  2.4530000000000002E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.y_start[5]
  0  2.0549999999999999E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.y_start[6]
  0  1.1700000000000000E-02       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.y_start[7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_start[1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_start[2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_start[3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_start[4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_start[5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_start[6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_start[7]
  0  100000                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.pref
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[1, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[2, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[3, 7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_y_out[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.log10_eq_reac[4, 2]
  0  3.7697709702875987E-01       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 1]
  0      -1                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 2]
  0  1.7459978083161807E+00       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 4]
  0 -1.1229749053449409E+00       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[1, 7]
  0  1.1189834407236522E-01       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 2]
  0 -1.5547968169242996E+00       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 3]
  0  2.4428984728519345E+00       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.Sx_reac[2, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_start[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_start[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_start[7]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # stack.subStack[3].anode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # stack.subStack[3].anode_channel.channel.reaction.Tscale
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.kEq_reac[4, 2]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[1, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[1, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[1, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[2, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[2, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[2, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[2, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[2, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[2, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[3, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[3, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[3, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[3, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[3, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[3, 7])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[4, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[4, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[4, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[4, 6]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].anode_channel.channel.reaction.Zx[4, 7]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(Zx[4, 7])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Ztot[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Ztot[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Ztot[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Ztot[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(Ztot[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(Ztot[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.der(Ztot[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_flow[4, 5]
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[1, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[1, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[2, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[2, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[3, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[3, 2])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[4, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # stack.subStack[3].anode_channel.channel.reaction.krate[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].anode_channel.channel.reaction.der(krate[4, 2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.rZ[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_formation[4, 7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].anode_channel.channel.reaction.epsZ
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.e[4, 2]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[2].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[3].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].X[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].X[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.state[4].X[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[3, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.deplZ[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[1, 1]
  0      -1                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[1, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[1, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[2, 2]
  0      -1                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[2, 4]
  0      -1                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[2, 6]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.reactant[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.reaction.rate[4, 2]
  0       3                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_ref[1]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_ref[2]
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_ref[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_ref[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_ref[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_ref[6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_ref[7]
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_wgs[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_wgs[2]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_wgs[3]
  0       1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_wgs[4]
  0      -1                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_wgs[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_wgs[6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.S_wgs[7]
  0       2                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.reaction.index[1]
  0       5                       0                       0                
  6   258   # stack.subStack[3].anode_channel.channel.reaction.index[2]
  0  7.2314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.reaction.T_sat_for_WGS
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_rere[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_rere[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_rere[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_rere[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_wgs[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_wgs[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_wgs[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.reaction.g_wgs[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].anode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[1].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].anode_channel.channel.gas[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.gas[2].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[2].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].anode_channel.channel.gas[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.gas[3].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[3].ddx[7]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(X[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(X[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(X[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(X[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(X[5])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(X[6])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(X[7])
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Xi[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Xi[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Xi[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Xi[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Xi[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Xi[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].anode_channel.channel.gas[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].state.X[7]
  0       0                       0                       0                
  6   257   # stack.subStack[3].anode_channel.channel.gas[4].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Z[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Z[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].g_formation[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].anode_channel.channel.gas[4].ddx[7]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.p[1]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.p[2]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.p[3]
  0       0                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.p[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(p[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(p[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(p[4])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.M[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.M[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.M[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.M[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(M[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(M[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(M[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.der(M[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.E_seg[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.E_seg[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.E_seg[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.E_seg[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[1, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[1, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[2, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[2, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[2, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[2, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[2, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[2, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[2, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[3, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[3, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[3, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[3, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[3, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[3, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[4, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[4, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[4, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[4, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[4, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].anode_channel.channel.MXi[4, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.dp[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.dp[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.dp[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.sh[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.sh[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.sh[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.sh[4]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.state[1].p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].T
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].anode_channel.channel.state[6].p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].T
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].X[6]
  0       0                       0                       1                
  6   256   # stack.subStack[3].anode_channel.channel.state[6].X[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q_tot
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q_wall[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q_wall[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q_wall[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.Q_wall[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.alpha[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.alpha[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.alpha[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[1, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[1, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[2, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[2, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[3, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[3, 7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[4, 6]
  0       0                       0                       0                
  6   256   # stack.subStack[3].anode_channel.channel.rMX[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.mflow_B_in
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.m_flow_fric[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.m_flow_fric[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.m_flow_fric[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XA[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XA[7]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XB[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XB[6]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.XB[7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.n_channels_fric[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.n_channels_fric[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.n_channels_fric[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.n_channels_fric[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].anode_channel.channel.T_wall[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].anode_channel.channel.T_wall[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].anode_channel.channel.T_wall[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].anode_channel.channel.T_wall[4]
  0       7                       0                       0                
  6  1282   # stack.subStack[3].anode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[1, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[2, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[3, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[3, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[3, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[4, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[4, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[4, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[5, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[5, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[5, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[5, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[5, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[5, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.mX_flow[5, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.H_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.H_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.H_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.H_flow[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dE[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dE[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dE[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dE[4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[1, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[2, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[3, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[3, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[4, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].anode_channel.channel.dMX[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dZ[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dUTZ[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dUTZ[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dUTZ[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.dUTZ[4]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[1, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[1, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[1, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[1, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[1, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[1, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[1, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[2, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[2, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[2, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[2, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[2, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[2, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[2, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[3, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[3, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[3, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[3, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[3, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[3, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[3, 7]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[4, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[4, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[4, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[4, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[4, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[4, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # stack.subStack[3].anode_channel.channel.Z[4, 7]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[1, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[1, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[2, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[2, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[2, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[2, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[2, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[2, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[2, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[3, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[3, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[3, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[3, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[3, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[3, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[3, 7])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[4, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[4, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[4, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[4, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[4, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[4, 6])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].anode_channel.channel.der(Z[4, 7])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[2].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[2].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[3].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[3].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[4].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[4].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].anode_channel.port[4].mX_flow[7]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.summary.dp
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.summary.M
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.summary.V
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.summary.T_in
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.summary.d_in
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].cathode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.subStack[3].cathode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.n_channels
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.L
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.D
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.Dhyd
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.A
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.C
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.V
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.A_heat
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.useHeatTransfer
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].cathode_channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[3].cathode_channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.T_start[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.X_start[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.X_start[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[3].cathode_channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[3].cathode_channel.X_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.m_flow_start
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # stack.subStack[3].cathode_channel.X_weight
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.y_sat
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # stack.subStack[3].cathode_channel.g
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].cathode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.n_channels[1]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.n_channels[2]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.n_channels[3]
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.n_channels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.L[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.L[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.L[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Dhyd[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Dhyd[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Dhyd[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.V[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.V[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.V[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A_heat[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A_heat[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A_heat[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.A_heat[4]
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].cathode_channel.channel.ni
  0       1                       1                       5                
  6   258   # stack.subStack[3].cathode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.p_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.p_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.p_start[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.h_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.h_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.h_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.h_start[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.T_start[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.T_start[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.T_start[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.T_start[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.X_start[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.X_start[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.X_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.m_flow_start
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # stack.subStack[3].cathode_channel.channel.NA
  0       1                       0                       0                
  6   258   # stack.subStack[3].cathode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].cathode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.der(T[1])
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].cathode_channel.channel.T[2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.der(T[2])
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].cathode_channel.channel.T[3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.der(T[3])
 -1       0                       0                   10000                
  2   272   # stack.subStack[3].cathode_channel.channel.T[4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.der(T[4])
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # stack.subStack[3].cathode_channel.channel.frictionDistribution
  0       4                       0                       0                
  6   258   # stack.subStack[3].cathode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.levels[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.levels[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.levels[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.g
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[1].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].cathode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[2].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[2].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[2].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[2].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].cathode_channel.channel.friction[2].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[2].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[2].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[2].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[2].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[2].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[2].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[3].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[3].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[3].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[3].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].cathode_channel.channel.friction[3].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[3].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[3].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[3].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[3].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[3].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[3].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].n_channels
  0  1.0000000000000001E-15  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[4].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[4].dpFraction0
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[4].from_dp
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[4].positiveFlow
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].dp_smooth
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].mflow_smooth
 -1       0                       0                       0                
  1   281   # stack.subStack[3].cathode_channel.channel.friction[4].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[4].reference_d
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.friction[4].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.friction[4].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.friction[4].d0
 -1     500                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[4].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.friction[4].m_flow0
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[1].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.htcoeff[1].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[2].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[2].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[2].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.htcoeff[2].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[2].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.htcoeff[2].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[3].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[3].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[3].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.htcoeff[3].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[3].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.htcoeff[3].alpha
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[4].A
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[4].L
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[4].Dhyd
  0       1                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.htcoeff[4].ht_from_isothermal
  0       1                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.htcoeff[4].CF_length
 -1     100                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.htcoeff[4].alpha
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.subStack[3].cathode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[2]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[3]
  0       0                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Cp_reac[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Q[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.mX_flow[4, 5]
  0       0                       0                       0                
  6   258   # stack.subStack[3].cathode_channel.channel.reaction.n_reac
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Tstart
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Xstart[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Xstart[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Xstart[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Xstart[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Xstart[5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.reaction.scale
  0  3.9947999999999997E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MMX[1]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MMX[2]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MMX[3]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MMX[4]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MMX[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MM[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MM[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MM[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.MM[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(MM[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(MM[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(MM[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.y_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.y_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.y_start[3]
  0  7.9270802239664317E-01       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.y_start[4]
  0  2.0729197760335691E-01       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.y_start[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_start[5]
  0  100000                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.pref
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.log10_y_out[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Zx_start[5]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # stack.subStack[3].cathode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # stack.subStack[3].cathode_channel.channel.reaction.Tscale
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[2, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[2, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[3, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[3, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 1]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 2]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 3]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 4]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.subStack[3].cathode_channel.channel.reaction.Zx[4, 5]
  0       0                       0                       0                
  3   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Zx[4, 5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Ztot[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Ztot[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Ztot[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Ztot[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.der(Ztot[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.rZ[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[2, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[3, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.g_formation[4, 5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # stack.subStack[3].cathode_channel.channel.reaction.epsZ
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[1].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[2].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[2].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[2].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[2].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[2].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[2].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[2].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[3].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[3].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[3].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[3].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[3].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[3].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[3].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[4].p
  0     300                       0                   10000                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[4].T
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[4].X[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[4].X[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[4].X[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[4].X[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.state[4].X[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[2, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[3, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.reaction.deplZ[4, 5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].cathode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[1].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].cathode_channel.channel.gas[2].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.gas[2].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[2].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].cathode_channel.channel.gas[3].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.gas[3].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].T_degC
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[3].ddx[5]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].d
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].Rg
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].MM
 -1       2                       1                       2                
  1   282   # stack.subStack[3].cathode_channel.channel.gas[4].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].state.p
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].state.T
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].state.X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].state.X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].state.X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].state.X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].state.X[5]
  0       0                       0                       0                
  6   257   # stack.subStack[3].cathode_channel.channel.gas[4].preferredMediumStates
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].p_bar
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].Z[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].Z[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].Z[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].Z[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].g_formation[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].ddTp
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].ddpT
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.subStack[3].cathode_channel.channel.gas[4].ddx[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(p[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(p[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(p[4])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.M[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.M[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.M[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.M[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(M[1])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(M[2])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(M[3])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.der(M[4])
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.E_seg[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.E_seg[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.E_seg[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.E_seg[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[2, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[2, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[2, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[2, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[2, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[3, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[3, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[3, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[3, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[4, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[4, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[4, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[4, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.subStack[3].cathode_channel.channel.MXi[4, 5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.dp[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.dp[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.dp[5]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.sh[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.sh[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.sh[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.sh[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # stack.subStack[3].cathode_channel.channel.state[1].X[5]
  0     300                       0                   10000                
  6   256   # stack.subStack[3].cathode_channel.channel.state[6].T
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q_tot
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q_wall[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q_wall[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q_wall[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.Q_wall[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.alpha[2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.alpha[3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.alpha[4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[1, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[2, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[2, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[2, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[2, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[3, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[3, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[3, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[3, 4]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[4, 1]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[4, 2]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[4, 3]
  0       0                       0                       0                
  6   256   # stack.subStack[3].cathode_channel.channel.rMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.mflow_B_in
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.m_flow_fric[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.m_flow_fric[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.m_flow_fric[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.XB[5]
  0       1                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.n_channels_fric[1]
  0       1                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.n_channels_fric[2]
  0       1                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.n_channels_fric[3]
  0       1                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.n_channels_fric[4]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].cathode_channel.channel.T_wall[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].cathode_channel.channel.T_wall[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].cathode_channel.channel.T_wall[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # stack.subStack[3].cathode_channel.channel.T_wall[4]
  0       5                       0                       0                
  6  1282   # stack.subStack[3].cathode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[3, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[4, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[4, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[5, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[5, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[5, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[5, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.mX_flow[5, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.H_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.H_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.H_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.H_flow[5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dE[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dE[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dE[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dE[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[1, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[2, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[3, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[3, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[3, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[3, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[3, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[4, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[4, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[4, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[4, 4]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dMX[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dUTZ[1]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dUTZ[2]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dUTZ[3]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.dUTZ[4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[1, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[1, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[1, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[1, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[1, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[2, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[2, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[2, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[2, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[2, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[3, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[3, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[3, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[3, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[3, 5]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[4, 1]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[4, 2]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[4, 3]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[4, 4]
  0       0                       0                       1                
  6  1280   # stack.subStack[3].cathode_channel.channel.Z[4, 5]
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[2, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[2, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[2, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[2, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[2, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[3, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[3, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[3, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[3, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[3, 5])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[4, 1])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[4, 2])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[4, 3])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[4, 4])
  0       0                       0                       0                
  6  1280   # stack.subStack[3].cathode_channel.channel.der(Z[4, 5])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[2].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[2].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[2].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[2].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[3].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[3].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[3].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[3].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[4].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[4].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[4].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.subStack[3].cathode_channel.port[4].mX_flow[4]
  0       1                       0                       0                
  6  1282   # stack.subStack[3].ref[1]
  0       5                       0                       0                
  6  1282   # stack.subStack[3].air[1]
  0       3                       0                       0                
  6   258   # stack.summary.N
  0     100                       0                       0                
  6   256   # stack.summary.VCst
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.topHeatTransfer.n
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.topHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # stack.topHeatTransfer.kc
  0       0                       0                       0                
  6   257   # stack.topHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # stack.topHeatTransfer.variableKc
  0       1                       0                       0                
  6   256   # stack.topHeatTransfer.Q_s[1]
  0       1                       0                       0                
  6   256   # stack.topHeatTransfer.Q_s[2]
  0       1                       0                       0                
  6   256   # stack.topHeatTransfer.Q_s[3]
  0       1                       0                       0                
  6   256   # stack.topHeatTransfer.Q_s[4]
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topHeatTransfer.qa[1].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topHeatTransfer.qa[2].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topHeatTransfer.qa[3].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topHeatTransfer.qa[4].T
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.bottomHeatTransfer.n
  0  3.6100000000000000E-02       0                       0                
  6   256   # stack.bottomHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # stack.bottomHeatTransfer.kc
  0       0                       0                       0                
  6   257   # stack.bottomHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # stack.bottomHeatTransfer.variableKc
  0       1                       0                       0                
  6   256   # stack.bottomHeatTransfer.Q_s[1]
  0       1                       0                       0                
  6   256   # stack.bottomHeatTransfer.Q_s[2]
  0       1                       0                       0                
  6   256   # stack.bottomHeatTransfer.Q_s[3]
  0       1                       0                       0                
  6   256   # stack.bottomHeatTransfer.Q_s[4]
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomHeatTransfer.qb[1].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomHeatTransfer.qb[2].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomHeatTransfer.qb[3].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomHeatTransfer.qb[4].T
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.bottomWall.n
  0       0                       0                       0                
  6   256   # stack.bottomWall.V_wall[1]
  0       0                       0                       0                
  6   256   # stack.bottomWall.V_wall[2]
  0       0                       0                       0                
  6   256   # stack.bottomWall.V_wall[3]
  0       0                       0                       0                
  6   256   # stack.bottomWall.V_wall[4]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.bottomWall.A_wall[1]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.bottomWall.A_wall[2]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.bottomWall.A_wall[3]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.bottomWall.A_wall[4]
  0       0                       0                       0                
  6   256   # stack.bottomWall.dp
  0       1                       0                       0                
  6   257   # stack.bottomWall.includeThermalResistance
  0       0                       0                       0                
  6   257   # stack.bottomWall.massLessWall
  0       0                       0                       0                
  6   257   # stack.bottomWall.CounterTemps
  0       0                       0                       0                
  6   257   # stack.bottomWall.steadyStateInit
 -1     300                       0                 1.0000000000000000E+100
  1   280   # stack.bottomWall.Tstart1
 -1     300                       0                 1.0000000000000000E+100
  1   280   # stack.bottomWall.TstartN
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.T0[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.T0[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.T0[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.T0[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.m[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.m[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.m[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.bottomWall.m[4]
  0       0                       0                       0                
  6   256   # stack.bottomWall.Rw[1]
  0       0                       0                       0                
  6   256   # stack.bottomWall.Rw[2]
  0       0                       0                       0                
  6   256   # stack.bottomWall.Rw[3]
  0       0                       0                       0                
  6   256   # stack.bottomWall.Rw[4]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.bottomWall.T[1]
  0       0                       0                       0                
  3   256   # stack.bottomWall.der(T[1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.bottomWall.T[2]
  0       0                       0                       0                
  3   256   # stack.bottomWall.der(T[2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.bottomWall.T[3]
  0       0                       0                       0                
  3   256   # stack.bottomWall.der(T[3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.bottomWall.T[4]
  0       0                       0                       0                
  3   256   # stack.bottomWall.der(T[4])
  0       0                       0                       0                
  6   256   # stack.bottomWall.T_degC[1]
  0       0                       0                       0                
  6   256   # stack.bottomWall.T_degC[2]
  0       0                       0                       0                
  6   256   # stack.bottomWall.T_degC[3]
  0       0                       0                       0                
  6   256   # stack.bottomWall.T_degC[4]
  0       0                       0                       0                
  6   256   # stack.bottomWall.qb_Q_flow[1]
  0       0                       0                       0                
  6   256   # stack.bottomWall.qb_Q_flow[2]
  0       0                       0                       0                
  6   256   # stack.bottomWall.qb_Q_flow[3]
  0       0                       0                       0                
  6   256   # stack.bottomWall.qb_Q_flow[4]
  0     200                       0                       0                
  6   256   # stack.bottomWall.metal_specificHeatCapacity[1]
  0     200                       0                       0                
  6   256   # stack.bottomWall.metal_specificHeatCapacity[2]
  0     200                       0                       0                
  6   256   # stack.bottomWall.metal_specificHeatCapacity[3]
  0     200                       0                       0                
  6   256   # stack.bottomWall.metal_specificHeatCapacity[4]
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomWall.qb[1].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomWall.qb[2].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomWall.qb[3].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.bottomWall.qb[4].T
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.topWall.n
  0       0                       0                       0                
  6   256   # stack.topWall.V_wall[1]
  0       0                       0                       0                
  6   256   # stack.topWall.V_wall[2]
  0       0                       0                       0                
  6   256   # stack.topWall.V_wall[3]
  0       0                       0                       0                
  6   256   # stack.topWall.V_wall[4]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.topWall.A_wall[1]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.topWall.A_wall[2]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.topWall.A_wall[3]
  0  9.0250000000000000E-03       0                       0                
  6   256   # stack.topWall.A_wall[4]
  0       0                       0                       0                
  6   256   # stack.topWall.dp
  0       1                       0                       0                
  6   257   # stack.topWall.includeThermalResistance
  0       0                       0                       0                
  6   257   # stack.topWall.massLessWall
  0       0                       0                       0                
  6   257   # stack.topWall.CounterTemps
  0       0                       0                       0                
  6   257   # stack.topWall.steadyStateInit
 -1     300                       0                 1.0000000000000000E+100
  1   280   # stack.topWall.Tstart1
 -1     300                       0                 1.0000000000000000E+100
  1   280   # stack.topWall.TstartN
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.topWall.T0[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.topWall.T0[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.topWall.T0[3]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.topWall.T0[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.topWall.m[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.topWall.m[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.topWall.m[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.topWall.m[4]
  0       0                       0                       0                
  6   256   # stack.topWall.Rw[1]
  0       0                       0                       0                
  6   256   # stack.topWall.Rw[2]
  0       0                       0                       0                
  6   256   # stack.topWall.Rw[3]
  0       0                       0                       0                
  6   256   # stack.topWall.Rw[4]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.topWall.T[1]
  0       0                       0                       0                
  3   256   # stack.topWall.der(T[1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.topWall.T[2]
  0       0                       0                       0                
  3   256   # stack.topWall.der(T[2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.topWall.T[3]
  0       0                       0                       0                
  3   256   # stack.topWall.der(T[3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # stack.topWall.T[4]
  0       0                       0                       0                
  3   256   # stack.topWall.der(T[4])
  0       0                       0                       0                
  6   256   # stack.topWall.T_degC[1]
  0       0                       0                       0                
  6   256   # stack.topWall.T_degC[2]
  0       0                       0                       0                
  6   256   # stack.topWall.T_degC[3]
  0       0                       0                       0                
  6   256   # stack.topWall.T_degC[4]
  0       0                       0                       0                
  6   256   # stack.topWall.qa_Q_flow[1]
  0       0                       0                       0                
  6   256   # stack.topWall.qa_Q_flow[2]
  0       0                       0                       0                
  6   256   # stack.topWall.qa_Q_flow[3]
  0       0                       0                       0                
  6   256   # stack.topWall.qa_Q_flow[4]
  0     200                       0                       0                
  6   256   # stack.topWall.metal_specificHeatCapacity[1]
  0     200                       0                       0                
  6   256   # stack.topWall.metal_specificHeatCapacity[2]
  0     200                       0                       0                
  6   256   # stack.topWall.metal_specificHeatCapacity[3]
  0     200                       0                       0                
  6   256   # stack.topWall.metal_specificHeatCapacity[4]
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topWall.qa[1].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topWall.qa[2].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topWall.qa[3].T
  0       0                       0                 1.0000000000000000E+100
  6   260   # stack.topWall.qa[4].T
  0       0                       0                       0                
  6   257   # stack.counterFlow
 -1       0                       0                       0                
  1   281   # stack.feed_Anode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.feed_Anode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.T_start
  0       0                       0                       0                
  6   256   # stack.feed_Anode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.m_flow_start
  0       0                       0                       0                
  6   256   # stack.feed_Anode.height
  0       1                       0                       0                
  6   257   # stack.feed_Anode.positiveFlow
  0       3                       2                 1.0000000000000000E+100
  6   258   # stack.feed_Anode.N_drain
  0       1                       0                       0                
  6   388   # stack.feed_Anode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # stack.feed_Anode.heat_port[2].Q_flow
  0       1                       0                       0                
  6   388   # stack.feed_Anode.heat_port[3].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.feed_Anode.drain[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.feed_Anode.drain[2].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.feed_Anode.drain[3].m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.feed_Anode.pi
  0       1                       0                       0                
  6   258   # stack.feed_Anode.n_volumes
  0       0                       0                       0                
  6   256   # stack.feed_Anode.V_tot
 -1       3                       0                       0                
  1   280   # stack.feed_Anode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # stack.feed_Anode.pstart_in
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # stack.feed_Anode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # stack.feed_Anode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # stack.feed_Anode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # stack.feed_Anode.volume[1].h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_start[7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].mXs_flow[6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].mXs_flow[7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].m
  0       4                       0                       0                
  6   258   # stack.feed_Anode.volume[1].N
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[2].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[2].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[2].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[2].X_outflow[4]
  0  2.5167769706635779E-01       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[2].X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[2].X_outflow[6]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[2].X_outflow[7]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[3].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[3].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[3].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[3].X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[3].X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[3].X_outflow[6]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[3].X_outflow[7]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[4].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[4].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[4].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[4].X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[4].X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[4].X_outflow[6]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.volume[1].port[4].X_outflow[7]
  0       1                       0                       0                
  6   257   # stack.feed_Anode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # stack.feed_Anode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.feed_Anode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # stack.feed_Anode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].h_in
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_in[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_in[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].X_in[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].state_in.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.volume[1].state_in.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_in.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_in.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_in.X[7]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # stack.feed_Anode.volume[1].state_default.T
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_default.X[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_default.X[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_default.X[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_default.X[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_default.X[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_default.X[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].state_default.X[7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].m_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].m_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[1, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[1, 7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[2, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[2, 7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[3, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[3, 7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[4, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[4, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[4, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[4, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[4, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[4, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow_in[4, 7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].dMX[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].dMX[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].dMX[7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].H_flow[4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[1, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[1, 7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[2, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[2, 7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[3, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[3, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[3, 7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[4, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[4, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[4, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[4, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[4, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[4, 6]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].MX_flow[4, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].M
  0       0                       0                       0                
  6   257   # stack.feed_Anode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # stack.feed_Anode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # stack.feed_Anode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # stack.feed_Anode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # stack.feed_Anode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.feed_Anode.volume[1].fluid.h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X_start[7]
  0       7                       1                 1.0000000000000000E+100
  6   258   # stack.feed_Anode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # stack.feed_Anode.volume[1].fluid.nC
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # stack.feed_Anode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # stack.feed_Anode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(T)
 -1  3.1755797113845990E-02       0                       1                
  2   272   # stack.feed_Anode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(X[1])
 -1  1.5495406709770243E-01       0                       1                
  2   272   # stack.feed_Anode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(X[2])
 -1  2.8713975871231152E-02       0                       1                
  2   272   # stack.feed_Anode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(X[3])
 -1  1.8372005882995510E-01       0                       1                
  2   272   # stack.feed_Anode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(X[4])
 -1  2.5167769706635779E-01       0                       1                
  2   272   # stack.feed_Anode.volume[1].fluid.X[5]
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(X[5])
 -1  3.2785651294517304E-01       0                       1                
  2   272   # stack.feed_Anode.volume[1].fluid.X[6]
  0       0                       0                       0                
  3   256   # stack.feed_Anode.volume[1].fluid.der(X[6])
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # stack.feed_Anode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.state.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.state.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.volume[1].fluid.state.X[7]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.MX[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.MX[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.dX[7]
  0  4.1244875687044860E+03       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R_g[1]
  0  5.1827911679380850E+02       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R_g[2]
  0  2.9683835473632718E+02       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R_g[3]
  0  1.8892448221406741E+02       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R_g[4]
  0  4.6152332908508782E+02       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R_g[5]
  0  2.9680338695053081E+02       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R_g[6]
  0  2.5983699388727081E+02       0                       0                
  6   256   # stack.feed_Anode.volume[1].fluid.R_g[7]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du_dX[6]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.volume[1].fluid.du_dX[7]
  0       0                       0                       0                
  6   257   # stack.feed_Anode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # stack.feed_Anode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # stack.feed_Anode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # stack.feed_Anode.volume[1].positiveFlow[3]
 -1       0                       0                       0                
  1   281   # stack.feed_Anode.volume[1].positiveFlow[4]
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.feed_Anode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # stack.feed_Anode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # stack.feed_Anode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # stack.feed_Anode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # stack.feed_Anode.basicHeatTransfer.variableKc
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[1].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[1].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[1].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[1].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[1].portB.X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[1].portB.X_outflow[6]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[1].portB.X_outflow[7]
  0     300                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[1].T_start
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[1].mflow_start
  0       1                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[1].positiveFlow
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[1].dp_asState
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[1].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.feed_Anode.frictionLoss[1].d
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].stateB_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].state_out.X[7]
 -1       1                       0                       0                
  1   281   # stack.feed_Anode.frictionLoss[1].from_dp
 -1      10                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[1].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[1].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[1].dynamicModel
 -1       1                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[1].T_mflow
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[1].summary.V_flow
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[1].friction.from_dp
  0       1                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[1].friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[1].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.feed_Anode.frictionLoss[1].friction.reference_d
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.stateB_inflow.X[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.frictionLoss[1].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.frictionLoss[1].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.feed_Anode.frictionLoss[1].friction.d0
 -1     500                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[1].friction.dp0
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[1].friction.m_flow0
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[2].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[2].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[2].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[2].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[2].portB.X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[2].portB.X_outflow[6]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[2].portB.X_outflow[7]
  0     300                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[2].T_start
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[2].mflow_start
  0       1                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[2].positiveFlow
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[2].dp_asState
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[2].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.feed_Anode.frictionLoss[2].d
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].stateB_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].state_out.X[7]
 -1       1                       0                       0                
  1   281   # stack.feed_Anode.frictionLoss[2].from_dp
 -1      10                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[2].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[2].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[2].dynamicModel
 -1       1                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[2].T_mflow
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[2].summary.V_flow
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[2].friction.from_dp
  0       1                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[2].friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[2].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.feed_Anode.frictionLoss[2].friction.reference_d
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.stateB_inflow.X[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.frictionLoss[2].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.frictionLoss[2].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.feed_Anode.frictionLoss[2].friction.d0
 -1     500                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[2].friction.dp0
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[2].friction.m_flow0
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[3].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[3].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[3].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[3].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[3].portB.X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[3].portB.X_outflow[6]
  0       0                       0                       1                
  6   260   # stack.feed_Anode.frictionLoss[3].portB.X_outflow[7]
  0     300                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[3].T_start
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[3].mflow_start
  0       1                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[3].positiveFlow
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[3].dp_asState
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[3].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.feed_Anode.frictionLoss[3].d
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].stateB_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.p
  0       0                       0                   10000                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.T
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].state_out.X[7]
 -1       1                       0                       0                
  1   281   # stack.feed_Anode.frictionLoss[3].from_dp
 -1      10                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[3].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[3].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[3].dynamicModel
 -1       1                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[3].T_mflow
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[3].summary.V_flow
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[3].friction.from_dp
  0       1                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[3].friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Anode.frictionLoss[3].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.feed_Anode.frictionLoss[3].friction.reference_d
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.stateB_inflow.X[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.frictionLoss[3].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Anode.frictionLoss[3].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.feed_Anode.frictionLoss[3].friction.d0
 -1     500                       0                       0                
  1   280   # stack.feed_Anode.frictionLoss[3].friction.dp0
  0       0                       0                       0                
  6   256   # stack.feed_Anode.frictionLoss[3].friction.m_flow0
  0       3                       0                       0                
  6   258   # stack.feed_Anode.summary.nbr
  0       0                       0                       0                
  6   256   # stack.feed_Anode.summary.V_tot
  0       0                       0                       0                
  6   256   # stack.feed_Anode.summary.dp[1]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.summary.dp[2]
  0       0                       0                       0                
  6   256   # stack.feed_Anode.summary.dp[3]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # stack.feed_Anode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # stack.feed_Anode.depth
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.feed_Anode.thermalCollector.m
  0       0                       0                       0                
  6   388   # stack.feed_Anode.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   256   # stack.feed_Anode.pstart[1]
  0       0                       0                       0                
  6  1280   # stack.feed_Anode.Dhyd
 -1       0                       0                       0                
  1   281   # stack.feed_Cathode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.feed_Cathode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.T_start
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.m_flow_start
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.height
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.positiveFlow
  0       3                       2                 1.0000000000000000E+100
  6   258   # stack.feed_Cathode.N_drain
  0       1                       0                       0                
  6   388   # stack.feed_Cathode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # stack.feed_Cathode.heat_port[2].Q_flow
  0       1                       0                       0                
  6   388   # stack.feed_Cathode.heat_port[3].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.feed_Cathode.drain[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.feed_Cathode.drain[2].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.feed_Cathode.drain[3].m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.feed_Cathode.pi
  0       1                       0                       0                
  6   258   # stack.feed_Cathode.n_volumes
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.V_tot
 -1       3                       0                       0                
  1   280   # stack.feed_Cathode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.pstart_in
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # stack.feed_Cathode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # stack.feed_Cathode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # stack.feed_Cathode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # stack.feed_Cathode.volume[1].h_start
 -1       0                       0                       1                
  1   280   # stack.feed_Cathode.volume[1].X_start[1]
 -1       0                       0                       1                
  1   280   # stack.feed_Cathode.volume[1].X_start[2]
 -1       0                       0                       1                
  1   280   # stack.feed_Cathode.volume[1].X_start[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # stack.feed_Cathode.volume[1].X_start[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # stack.feed_Cathode.volume[1].X_start[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].m
  0       4                       0                       0                
  6   258   # stack.feed_Cathode.volume[1].N
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[2].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[2].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[2].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[2].X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[2].X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[3].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[3].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[3].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[3].X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[3].X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[4].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[4].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[4].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[4].X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.volume[1].port[4].X_outflow[5]
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.feed_Cathode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].h_in
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.volume[1].T_in
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].X_in[5]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # stack.feed_Cathode.volume[1].state_default.T
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].state_default.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].state_default.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].state_default.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.feed_Cathode.volume[1].state_default.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.feed_Cathode.volume[1].state_default.X[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].m_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].m_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[4, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[4, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[4, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[4, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow_in[4, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].dMX[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].H_flow[4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[3, 5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[4, 1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[4, 2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[4, 3]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[4, 4]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].MX_flow[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].M
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # stack.feed_Cathode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # stack.feed_Cathode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.feed_Cathode.volume[1].fluid.h_start
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.X_start[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.X_start[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.X_start[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.X_start[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.X_start[5]
  0       5                       1                 1.0000000000000000E+100
  6   258   # stack.feed_Cathode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # stack.feed_Cathode.volume[1].fluid.nC
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # stack.feed_Cathode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # stack.feed_Cathode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # stack.feed_Cathode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # stack.feed_Cathode.volume[1].fluid.der(T)
 -1       0                       0                       1                
  2   272   # stack.feed_Cathode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # stack.feed_Cathode.volume[1].fluid.der(X[1])
 -1       0                       0                       1                
  2   272   # stack.feed_Cathode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # stack.feed_Cathode.volume[1].fluid.der(X[2])
 -1       0                       0                       1                
  2   272   # stack.feed_Cathode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # stack.feed_Cathode.volume[1].fluid.der(X[3])
 -1       0                       0                       1                
  2   272   # stack.feed_Cathode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # stack.feed_Cathode.volume[1].fluid.der(X[4])
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.feed_Cathode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # stack.feed_Cathode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.volume[1].fluid.state.X[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.dX[5]
  0  2.0813237208370879E+02       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.R_g[1]
  0  1.8892448221406741E+02       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.R_g[2]
  0  4.6152332908508782E+02       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.R_g[3]
  0  2.9680338695053081E+02       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.R_g[4]
  0  2.5983699388727081E+02       0                       0                
  6   256   # stack.feed_Cathode.volume[1].fluid.R_g[5]
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # stack.feed_Cathode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # stack.feed_Cathode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # stack.feed_Cathode.volume[1].positiveFlow[3]
 -1       0                       0                       0                
  1   281   # stack.feed_Cathode.volume[1].positiveFlow[4]
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.feed_Cathode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.basicHeatTransfer.variableKc
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[1].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[1].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[1].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[1].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[1].portB.X_outflow[5]
  0     300                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[1].T_start
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].mflow_start
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[1].positiveFlow
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[1].dp_asState
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.feed_Cathode.frictionLoss[1].d
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[1].T_in
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[1].TB_in
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[1].T_out
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].state_in.X[5]
 -1       1                       0                       0                
  1   281   # stack.feed_Cathode.frictionLoss[1].from_dp
 -1      10                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[1].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[1].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[1].dynamicModel
 -1       1                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[1].T_mflow
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].summary.V_flow
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[1].friction.from_dp
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[1].friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[1].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.feed_Cathode.frictionLoss[1].friction.reference_d
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[1])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[2])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[3])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[4])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.stateB_inflow.der(X[5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.feed_Cathode.frictionLoss[1].friction.d0
 -1     500                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[1].friction.dp0
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[1].friction.m_flow0
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[2].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[2].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[2].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[2].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[2].portB.X_outflow[5]
  0     300                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[2].T_start
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].mflow_start
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[2].positiveFlow
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[2].dp_asState
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.feed_Cathode.frictionLoss[2].d
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[2].T_in
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[2].TB_in
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[2].T_out
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].state_in.X[5]
 -1       1                       0                       0                
  1   281   # stack.feed_Cathode.frictionLoss[2].from_dp
 -1      10                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[2].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[2].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[2].dynamicModel
 -1       1                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[2].T_mflow
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].summary.V_flow
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[2].friction.from_dp
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[2].friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[2].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.feed_Cathode.frictionLoss[2].friction.reference_d
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[1])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[2])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[3])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[4])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.stateB_inflow.der(X[5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.feed_Cathode.frictionLoss[2].friction.d0
 -1     500                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[2].friction.dp0
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[2].friction.m_flow0
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[3].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[3].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[3].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[3].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.feed_Cathode.frictionLoss[3].portB.X_outflow[5]
  0     300                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[3].T_start
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].mflow_start
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[3].positiveFlow
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[3].dp_asState
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.feed_Cathode.frictionLoss[3].d
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[3].T_in
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[3].TB_in
  0       0                       0                   10000                
  6   256   # stack.feed_Cathode.frictionLoss[3].T_out
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].state_in.X[5]
 -1       1                       0                       0                
  1   281   # stack.feed_Cathode.frictionLoss[3].from_dp
 -1      10                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[3].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[3].mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[3].dynamicModel
 -1       1                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[3].T_mflow
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].summary.V_flow
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[3].friction.from_dp
  0       1                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[3].friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.feed_Cathode.frictionLoss[3].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.feed_Cathode.frictionLoss[3].friction.reference_d
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.X[5]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[1])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[2])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[3])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[4])
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.stateB_inflow.der(X[5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.feed_Cathode.frictionLoss[3].friction.d0
 -1     500                       0                       0                
  1   280   # stack.feed_Cathode.frictionLoss[3].friction.dp0
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.frictionLoss[3].friction.m_flow0
  0       3                       0                       0                
  6   258   # stack.feed_Cathode.summary.nbr
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.summary.V_tot
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.summary.dp[1]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.summary.dp[2]
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.summary.dp[3]
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # stack.feed_Cathode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # stack.feed_Cathode.depth
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.feed_Cathode.thermalCollector.m
  0       0                       0                       0                
  6   388   # stack.feed_Cathode.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   256   # stack.feed_Cathode.pstart[1]
  0       0                       0                       0                
  6  1280   # stack.feed_Cathode.Dhyd
 -1       0                       0                       0                
  1   281   # stack.drain_Anode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.drain_Anode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.T_start
  0       0                       0                       0                
  6   256   # stack.drain_Anode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.m_flow_start
  0       0                       0                       0                
  6   256   # stack.drain_Anode.height
  0       1                       0                       0                
  6   257   # stack.drain_Anode.positiveFlow
  0       3                       2                 1.0000000000000000E+100
  6   258   # stack.drain_Anode.N_feed
  0       1                       0                       0                
  6   388   # stack.drain_Anode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # stack.drain_Anode.heat_port[2].Q_flow
  0       1                       0                       0                
  6   388   # stack.drain_Anode.heat_port[3].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_Anode.feed[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_Anode.feed[2].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_Anode.feed[3].m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.drain_Anode.pi
  0       1                       0                       0                
  6   258   # stack.drain_Anode.n_volumes
  0       0                       0                       0                
  6   256   # stack.drain_Anode.V_tot
 -1       3                       0                       0                
  1   280   # stack.drain_Anode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # stack.drain_Anode.pstart_out
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.drain_Anode.volume[1].V
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # stack.drain_Anode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # stack.drain_Anode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # stack.drain_Anode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # stack.drain_Anode.volume[1].h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_start[7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].mXs_flow[6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].mXs_flow[7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].m
  0       4                       0                       0                
  6   258   # stack.drain_Anode.volume[1].N
  0       0                       0                       1                
  6   260   # stack.drain_Anode.volume[1].port[4].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.drain_Anode.volume[1].port[4].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.drain_Anode.volume[1].port[4].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.drain_Anode.volume[1].port[4].X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.drain_Anode.volume[1].port[4].X_outflow[5]
  0       0                       0                       1                
  6   260   # stack.drain_Anode.volume[1].port[4].X_outflow[6]
  0       0                       0                       1                
  6   260   # stack.drain_Anode.volume[1].port[4].X_outflow[7]
  0       1                       0                       0                
  6   257   # stack.drain_Anode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # stack.drain_Anode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.drain_Anode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # stack.drain_Anode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].h_in
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_in[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_in[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].X_in[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].state_in.p
  0       0                       0                   10000                
  6   256   # stack.drain_Anode.volume[1].state_in.T
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_in.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_in.X[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_in.X[7]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # stack.drain_Anode.volume[1].state_default.T
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_default.X[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_default.X[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_default.X[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_default.X[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_default.X[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_default.X[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].state_default.X[7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].m_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].m_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[1, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[1, 7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[2, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[2, 7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[3, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[3, 7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[4, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[4, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[4, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[4, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[4, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[4, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow_in[4, 7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].dMX[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].dMX[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].dMX[7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].H_flow[4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[1, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[1, 7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[2, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[2, 7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[3, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[3, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[3, 7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[4, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[4, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[4, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[4, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[4, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[4, 6]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].MX_flow[4, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].M
  0       0                       0                       0                
  6   257   # stack.drain_Anode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # stack.drain_Anode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # stack.drain_Anode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # stack.drain_Anode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # stack.drain_Anode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.drain_Anode.volume[1].fluid.h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X_start[7]
  0       7                       1                 1.0000000000000000E+100
  6   258   # stack.drain_Anode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # stack.drain_Anode.volume[1].fluid.nC
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.V_tot
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # stack.drain_Anode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # stack.drain_Anode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(T)
 -1  3.1755797113845990E-02       0                       1                
  2   272   # stack.drain_Anode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(X[1])
 -1  1.5495406709770243E-01       0                       1                
  2   272   # stack.drain_Anode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(X[2])
 -1  2.8713975871231152E-02       0                       1                
  2   272   # stack.drain_Anode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(X[3])
 -1  1.8372005882995510E-01       0                       1                
  2   272   # stack.drain_Anode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(X[4])
 -1  2.5167769706635779E-01       0                       1                
  2   272   # stack.drain_Anode.volume[1].fluid.X[5]
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(X[5])
 -1  3.2785651294517304E-01       0                       1                
  2   272   # stack.drain_Anode.volume[1].fluid.X[6]
  0       0                       0                       0                
  3   256   # stack.drain_Anode.volume[1].fluid.der(X[6])
  0  2.1321891075734414E-02       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # stack.drain_Anode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.state.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.state.X[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.volume[1].fluid.state.X[7]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.MX[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.MX[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.dX[7]
  0  4.1244875687044860E+03       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R_g[1]
  0  5.1827911679380850E+02       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R_g[2]
  0  2.9683835473632718E+02       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R_g[3]
  0  1.8892448221406741E+02       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R_g[4]
  0  4.6152332908508782E+02       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R_g[5]
  0  2.9680338695053081E+02       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R_g[6]
  0  2.5983699388727081E+02       0                       0                
  6   256   # stack.drain_Anode.volume[1].fluid.R_g[7]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du_dX[6]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.volume[1].fluid.du_dX[7]
  0       0                       0                       0                
  6   257   # stack.drain_Anode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # stack.drain_Anode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # stack.drain_Anode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # stack.drain_Anode.volume[1].positiveFlow[3]
 -1       0                       0                       0                
  1   281   # stack.drain_Anode.volume[1].positiveFlow[4]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.drain_Anode.volume[1].summary.V
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.drain_Anode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # stack.drain_Anode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # stack.drain_Anode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # stack.drain_Anode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # stack.drain_Anode.basicHeatTransfer.variableKc
  0  3.1755797113845990E-02       0                       1                
  6   260   # stack.drain_Anode.frictionLoss.portB.X_outflow[1]
  0  1.5495406709770243E-01       0                       1                
  6   260   # stack.drain_Anode.frictionLoss.portB.X_outflow[2]
  0  2.8713975871231152E-02       0                       1                
  6   260   # stack.drain_Anode.frictionLoss.portB.X_outflow[3]
  0  1.8372005882995510E-01       0                       1                
  6   260   # stack.drain_Anode.frictionLoss.portB.X_outflow[4]
  0  2.5167769706635779E-01       0                       1                
  6   260   # stack.drain_Anode.frictionLoss.portB.X_outflow[5]
  0  3.2785651294517304E-01       0                       1                
  6   260   # stack.drain_Anode.frictionLoss.portB.X_outflow[6]
  0  2.1321891075734414E-02       0                       1                
  6   260   # stack.drain_Anode.frictionLoss.portB.X_outflow[7]
  0     300                       0                   10000                
  6   256   # stack.drain_Anode.frictionLoss.T_start
  0       0                       0                       0                
  6   256   # stack.drain_Anode.frictionLoss.mflow_start
  0       1                       0                       0                
  6   257   # stack.drain_Anode.frictionLoss.positiveFlow
  0       0                       0                       0                
  6   257   # stack.drain_Anode.frictionLoss.dp_asState
  0       0                       0                       0                
  6   256   # stack.drain_Anode.frictionLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.drain_Anode.frictionLoss.d
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.frictionLoss.state_in.p
  0       0                       0                   10000                
  6   256   # stack.drain_Anode.frictionLoss.state_in.T
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_in.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_in.X[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.p
  0       0                       0                   10000                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.T
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.X[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.stateB_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Anode.frictionLoss.state_out.p
  0       0                       0                   10000                
  6   256   # stack.drain_Anode.frictionLoss.state_out.T
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_out.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_out.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_out.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_out.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_out.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_out.X[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.state_out.X[7]
 -1       1                       0                       0                
  1   281   # stack.drain_Anode.frictionLoss.from_dp
 -1      10                       0                       0                
  1   280   # stack.drain_Anode.frictionLoss.dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.drain_Anode.frictionLoss.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.drain_Anode.frictionLoss.dynamicModel
 -1       1                       0                       0                
  1   280   # stack.drain_Anode.frictionLoss.T_mflow
  0       0                       0                       0                
  6   256   # stack.drain_Anode.frictionLoss.summary.V_flow
  0       0                       0                       0                
  6   257   # stack.drain_Anode.frictionLoss.friction.from_dp
  0       1                       0                       0                
  6   257   # stack.drain_Anode.frictionLoss.friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.drain_Anode.frictionLoss.friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.drain_Anode.frictionLoss.friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.drain_Anode.frictionLoss.friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.drain_Anode.frictionLoss.friction.reference_d
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # stack.drain_Anode.frictionLoss.friction.stateB_inflow.X[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.frictionLoss.friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Anode.frictionLoss.friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.drain_Anode.frictionLoss.friction.d0
 -1     100                       0                       0                
  1   280   # stack.drain_Anode.frictionLoss.friction.dp0
  0       0                       0                       0                
  6   256   # stack.drain_Anode.frictionLoss.friction.m_flow0
  0       3                       0                       0                
  6   258   # stack.drain_Anode.summary.nbr
  0       0                       0                       0                
  6   256   # stack.drain_Anode.summary.V_tot
  0       0                       0                       0                
  6   256   # stack.drain_Anode.summary.dp[1]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.summary.dp[2]
  0       0                       0                       0                
  6   256   # stack.drain_Anode.summary.dp[3]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # stack.drain_Anode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # stack.drain_Anode.depth
  0       0                       0                       0                
  6   256   # stack.drain_Anode.pstart[1]
  0       0                       0                       0                
  6  1280   # stack.drain_Anode.Dhyd
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.drain_Anode.thermalCollector.m
  0       0                       0                       0                
  6   388   # stack.drain_Anode.thermalCollector.port_b.Q_flow
 -1       0                       0                       0                
  1   281   # stack.drain_Cathode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # stack.drain_Cathode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.T_start
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.m_flow_start
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.height
  0       1                       0                       0                
  6   257   # stack.drain_Cathode.positiveFlow
  0       3                       2                 1.0000000000000000E+100
  6   258   # stack.drain_Cathode.N_feed
  0       1                       0                       0                
  6   388   # stack.drain_Cathode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # stack.drain_Cathode.heat_port[2].Q_flow
  0       1                       0                       0                
  6   388   # stack.drain_Cathode.heat_port[3].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_Cathode.feed[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_Cathode.feed[2].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_Cathode.feed[3].m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # stack.drain_Cathode.pi
  0       1                       0                       0                
  6   258   # stack.drain_Cathode.n_volumes
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.V_tot
 -1       3                       0                       0                
  1   280   # stack.drain_Cathode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.pstart_out
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.drain_Cathode.volume[1].V
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # stack.drain_Cathode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # stack.drain_Cathode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # stack.drain_Cathode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # stack.drain_Cathode.volume[1].h_start
 -1       0                       0                       1                
  1   280   # stack.drain_Cathode.volume[1].X_start[1]
 -1       0                       0                       1                
  1   280   # stack.drain_Cathode.volume[1].X_start[2]
 -1       0                       0                       1                
  1   280   # stack.drain_Cathode.volume[1].X_start[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # stack.drain_Cathode.volume[1].X_start[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # stack.drain_Cathode.volume[1].X_start[5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].m
  0       4                       0                       0                
  6   258   # stack.drain_Cathode.volume[1].N
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.volume[1].port[4].X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.volume[1].port[4].X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.volume[1].port[4].X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.volume[1].port[4].X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.volume[1].port[4].X_outflow[5]
  0       1                       0                       0                
  6   257   # stack.drain_Cathode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.drain_Cathode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].h_in
  0       0                       0                   10000                
  6   256   # stack.drain_Cathode.volume[1].T_in
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].X_in[5]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # stack.drain_Cathode.volume[1].state_default.T
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].state_default.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].state_default.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].state_default.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # stack.drain_Cathode.volume[1].state_default.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # stack.drain_Cathode.volume[1].state_default.X[5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].m_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].m_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow_in[4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[4, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[4, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[4, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[4, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow_in[4, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].dMX[5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].H_flow[4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[3, 5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[4, 1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[4, 2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[4, 3]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[4, 4]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].MX_flow[4, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].M
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # stack.drain_Cathode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # stack.drain_Cathode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # stack.drain_Cathode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # stack.drain_Cathode.volume[1].fluid.h_start
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.X_start[1]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.X_start[2]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.X_start[3]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.X_start[4]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.X_start[5]
  0       5                       1                 1.0000000000000000E+100
  6   258   # stack.drain_Cathode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # stack.drain_Cathode.volume[1].fluid.nC
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.V_tot
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # stack.drain_Cathode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # stack.drain_Cathode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # stack.drain_Cathode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # stack.drain_Cathode.volume[1].fluid.der(T)
 -1       0                       0                       1                
  2   272   # stack.drain_Cathode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # stack.drain_Cathode.volume[1].fluid.der(X[1])
 -1       0                       0                       1                
  2   272   # stack.drain_Cathode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # stack.drain_Cathode.volume[1].fluid.der(X[2])
 -1       0                       0                       1                
  2   272   # stack.drain_Cathode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # stack.drain_Cathode.volume[1].fluid.der(X[3])
 -1       0                       0                       1                
  2   272   # stack.drain_Cathode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # stack.drain_Cathode.volume[1].fluid.der(X[4])
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # stack.drain_Cathode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # stack.drain_Cathode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.volume[1].fluid.state.X[5]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.dX[5]
  0  2.0813237208370879E+02       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.R_g[1]
  0  1.8892448221406741E+02       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.R_g[2]
  0  4.6152332908508782E+02       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.R_g[3]
  0  2.9680338695053081E+02       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.R_g[4]
  0  2.5983699388727081E+02       0                       0                
  6   256   # stack.drain_Cathode.volume[1].fluid.R_g[5]
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # stack.drain_Cathode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # stack.drain_Cathode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # stack.drain_Cathode.volume[1].positiveFlow[3]
 -1       0                       0                       0                
  1   281   # stack.drain_Cathode.volume[1].positiveFlow[4]
  0  1.0000000000000000E-03       0                       0                
  6   256   # stack.drain_Cathode.volume[1].summary.V
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.drain_Cathode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.basicHeatTransfer.variableKc
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.frictionLoss.portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.frictionLoss.portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.frictionLoss.portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.frictionLoss.portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # stack.drain_Cathode.frictionLoss.portB.X_outflow[5]
  0     300                       0                   10000                
  6   256   # stack.drain_Cathode.frictionLoss.T_start
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.frictionLoss.mflow_start
  0       1                       0                       0                
  6   257   # stack.drain_Cathode.frictionLoss.positiveFlow
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.frictionLoss.dp_asState
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.frictionLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # stack.drain_Cathode.frictionLoss.d
  0       0                       0                   10000                
  6   256   # stack.drain_Cathode.frictionLoss.T_in
  0       0                       0                   10000                
  6   256   # stack.drain_Cathode.frictionLoss.TB_in
  0       0                       0                   10000                
  6   256   # stack.drain_Cathode.frictionLoss.T_out
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.state_in.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.state_in.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.state_in.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.state_in.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.state_in.X[5]
 -1       1                       0                       0                
  1   281   # stack.drain_Cathode.frictionLoss.from_dp
 -1      10                       0                       0                
  1   280   # stack.drain_Cathode.frictionLoss.dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # stack.drain_Cathode.frictionLoss.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.frictionLoss.dynamicModel
 -1       1                       0                       0                
  1   280   # stack.drain_Cathode.frictionLoss.T_mflow
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.frictionLoss.summary.V_flow
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.frictionLoss.friction.from_dp
  0       1                       0                       0                
  6   257   # stack.drain_Cathode.frictionLoss.friction.positiveFlow
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.frictionLoss.friction.dp_smooth
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.frictionLoss.friction.mflow_smooth
  0       0                       0                       0                
  6   257   # stack.drain_Cathode.frictionLoss.friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # stack.drain_Cathode.frictionLoss.friction.reference_d
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # stack.drain_Cathode.frictionLoss.friction.stateB_inflow.X[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.frictionLoss.friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # stack.drain_Cathode.frictionLoss.friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # stack.drain_Cathode.frictionLoss.friction.d0
 -1     100                       0                       0                
  1   280   # stack.drain_Cathode.frictionLoss.friction.dp0
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.frictionLoss.friction.m_flow0
  0       3                       0                       0                
  6   258   # stack.drain_Cathode.summary.nbr
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.summary.V_tot
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.summary.dp[1]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.summary.dp[2]
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.summary.dp[3]
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # stack.drain_Cathode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # stack.drain_Cathode.depth
  0       0                       0                       0                
  6   256   # stack.drain_Cathode.pstart[1]
  0       0                       0                       0                
  6  1280   # stack.drain_Cathode.Dhyd
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.drain_Cathode.thermalCollector.m
  0       0                       0                       0                
  6   388   # stack.drain_Cathode.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   260   # stack.pin_n.v
  0       0                       0                       0                
  6   388   # stack.pin_n.i
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.feed_cath.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.feed_an.h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_cath.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.drain_cath.h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # stack.drain_an.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # stack.drain_an.h_outflow
  0       4                       1                 1.0000000000000000E+100
  6   258   # stack.stackHeatLosses.N
  0       3                       1                 1.0000000000000000E+100
  6   258   # stack.stackHeatLosses.nbr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.A_topWall
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.A_bottomWall
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.A_sideWall
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.h_conv_top
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.h_conv_side
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.e_top
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.e_side
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.k_insul
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.dl_topInsul
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.dl_bottomInsul
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.dl_sideInsul
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.environment.Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.leftWall[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.leftWall[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.leftWall[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.rightWall[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.rightWall[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.rightWall[3].Q_flow
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.summary.environment_Q
  0      24                       1                 1.0000000000000000E+100
  6   258   # stack.stackHeatLosses.thermalCollector.m
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[5].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[6].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[7].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[8].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[13].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[14].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[15].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[16].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[17].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[18].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[19].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[20].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[21].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[22].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[23].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_a[24].Q_flow
  0       0                       0                       0                
  6   388   # stack.stackHeatLosses.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topConvection[1].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topConvection[2].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topConvection[3].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topConvection[4].dT
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.topConvectionCoeff[1].k
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.topConvectionCoeff[2].k
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.topConvectionCoeff[3].k
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.topConvectionCoeff[4].k
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[1].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[1].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[2].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[2].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[3].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[3].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[4].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.topRadiation[4].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightRadiation[1].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightRadiation[1].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightRadiation[2].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightRadiation[2].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightRadiation[3].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightRadiation[3].Gr
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.rightConvectionCoeff[1].k
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.rightConvectionCoeff[2].k
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.rightConvectionCoeff[3].k
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightConvection[1].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightConvection[2].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.rightConvection[3].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftRadiation[1].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftRadiation[1].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftRadiation[2].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftRadiation[2].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftRadiation[3].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftRadiation[3].Gr
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftConvection[1].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftConvection[2].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.leftConvection[3].dT
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.leftConvectionCoeff[1].k
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.leftConvectionCoeff[2].k
  0       1                       0                       0                
  6   256   # stack.stackHeatLosses.leftConvectionCoeff[3].k
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[1].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[1].G
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[2].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[2].G
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[3].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[3].G
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[4].dT
  0       0                       0                       0                
  6   256   # stack.stackHeatLosses.bottomConduction[4].G
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   292   # stack.heat_port.T
  0       0                       0                       0                
  6   388   # stack.heat_port.Q_flow
  0       0                       0                       0                
  6   256   # stack.fuel_in
  0       0                       0                       0                
  6   256   # stack.fuel_used
  0       0                       0                       0                
  6   256   # stack.utilization
  0       1                       0                       0                
  6  1282   # stack.ref[1]
  0       2                       0                       0                
  6  1282   # stack.ref[2]
  0       3                       0                       0                
  6   258   # summary.N
  0       7                       0                       0                
  6   258   # summary.fuel_nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # summary.dmFuelStkIn
  0       0                       0                       0                
  6   256   # summary.tAirStkOut[1]
  0       0                       0                       0                
  6   256   # summary.tAirStkOut[2]
  0       0                       0                       0                
  6   256   # summary.tAirStkOut[3]
  0       0                       0                       0                
  6   256   # summary.tFuelStkOut[1]
  0       0                       0                       0                
  6   256   # summary.tFuelStkOut[2]
  0       0                       0                       0                
  6   256   # summary.tFuelStkOut[3]
  0       0                       0                       0                
  6   256   # summary.tStkOut[1]
  0       0                       0                       0                
  6   256   # summary.tStkOut[2]
  0       0                       0                       0                
  6   256   # summary.tStkOut[3]
  0       0                       0                       0                
  6   256   # summary.tStkTopWall
  0       0                       0                       0                
  6   256   # summary.tStkBottomWall
  0       0                       0                       0                
  6   256   # summary.QStkHeat
  0       0                       0                       0                
  6   256   # summary.PStkElec
  0     100                       0                       0                
  6   256   # summary.VCst
  0       0                       0                       0                
  6   256   # summary.PStk
  0       0                       0                       0                
  6   256   # summary.VCstZone[1]
  0       0                       0                       0                
  6   256   # summary.VCstZone[2]
  0       0                       0                       0                
  6   256   # summary.VCstZone[3]
  0       0                       0                       1                
  6   256   # summary.facFuelStkUtil[1]
  0       0                       0                       1                
  6   256   # summary.facFuelStkUtil[2]
  0       0                       0                       1                
  6   256   # summary.facFuelStkUtil[3]
  0  6.4000000000000001E-01       0                       1                
  6   256   # summary.ATRutilCH4
  0  5.0000000000000000E-01       0                       1                
  6   256   # summary.ATRutilO2
  0       0                       0                       0                
  6   256   # summary.ATRthermEff
  0       0                       0                       0                
  6   256   # summary.ATRinletSteamCarb
  0       0                       0                       0                
  6   256   # summary.ATRinletOxCarb
  0       0                       0                       0                
  6   256   # summary.tSteamMix
  0       0                       0                       0                
  6   256   # summary.tGenSteam
  0       0                       0                       0                
  6   256   # summary.tSteamGenLiq
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # WaterSource.fluidPort.h_outflow
  0       1                       1                       2                
  6   770   # WaterSource.massFlowBoundary.flowDefinition
  0       1                       1                       2                
  6   770   # WaterSource.massFlowBoundary.energyDefinition
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # WaterSource.massFlowBoundary.m_flow
  0       0                       0                       0                
  6   256   # WaterSource.massFlowBoundary.V_flow
  0     300                       0                   10000                
  6   256   # WaterSource.massFlowBoundary.T
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # WaterSource.massFlowBoundary.h
  0       0                       0                       1                
  6   256   # WaterSource.massFlowBoundary.X[1]
  0       1                       1                       2                
  6   770   # WaterSource.massFlowBoundary.VFlowUnit
  0       1                       1                       2                
  6   770   # WaterSource.massFlowBoundary.temperatureUnit
  0       0                       0                       0                
  6   769   # WaterSource.massFlowBoundary.use_flow_in
  0       0                       0                       0                
  6   769   # WaterSource.massFlowBoundary.use_Th_in
  0       0                       0                       0                
  6   769   # WaterSource.massFlowBoundary.use_X_in
  0       0                       0                       0                
  6   769   # WaterSource.massFlowBoundary.use_C_in
  0       1                       0                       0                
  6   256   # WaterSource.massFlowBoundary.Vflow_scale
 -1  100000                       0                 1.0000000000000000E+100
  1   280   # WaterSource.massFlowBoundary.p_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # WaterSource.massFlowBoundary.d
  0       1                       1                       2                
  6   770   # WaterSource.flowDefinition
  0       1                       1                       2                
  6   770   # WaterSource.energyDefinition
 -1  3.2479999999999998E-04       0                       0                
  1   280   # WaterSource.m_flow
 -1       0                       0                       0                
  1   280   # WaterSource.V_flow
 -1  3.2314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # WaterSource.T
 -1  2.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # WaterSource.h
 -1       1                       0                       1                
  1   280   # WaterSource.X[1]
  0       1                       1                       2                
  6   770   # WaterSource.VFlowUnit
  0       1                       1                       2                
  6   770   # WaterSource.temperatureUnit
  0       0                       0                       0                
  6   769   # WaterSource.use_flow_in
  0       0                       0                       0                
  6   769   # WaterSource.use_Th_in
  0       0                       0                       0                
  6   769   # WaterSource.use_X_in
  0       0                       0                  1.0000000000000000E+08
  6   260   # NGSource.fluidPort.p
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # NGSource.fluidPort.h_outflow
  0       0                       0                       1                
  6   260   # NGSource.fluidPort.X_outflow[1]
  0  9.4698225749100662E-01       0                       1                
  6   260   # NGSource.fluidPort.X_outflow[2]
  0       0                       0                       1                
  6   260   # NGSource.fluidPort.X_outflow[3]
  0  5.3017742508993361E-02       0                       1                
  6   260   # NGSource.fluidPort.X_outflow[4]
  0       0                       0                       1                
  6   260   # NGSource.fluidPort.X_outflow[5]
  0       0                       0                       1                
  6   260   # NGSource.fluidPort.X_outflow[6]
  0       0                       0                       1                
  6   260   # NGSource.fluidPort.X_outflow[7]
  0       0                       0                       1                
  6   260   # NGSource.massFlowBoundary.fluidPort.X_outflow[1]
  0  9.4698225749100662E-01       0                       1                
  6   260   # NGSource.massFlowBoundary.fluidPort.X_outflow[2]
  0       0                       0                       1                
  6   260   # NGSource.massFlowBoundary.fluidPort.X_outflow[3]
  0  5.3017742508993361E-02       0                       1                
  6   260   # NGSource.massFlowBoundary.fluidPort.X_outflow[4]
  0       0                       0                       1                
  6   260   # NGSource.massFlowBoundary.fluidPort.X_outflow[5]
  0       0                       0                       1                
  6   260   # NGSource.massFlowBoundary.fluidPort.X_outflow[6]
  0       0                       0                       1                
  6   260   # NGSource.massFlowBoundary.fluidPort.X_outflow[7]
  0       1                       1                       2                
  6   770   # NGSource.massFlowBoundary.flowDefinition
  0       1                       1                       2                
  6   770   # NGSource.massFlowBoundary.energyDefinition
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # NGSource.massFlowBoundary.m_flow
  0       0                       0                       0                
  6   256   # NGSource.massFlowBoundary.V_flow
  0     300                       0                   10000                
  6   256   # NGSource.massFlowBoundary.T
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # NGSource.massFlowBoundary.h
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.X[1]
  0  9.4698225749100662E-01       0                       1                
  6   256   # NGSource.massFlowBoundary.X[2]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.X[3]
  0  5.3017742508993361E-02       0                       1                
  6   256   # NGSource.massFlowBoundary.X[4]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.X[5]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.X[6]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.X[7]
  0       1                       1                       2                
  6   770   # NGSource.massFlowBoundary.VFlowUnit
  0       1                       1                       2                
  6   770   # NGSource.massFlowBoundary.temperatureUnit
  0       0                       0                       0                
  6   769   # NGSource.massFlowBoundary.use_flow_in
  0       0                       0                       0                
  6   769   # NGSource.massFlowBoundary.use_Th_in
  0       0                       0                       0                
  6   769   # NGSource.massFlowBoundary.use_X_in
  0       0                       0                       0                
  6   769   # NGSource.massFlowBoundary.use_C_in
  0       1                       0                       0                
  6   256   # NGSource.massFlowBoundary.Vflow_scale
 -1  100000                       0                 1.0000000000000000E+100
  1   280   # NGSource.massFlowBoundary.p_start
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_set[1]
  0  9.4698225749100662E-01       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_set[2]
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_set[3]
  0  5.3017742508993361E-02       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_set[4]
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_set[5]
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_set[6]
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_set[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # NGSource.massFlowBoundary.state.p
  0     300                       0                   10000                
  6   256   # NGSource.massFlowBoundary.state.T
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.state.X[1]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.state.X[2]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.state.X[3]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.state.X[4]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.state.X[5]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.state.X[6]
  0       0                       0                       1                
  6   256   # NGSource.massFlowBoundary.state.X[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # NGSource.massFlowBoundary.d
  0       1                       1                       2                
  6   770   # NGSource.flowDefinition
  0       1                       1                       2                
  6   770   # NGSource.energyDefinition
 -1  2.5520000000000002E-04       0                       0                
  1   280   # NGSource.m_flow
 -1       0                       0                       0                
  1   280   # NGSource.V_flow
 -1  5.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # NGSource.T
 -1  2.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # NGSource.h
  0       0                       0                       1                
  6   256   # NGSource.X[1]
  0  9.4698225749100662E-01       0                       1                
  6   256   # NGSource.X[2]
  0       0                       0                       1                
  6   256   # NGSource.X[3]
  0  5.3017742508993361E-02       0                       1                
  6   256   # NGSource.X[4]
  0       0                       0                       1                
  6   256   # NGSource.X[5]
  0       0                       0                       1                
  6   256   # NGSource.X[6]
  0       0                       0                       1                
  6   256   # NGSource.X[7]
  0       1                       1                       2                
  6   770   # NGSource.VFlowUnit
  0       1                       1                       2                
  6   770   # NGSource.temperatureUnit
  0       0                       0                       0                
  6   769   # NGSource.use_flow_in
  0       0                       0                       0                
  6   769   # NGSource.use_Th_in
  0       0                       0                       0                
  6   769   # NGSource.use_X_in
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # ATRAirSource.fluidPort.h_outflow
  0       0                       0                       1                
  6   260   # ATRAirSource.fluidPort.X_outflow[1]
  0       0                       0                       1                
  6   260   # ATRAirSource.fluidPort.X_outflow[2]
  0       0                       0                       1                
  6   260   # ATRAirSource.fluidPort.X_outflow[3]
  0       0                       0                       1                
  6   260   # ATRAirSource.fluidPort.X_outflow[4]
  0       0                       0                       1                
  6   260   # ATRAirSource.fluidPort.X_outflow[5]
  0       1                       1                       2                
  6   770   # ATRAirSource.massFlowBoundary.flowDefinition
  0       1                       1                       2                
  6   770   # ATRAirSource.massFlowBoundary.energyDefinition
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # ATRAirSource.massFlowBoundary.m_flow
  0       0                       0                       0                
  6   256   # ATRAirSource.massFlowBoundary.V_flow
  0     300                       0                   10000                
  6   256   # ATRAirSource.massFlowBoundary.T
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # ATRAirSource.massFlowBoundary.h
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.X[1]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.X[2]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.X[3]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.X[4]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.X[5]
  0       1                       1                       2                
  6   770   # ATRAirSource.massFlowBoundary.VFlowUnit
  0       1                       1                       2                
  6   770   # ATRAirSource.massFlowBoundary.temperatureUnit
  0       0                       0                       0                
  6   769   # ATRAirSource.massFlowBoundary.use_flow_in
  0       0                       0                       0                
  6   769   # ATRAirSource.massFlowBoundary.use_Th_in
  0       0                       0                       0                
  6   769   # ATRAirSource.massFlowBoundary.use_X_in
  0       0                       0                       0                
  6   769   # ATRAirSource.massFlowBoundary.use_C_in
  0       1                       0                       0                
  6   256   # ATRAirSource.massFlowBoundary.Vflow_scale
 -1  100000                       0                 1.0000000000000000E+100
  1   280   # ATRAirSource.massFlowBoundary.p_start
  0       0                       0                       1                
  6  1280   # ATRAirSource.massFlowBoundary.X_set[1]
  0       0                       0                       1                
  6  1280   # ATRAirSource.massFlowBoundary.X_set[2]
  0       0                       0                       1                
  6  1280   # ATRAirSource.massFlowBoundary.X_set[3]
  0       0                       0                       1                
  6  1280   # ATRAirSource.massFlowBoundary.X_set[4]
  0       0                       0                       1                
  6  1280   # ATRAirSource.massFlowBoundary.X_set[5]
  0       0                       0                  1.0000000000000000E+08
  6   256   # ATRAirSource.massFlowBoundary.state.p
  0     300                       0                   10000                
  6   256   # ATRAirSource.massFlowBoundary.state.T
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.state.X[1]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.state.X[2]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.state.X[3]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.state.X[4]
  0       0                       0                       1                
  6   256   # ATRAirSource.massFlowBoundary.state.X[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # ATRAirSource.massFlowBoundary.d
  0       1                       1                       2                
  6   770   # ATRAirSource.flowDefinition
  0       1                       1                       2                
  6   770   # ATRAirSource.energyDefinition
 -1  4.5500000000000000E-04       0                       0                
  1   280   # ATRAirSource.m_flow
 -1       0                       0                       0                
  1   280   # ATRAirSource.V_flow
 -1  3.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # ATRAirSource.T
 -1  2.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # ATRAirSource.h
 -1       0                       0                       1                
  1   280   # ATRAirSource.X[1]
 -1       0                       0                       1                
  1   280   # ATRAirSource.X[2]
 -1       0                       0                       1                
  1   280   # ATRAirSource.X[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # ATRAirSource.X[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # ATRAirSource.X[5]
  0       1                       1                       2                
  6   770   # ATRAirSource.VFlowUnit
  0       1                       1                       2                
  6   770   # ATRAirSource.temperatureUnit
  0       0                       0                       0                
  6   769   # ATRAirSource.use_flow_in
  0       0                       0                       0                
  6   769   # ATRAirSource.use_Th_in
  0       0                       0                       0                
  6   769   # ATRAirSource.use_X_in
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # exhaustSink.fluidPort.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # exhaustSink.fluidPort.h_outflow
  0       1                       0                       0                
  6   258   # exhaustSink.pressureBoundary.N
  0       1                       1                       2                
  6   770   # exhaustSink.pressureBoundary.energyDefinition
  0  100000                       0                  1.0000000000000000E+08
  6   256   # exhaustSink.pressureBoundary.p
  0     300                       0                   10000                
  6   256   # exhaustSink.pressureBoundary.T
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustSink.pressureBoundary.h
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X[1]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X[2]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X[3]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X[4]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X[5]
  0       1                       1                       6                
  6   770   # exhaustSink.pressureBoundary.pressureUnit
  0       1                       1                       2                
  6   770   # exhaustSink.pressureBoundary.temperatureUnit
  0       1                       0                       0                
  6   256   # exhaustSink.pressureBoundary.p_scale
  0       0                       0                       0                
  6   769   # exhaustSink.pressureBoundary.use_p_in
  0       0                       0                       0                
  6   769   # exhaustSink.pressureBoundary.use_Th_in
  0       0                       0                       0                
  6   769   # exhaustSink.pressureBoundary.use_X_in
  0       0                       0                       0                
  6   769   # exhaustSink.pressureBoundary.use_C_in
  0       0                       0                       0                
  6   257   # exhaustSink.pressureBoundary.filter_port_state
 -1  1.0000000000000001E-01       0                       0                
  1   280   # exhaustSink.pressureBoundary.Tc_port_state
 -1       0                       0                       0                
  1   281   # exhaustSink.pressureBoundary.steady_state_port_init
 -1  1.0000000000000000E-02       0                       0                
  1   280   # exhaustSink.pressureBoundary.m_flow_start[1]
  0       0                       0                       0                
  6  1280   # exhaustSink.pressureBoundary.X_set[1]
  0       0                       0                       0                
  6  1280   # exhaustSink.pressureBoundary.X_set[2]
  0       0                       0                       0                
  6  1280   # exhaustSink.pressureBoundary.X_set[3]
  0       0                       0                       0                
  6  1280   # exhaustSink.pressureBoundary.X_set[4]
  0       0                       0                       0                
  6  1280   # exhaustSink.pressureBoundary.X_set[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # exhaustSink.pressureBoundary.state.p
  0     300                       0                   10000                
  6   256   # exhaustSink.pressureBoundary.state.T
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.state.X[1]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.state.X[2]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.state.X[3]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.state.X[4]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.state.X[5]
  0       0                       0                       0                
  6   256   # exhaustSink.pressureBoundary.h_port[1]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X_port[1, 1]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X_port[1, 2]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X_port[1, 3]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X_port[1, 4]
  0       0                       0                       1                
  6   256   # exhaustSink.pressureBoundary.X_port[1, 5]
  0       1                       1                       2                
  6   770   # exhaustSink.energyDefinition
 -1  1.0130000000000000E+05       0                  1.0000000000000000E+08
  1   280   # exhaustSink.p
 -1  5.7314999999999998E+02       0                   10000                
  1   280   # exhaustSink.T
 -1  2.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # exhaustSink.h
 -1       0                       0                       1                
  1   280   # exhaustSink.X[1]
 -1       0                       0                       1                
  1   280   # exhaustSink.X[2]
 -1       0                       0                       1                
  1   280   # exhaustSink.X[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # exhaustSink.X[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # exhaustSink.X[5]
  0       1                       1                       6                
  6   258   # exhaustSink.pressureUnit
  0       1                       1                       2                
  6   770   # exhaustSink.temperatureUnit
  0       0                       0                       0                
  6   769   # exhaustSink.use_p_in
  0       0                       0                       0                
  6   769   # exhaustSink.use_Th_in
  0       0                       0                       0                
  6   769   # exhaustSink.use_X_in
 -1       4                       0                       0                
  1   280   # preprocessor.steam_geoHX.N_parallel
 -1  4.0000000000000002E-01       0                       0                
  1   280   # preprocessor.steam_geoHX.L
  0       0                       0                       0                
  6   256   # preprocessor.steam_geoHX.Dhyd
 -1  5.0000000000000001E-03       0                       0                
  1   280   # preprocessor.steam_geoHX.Across
 -1  2.0000000000000001E-01       0                       0                
  1   280   # preprocessor.steam_geoHX.C
  0       0                       0                       0                
  6   256   # preprocessor.steam_geoHX.V
  0       0                       0                       0                
  6   256   # preprocessor.steam_geoHX.Aheat
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.X[7]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Xi[1]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Xi[2]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Xi[3]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Xi[4]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Xi[5]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Xi[6]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.d
  0       0                       0                       0                
  6   256   # preprocessor.reformer.gas.der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.Rg
  0       0                       0                       0                
  6   256   # preprocessor.reformer.gas.der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.gas.MM
 -1       2                       1                       2                
  1   282   # preprocessor.reformer.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.state.p
  0     300                       0                   10000                
  6   256   # preprocessor.reformer.gas.state.T
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.state.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.state.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.state.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.state.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.state.X[7]
  0       0                       0                       0                
  6   257   # preprocessor.reformer.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # preprocessor.reformer.gas.T_degC
  0       0                       0                       0                
  6   256   # preprocessor.reformer.gas.p_bar
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Z[5]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Z[6]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.gas.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.reformer.gas.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.reformer.gas.g_formation[7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.gas.ddTp
  0       0                       0                       0                
  6   256   # preprocessor.reformer.gas.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.reformer.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.reformer.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.reformer.gas.ddx[7]
  0       1                       1                       5                
  6   258   # preprocessor.reformer.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.pstart
 -1  8.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # preprocessor.reformer.Tstart
  0  1.6787728019918757E-03       0                       1                
  6   256   # preprocessor.reformer.Xstart[1]
  0  1.0019809782220145E-01       0                       1                
  6   256   # preprocessor.reformer.Xstart[2]
  0  5.8315219731671336E-02       0                       1                
  6   256   # preprocessor.reformer.Xstart[3]
  0  9.1624937532568229E-02       0                       1                
  6   256   # preprocessor.reformer.Xstart[4]
  0  2.2503989883525957E-01       0                       1                
  6   256   # preprocessor.reformer.Xstart[5]
  0  3.4993254071164370E-01       0                       1                
  6   256   # preprocessor.reformer.Xstart[6]
  0  1.7321053256466390E-01       0                       1                
  6   256   # preprocessor.reformer.Xstart[7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.m_flow_nom
  0       0                       0                       0                
  6   256   # preprocessor.reformer.V_tot
  0       0                       0                       0                
  6   256   # preprocessor.reformer.scale_cat
 -1     240                       0                       0                
  1   280   # preprocessor.reformer.LHV_H2
 -1     800                       0                       0                
  1   280   # preprocessor.reformer.LHV_CH4
  0       0                       0                       0                
  6   257   # preprocessor.reformer.QuasiStatic
  0       0                       0                       0                
  6   257   # preprocessor.reformer.positiveFlow
  0       0                       0                  1.0000000000000000E+08
  6   256   # preprocessor.reformer.p
  0       0                       0                       0                
  6   256   # preprocessor.reformer.der(p)
 -1       0                       0                   10000                
  2   272   # preprocessor.reformer.T
  0       0                       0                       0                
  3   256   # preprocessor.reformer.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.M
  0       0                       0                       0                
  6   256   # preprocessor.reformer.der(M)
  0       0                       0                       0                
  6   256   # preprocessor.reformer.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.MX[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.MX[7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.H2_CO_ratio
  0       0                       0                       0                
  6   256   # preprocessor.reformer.H20_CH4_ratio
  0       0                       0                       0                
  6   256   # preprocessor.reformer.O2_CH4_ratio
  0       0                       0                       0                
  6   256   # preprocessor.reformer.steam_carb_out
  0       0                       0                       1                
  6   256   # preprocessor.reformer.dry_mole[1]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.dry_mole[2]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.dry_mole[3]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.dry_mole[4]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.dry_mole[5]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.dry_mole[6]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.dry_mole[7]
  0       1                       0                       1                
  6   256   # preprocessor.reformer.hydro_yield
  0       0                       0                       0                
  6   256   # preprocessor.reformer.pp[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.pp[2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.pp[3]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.pp[4]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.pp[5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.pp[6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.pp[7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.Tr
  0       0                       0                       0                
  6   256   # preprocessor.reformer.GHSV
  0       0                       0                       0                
  6   256   # preprocessor.reformer.GHSV1
  0       0                       0                       1                
  6   256   # preprocessor.reformer.X_mole[1]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.X_mole[2]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.X_mole[3]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.X_mole[4]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.X_mole[5]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.X_mole[6]
  0       0                       0                       1                
  6   256   # preprocessor.reformer.X_mole[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # preprocessor.reformer.feed_fuel.m_flow
  0       0                       0                       1                
  6   260   # preprocessor.reformer.feed_air.X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.feed_air.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.feed_air.X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # preprocessor.reformer.feed_air.X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # preprocessor.reformer.feed_air.X_outflow[5]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.drain.X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.drain.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.drain.X_outflow[3]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.drain.X_outflow[4]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.drain.X_outflow[5]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.drain.X_outflow[6]
  0       0                       0                       1                
  6   260   # preprocessor.reformer.drain.X_outflow[7]
  0       1                       1                 1.0000000000000000E+100
  6   258   # preprocessor.reformer.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # preprocessor.reformer.reaction.Cp_reac[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Q[1]
  0       3                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[1, 1]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[1, 2]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[1, 3]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[1, 4]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[1, 5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[1, 6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[1, 7]
  0       4                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[2, 1]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[2, 2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[2, 3]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[2, 4]
  0      -2                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[2, 5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[2, 6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[2, 7]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[3, 1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[3, 2]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[3, 3]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[3, 4]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[3, 5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[3, 6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[3, 7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[4, 1]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[4, 2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[4, 3]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[4, 4]
  0       2                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[4, 5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[4, 6]
  0      -2                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_reac[4, 7]
  0       4                       0                       0                
  6   258   # preprocessor.reformer.reaction.n_reac
  0       2                       0                       0                
  6   258   # preprocessor.reformer.reaction.comp[1]
  0       2                       0                       0                
  6   258   # preprocessor.reformer.reaction.comp[2]
  0       5                       0                       0                
  6   258   # preprocessor.reformer.reaction.comp[3]
  0       2                       0                       0                
  6   258   # preprocessor.reformer.reaction.comp[4]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.reformer.reaction.pstart
  0     300                       0                   10000                
  6   256   # preprocessor.reformer.reaction.Tstart
  0  1.6787728019918757E-03       0                       1                
  6   256   # preprocessor.reformer.reaction.Xstart[1]
  0  1.0019809782220145E-01       0                       1                
  6   256   # preprocessor.reformer.reaction.Xstart[2]
  0  5.8315219731671336E-02       0                       1                
  6   256   # preprocessor.reformer.reaction.Xstart[3]
  0  9.1624937532568229E-02       0                       1                
  6   256   # preprocessor.reformer.reaction.Xstart[4]
  0  2.2503989883525957E-01       0                       1                
  6   256   # preprocessor.reformer.reaction.Xstart[5]
  0  3.4993254071164370E-01       0                       1                
  6   256   # preprocessor.reformer.reaction.Xstart[6]
  0  1.7321053256466390E-01       0                       1                
  6   256   # preprocessor.reformer.reaction.Xstart[7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # preprocessor.reformer.reaction.V
 -1       1                       0                       0                
  1   280   # preprocessor.reformer.reaction.scale
  0  2.0158799999999998E-03  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.reaction.MMX[1]
  0  1.6042460000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.reaction.MMX[2]
  0  2.8010100000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.reaction.MMX[3]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.reaction.MMX[4]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.reaction.MMX[5]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.reaction.MMX[6]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.reformer.reaction.MMX[7]
  0  2.4016114600000006E-02       0                       0                
  6   256   # preprocessor.reformer.reaction.MM[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.der(MM[1])
  0  2.0000000000000007E-02       0                       0                
  6   256   # preprocessor.reformer.reaction.y_start[1]
  0  1.5000000000000005E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.y_start[2]
  0  5.0000000000000017E-02       0                       0                
  6   256   # preprocessor.reformer.reaction.y_start[3]
  0  5.0000000000000010E-02       0                       0                
  6   256   # preprocessor.reformer.reaction.y_start[4]
  0  3.0000000000000010E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.y_start[5]
  0  3.0000000000000010E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.y_start[6]
  0  1.3000000000000003E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.y_start[7]
  0 -1.6989700043360187E+00       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_start[1]
  0 -8.2390874094431865E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_start[2]
  0 -1.3010299956639810E+00       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_start[3]
  0 -1.3010299956639810E+00       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_start[4]
  0 -5.2287874528033740E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_start[5]
  0 -5.2287874528033740E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_start[6]
  0 -8.8605664769316317E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_start[7]
  0  100000                       0                       0                
  6   256   # preprocessor.reformer.reaction.pref
  0 -1.6989700043360187E+00       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_out[1, 1]
  0 -8.2390874094431865E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_out[1, 2]
  0 -1.3010299956639810E+00       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_out[1, 3]
  0 -1.3010299956639810E+00       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_out[1, 4]
  0 -5.2287874528033740E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_out[1, 5]
  0 -5.2287874528033740E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_out[1, 6]
  0 -8.8605664769316317E-01       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_y_out[1, 7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_eq_reac[1, 1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_eq_reac[1, 2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_eq_reac[1, 3]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.log10_eq_reac[1, 4]
  0  3.7697709702875987E-01       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[1, 1]
  0      -1                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[1, 2]
  0  1.7459978083161807E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[1, 3]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[1, 4]
  0 -1.1229749053449409E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[1, 5]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[1, 6]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[1, 7]
  0  5.0263612937167979E-01       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[2, 1]
  0      -1                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[2, 2]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[2, 3]
  0  2.7433136813182015E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[2, 4]
  0 -2.2459498106898819E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[2, 5]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[2, 6]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[2, 7]
  0  1.1189834407236522E-01       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[3, 1]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[3, 2]
  0 -1.5547968169242996E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[3, 3]
  0  2.4428984728519345E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[3, 4]
  0      -1                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[3, 5]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[3, 6]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[3, 7]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[4, 1]
  0      -1                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[4, 2]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[4, 3]
  0  2.7433136813182015E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[4, 4]
  0  2.2459498106898819E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[4, 5]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[4, 6]
  0 -3.9892634920080834E+00       0                       0                
  6  1280   # preprocessor.reformer.reaction.Sx_reac[4, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Zx_start[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Zx_start[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Zx_start[7]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[1, 1]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[1, 2]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[1, 3]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[1, 4]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[2, 1]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[2, 2]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[2, 3]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[2, 4]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[3, 1]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[3, 2]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[3, 3]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[3, 4]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[4, 1]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[4, 2]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[4, 3]
  0       0                 -1.0000000000000000E+100       1                
  6   256   # preprocessor.reformer.reaction.CF_conversion[4, 4]
 -1       1                       0                       0                
  1   280   # preprocessor.reformer.reaction.Tscale
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # preprocessor.reformer.reaction.epsZ
  0  1.0000000000000000E-03       0                       0                
  6   256   # preprocessor.reformer.reaction.Zx_nominal
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.reformer.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # preprocessor.reformer.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.reformer.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # preprocessor.reformer.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.reformer.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # preprocessor.reformer.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.reformer.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # preprocessor.reformer.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.reformer.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # preprocessor.reformer.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.reformer.reaction.Zx[1, 6]
  0       0                       0                       0                
  3   256   # preprocessor.reformer.reaction.der(Zx[1, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.reformer.reaction.Zx[1, 7]
  0       0                       0                       0                
  3   256   # preprocessor.reformer.reaction.der(Zx[1, 7])
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.reformer.reaction.Ztot[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Zx_flow[1, 1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Zx_flow[1, 2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Zx_flow[1, 3]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Zx_flow[1, 4]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Zx_flow[1, 5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Zx_flow[1, 7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rZ[1, 6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rZ[1, 7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rate[1, 1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rate[1, 2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rate[1, 3]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.rate[1, 4]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.deplZ[1, 6]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.reaction.deplZ[1, 7]
  0       3                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref[1]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref[2]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref[3]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref[4]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref[5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref[6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref[7]
  0       4                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref2[1]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref2[2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref2[3]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref2[4]
  0      -2                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref2[5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref2[6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_ref2[7]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_wgs[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_wgs[2]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_wgs[3]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_wgs[4]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_wgs[5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_wgs[6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_wgs[7]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_totcomb[1]
  0      -1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_totcomb[2]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_totcomb[3]
  0       1                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_totcomb[4]
  0       2                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_totcomb[5]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_totcomb[6]
  0      -2                       0                       0                
  6   256   # preprocessor.reformer.reaction.S_totcomb[7]
  0       2                       0                       0                
  6   258   # preprocessor.reformer.reaction.index[1]
  0       5                       0                       0                
  6   258   # preprocessor.reformer.reaction.index[2]
  0       1                       0                       0                
  6   258   # preprocessor.reformer.reaction.index[3]
  0       7                       0                       0                
  6   258   # preprocessor.reformer.reaction.index[4]
  0       3                       0                       0                
  6   258   # preprocessor.reformer.reaction.index[5]
  0       4                       0                       0                
  6   258   # preprocessor.reformer.reaction.index[6]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.k1[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.k2[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.k3[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.k4a[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.k4b[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.omega[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Keq_1
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Keq_2
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Keq_3
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.K_CH4[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.K_CO[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.K_H2[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.K_H2O[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Kcomb_CH4[1]
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.Kcomb_O2[1]
 -1  7.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # preprocessor.reformer.reaction.Ts
  0       0                       0                       0                
  6   256   # preprocessor.reformer.reaction.scale_cat
 -1  7.0000000000000007E-02       0                       0                
  1   280   # preprocessor.reformer.reaction.eta_1
 -1  5.9999999999999998E-02       0                       0                
  1   280   # preprocessor.reformer.reaction.eta_2
 -1  6.9999999999999996E-01       0                       0                
  1   280   # preprocessor.reformer.reaction.eta_3
 -1  5.0000000000000003E-02       0                       0                
  1   280   # preprocessor.reformer.reaction.eta_4
 -1  1.1700000000000000E+15       0                       0                
  1   280   # preprocessor.reformer.reaction.k_o1
 -1  2.8300000000000000E+14       0                       0                
  1   280   # preprocessor.reformer.reaction.k_o2
 -1  5.4300000000000000E+05       0                       0                
  1   280   # preprocessor.reformer.reaction.k_o3
 -1  8.1100000000000000E+05       0                       0                
  1   280   # preprocessor.reformer.reaction.k_o4a
 -1  6.8200000000000000E+05       0                       0                
  1   280   # preprocessor.reformer.reaction.k_o4b
 -1  2.4010000000000000E+05       0                       0                
  1   280   # preprocessor.reformer.reaction.Ea_1
 -1  2.4390000000000000E+05       0                       0                
  1   280   # preprocessor.reformer.reaction.Ea_2
 -1   67130                       0                       0                
  1   280   # preprocessor.reformer.reaction.Ea_3
 -1   86000                       0                       0                
  1   280   # preprocessor.reformer.reaction.Ea_4
 -1  6.6500000000000001E-04       0                       0                
  1   280   # preprocessor.reformer.reaction.K_oCH4
 -1  8.2299999999999995E-05       0                       0                
  1   280   # preprocessor.reformer.reaction.K_oCO
 -1  6.1200000000000004E-09       0                       0                
  1   280   # preprocessor.reformer.reaction.K_oH2
 -1  1.7700000000000000E+05       0                       0                
  1   280   # preprocessor.reformer.reaction.K_oH2O
 -1  1.2600000000000000E-01       0                       0                
  1   280   # preprocessor.reformer.reaction.Kcomb_oCH4
 -1  7.7800000000000001E-07       0                       0                
  1   280   # preprocessor.reformer.reaction.Kcomb_oO2
 -1  -38280                       0                       0                
  1   280   # preprocessor.reformer.reaction.deltaH_CH4
 -1  -70650                       0                       0                
  1   280   # preprocessor.reformer.reaction.deltaH_CO
 -1  -82900                       0                       0                
  1   280   # preprocessor.reformer.reaction.deltaH_H2
 -1   88680                       0                       0                
  1   280   # preprocessor.reformer.reaction.deltaH_H2O
 -1  -27300                       0                       0                
  1   280   # preprocessor.reformer.reaction.deltaHcomb_CH4
 -1  -92800                       0                       0                
  1   280   # preprocessor.reformer.reaction.deltaHcomb_O2
  0   26830                       0                       0                
  6   256   # preprocessor.reformer.reaction.a1
  0  3.0114000000000001E+01       0                       0                
  6   256   # preprocessor.reformer.reaction.b1
  0   -4400                       0                       0                
  6   256   # preprocessor.reformer.reaction.a3
  0 -4.0359999999999996E+00       0                       0                
  6   256   # preprocessor.reformer.reaction.b3
  0       0                       0                       0                
  6   388   # preprocessor.reformer.q.Q_flow
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.hi_fuel
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.hi_air
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.ho
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_fuel[1]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_fuel[2]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_fuel[3]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_fuel[4]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_fuel[5]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_fuel[6]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_fuel[7]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_air[1]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_air[2]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_air[3]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_air[4]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_air[5]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_air[6]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.Xi_air[7]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.X_o[1]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.X_o[2]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.X_o[3]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.X_o[4]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.X_o[5]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.X_o[6]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.X_o[7]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.S_air[1]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.S_air[2]
  0       0                       0                       1                
  6  1280   # preprocessor.reformer.S_air[3]
  0       7                       0                       0                
  6  1282   # preprocessor.reformer.nXi
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dM
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # preprocessor.reformer.dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # preprocessor.reformer.dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # preprocessor.reformer.dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # preprocessor.reformer.dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # preprocessor.reformer.dMX[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # preprocessor.reformer.dMX[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # preprocessor.reformer.dMX[7]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.sE
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dZ[1]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dZ[2]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dZ[3]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dZ[4]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dZ[5]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dZ[7]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.dUTZ
  0  2.0000000000000007E-02       0                       1                
  6  1280   # preprocessor.reformer.Z[1]
  0  1.5000000000000005E-01       0                       1                
  6  1280   # preprocessor.reformer.Z[2]
  0  5.0000000000000017E-02       0                       1                
  6  1280   # preprocessor.reformer.Z[3]
  0  5.0000000000000010E-02       0                       1                
  6  1280   # preprocessor.reformer.Z[4]
  0  3.0000000000000010E-01       0                       1                
  6  1280   # preprocessor.reformer.Z[5]
  0  3.0000000000000010E-01       0                       1                
  6  1280   # preprocessor.reformer.Z[6]
  0  1.3000000000000003E-01       0                       1                
  6  1280   # preprocessor.reformer.Z[7]
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.der(Z[1])
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.der(Z[2])
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.der(Z[3])
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.der(Z[4])
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.der(Z[5])
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.der(Z[6])
  0       0                       0                       0                
  6  1280   # preprocessor.reformer.der(Z[7])
  0       5                       0                       0                
  6  1282   # preprocessor.reformer.air[1]
  0       3                       0                       0                
  6  1282   # preprocessor.reformer.air[2]
  0       4                       0                       0                
  6  1282   # preprocessor.reformer.air[3]
  0       2                       0                       0                
  6  1282   # preprocessor.reformer.air[4]
  0       3                       0                       0                
  6  1282   # preprocessor.reformer.index[1]
  0       4                       0                       0                
  6  1282   # preprocessor.reformer.index[2]
  0       7                       0                       0                
  6  1282   # preprocessor.reformer.index[3]
  0       5                       0                       0                
  6  1282   # preprocessor.reformer.index[4]
  0       1                       0                       0                
  6  1282   # preprocessor.reformer.index[5]
  0       2                       0                       0                
  6  1282   # preprocessor.reformer.index[6]
  0       6                       0                       0                
  6  1282   # preprocessor.reformer.index[7]
  0       0                       0                       0                
  6   388   # preprocessor.steamMix_TZ.q.Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # preprocessor.steamMix_TZ.feed.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.steamMix_TZ.feed.h_outflow
  0       0                       0                       1                
  6   260   # preprocessor.steamMix_TZ.drain.X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.steamMix_TZ.drain.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.steamMix_TZ.drain.X_outflow[3]
  0       0                       0                       1                
  6   260   # preprocessor.steamMix_TZ.drain.X_outflow[4]
  0       0                       0                       1                
  6   260   # preprocessor.steamMix_TZ.drain.X_outflow[5]
  0       0                       0                       1                
  6   260   # preprocessor.steamMix_TZ.drain.X_outflow[6]
  0       0                       0                       1                
  6   260   # preprocessor.steamMix_TZ.drain.X_outflow[7]
  0       1                       1                       5                
  6   258   # preprocessor.steamMix_TZ.initOpt
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.pstart
 -1  7.7314999999999998E+02       0                   10000                
  1   280   # preprocessor.steamMix_TZ.Tstart
  0  3.1755797113845990E-02       0                       1                
  6   256   # preprocessor.steamMix_TZ.Xstart[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Xstart[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # preprocessor.steamMix_TZ.Xstart[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Xstart[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Xstart[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Xstart[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # preprocessor.steamMix_TZ.Xstart[7]
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.m_flow_start
  0       1                       0                       0                
  6   257   # preprocessor.steamMix_TZ.positiveFlow
 -1       0                       0                   10000                
  2   272   # preprocessor.steamMix_TZ.T
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(T)
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.hi
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.X[7]
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.V_tot
  0       0                       0                       0                
  6   257   # preprocessor.steamMix_TZ.realTimeMode
 -1  2.0000000000000000E-02       0                       0                
  1   280   # preprocessor.steamMix_TZ.hSample
 -1       0                       0                       0                
  1   280   # preprocessor.steamMix_TZ.sampleStartTime
 -1       0                       0                       0                
  1   281   # preprocessor.steamMix_TZ.useDelay
 -1       0                       0                       0                
  1   281   # preprocessor.steamMix_TZ.useAssert
  0  2.7660000000000001E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Zstart[1]
  0  1.6960000000000003E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Zstart[2]
  0  1.8000000000000002E-02       0                       1                
  6   256   # preprocessor.steamMix_TZ.Zstart[3]
  0  7.3300000000000004E-02       0                       1                
  6   256   # preprocessor.steamMix_TZ.Zstart[4]
  0  2.4530000000000002E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Zstart[5]
  0  2.0549999999999996E-01       0                       1                
  6   256   # preprocessor.steamMix_TZ.Zstart[6]
  0  1.1700000000000000E-02       0                       1                
  6   256   # preprocessor.steamMix_TZ.Zstart[7]
  0       0                       0                       0                
  6   257   # preprocessor.steamMix_TZ.QuasiStatic
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.X[7]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Xi[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Xi[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Xi[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Xi[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Xi[5]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Xi[6]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.steamMix_TZ.gas.MM
 -1       2                       1                       2                
  1   282   # preprocessor.steamMix_TZ.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.state.p
  0     300                       0                   10000                
  6   256   # preprocessor.steamMix_TZ.gas.state.T
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.state.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.state.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.state.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.state.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.state.X[7]
  0       0                       0                       0                
  6   257   # preprocessor.steamMix_TZ.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.gas.T_degC
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.gas.p_bar
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Z[5]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Z[6]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.gas.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamMix_TZ.gas.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamMix_TZ.gas.g_formation[7]
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.gas.ddTp
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.gas.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamMix_TZ.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamMix_TZ.gas.ddx[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.M
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.MX[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.MX[7]
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.sE
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamMix_TZ.Moles_z[1]
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(Moles_z[1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamMix_TZ.Moles_z[2]
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(Moles_z[2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamMix_TZ.Moles_z[3]
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(Moles_z[3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamMix_TZ.Moles_z[4]
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(Moles_z[4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamMix_TZ.Moles_z[5]
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(Moles_z[5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamMix_TZ.Moles_z[6]
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(Moles_z[6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamMix_TZ.Moles_z[7]
  0       0                       0                       0                
  3   256   # preprocessor.steamMix_TZ.der(Moles_z[7])
  0  1.0000000000000000E-03  9.9999999999999998E-13 1.0000000000000000E+100
  6   256   # preprocessor.steamMix_TZ.Moles
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Z[5]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Z[6]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Z[7]
  0  8.3144719999999985E+00       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Rmol[1]
  0  8.3144720000000021E+00       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Rmol[2]
  0  8.3144719999999985E+00       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Rmol[3]
  0  8.3144720000000003E+00       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Rmol[4]
  0  8.3144720000000021E+00       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Rmol[5]
  0  8.3144720000000003E+00       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Rmol[6]
  0  8.3144720000000021E+00       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Rmol[7]
  0  4.1244875687044860E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.R[1]
  0  5.1827911679380850E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.R[2]
  0  2.9683835473632718E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.R[3]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.R[4]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.R[5]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.R[6]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.R[7]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dUTZ
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.rZ[1]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.rZ[2]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.rZ[3]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.rZ[4]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.rZ[5]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.rZ[6]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.rZ[7]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.steamMix_TZ.Mmix
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dM
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dE
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dMX[1]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dMX[2]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dMX[3]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dMX[4]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dMX[5]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dMX[6]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.dMX[7]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.Tr
  0  4.9606127348850134E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[1]
  0  6.2334579609361654E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[2]
  0  3.5701407706505869E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[3]
  0  2.2722366761721901E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[4]
  0  5.5508435061791985E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[5]
  0  3.5697202053303059E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[6]
  0  3.1251171918946959E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.FastReformateLong.invMMX[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # preprocessor.steamMix_TZ.feed_steam.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.steamMix_TZ.feed_steam.h_outflow
  0       1                       0                       1                
  6   260   # preprocessor.steamMix_TZ.feed_steam.X_outflow[1]
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.h_in_steam
  0       0                       0                       0                
  6   256   # preprocessor.steamMix_TZ.h_in_NG
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Y[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Y[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Y[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Y[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Y[5]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Y[6]
  0       0                       0                       1                
  6   256   # preprocessor.steamMix_TZ.Y[7]
  0       0                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.steamMix_TZ.state_water.p
  0     300                       0                   10000                
  6  1280   # preprocessor.steamMix_TZ.state_water.T
  0       1                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.state_water.X[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # preprocessor.steamMix_TZ.hi_2
  0       0                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.X_i2[1]
  0       0                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.X_i2[2]
  0       0                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.X_i2[3]
  0       0                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.X_i2[4]
  0       1                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.X_i2[5]
  0       0                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.X_i2[6]
  0       0                       0                       1                
  6  1280   # preprocessor.steamMix_TZ.X_i2[7]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.S_mix[1]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.S_mix[2]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.S_mix[3]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.S_mix[4]
  0       1                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.S_mix[5]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.S_mix[6]
  0       0                       0                       0                
  6  1280   # preprocessor.steamMix_TZ.S_mix[7]
  0       5                       0                       0                
  6  1282   # preprocessor.steamMix_TZ.index[1]
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.geoHX.N_parallel
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.geoHX.L
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.geoHX.Dhyd
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.geoHX.Across
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.geoHX.C
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.geoHX.V
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.geoHX.Aheat
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.Apipe
  0    1000                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.dp_nom_gas
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.Apipe
 -1      55                       0                       0                
  1   280   # preprocessor.steamGeneratorHX.steamGenerator.kc
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # preprocessor.steamGeneratorHX.steamGenerator.CF_foul
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.T_start
 -1       1                       0                       0                
  1   281   # preprocessor.steamGeneratorHX.steamGenerator.CounterTemps
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.steamGeneratorHX.steamGenerator.l_pu[1]
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.steamGeneratorHX.steamGenerator.l_pu[2]
 -1  8.0000000000000004E-01       0                       0                
  1   280   # preprocessor.steamGeneratorHX.steamGenerator.l_pu[3]
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # preprocessor.steamGeneratorHX.steamGenerator.M_wall
 -1     100                       0                  1.0000000000000000E+06
  1   280   # preprocessor.steamGeneratorHX.steamGenerator.Cp_wall
  0       1                       0                       1                
  6   260   # preprocessor.steamGeneratorHX.steamGenerator.feed.X_outflow[1]
  0       1                       0                       1                
  6   260   # preprocessor.steamGeneratorHX.steamGenerator.drain.X_outflow[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.ho
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.h_vap
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.Q_flow
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.Q_boil
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.T_liq
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.T_2phase
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.steamGeneratorHX.steamGenerator.T_steam
 -1       0                       0                 1.0000000000000000E+100
  2   272   # preprocessor.steamGeneratorHX.steamGenerator.T_wall
  0       0                       0                       0                
  3   256   # preprocessor.steamGeneratorHX.steamGenerator.der(T_wall)
  0       0                       0                       0                
  6   260   # preprocessor.steamGeneratorHX.steamGenerator.heat.kc
  0       0                       0                       0                
  6   260   # preprocessor.steamGeneratorHX.steamGenerator.heat.capacityFlow
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.steamGenerator.in_dT
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.steamGenerator.Cp_boil
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.steamGenerator.Cmin
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.steamGenerator.C
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.steamGenerator.eps
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.steamGenerator.qmax
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.steamGenerator.NTU
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.geo.N_parallel
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.geo.L
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.geo.Dhyd
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.geo.Across
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.geo.C
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.geo.V
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.geo.Aheat
  0       2                       0                       0                
  6   258   # preprocessor.steamGeneratorHX.staticHXChannel.N
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.pstart
  0     300                       0                   10000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.Tstart
 -1       0                       0                       1                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Xstart[1]
 -1       0                       0                       1                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Xstart[2]
 -1       0                       0                       1                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Xstart[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Xstart[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Xstart[5]
  0       0                       0                       0                
  6   257   # preprocessor.steamGeneratorHX.staticHXChannel.positiveFlow
 -1       1                       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.C_Re
 -1  8.0000000000000004E-01       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.n_Re
 -1  3.3333333333333331E-01       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.n_Pr
  0       1                       0                       0                
  6   257   # preprocessor.steamGeneratorHX.staticHXChannel.linearFriction
  0       2                       1                       5                
  6   258   # preprocessor.steamGeneratorHX.staticHXChannel.FFtype
 -1       0                       0                 1.0000000000000000E+100
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Kfnom
 -1  2.1000000000000001E-02       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.m_flow_nom
  0    1000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.dpnom
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.rhonom
 -1       0                       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Cfnom
 -1       0                       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.e
 -1       1                       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.Kfc
 -1  1.0000000000000000E-02       0                       0                
  1   280   # preprocessor.steamGeneratorHX.staticHXChannel.wnf
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.Q
  0    1000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.dp
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.Re
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.Nu
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.Pr
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.MM
 -1       2                       1                       2                
  1   282   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.assertlevel
  0       0                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.p
  0       0                       0                   10000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.T
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.state.X[5]
  0       0                       0                       0                
  6   257   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.preferredMediumStates
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.T_degC
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.p_bar
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.g_formation[5]
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddTp
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.fluid.ddx[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.state.p
  0     300                       0                   10000                
  6   288   # preprocessor.steamGeneratorHX.staticHXChannel.state.T
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.state.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.state.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.state.X[5]
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.v_in
  0  1.0000000000000000E-03       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.eta
  0       1                       0                     500                
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.lambda
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.cp_1
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.steamGeneratorHX.staticHXChannel.cp_est
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.nonlinear
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.hi
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.ho
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.omega_hyd
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.Kf
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.Kfl
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.Cf
  0       0                       0                       0                
  6  1280   # preprocessor.steamGeneratorHX.staticHXChannel.h_start
  0       1                       0                       1                
  6   260   # preprocessor.steamGeneratorHX.feed_water.X_outflow[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.steamGeneratorHX.drain_steam.h_outflow
  0       1                       0                       1                
  6   260   # preprocessor.steamGeneratorHX.drain_steam.X_outflow[1]
 -1  1.0731500000000001E+03       0                   10000                
  1   280   # preprocessor.steamGeneratorHX.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.steamGeneratorHX.pstart
  0       0                       0                       0                
  6   256   # preprocessor.steamGeneratorHX.m_flow_nom
  0       0                       0                       0                
  6   257   # preprocessor.steamGeneratorHX.positiveFlow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.drain_Reformate.h_outflow
  0       0                       0                       1                
  6   260   # preprocessor.drain_Reformate.X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.drain_Reformate.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.drain_Reformate.X_outflow[3]
  0       0                       0                       1                
  6   260   # preprocessor.drain_Reformate.X_outflow[4]
  0       0                       0                       1                
  6   260   # preprocessor.drain_Reformate.X_outflow[5]
  0       0                       0                       1                
  6   260   # preprocessor.drain_Reformate.X_outflow[6]
  0       0                       0                       1                
  6   260   # preprocessor.drain_Reformate.X_outflow[7]
  0       0                       0                       0                
  6   260   # preprocessor.drain_Reformate.der(X_outflow[1])
  0       0                       0                       0                
  6   260   # preprocessor.drain_Reformate.der(X_outflow[2])
  0       0                       0                       0                
  6   260   # preprocessor.drain_Reformate.der(X_outflow[3])
  0       0                       0                       0                
  6   260   # preprocessor.drain_Reformate.der(X_outflow[4])
  0       0                       0                       0                
  6   260   # preprocessor.drain_Reformate.der(X_outflow[5])
  0       0                       0                       0                
  6   260   # preprocessor.drain_Reformate.der(X_outflow[6])
  0       0                       0                       0                
  6   260   # preprocessor.drain_Reformate.der(X_outflow[7])
 -1       1                       1                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.n_channels_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.L_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.Dhyd_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.A_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.V_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.A_heat_prim
 -1       1                       1                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.n_channels_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.L_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.Dhyd_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.A_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.V_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.A_heat_sec
 -1      10                       0                       0                
  1   280   # preprocessor.AirHeater.dp_smooth
 -1  1.0000000000000000E-04       0                       0                
  1   280   # preprocessor.AirHeater.mflow_smooth
 -1       1                       0                       0                
  1   281   # preprocessor.AirHeater.from_dp_prim
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.positiveFlow_prim
 -1       0                       0                       0                
  1   281   # preprocessor.AirHeater.generateEventForReversal_prim
 -1       1                       0                       0                
  1   281   # preprocessor.AirHeater.from_dp_sec
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.positiveFlow_sec
 -1       0                       0                       0                
  1   281   # preprocessor.AirHeater.generateEventForReversal_sec
 -1     100                       0                       0                
  1   280   # preprocessor.AirHeater.dp_prim_start
 -1  6.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.T_prim_start
 -1     100                       0                       0                
  1   280   # preprocessor.AirHeater.dp_sec_start
 -1  6.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.T_sec_start
  0       0                       0                       1                
  6   260   # preprocessor.AirHeater.feed_sec.X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.AirHeater.feed_sec.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.AirHeater.feed_sec.X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # preprocessor.AirHeater.feed_sec.X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # preprocessor.AirHeater.feed_sec.X_outflow[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.AirHeater.drain_sec.h_outflow
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.Q_flow
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.summary.T_in
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.summary.T_out
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.h_in
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.h_out
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.dp
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.summary.T_sec_in
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.summary.T_sec_out
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.h_sec_in
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.h_sec_out
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.dp_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.Tpinch_prim_in
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.Tpinch_prim_out
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.lmtd
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.summary.effectiveness
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.A
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.n_channels
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_prim.lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_prim.flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_prim.dpFraction0
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.F_user
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.friction_prim.from_dp
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.friction_prim.positiveFlow
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.dp_smooth
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.mflow_smooth
 -1       0                       0                       0                
  1   281   # preprocessor.AirHeater.heatExchanger.friction_prim.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_prim.reference_d
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.friction_prim.dp_from_isothermal
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_prim.d0
 -1     100                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.friction_prim.dp0
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_prim.m_flow0
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.A
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.n_channels
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_sec.lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_sec.flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_sec.dpFraction0
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.F_user
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.friction_sec.from_dp
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.friction_sec.positiveFlow
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.dp_smooth
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.mflow_smooth
 -1       0                       0                       0                
  1   281   # preprocessor.AirHeater.heatExchanger.friction_sec.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_sec.reference_d
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.stateA_outflow.X[5]
  0       1                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.friction_sec.dp_from_isothermal
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # preprocessor.AirHeater.heatExchanger.friction_sec.d0
 -1     100                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.friction_sec.dp0
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.friction_sec.m_flow0
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.CF_Friction
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.CF_Friction_sec
 -1       3                       1                       3                
  1   282   # preprocessor.AirHeater.heatExchanger.effectivenessStreamChoice
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.n_channels_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.L_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.Dhyd_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.A_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.V_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.A_heat_prim
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.n_channels_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.L_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.Dhyd_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.A_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.V_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.A_heat_sec
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_prim.m_flow
 -1  1.0100000000000000E+05       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_prim.p_in
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.dp
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.p_out
 -1       0                       0                       0                
  1   281   # preprocessor.AirHeater.heatExchanger.init_prim.initFromEnthalpy
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.T_in
 -1       0                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_prim.dT
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.T_out
 -1  3.0000000000000000E+05       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_prim.h_in
 -1       0                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_prim.dh
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.h_out
  0  3.1755797113845990E-02       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.X[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.X[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.X[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.X[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.X[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.X[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.init_prim.X[7]
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.m_flow
 -1  1.0100000000000000E+05       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.p_in
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.init_sec.dp
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.init_sec.p_out
 -1       0                       0                       0                
  1   281   # preprocessor.AirHeater.heatExchanger.init_sec.initFromEnthalpy
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.heatExchanger.init_sec.T_in
 -1       0                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.dT
  0     300                       0                   10000                
  6   256   # preprocessor.AirHeater.heatExchanger.init_sec.T_out
 -1  3.0000000000000000E+05       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.h_in
 -1       0                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.dh
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.init_sec.h_out
 -1       0                       0                       1                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.X[1]
 -1       0                       0                       1                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.X[2]
 -1       0                       0                       1                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.X[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.X[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # preprocessor.AirHeater.heatExchanger.init_sec.X[5]
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.dp_smooth
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.mflow_smooth
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.from_dp_prim
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.positiveFlow_prim
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.generateEventForReversal_prim
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.from_dp_sec
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.positiveFlow_sec
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.generateEventForReversal_sec
  0       0                       0                       1                
  6   260   # preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # preprocessor.AirHeater.heatExchanger.portA_sec.X_outflow[5]
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.pprim_out
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.psec_out
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.C
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.Q_max
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_inflow.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_inflow.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAprim_outflow.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBprim_outflow.X[7]
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.TAsec_out
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.TBsec_out
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAsec_inflow.T
  0       0                       0                   10000                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBsec_inflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateBsec_inflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.stateAsec_outflow.X[5]
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.hprim_Tsec_in
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.hsec_Tprim_in
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAprim_in[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAprim_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAprim_in[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAprim_in[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAprim_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAprim_in[6]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAprim_in[7]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBprim_in[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBprim_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBprim_in[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBprim_in[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBprim_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBprim_in[6]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBprim_in[7]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xprim[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xprim[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xprim[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xprim[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xprim[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xprim[6]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xprim[7]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAsec_in[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAsec_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAsec_in[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAsec_in[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XAsec_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBsec_in[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBsec_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBsec_in[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBsec_in[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.XBsec_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xsec[1]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xsec[2]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xsec[3]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xsec[4]
  0       0                       0                       1                
  6  1280   # preprocessor.AirHeater.heatExchanger.Xsec[5]
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.CAprim
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.CBprim
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.CAsec
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.CBsec
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.Cprim
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.Csec
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.Cmin
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.Cmax
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.Q_max_prim
  0       0                       0                       0                
  6  1280   # preprocessor.AirHeater.heatExchanger.Q_max_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.A_heat
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.U
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.NTU
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.CF_HeatTransfer
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.CF_HeatTransfer_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.thickness_wall
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.heatFlowDynamics
  0       0                       0                       0                
  6   258   # preprocessor.AirHeater.heatExchanger.order
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.riseTime
  0     500                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.wall.c
  0    7880                       0                 1.0000000000000000E+100
  6   256   # preprocessor.AirHeater.heatExchanger.wall.rho
  0      21                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.wall.lambda
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_prim.A
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_prim.L
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_prim.Dhyd
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_prim.F_user
  0       1                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.htcoeff_prim.ht_from_isothermal
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_prim.CF_length
 -1    1000                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.htcoeff_prim.alpha
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.A
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.L
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.Dhyd
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.F_user
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateB.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.stateA_out.X[5]
  0       1                       0                       0                
  6   257   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.ht_from_isothermal
  0       1                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.CF_length
 -1     500                       0                       0                
  1   280   # preprocessor.AirHeater.heatExchanger.htcoeff_sec.alpha
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.kc_prim
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.kc_sec
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.heatExchanger.kc_wall
  0       0                       0                       0                
  6   256   # preprocessor.AirHeater.A_heat
 -1  2.0000000000000000E-03       0                       0                
  1   280   # preprocessor.AirHeater.thickness_wall
  0       0                       0                       0                
  6   257   # preprocessor.AirHeater.heatFlowDynamics
 -1       1                       0                       0                
  1   282   # preprocessor.AirHeater.order
 -1      10                       0                       0                
  1   280   # preprocessor.AirHeater.riseTime
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.feed_NG.h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # preprocessor.drain_NGHeat.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.drain_NGHeat.h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # preprocessor.feed_SteamHeat.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.feed_SteamHeat.h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # preprocessor.feed_ATRHeat.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.feed_ATRHeat.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.drain_ATRHeat.h_outflow
  0       1                       0                       1                
  6   260   # preprocessor.feed_Water.X_outflow[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.feed_ATRAir.h_outflow
  0       0                       0                       1                
  6   260   # preprocessor.feed_ATRAir.X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.feed_ATRAir.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.feed_ATRAir.X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # preprocessor.feed_ATRAir.X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # preprocessor.feed_ATRAir.X_outflow[5]
 -1  2.3999999999999998E-03       0                       0                
  1   280   # preprocessor.Geometry_Record.ATR_V_tot
 -1  1.0000000000000000E-03       0                       0                
  1   280   # preprocessor.Geometry_Record.ATR_m_flow_nom
 -1       5                       0                       0                
  1   280   # preprocessor.Geometry_Record.ATR_scale_cat
 -1  1.0000000000000000E-03       0                       0                
  1   280   # preprocessor.Geometry_Record.Steam_V_tot
 -1  1.0000000000000000E-03       0                       0                
  1   280   # preprocessor.Geometry_Record.Hotgas_V_tot
 -1  1.0000000000000000E-03       0                       0                
  1   280   # preprocessor.Geometry_Record.Hotgas_m_flow_nom
 -1  2.9999999999999999E-02       0                       0                
  1   280   # preprocessor.Geometry_Record.steamGen_Apipe
  0    1000                       0                       0                
  6   256   # preprocessor.Geometry_Record.steamGen_dp_nom_gas
 -1  5.0000000000000001E-04       0                       0                
  1   280   # preprocessor.Geometry_Record.steamGen_mflow_nom_gas
 -1  2.0000000000000000E-02       0                       0                
  1   280   # preprocessor.Geometry_Record.FuelHeat_m_flow_nom_prim
 -1  2.5000000000000001E-04       0                       0                
  1   280   # preprocessor.Geometry_Record.FuelHeat_m_flow_nom_sec
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.Geometry_Record.FuelHeat_length
 -1  1.0000000000000000E-02       0                       0                
  1   280   # preprocessor.Geometry_Record.FuelHeat_Dhyd
 -1  1.0000000000000000E-04       0                       0                
  1   280   # preprocessor.Geometry_Record.FuelHeat_Across
 -1  2.0000000000000000E-02       0                       0                
  1   280   # preprocessor.Geometry_Record.FuelHeat_Aheat
 -1     150                       0                       0                
  1   280   # preprocessor.Geometry_Record.FuelHeat_kc
 -1  5.0000000000000001E-04       0                       0                
  1   280   # preprocessor.Geometry_Record.AirHeat_m_flow_nom_prim
 -1  5.0000000000000001E-04       0                       0                
  1   280   # preprocessor.Geometry_Record.AirHeat_m_flow_nom_sec
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.Geometry_Record.AirHeat_length
 -1  1.0000000000000000E-02       0                       0                
  1   280   # preprocessor.Geometry_Record.AirHeat_Dhyd
 -1  1.0000000000000000E-04       0                       0                
  1   280   # preprocessor.Geometry_Record.AirHeat_Across
 -1  2.0000000000000000E-02       0                       0                
  1   280   # preprocessor.Geometry_Record.AirHeat_Aheat
 -1      55                       0                       0                
  1   280   # preprocessor.Geometry_Record.AirHeat_kc
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # preprocessor.Initialization_Record.Tstart
 -1  1.5450000000000000E+05       0                 1.0000000000000000E+100
  1   280   # preprocessor.Initialization_Record.ATR_pstart
 -1  1.5500000000000000E+05       0                 1.0000000000000000E+100
  1   280   # preprocessor.Initialization_Record.steamMix_pstart
 -1  5.9999999999999995E-04       0                       0                
  1   280   # preprocessor.Initialization_Record.steamMix_m_flow_start
 -1  1.0240000000000000E+05       0                 1.0000000000000000E+100
  1   280   # preprocessor.Initialization_Record.steamGen_pstart
 -1  1.2200000000000000E+05       0                       0                
  1   280   # preprocessor.Initialization_Record.FuelHeat_pstart_prim
 -1  1.5550000000000000E+05       0                       0                
  1   280   # preprocessor.Initialization_Record.FuelHeat_pstart_sec
 -1  1.5000000000000000E+05       0                       0                
  1   280   # preprocessor.Initialization_Record.AirHeat_pstart_prim
 -1  1.5500000000000000E+05       0                       0                
  1   280   # preprocessor.Initialization_Record.AirHeat_pstart_sec
  0       7                       0                       0                
  6   258   # preprocessor.summary.fuel_nS
  0       0                       0                       0                
  6   256   # preprocessor.summary.T_outlet
 -1       1                       1                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.n_channels_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.L_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.Dhyd_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.A_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.V_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.A_heat_prim
 -1       1                       1                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.n_channels_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.L_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.Dhyd_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.A_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.V_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.A_heat_sec
 -1      10                       0                       0                
  1   280   # preprocessor.FuelHeater.dp_smooth
 -1  1.0000000000000000E-04       0                       0                
  1   280   # preprocessor.FuelHeater.mflow_smooth
 -1       1                       0                       0                
  1   281   # preprocessor.FuelHeater.from_dp_prim
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.positiveFlow_prim
 -1       0                       0                       0                
  1   281   # preprocessor.FuelHeater.generateEventForReversal_prim
 -1       1                       0                       0                
  1   281   # preprocessor.FuelHeater.from_dp_sec
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.positiveFlow_sec
 -1       0                       0                       0                
  1   281   # preprocessor.FuelHeater.generateEventForReversal_sec
 -1     100                       0                       0                
  1   280   # preprocessor.FuelHeater.dp_prim_start
 -1  6.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.T_prim_start
 -1     100                       0                       0                
  1   280   # preprocessor.FuelHeater.dp_sec_start
 -1  6.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.T_sec_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.FuelHeater.feed_prim.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.FuelHeater.drain_sec.h_outflow
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.drain_sec.X_outflow[1]
  0  9.4698225749100662E-01       0                       1                
  6   260   # preprocessor.FuelHeater.drain_sec.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.drain_sec.X_outflow[3]
  0  5.3017742508993361E-02       0                       1                
  6   260   # preprocessor.FuelHeater.drain_sec.X_outflow[4]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.drain_sec.X_outflow[5]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.drain_sec.X_outflow[6]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.drain_sec.X_outflow[7]
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.Q_flow
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.summary.T_in
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.summary.T_out
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.h_in
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.h_out
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.dp
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.summary.T_sec_in
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.summary.T_sec_out
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.h_sec_in
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.h_sec_out
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.dp_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.Tpinch_prim_in
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.Tpinch_prim_out
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.lmtd
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.summary.effectiveness
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.A
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.n_channels
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_prim.lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_prim.flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_prim.dpFraction0
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.F_user
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.friction_prim.from_dp
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.friction_prim.positiveFlow
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.dp_smooth
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.mflow_smooth
 -1       0                       0                       0                
  1   281   # preprocessor.FuelHeater.heatExchanger.friction_prim.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_prim.reference_d
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.friction_prim.dp_from_isothermal
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_prim.d0
 -1     100                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_prim.dp0
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_prim.m_flow0
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.A
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.n_channels
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_sec.lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_sec.flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_sec.dpFraction0
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.F_user
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.friction_sec.from_dp
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.friction_sec.positiveFlow
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.dp_smooth
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.mflow_smooth
 -1       0                       0                       0                
  1   281   # preprocessor.FuelHeater.heatExchanger.friction_sec.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_sec.reference_d
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.friction_sec.dp_from_isothermal
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_sec.d0
 -1     100                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.friction_sec.dp0
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.friction_sec.m_flow0
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.CF_Friction
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.CF_Friction_sec
 -1       3                       1                       3                
  1   282   # preprocessor.FuelHeater.heatExchanger.effectivenessStreamChoice
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.n_channels_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.L_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.Dhyd_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.A_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.V_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.A_heat_prim
  0       1                       1                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.n_channels_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.L_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.Dhyd_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.A_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.V_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.A_heat_sec
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.m_flow
 -1  1.0100000000000000E+05       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.p_in
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_prim.dp
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_prim.p_out
 -1       0                       0                       0                
  1   281   # preprocessor.FuelHeater.heatExchanger.init_prim.initFromEnthalpy
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_prim.T_in
 -1       0                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.dT
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_prim.T_out
 -1  3.0000000000000000E+05       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.h_in
 -1       0                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.dh
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_prim.h_out
 -1       0                       0                       1                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.X[1]
 -1       0                       0                       1                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.X[2]
 -1       0                       0                       1                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.X[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.X[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_prim.X[5]
 -1  1.0000000000000001E-01       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_sec.m_flow
 -1  1.0100000000000000E+05       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_sec.p_in
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.dp
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.p_out
 -1       0                       0                       0                
  1   281   # preprocessor.FuelHeater.heatExchanger.init_sec.initFromEnthalpy
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.T_in
 -1       0                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_sec.dT
  0     300                       0                   10000                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.T_out
 -1  3.0000000000000000E+05       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_sec.h_in
 -1       0                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.init_sec.dh
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.h_out
  0  3.1755797113845990E-02       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.X[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.X[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.X[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.X[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.X[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.X[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # preprocessor.FuelHeater.heatExchanger.init_sec.X[7]
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.dp_smooth
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.mflow_smooth
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.from_dp_prim
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.positiveFlow_prim
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.generateEventForReversal_prim
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.from_dp_sec
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.positiveFlow_sec
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.generateEventForReversal_sec
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[1]
  0  9.4698225749100662E-01       0                       1                
  6   260   # preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[3]
  0  5.3017742508993361E-02       0                       1                
  6   260   # preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[4]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[5]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[6]
  0       0                       0                       1                
  6   260   # preprocessor.FuelHeater.heatExchanger.portB_sec.X_outflow[7]
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.pprim_out
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.psec_out
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.C
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.Q_max
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAprim_inflow.T
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBprim_inflow.T
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAprim_outflow.T
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBprim_outflow.T
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_inflow.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_inflow.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateAsec_outflow.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.p
  0       0                       0                   10000                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.T
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[6]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.stateBsec_outflow.X[7]
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.hprim_Tsec_in
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.hsec_Tprim_in
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAprim_in[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAprim_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAprim_in[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAprim_in[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAprim_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBprim_in[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBprim_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBprim_in[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBprim_in[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBprim_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xprim[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xprim[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xprim[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xprim[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xprim[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAsec_in[1]
  0  9.4698225749100662E-01       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAsec_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAsec_in[3]
  0  5.3017742508993361E-02       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAsec_in[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAsec_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAsec_in[6]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XAsec_in[7]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBsec_in[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBsec_in[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBsec_in[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBsec_in[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBsec_in[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBsec_in[6]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.XBsec_in[7]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xsec[1]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xsec[2]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xsec[3]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xsec[4]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xsec[5]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xsec[6]
  0       0                       0                       1                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Xsec[7]
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.CAprim
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.CBprim
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.CAsec
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.CBsec
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Cprim
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Csec
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Cmin
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Cmax
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Q_max_prim
  0       0                       0                       0                
  6  1280   # preprocessor.FuelHeater.heatExchanger.Q_max_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.A_heat
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.U
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.NTU
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.CF_HeatTransfer
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.CF_HeatTransfer_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.thickness_wall
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.heatFlowDynamics
  0       0                       0                       0                
  6   258   # preprocessor.FuelHeater.heatExchanger.order
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.riseTime
  0     500                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.wall.c
  0    7880                       0                 1.0000000000000000E+100
  6   256   # preprocessor.FuelHeater.heatExchanger.wall.rho
  0      21                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.wall.lambda
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_prim.A
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_prim.L
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_prim.Dhyd
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_prim.F_user
  0       1                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.htcoeff_prim.ht_from_isothermal
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_prim.CF_length
 -1     500                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.htcoeff_prim.alpha
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_sec.A
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_sec.L
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_sec.Dhyd
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_sec.F_user
  0       1                       0                       0                
  6   257   # preprocessor.FuelHeater.heatExchanger.htcoeff_sec.ht_from_isothermal
  0       1                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.htcoeff_sec.CF_length
 -1     500                       0                       0                
  1   280   # preprocessor.FuelHeater.heatExchanger.htcoeff_sec.alpha
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.kc_prim
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.kc_sec
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.heatExchanger.kc_wall
  0       0                       0                       0                
  6   256   # preprocessor.FuelHeater.A_heat
 -1  2.0000000000000000E-03       0                       0                
  1   280   # preprocessor.FuelHeater.thickness_wall
  0       0                       0                       0                
  6   257   # preprocessor.FuelHeater.heatFlowDynamics
 -1       1                       0                       0                
  1   282   # preprocessor.FuelHeater.order
 -1      10                       0                       0                
  1   280   # preprocessor.FuelHeater.riseTime
  0       0                       0                       0                
  6   256   # preprocessor.fuelLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.d
  0  2.8814999999999998E+02       0                   10000                
  6   256   # preprocessor.fuelLoss.T
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.X[7]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Xi[1]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Xi[2]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Xi[3]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Xi[4]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Xi[5]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Xi[6]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Xi[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.fuelLoss.medium.MM
 -1       2                       1                       2                
  1   282   # preprocessor.fuelLoss.medium.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.state.p
  0     300                       0                   10000                
  6   256   # preprocessor.fuelLoss.medium.state.T
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.state.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.state.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.state.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.state.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.state.X[7]
  0       0                       0                       0                
  6   257   # preprocessor.fuelLoss.medium.preferredMediumStates
  0       0                       0                       0                
  6   256   # preprocessor.fuelLoss.medium.T_degC
  0       0                       0                       0                
  6   256   # preprocessor.fuelLoss.medium.p_bar
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Z[5]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Z[6]
  0       0                       0                       1                
  6   256   # preprocessor.fuelLoss.medium.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.fuelLoss.medium.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.fuelLoss.medium.g_formation[7]
  0       0                       0                       0                
  6   256   # preprocessor.fuelLoss.medium.ddTp
  0       0                       0                       0                
  6   256   # preprocessor.fuelLoss.medium.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.fuelLoss.medium.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.fuelLoss.medium.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.medium.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.medium.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.medium.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.medium.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.medium.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.medium.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.fuelLoss.medium.ddx[7]
 -1       1                       0                 1.0000000000000000E+100
  1   280   # preprocessor.fuelLoss.d0
 -1     100                       0                       0                
  1   280   # preprocessor.fuelLoss.dp0
 -1  5.0000000000000001E-04       0                       0                
  1   280   # preprocessor.fuelLoss.m_flow0
  0       1                       0                       0                
  6   257   # preprocessor.fuelLoss.linearLoss
  0       0                       0                       0                
  6  1280   # preprocessor.fuelLoss.nonlinear
  0       0                       0                       0                
  6  1280   # preprocessor.fuelLoss.linear
 -1  1.0000000000000000E-02       0                       0                
  1  1304   # preprocessor.fuelLoss.limroot
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.X[1]
 -1       0                       0                       1                
  2   272   # preprocessor.gasMix.gas.X[2]
  0       0                       0                       0                
  3   256   # preprocessor.gasMix.gas.der(X[2])
 -1       0                       0                       1                
  2   272   # preprocessor.gasMix.gas.X[3]
  0       0                       0                       0                
  3   256   # preprocessor.gasMix.gas.der(X[3])
 -1  7.7000000000000002E-01       0                       1                
  2   272   # preprocessor.gasMix.gas.X[4]
  0       0                       0                       0                
  3   256   # preprocessor.gasMix.gas.der(X[4])
 -1  2.3000000000000001E-01       0                       1                
  2   272   # preprocessor.gasMix.gas.X[5]
  0       0                       0                       0                
  3   256   # preprocessor.gasMix.gas.der(X[5])
  0       0                       0                       0                
  6   256   # preprocessor.gasMix.gas.der(X[1])
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.gasMix.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.gasMix.gas.MM
 -1       2                       1                       2                
  1   282   # preprocessor.gasMix.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.state.p
  0     300                       0                   10000                
  6   256   # preprocessor.gasMix.gas.state.T
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.state.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.state.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.state.X[5]
  0       0                       0                       0                
  6   257   # preprocessor.gasMix.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # preprocessor.gasMix.gas.T_degC
  0       0                       0                       0                
  6   256   # preprocessor.gasMix.gas.p_bar
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.gasMix.gas.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.gasMix.gas.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.gasMix.gas.g_formation[5]
  0       0                       0                       0                
  6   256   # preprocessor.gasMix.gas.ddTp
  0       0                       0                       0                
  6   256   # preprocessor.gasMix.gas.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.gasMix.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.gasMix.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.gasMix.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.gasMix.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.gasMix.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.gasMix.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.gasMix.gas.ddx[5]
  0       1                       0                       0                
  6   258   # preprocessor.gasMix.N_feed
  0       1                       0                       0                
  6   258   # preprocessor.gasMix.N_drain
 -1  1.0000000000000000E-03       0                       0                
  1   280   # preprocessor.gasMix.V_tot
  0       1                       1                       5                
  6   258   # preprocessor.gasMix.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.Tstart
 -1       0                       0                       1                
  1   280   # preprocessor.gasMix.Xstart[1]
 -1       0                       0                       1                
  1   280   # preprocessor.gasMix.Xstart[2]
 -1       0                       0                       1                
  1   280   # preprocessor.gasMix.Xstart[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # preprocessor.gasMix.Xstart[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # preprocessor.gasMix.Xstart[5]
  0       0                       0                       0                
  6   257   # preprocessor.gasMix.positiveFlow
  0       0                       0                       0                
  6   257   # preprocessor.gasMix.QuasiStatic
 -1       0                       0                  1.0000000000000000E+08
  2   272   # preprocessor.gasMix.p
  0       0                       0                       0                
  3   256   # preprocessor.gasMix.der(p)
 -1       0                       0                   10000                
  2   272   # preprocessor.gasMix.T
  0       0                       0                       0                
  3   256   # preprocessor.gasMix.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.M
  0       0                       0                       0                
  6   256   # preprocessor.gasMix.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.MXi[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.MXi[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.MXi[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.MXi[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.gasMix.MXi[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # preprocessor.gasMix.feed[1].h_outflow
  0       0                       0                       0                
  6   388   # preprocessor.gasMix.q.Q_flow
  0       5                       0                       0                
  6  1282   # preprocessor.gasMix.nXi
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.hi[1]
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.ho[1]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_i[1, 1]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_i[1, 2]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_i[1, 3]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_i[1, 4]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_i[1, 5]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_o[1, 1]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_o[1, 2]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_o[1, 3]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_o[1, 4]
  0       0                       0                       1                
  6  1280   # preprocessor.gasMix.X_o[1, 5]
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.dM
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.dE
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.dMX[1]
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.dMX[2]
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.dMX[3]
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.dMX[4]
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.dMX[5]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.gasMix.ddx[1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.gasMix.ddx[2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.gasMix.ddx[3]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.gasMix.ddx[4]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.gasMix.ddx[5]
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.duTp
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.ddTp
  0       0                       0                       0                
  6  1280   # preprocessor.gasMix.ddpT
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.X[1]
 -1       0                       0                       1                
  2   272   # preprocessor.NGMix.gas.X[2]
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.gas.der(X[2])
 -1       0                       0                       1                
  2   272   # preprocessor.NGMix.gas.X[3]
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.gas.der(X[3])
 -1       0                       0                       1                
  2   272   # preprocessor.NGMix.gas.X[4]
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.gas.der(X[4])
 -1       0                       0                       1                
  2   272   # preprocessor.NGMix.gas.X[5]
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.gas.der(X[5])
 -1       0                       0                       1                
  2   272   # preprocessor.NGMix.gas.X[6]
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.gas.der(X[6])
 -1       0                       0                       1                
  2   272   # preprocessor.NGMix.gas.X[7]
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.gas.der(X[7])
  0       0                       0                       0                
  6   256   # preprocessor.NGMix.gas.der(X[1])
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Xi[1]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Xi[2]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Xi[3]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Xi[4]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Xi[5]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Xi[6]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.NGMix.gas.MM
 -1       2                       1                       2                
  1   282   # preprocessor.NGMix.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.state.p
  0     300                       0                   10000                
  6   256   # preprocessor.NGMix.gas.state.T
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.state.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.state.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.state.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.state.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.state.X[7]
  0       0                       0                       0                
  6   257   # preprocessor.NGMix.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # preprocessor.NGMix.gas.T_degC
  0       0                       0                       0                
  6   256   # preprocessor.NGMix.gas.p_bar
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Z[5]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Z[6]
  0       0                       0                       1                
  6   256   # preprocessor.NGMix.gas.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGMix.gas.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGMix.gas.g_formation[7]
  0       0                       0                       0                
  6   256   # preprocessor.NGMix.gas.ddTp
  0       0                       0                       0                
  6   256   # preprocessor.NGMix.gas.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.NGMix.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.NGMix.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGMix.gas.ddx[7]
  0       1                       0                       0                
  6   258   # preprocessor.NGMix.N_feed
  0       1                       0                       0                
  6   258   # preprocessor.NGMix.N_drain
 -1  1.0000000000000000E-03       0                       0                
  1   280   # preprocessor.NGMix.V_tot
  0       1                       1                       5                
  6   258   # preprocessor.NGMix.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.Tstart
 -1       1                       0                       1                
  1   280   # preprocessor.NGMix.Xstart[1]
 -1       0                       0                       1                
  1   280   # preprocessor.NGMix.Xstart[2]
 -1       0                       0                       1                
  1   280   # preprocessor.NGMix.Xstart[3]
 -1       0                       0                       1                
  1   280   # preprocessor.NGMix.Xstart[4]
 -1       0                       0                       1                
  1   280   # preprocessor.NGMix.Xstart[5]
 -1       0                       0                       1                
  1   280   # preprocessor.NGMix.Xstart[6]
 -1       0                       0                       1                
  1   280   # preprocessor.NGMix.Xstart[7]
  0       0                       0                       0                
  6   257   # preprocessor.NGMix.positiveFlow
  0       0                       0                       0                
  6   257   # preprocessor.NGMix.QuasiStatic
 -1       0                       0                  1.0000000000000000E+08
  2   272   # preprocessor.NGMix.p
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.der(p)
 -1       0                       0                   10000                
  2   272   # preprocessor.NGMix.T
  0       0                       0                       0                
  3   256   # preprocessor.NGMix.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.M
  0       0                       0                       0                
  6   256   # preprocessor.NGMix.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.MXi[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.MXi[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.MXi[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.MXi[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.MXi[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.MXi[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # preprocessor.NGMix.MXi[7]
  0       0                       0                       1                
  6   260   # preprocessor.NGMix.drain[1].X_outflow[1]
  0       0                       0                       1                
  6   260   # preprocessor.NGMix.drain[1].X_outflow[2]
  0       0                       0                       1                
  6   260   # preprocessor.NGMix.drain[1].X_outflow[3]
  0       0                       0                       1                
  6   260   # preprocessor.NGMix.drain[1].X_outflow[4]
  0       0                       0                       1                
  6   260   # preprocessor.NGMix.drain[1].X_outflow[5]
  0       0                       0                       1                
  6   260   # preprocessor.NGMix.drain[1].X_outflow[6]
  0       0                       0                       1                
  6   260   # preprocessor.NGMix.drain[1].X_outflow[7]
  0       0                       0                       0                
  6   388   # preprocessor.NGMix.q.Q_flow
  0       7                       0                       0                
  6  1282   # preprocessor.NGMix.nXi
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.hi[1]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.ho[1]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_i[1, 1]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_i[1, 2]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_i[1, 3]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_i[1, 4]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_i[1, 5]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_i[1, 6]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_i[1, 7]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_o[1, 1]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_o[1, 2]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_o[1, 3]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_o[1, 4]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_o[1, 5]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_o[1, 6]
  0       0                       0                       1                
  6  1280   # preprocessor.NGMix.X_o[1, 7]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dM
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dE
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dMX[1]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dMX[2]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dMX[3]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dMX[4]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dMX[5]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dMX[6]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.dMX[7]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.NGMix.ddx[1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.NGMix.ddx[2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.NGMix.ddx[3]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.NGMix.ddx[4]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.NGMix.ddx[5]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.NGMix.ddx[6]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # preprocessor.NGMix.ddx[7]
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.duTp
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.ddTp
  0       0                       0                       0                
  6  1280   # preprocessor.NGMix.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.NGLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.d
  0  2.8814999999999998E+02       0                   10000                
  6   256   # preprocessor.NGLoss.T
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.X[7]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Xi[1]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Xi[2]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Xi[3]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Xi[4]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Xi[5]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Xi[6]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Xi[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # preprocessor.NGLoss.medium.MM
 -1       2                       1                       2                
  1   282   # preprocessor.NGLoss.medium.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.state.p
  0     300                       0                   10000                
  6   256   # preprocessor.NGLoss.medium.state.T
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.state.X[1]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.state.X[2]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.state.X[3]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.state.X[4]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.state.X[5]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.state.X[6]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.state.X[7]
  0       0                       0                       0                
  6   257   # preprocessor.NGLoss.medium.preferredMediumStates
  0       0                       0                       0                
  6   256   # preprocessor.NGLoss.medium.T_degC
  0       0                       0                       0                
  6   256   # preprocessor.NGLoss.medium.p_bar
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Z[1]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Z[2]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Z[3]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Z[4]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Z[5]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Z[6]
  0       0                       0                       1                
  6   256   # preprocessor.NGLoss.medium.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # preprocessor.NGLoss.medium.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # preprocessor.NGLoss.medium.g_formation[7]
  0       0                       0                       0                
  6   256   # preprocessor.NGLoss.medium.ddTp
  0       0                       0                       0                
  6   256   # preprocessor.NGLoss.medium.ddpT
  0       0                       0                       0                
  6   256   # preprocessor.NGLoss.medium.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # preprocessor.NGLoss.medium.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.medium.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.medium.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.medium.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.medium.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.medium.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.medium.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # preprocessor.NGLoss.medium.ddx[7]
 -1       1                       0                 1.0000000000000000E+100
  1   280   # preprocessor.NGLoss.d0
 -1     100                       0                       0                
  1   280   # preprocessor.NGLoss.dp0
 -1  2.0000000000000001E-04       0                       0                
  1   280   # preprocessor.NGLoss.m_flow0
  0       1                       0                       0                
  6   257   # preprocessor.NGLoss.linearLoss
  0       0                       0                       0                
  6  1280   # preprocessor.NGLoss.nonlinear
  0       0                       0                       0                
  6  1280   # preprocessor.NGLoss.linear
 -1  1.0000000000000000E-02       0                       0                
  1  1304   # preprocessor.NGLoss.limroot
  0       0                       0                       1                
  6   260   # anLoss.drain.X_outflow[1]
  0       0                       0                       1                
  6   260   # anLoss.drain.X_outflow[2]
  0       0                       0                       1                
  6   260   # anLoss.drain.X_outflow[3]
  0       0                       0                       1                
  6   260   # anLoss.drain.X_outflow[4]
  0       0                       0                       1                
  6   260   # anLoss.drain.X_outflow[5]
  0       0                       0                       1                
  6   260   # anLoss.drain.X_outflow[6]
  0       0                       0                       1                
  6   260   # anLoss.drain.X_outflow[7]
  0       0                       0                       0                
  6   256   # anLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.d
  0  2.8814999999999998E+02       0                   10000                
  6   256   # anLoss.T
  0       0                       0                       1                
  6   256   # anLoss.medium.X[1]
  0       0                       0                       1                
  6   256   # anLoss.medium.X[2]
  0       0                       0                       1                
  6   256   # anLoss.medium.X[3]
  0       0                       0                       1                
  6   256   # anLoss.medium.X[4]
  0       0                       0                       1                
  6   256   # anLoss.medium.X[5]
  0       0                       0                       1                
  6   256   # anLoss.medium.X[6]
  0       0                       0                       1                
  6   256   # anLoss.medium.X[7]
  0       0                       0                       1                
  6   256   # anLoss.medium.Xi[1]
  0       0                       0                       1                
  6   256   # anLoss.medium.Xi[2]
  0       0                       0                       1                
  6   256   # anLoss.medium.Xi[3]
  0       0                       0                       1                
  6   256   # anLoss.medium.Xi[4]
  0       0                       0                       1                
  6   256   # anLoss.medium.Xi[5]
  0       0                       0                       1                
  6   256   # anLoss.medium.Xi[6]
  0       0                       0                       1                
  6   256   # anLoss.medium.Xi[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # anLoss.medium.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # anLoss.medium.MM
 -1       2                       1                       2                
  1   282   # anLoss.medium.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # anLoss.medium.state.p
  0     300                       0                   10000                
  6   256   # anLoss.medium.state.T
  0       0                       0                       1                
  6   256   # anLoss.medium.state.X[1]
  0       0                       0                       1                
  6   256   # anLoss.medium.state.X[2]
  0       0                       0                       1                
  6   256   # anLoss.medium.state.X[3]
  0       0                       0                       1                
  6   256   # anLoss.medium.state.X[4]
  0       0                       0                       1                
  6   256   # anLoss.medium.state.X[5]
  0       0                       0                       1                
  6   256   # anLoss.medium.state.X[6]
  0       0                       0                       1                
  6   256   # anLoss.medium.state.X[7]
  0       0                       0                       0                
  6   257   # anLoss.medium.preferredMediumStates
  0       0                       0                       0                
  6   256   # anLoss.medium.T_degC
  0       0                       0                       0                
  6   256   # anLoss.medium.p_bar
  0       0                       0                       1                
  6   256   # anLoss.medium.Z[1]
  0       0                       0                       1                
  6   256   # anLoss.medium.Z[2]
  0       0                       0                       1                
  6   256   # anLoss.medium.Z[3]
  0       0                       0                       1                
  6   256   # anLoss.medium.Z[4]
  0       0                       0                       1                
  6   256   # anLoss.medium.Z[5]
  0       0                       0                       1                
  6   256   # anLoss.medium.Z[6]
  0       0                       0                       1                
  6   256   # anLoss.medium.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anLoss.medium.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anLoss.medium.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anLoss.medium.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anLoss.medium.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anLoss.medium.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anLoss.medium.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anLoss.medium.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anLoss.medium.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # anLoss.medium.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anLoss.medium.g_formation[7]
  0       0                       0                       0                
  6   256   # anLoss.medium.ddTp
  0       0                       0                       0                
  6   256   # anLoss.medium.ddpT
  0       0                       0                       0                
  6   256   # anLoss.medium.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # anLoss.medium.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.medium.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.medium.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.medium.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.medium.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.medium.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.medium.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anLoss.medium.ddx[7]
 -1       1                       0                 1.0000000000000000E+100
  1   280   # anLoss.d0
 -1     100                       0                       0                
  1   280   # anLoss.dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # anLoss.m_flow0
  0       1                       0                       0                
  6   257   # anLoss.linearLoss
  0       0                       0                       0                
  6  1280   # anLoss.nonlinear
  0       0                       0                       0                
  6  1280   # anLoss.linear
 -1  1.0000000000000000E-02       0                       0                
  1  1304   # anLoss.limroot
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # exhaustLoss.drain.h_outflow
  0       0                       0                       1                
  6   260   # exhaustLoss.drain.X_outflow[1]
  0       0                       0                       1                
  6   260   # exhaustLoss.drain.X_outflow[2]
  0       0                       0                       1                
  6   260   # exhaustLoss.drain.X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # exhaustLoss.drain.X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # exhaustLoss.drain.X_outflow[5]
  0       0                       0                       0                
  6   256   # exhaustLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhaustLoss.d
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.X[1]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.X[2]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # exhaustLoss.medium.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # exhaustLoss.medium.X[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # exhaustLoss.medium.MM
 -1       2                       1                       2                
  1   282   # exhaustLoss.medium.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.state.p
  0     300                       0                   10000                
  6   256   # exhaustLoss.medium.state.T
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.state.X[1]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.state.X[2]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.state.X[3]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.state.X[4]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.state.X[5]
  0       0                       0                       0                
  6   257   # exhaustLoss.medium.preferredMediumStates
  0       0                       0                       0                
  6   256   # exhaustLoss.medium.T_degC
  0       0                       0                       0                
  6   256   # exhaustLoss.medium.p_bar
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.Z[1]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.Z[2]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.Z[3]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.Z[4]
  0       0                       0                       1                
  6   256   # exhaustLoss.medium.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhaustLoss.medium.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhaustLoss.medium.g_formation[5]
  0       0                       0                       0                
  6   256   # exhaustLoss.medium.ddTp
  0       0                       0                       0                
  6   256   # exhaustLoss.medium.ddpT
  0       0                       0                       0                
  6   256   # exhaustLoss.medium.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # exhaustLoss.medium.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhaustLoss.medium.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhaustLoss.medium.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhaustLoss.medium.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhaustLoss.medium.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhaustLoss.medium.ddx[5]
 -1       1                       0                 1.0000000000000000E+100
  1   280   # exhaustLoss.d0
 -1     100                       0                       0                
  1   280   # exhaustLoss.dp0
 -1  1.0000000000000000E-02       0                       0                
  1   280   # exhaustLoss.m_flow0
  0       1                       0                       0                
  6   257   # exhaustLoss.linearLoss
  0       0                       0                       0                
  6  1280   # exhaustLoss.nonlinear
  0       0                       0                       0                
  6  1280   # exhaustLoss.linear
 -1  1.0000000000000000E-02       0                       0                
  1  1304   # exhaustLoss.limroot
  0       0                       0                       1                
  6   256   # exhVol.gas.X[1]
 -1       0                       0                       1                
  2   280   # exhVol.gas.X[2]
  0       0                       0                       0                
  3   256   # exhVol.gas.der(X[2])
 -1       0                       0                       1                
  2   280   # exhVol.gas.X[3]
  0       0                       0                       0                
  3   256   # exhVol.gas.der(X[3])
 -1  7.7000000000000002E-01       0                       1                
  2   280   # exhVol.gas.X[4]
  0       0                       0                       0                
  3   256   # exhVol.gas.der(X[4])
 -1  2.3000000000000001E-01       0                       1                
  2   280   # exhVol.gas.X[5]
  0       0                       0                       0                
  3   256   # exhVol.gas.der(X[5])
  0       0                       0                       0                
  6   256   # exhVol.gas.der(X[1])
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhVol.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # exhVol.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # exhVol.gas.MM
 -1       2                       1                       2                
  1   282   # exhVol.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # exhVol.gas.state.p
  0     300                       0                   10000                
  6   256   # exhVol.gas.state.T
  0       0                       0                       1                
  6   256   # exhVol.gas.state.X[1]
  0       0                       0                       1                
  6   256   # exhVol.gas.state.X[2]
  0       0                       0                       1                
  6   256   # exhVol.gas.state.X[3]
  0       0                       0                       1                
  6   256   # exhVol.gas.state.X[4]
  0       0                       0                       1                
  6   256   # exhVol.gas.state.X[5]
  0       0                       0                       0                
  6   257   # exhVol.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # exhVol.gas.T_degC
  0       0                       0                       0                
  6   256   # exhVol.gas.p_bar
  0       0                       0                       1                
  6   256   # exhVol.gas.Z[1]
  0       0                       0                       1                
  6   256   # exhVol.gas.Z[2]
  0       0                       0                       1                
  6   256   # exhVol.gas.Z[3]
  0       0                       0                       1                
  6   256   # exhVol.gas.Z[4]
  0       0                       0                       1                
  6   256   # exhVol.gas.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhVol.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhVol.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhVol.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhVol.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # exhVol.gas.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # exhVol.gas.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # exhVol.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # exhVol.gas.g_formation[5]
  0       0                       0                       0                
  6   256   # exhVol.gas.ddTp
  0       0                       0                       0                
  6   256   # exhVol.gas.ddpT
  0       0                       0                       0                
  6   256   # exhVol.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # exhVol.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhVol.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhVol.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhVol.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhVol.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # exhVol.gas.ddx[5]
  0       1                       0                       0                
  6   258   # exhVol.N_feed
  0       1                       0                       0                
  6   258   # exhVol.N_drain
 -1  1.0000000000000000E-03       0                       0                
  1   280   # exhVol.V_tot
  0       5                       1                       5                
  6   258   # exhVol.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # exhVol.pstart
 -1  7.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # exhVol.Tstart
 -1       0                       0                       1                
  1   280   # exhVol.Xstart[1]
 -1       0                       0                       1                
  1   280   # exhVol.Xstart[2]
 -1       0                       0                       1                
  1   280   # exhVol.Xstart[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # exhVol.Xstart[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # exhVol.Xstart[5]
  0       0                       0                       0                
  6   257   # exhVol.positiveFlow
  0       0                       0                       0                
  6   257   # exhVol.QuasiStatic
 -1       0                       0                  1.0000000000000000E+08
  2   272   # exhVol.p
  0       0                       0                       0                
  3   256   # exhVol.der(p)
 -1       0                       0                   10000                
  2   272   # exhVol.T
  0       0                       0                       0                
  3   256   # exhVol.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # exhVol.M
  0       0                       0                       0                
  6   256   # exhVol.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # exhVol.MXi[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # exhVol.MXi[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # exhVol.MXi[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # exhVol.MXi[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # exhVol.MXi[5]
  0       0                       0                       1                
  6   260   # exhVol.drain[1].X_outflow[1]
  0       0                       0                       1                
  6   260   # exhVol.drain[1].X_outflow[2]
  0       0                       0                       1                
  6   260   # exhVol.drain[1].X_outflow[3]
  0       0                       0                       1                
  6   260   # exhVol.drain[1].X_outflow[4]
  0       0                       0                       1                
  6   260   # exhVol.drain[1].X_outflow[5]
  0       0                       0                       0                
  6   388   # exhVol.q.Q_flow
  0       5                       0                       0                
  6  1282   # exhVol.nXi
  0       0                       0                       0                
  6  1280   # exhVol.hi[1]
  0       0                       0                       0                
  6  1280   # exhVol.ho[1]
  0       0                       0                       1                
  6  1280   # exhVol.X_i[1, 1]
  0       0                       0                       1                
  6  1280   # exhVol.X_i[1, 2]
  0       0                       0                       1                
  6  1280   # exhVol.X_i[1, 3]
  0       0                       0                       1                
  6  1280   # exhVol.X_i[1, 4]
  0       0                       0                       1                
  6  1280   # exhVol.X_i[1, 5]
  0       0                       0                       1                
  6  1280   # exhVol.X_o[1, 1]
  0       0                       0                       1                
  6  1280   # exhVol.X_o[1, 2]
  0       0                       0                       1                
  6  1280   # exhVol.X_o[1, 3]
  0       0                       0                       1                
  6  1280   # exhVol.X_o[1, 4]
  0       0                       0                       1                
  6  1280   # exhVol.X_o[1, 5]
  0       0                       0                       0                
  6  1280   # exhVol.dM
  0       0                       0                       0                
  6  1280   # exhVol.dE
  0       0                       0                       0                
  6  1280   # exhVol.dMX[1]
  0       0                       0                       0                
  6  1280   # exhVol.dMX[2]
  0       0                       0                       0                
  6  1280   # exhVol.dMX[3]
  0       0                       0                       0                
  6  1280   # exhVol.dMX[4]
  0       0                       0                       0                
  6  1280   # exhVol.dMX[5]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # exhVol.ddx[1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # exhVol.ddx[2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # exhVol.ddx[3]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # exhVol.ddx[4]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # exhVol.ddx[5]
  0       0                       0                       0                
  6  1280   # exhVol.duTp
  0       0                       0                       0                
  6  1280   # exhVol.ddTp
  0       0                       0                       0                
  6  1280   # exhVol.ddpT
  0       0                       0                       1                
  6   256   # anVolume.gas.X[1]
 -1       0                       0                       1                
  2   272   # anVolume.gas.X[2]
  0       0                       0                       0                
  3   256   # anVolume.gas.der(X[2])
 -1       0                       0                       1                
  2   272   # anVolume.gas.X[3]
  0       0                       0                       0                
  3   256   # anVolume.gas.der(X[3])
 -1       0                       0                       1                
  2   272   # anVolume.gas.X[4]
  0       0                       0                       0                
  3   256   # anVolume.gas.der(X[4])
 -1       0                       0                       1                
  2   272   # anVolume.gas.X[5]
  0       0                       0                       0                
  3   256   # anVolume.gas.der(X[5])
 -1       0                       0                       1                
  2   272   # anVolume.gas.X[6]
  0       0                       0                       0                
  3   256   # anVolume.gas.der(X[6])
 -1       0                       0                       1                
  2   272   # anVolume.gas.X[7]
  0       0                       0                       0                
  3   256   # anVolume.gas.der(X[7])
  0       0                       0                       0                
  6   256   # anVolume.gas.der(X[1])
  0       0                       0                       1                
  6   256   # anVolume.gas.Xi[1]
  0       0                       0                       1                
  6   256   # anVolume.gas.Xi[2]
  0       0                       0                       1                
  6   256   # anVolume.gas.Xi[3]
  0       0                       0                       1                
  6   256   # anVolume.gas.Xi[4]
  0       0                       0                       1                
  6   256   # anVolume.gas.Xi[5]
  0       0                       0                       1                
  6   256   # anVolume.gas.Xi[6]
  0       0                       0                       1                
  6   256   # anVolume.gas.Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # anVolume.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # anVolume.gas.MM
 -1       2                       1                       2                
  1   282   # anVolume.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # anVolume.gas.state.p
  0     300                       0                   10000                
  6   256   # anVolume.gas.state.T
  0       0                       0                       1                
  6   256   # anVolume.gas.state.X[1]
  0       0                       0                       1                
  6   256   # anVolume.gas.state.X[2]
  0       0                       0                       1                
  6   256   # anVolume.gas.state.X[3]
  0       0                       0                       1                
  6   256   # anVolume.gas.state.X[4]
  0       0                       0                       1                
  6   256   # anVolume.gas.state.X[5]
  0       0                       0                       1                
  6   256   # anVolume.gas.state.X[6]
  0       0                       0                       1                
  6   256   # anVolume.gas.state.X[7]
  0       0                       0                       0                
  6   257   # anVolume.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # anVolume.gas.T_degC
  0       0                       0                       0                
  6   256   # anVolume.gas.p_bar
  0       0                       0                       1                
  6   256   # anVolume.gas.Z[1]
  0       0                       0                       1                
  6   256   # anVolume.gas.Z[2]
  0       0                       0                       1                
  6   256   # anVolume.gas.Z[3]
  0       0                       0                       1                
  6   256   # anVolume.gas.Z[4]
  0       0                       0                       1                
  6   256   # anVolume.gas.Z[5]
  0       0                       0                       1                
  6   256   # anVolume.gas.Z[6]
  0       0                       0                       1                
  6   256   # anVolume.gas.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anVolume.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anVolume.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anVolume.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anVolume.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anVolume.gas.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anVolume.gas.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # anVolume.gas.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # anVolume.gas.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # anVolume.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # anVolume.gas.g_formation[7]
  0       0                       0                       0                
  6   256   # anVolume.gas.ddTp
  0       0                       0                       0                
  6   256   # anVolume.gas.ddpT
  0       0                       0                       0                
  6   256   # anVolume.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # anVolume.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # anVolume.gas.ddx[7]
  0       1                       0                       0                
  6   258   # anVolume.N_feed
  0       1                       0                       0                
  6   258   # anVolume.N_drain
 -1  1.0000000000000000E-03       0                       0                
  1   280   # anVolume.V_tot
  0       1                       1                       5                
  6   258   # anVolume.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.pstart
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # anVolume.Tstart
 -1  5.0000000000000000E-01       0                       1                
  1   280   # anVolume.Xstart[1]
 -1  4.0000000000000002E-01       0                       1                
  1   280   # anVolume.Xstart[2]
 -1       0                       0                       1                
  1   280   # anVolume.Xstart[3]
 -1       0                       0                       1                
  1   280   # anVolume.Xstart[4]
 -1  1.0000000000000001E-01       0                       1                
  1   280   # anVolume.Xstart[5]
 -1       0                       0                       1                
  1   280   # anVolume.Xstart[6]
 -1       0                       0                       1                
  1   280   # anVolume.Xstart[7]
  0       0                       0                       0                
  6   257   # anVolume.positiveFlow
  0       0                       0                       0                
  6   257   # anVolume.QuasiStatic
 -1       0                       0                  1.0000000000000000E+08
  2   272   # anVolume.p
  0       0                       0                       0                
  3   256   # anVolume.der(p)
 -1       0                       0                   10000                
  2   272   # anVolume.T
  0       0                       0                       0                
  3   256   # anVolume.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.M
  0       0                       0                       0                
  6   256   # anVolume.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.MXi[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.MXi[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.MXi[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.MXi[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.MXi[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.MXi[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # anVolume.MXi[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # anVolume.feed[1].h_outflow
  0       0                       0                       1                
  6   260   # anVolume.drain[1].X_outflow[1]
  0       0                       0                       1                
  6   260   # anVolume.drain[1].X_outflow[2]
  0       0                       0                       1                
  6   260   # anVolume.drain[1].X_outflow[3]
  0       0                       0                       1                
  6   260   # anVolume.drain[1].X_outflow[4]
  0       0                       0                       1                
  6   260   # anVolume.drain[1].X_outflow[5]
  0       0                       0                       1                
  6   260   # anVolume.drain[1].X_outflow[6]
  0       0                       0                       1                
  6   260   # anVolume.drain[1].X_outflow[7]
  0       0                       0                       0                
  6   388   # anVolume.q.Q_flow
  0       7                       0                       0                
  6  1282   # anVolume.nXi
  0       0                       0                       0                
  6  1280   # anVolume.hi[1]
  0       0                       0                       0                
  6  1280   # anVolume.ho[1]
  0       0                       0                       1                
  6  1280   # anVolume.X_i[1, 1]
  0       0                       0                       1                
  6  1280   # anVolume.X_i[1, 2]
  0       0                       0                       1                
  6  1280   # anVolume.X_i[1, 3]
  0       0                       0                       1                
  6  1280   # anVolume.X_i[1, 4]
  0       0                       0                       1                
  6  1280   # anVolume.X_i[1, 5]
  0       0                       0                       1                
  6  1280   # anVolume.X_i[1, 6]
  0       0                       0                       1                
  6  1280   # anVolume.X_i[1, 7]
  0       0                       0                       1                
  6  1280   # anVolume.X_o[1, 1]
  0       0                       0                       1                
  6  1280   # anVolume.X_o[1, 2]
  0       0                       0                       1                
  6  1280   # anVolume.X_o[1, 3]
  0       0                       0                       1                
  6  1280   # anVolume.X_o[1, 4]
  0       0                       0                       1                
  6  1280   # anVolume.X_o[1, 5]
  0       0                       0                       1                
  6  1280   # anVolume.X_o[1, 6]
  0       0                       0                       1                
  6  1280   # anVolume.X_o[1, 7]
  0       0                       0                       0                
  6  1280   # anVolume.dM
  0       0                       0                       0                
  6  1280   # anVolume.dE
  0       0                       0                       0                
  6  1280   # anVolume.dMX[1]
  0       0                       0                       0                
  6  1280   # anVolume.dMX[2]
  0       0                       0                       0                
  6  1280   # anVolume.dMX[3]
  0       0                       0                       0                
  6  1280   # anVolume.dMX[4]
  0       0                       0                       0                
  6  1280   # anVolume.dMX[5]
  0       0                       0                       0                
  6  1280   # anVolume.dMX[6]
  0       0                       0                       0                
  6  1280   # anVolume.dMX[7]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # anVolume.ddx[1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # anVolume.ddx[2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # anVolume.ddx[3]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # anVolume.ddx[4]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # anVolume.ddx[5]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # anVolume.ddx[6]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # anVolume.ddx[7]
  0       0                       0                       0                
  6  1280   # anVolume.duTp
  0       0                       0                       0                
  6  1280   # anVolume.ddTp
  0       0                       0                       0                
  6  1280   # anVolume.ddpT
  0       0                       0                       1                
  6   256   # cathVolume.gas.X[1]
 -1       0                       0                       1                
  2   280   # cathVolume.gas.X[2]
  0       0                       0                       0                
  3   256   # cathVolume.gas.der(X[2])
 -1       0                       0                       1                
  2   280   # cathVolume.gas.X[3]
  0       0                       0                       0                
  3   256   # cathVolume.gas.der(X[3])
 -1  7.7000000000000002E-01       0                       1                
  2   280   # cathVolume.gas.X[4]
  0       0                       0                       0                
  3   256   # cathVolume.gas.der(X[4])
 -1  2.3000000000000001E-01       0                       1                
  2   280   # cathVolume.gas.X[5]
  0       0                       0                       0                
  3   256   # cathVolume.gas.der(X[5])
  0       0                       0                       0                
  6   256   # cathVolume.gas.der(X[1])
  0       1                  1.0000000000000000E-08  100000                
  6   256   # cathVolume.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # cathVolume.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # cathVolume.gas.MM
 -1       2                       1                       2                
  1   282   # cathVolume.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # cathVolume.gas.state.p
  0     300                       0                   10000                
  6   256   # cathVolume.gas.state.T
  0       0                       0                       1                
  6   256   # cathVolume.gas.state.X[1]
  0       0                       0                       1                
  6   256   # cathVolume.gas.state.X[2]
  0       0                       0                       1                
  6   256   # cathVolume.gas.state.X[3]
  0       0                       0                       1                
  6   256   # cathVolume.gas.state.X[4]
  0       0                       0                       1                
  6   256   # cathVolume.gas.state.X[5]
  0       0                       0                       0                
  6   257   # cathVolume.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # cathVolume.gas.T_degC
  0       0                       0                       0                
  6   256   # cathVolume.gas.p_bar
  0       0                       0                       1                
  6   256   # cathVolume.gas.Z[1]
  0       0                       0                       1                
  6   256   # cathVolume.gas.Z[2]
  0       0                       0                       1                
  6   256   # cathVolume.gas.Z[3]
  0       0                       0                       1                
  6   256   # cathVolume.gas.Z[4]
  0       0                       0                       1                
  6   256   # cathVolume.gas.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # cathVolume.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # cathVolume.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # cathVolume.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # cathVolume.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # cathVolume.gas.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # cathVolume.gas.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # cathVolume.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # cathVolume.gas.g_formation[5]
  0       0                       0                       0                
  6   256   # cathVolume.gas.ddTp
  0       0                       0                       0                
  6   256   # cathVolume.gas.ddpT
  0       0                       0                       0                
  6   256   # cathVolume.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # cathVolume.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # cathVolume.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # cathVolume.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # cathVolume.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # cathVolume.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # cathVolume.gas.ddx[5]
  0       1                       0                       0                
  6   258   # cathVolume.N_feed
  0       1                       0                       0                
  6   258   # cathVolume.N_drain
 -1  1.0000000000000000E-03       0                       0                
  1   280   # cathVolume.V_tot
  0       5                       1                       5                
  6   258   # cathVolume.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # cathVolume.pstart
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # cathVolume.Tstart
 -1       0                       0                       1                
  1   280   # cathVolume.Xstart[1]
 -1       0                       0                       1                
  1   280   # cathVolume.Xstart[2]
 -1       0                       0                       1                
  1   280   # cathVolume.Xstart[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # cathVolume.Xstart[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # cathVolume.Xstart[5]
  0       0                       0                       0                
  6   257   # cathVolume.positiveFlow
  0       0                       0                       0                
  6   257   # cathVolume.QuasiStatic
 -1       0                       0                  1.0000000000000000E+08
  2   272   # cathVolume.p
  0       0                       0                       0                
  3   256   # cathVolume.der(p)
 -1       0                       0                   10000                
  2   272   # cathVolume.T
  0       0                       0                       0                
  3   256   # cathVolume.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # cathVolume.M
  0       0                       0                       0                
  6   256   # cathVolume.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # cathVolume.MXi[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # cathVolume.MXi[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # cathVolume.MXi[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # cathVolume.MXi[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # cathVolume.MXi[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # cathVolume.feed[1].h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # cathVolume.drain[1].m_flow
  0       0                       0                       1                
  6   260   # cathVolume.drain[1].X_outflow[1]
  0       0                       0                       1                
  6   260   # cathVolume.drain[1].X_outflow[2]
  0       0                       0                       1                
  6   260   # cathVolume.drain[1].X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # cathVolume.drain[1].X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # cathVolume.drain[1].X_outflow[5]
  0       0                       0                       0                
  6   388   # cathVolume.q.Q_flow
  0       5                       0                       0                
  6  1282   # cathVolume.nXi
  0       0                       0                       0                
  6  1280   # cathVolume.hi[1]
  0       0                       0                       0                
  6  1280   # cathVolume.ho[1]
  0       0                       0                       1                
  6  1280   # cathVolume.X_i[1, 1]
  0       0                       0                       1                
  6  1280   # cathVolume.X_i[1, 2]
  0       0                       0                       1                
  6  1280   # cathVolume.X_i[1, 3]
  0       0                       0                       1                
  6  1280   # cathVolume.X_i[1, 4]
  0       0                       0                       1                
  6  1280   # cathVolume.X_i[1, 5]
  0       0                       0                       1                
  6  1280   # cathVolume.X_o[1, 1]
  0       0                       0                       1                
  6  1280   # cathVolume.X_o[1, 2]
  0       0                       0                       1                
  6  1280   # cathVolume.X_o[1, 3]
  0       0                       0                       1                
  6  1280   # cathVolume.X_o[1, 4]
  0       0                       0                       1                
  6  1280   # cathVolume.X_o[1, 5]
  0       0                       0                       0                
  6  1280   # cathVolume.dM
  0       0                       0                       0                
  6  1280   # cathVolume.dE
  0       0                       0                       0                
  6  1280   # cathVolume.dMX[1]
  0       0                       0                       0                
  6  1280   # cathVolume.dMX[2]
  0       0                       0                       0                
  6  1280   # cathVolume.dMX[3]
  0       0                       0                       0                
  6  1280   # cathVolume.dMX[4]
  0       0                       0                       0                
  6  1280   # cathVolume.dMX[5]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # cathVolume.ddx[1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # cathVolume.ddx[2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # cathVolume.ddx[3]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # cathVolume.ddx[4]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # cathVolume.ddx[5]
  0       0                       0                       0                
  6  1280   # cathVolume.duTp
  0       0                       0                       0                
  6  1280   # cathVolume.ddTp
  0       0                       0                       0                
  6  1280   # cathVolume.ddpT
 -1       1                       1                 1.0000000000000000E+100
  1   280   # AirHeater.n_channels_prim
 -1  1.0000000000000001E-01       0                       0                
  1   280   # AirHeater.L_prim
 -1  1.0000000000000000E-02       0                       0                
  1   280   # AirHeater.Dhyd_prim
 -1  1.0000000000000000E-04       0                       0                
  1   280   # AirHeater.A_prim
  0       0                       0                       0                
  6   256   # AirHeater.V_prim
 -1  2.0000000000000000E-02       0                       0                
  1   280   # AirHeater.A_heat_prim
 -1       1                       1                 1.0000000000000000E+100
  1   280   # AirHeater.n_channels_sec
 -1  1.0000000000000001E-01       0                       0                
  1   280   # AirHeater.L_sec
 -1  1.0000000000000000E-02       0                       0                
  1   280   # AirHeater.Dhyd_sec
 -1  1.0000000000000000E-04       0                       0                
  1   280   # AirHeater.A_sec
  0       0                       0                       0                
  6   256   # AirHeater.V_sec
 -1  2.0000000000000000E-02       0                       0                
  1   280   # AirHeater.A_heat_sec
 -1      10                       0                       0                
  1   280   # AirHeater.dp_smooth
 -1  1.0000000000000000E-04       0                       0                
  1   280   # AirHeater.mflow_smooth
 -1       1                       0                       0                
  1   281   # AirHeater.from_dp_prim
  0       0                       0                       0                
  6   257   # AirHeater.positiveFlow_prim
 -1       0                       0                       0                
  1   281   # AirHeater.generateEventForReversal_prim
 -1       1                       0                       0                
  1   281   # AirHeater.from_dp_sec
  0       0                       0                       0                
  6   257   # AirHeater.positiveFlow_sec
 -1       0                       0                       0                
  1   281   # AirHeater.generateEventForReversal_sec
 -1  100000                       0                       0                
  1   280   # AirHeater.dp_prim_start
 -1  3.1314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # AirHeater.T_prim_start
 -1  100000                       0                       0                
  1   280   # AirHeater.dp_sec_start
 -1  3.1314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # AirHeater.T_sec_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # AirHeater.drain_prim.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # AirHeater.feed_prim.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # AirHeater.feed_sec.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # AirHeater.drain_sec.h_outflow
  0       0                       0                       1                
  6   260   # AirHeater.drain_sec.X_outflow[1]
  0       0                       0                       1                
  6   260   # AirHeater.drain_sec.X_outflow[2]
  0       0                       0                       1                
  6   260   # AirHeater.drain_sec.X_outflow[3]
  0       0                       0                       1                
  6   260   # AirHeater.drain_sec.X_outflow[4]
  0       0                       0                       1                
  6   260   # AirHeater.drain_sec.X_outflow[5]
  0       0                       0                       0                
  6   256   # AirHeater.summary.Q_flow
  0     300                       0                   10000                
  6   256   # AirHeater.summary.T_in
  0     300                       0                   10000                
  6   256   # AirHeater.summary.T_out
  0       0                       0                       0                
  6   256   # AirHeater.summary.h_in
  0       0                       0                       0                
  6   256   # AirHeater.summary.h_out
  0       0                       0                       0                
  6   256   # AirHeater.summary.dp
  0     300                       0                   10000                
  6   256   # AirHeater.summary.T_sec_in
  0     300                       0                   10000                
  6   256   # AirHeater.summary.T_sec_out
  0       0                       0                       0                
  6   256   # AirHeater.summary.h_sec_in
  0       0                       0                       0                
  6   256   # AirHeater.summary.h_sec_out
  0       0                       0                       0                
  6   256   # AirHeater.summary.dp_sec
  0       0                       0                       0                
  6   256   # AirHeater.summary.Tpinch_prim_in
  0       0                       0                       0                
  6   256   # AirHeater.summary.Tpinch_prim_out
  0       0                       0                       0                
  6   256   # AirHeater.summary.lmtd
  0       0                       0                       0                
  6   256   # AirHeater.summary.effectiveness
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_prim.A
  0       0                       0                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_prim.Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_prim.n_channels
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_prim.lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_prim.flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_prim.dpFraction0
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_prim.F_user
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.friction_prim.from_dp
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.friction_prim.positiveFlow
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_prim.dp_smooth
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_prim.mflow_smooth
 -1       0                       0                       0                
  1   281   # AirHeater.heatExchanger.friction_prim.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_prim.reference_d
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_prim.stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # AirHeater.heatExchanger.friction_prim.dp_from_isothermal
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_prim.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_prim.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_prim.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_prim.d0
 -1     100                       0                       0                
  1   280   # AirHeater.heatExchanger.friction_prim.dp0
 -1  2.0000000000000000E-02       0                       0                
  1   280   # AirHeater.heatExchanger.friction_prim.m_flow0
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_sec.A
  0       0                       0                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_sec.Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_sec.n_channels
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_sec.lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_sec.flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_sec.dpFraction0
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_sec.F_user
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.friction_sec.from_dp
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.friction_sec.positiveFlow
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_sec.dp_smooth
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_sec.mflow_smooth
 -1       0                       0                       0                
  1   281   # AirHeater.heatExchanger.friction_sec.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_sec.reference_d
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # AirHeater.heatExchanger.friction_sec.stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # AirHeater.heatExchanger.friction_sec.dp_from_isothermal
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.friction_sec.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_sec.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.friction_sec.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # AirHeater.heatExchanger.friction_sec.d0
 -1     100                       0                       0                
  1   280   # AirHeater.heatExchanger.friction_sec.dp0
 -1  2.0000000000000000E-02       0                       0                
  1   280   # AirHeater.heatExchanger.friction_sec.m_flow0
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.CF_Friction
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.CF_Friction_sec
 -1       3                       1                       3                
  1   282   # AirHeater.heatExchanger.effectivenessStreamChoice
  0       1                       1                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.n_channels_prim
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.L_prim
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.Dhyd_prim
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.A_prim
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.V_prim
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.A_heat_prim
  0       1                       1                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.n_channels_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.L_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.Dhyd_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.A_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.V_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.A_heat_sec
 -1  1.0000000000000001E-01       0                       0                
  1   280   # AirHeater.heatExchanger.init_prim.m_flow
 -1  1.0100000000000000E+05       0                       0                
  1   280   # AirHeater.heatExchanger.init_prim.p_in
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.init_prim.dp
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.init_prim.p_out
 -1       0                       0                       0                
  1   281   # AirHeater.heatExchanger.init_prim.initFromEnthalpy
  0     300                       0                   10000                
  6   256   # AirHeater.heatExchanger.init_prim.T_in
 -1       0                       0                       0                
  1   280   # AirHeater.heatExchanger.init_prim.dT
  0     300                       0                   10000                
  6   256   # AirHeater.heatExchanger.init_prim.T_out
 -1  3.0000000000000000E+05       0                       0                
  1   280   # AirHeater.heatExchanger.init_prim.h_in
 -1       0                       0                       0                
  1   280   # AirHeater.heatExchanger.init_prim.dh
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.init_prim.h_out
 -1       0                       0                       1                
  1   280   # AirHeater.heatExchanger.init_prim.X[1]
 -1       0                       0                       1                
  1   280   # AirHeater.heatExchanger.init_prim.X[2]
 -1       0                       0                       1                
  1   280   # AirHeater.heatExchanger.init_prim.X[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # AirHeater.heatExchanger.init_prim.X[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # AirHeater.heatExchanger.init_prim.X[5]
 -1  1.0000000000000001E-01       0                       0                
  1   280   # AirHeater.heatExchanger.init_sec.m_flow
 -1  1.0100000000000000E+05       0                       0                
  1   280   # AirHeater.heatExchanger.init_sec.p_in
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.init_sec.dp
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.init_sec.p_out
 -1       0                       0                       0                
  1   281   # AirHeater.heatExchanger.init_sec.initFromEnthalpy
  0     300                       0                   10000                
  6   256   # AirHeater.heatExchanger.init_sec.T_in
 -1       0                       0                       0                
  1   280   # AirHeater.heatExchanger.init_sec.dT
  0     300                       0                   10000                
  6   256   # AirHeater.heatExchanger.init_sec.T_out
 -1  3.0000000000000000E+05       0                       0                
  1   280   # AirHeater.heatExchanger.init_sec.h_in
 -1       0                       0                       0                
  1   280   # AirHeater.heatExchanger.init_sec.dh
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.init_sec.h_out
 -1       0                       0                       1                
  1   280   # AirHeater.heatExchanger.init_sec.X[1]
 -1       0                       0                       1                
  1   280   # AirHeater.heatExchanger.init_sec.X[2]
 -1       0                       0                       1                
  1   280   # AirHeater.heatExchanger.init_sec.X[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # AirHeater.heatExchanger.init_sec.X[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # AirHeater.heatExchanger.init_sec.X[5]
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.dp_smooth
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.mflow_smooth
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.from_dp_prim
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.positiveFlow_prim
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.generateEventForReversal_prim
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.from_dp_sec
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.positiveFlow_sec
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.generateEventForReversal_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.pprim_out
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.psec_out
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.C
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.Q_max
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.stateAprim_inflow.T
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.stateBprim_inflow.T
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.stateAprim_outflow.T
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.stateBprim_outflow.T
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.TAsec_out
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.TBsec_out
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.stateAsec_inflow.T
  0       0                       0                   10000                
  6  1280   # AirHeater.heatExchanger.stateBsec_inflow.T
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.hprim_Tsec_in
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.hsec_Tprim_in
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAprim_in[1]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAprim_in[2]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAprim_in[3]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAprim_in[4]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAprim_in[5]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBprim_in[1]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBprim_in[2]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBprim_in[3]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBprim_in[4]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBprim_in[5]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xprim[1]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xprim[2]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xprim[3]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xprim[4]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xprim[5]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAsec_in[1]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAsec_in[2]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAsec_in[3]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAsec_in[4]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XAsec_in[5]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBsec_in[1]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBsec_in[2]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBsec_in[3]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBsec_in[4]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.XBsec_in[5]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xsec[1]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xsec[2]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xsec[3]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xsec[4]
  0       0                       0                       1                
  6  1280   # AirHeater.heatExchanger.Xsec[5]
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.CAprim
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.CBprim
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.CAsec
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.CBsec
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.Cprim
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.Csec
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.Cmin
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.Cmax
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.Q_max_prim
  0       0                       0                       0                
  6  1280   # AirHeater.heatExchanger.Q_max_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.A_heat
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.U
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.NTU
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.CF_HeatTransfer
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.CF_HeatTransfer_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.thickness_wall
  0       0                       0                       0                
  6   257   # AirHeater.heatExchanger.heatFlowDynamics
  0       0                       0                       0                
  6   258   # AirHeater.heatExchanger.order
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.riseTime
  0     500                       0                       0                
  6   256   # AirHeater.heatExchanger.wall.c
  0    7880                       0                 1.0000000000000000E+100
  6   256   # AirHeater.heatExchanger.wall.rho
  0      21                       0                       0                
  6   256   # AirHeater.heatExchanger.wall.lambda
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_prim.A
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_prim.L
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_prim.Dhyd
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_prim.F_user
  0       1                       0                       0                
  6   257   # AirHeater.heatExchanger.htcoeff_prim.ht_from_isothermal
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_prim.CF_length
 -1     200                       0                       0                
  1   280   # AirHeater.heatExchanger.htcoeff_prim.alpha
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_sec.A
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_sec.L
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_sec.Dhyd
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_sec.F_user
  0       1                       0                       0                
  6   257   # AirHeater.heatExchanger.htcoeff_sec.ht_from_isothermal
  0       1                       0                       0                
  6   256   # AirHeater.heatExchanger.htcoeff_sec.CF_length
 -1     200                       0                       0                
  1   280   # AirHeater.heatExchanger.htcoeff_sec.alpha
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.kc_prim
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.kc_sec
  0       0                       0                       0                
  6   256   # AirHeater.heatExchanger.kc_wall
 -1  2.0000000000000000E-02       0                       0                
  1   280   # AirHeater.A_heat
 -1  2.0000000000000000E-03       0                       0                
  1   280   # AirHeater.thickness_wall
  0       0                       0                       0                
  6   257   # AirHeater.heatFlowDynamics
 -1       1                       0                       0                
  1   282   # AirHeater.order
 -1      10                       0                       0                
  1   280   # AirHeater.riseTime
  0       1                       1                       5                
  6   258   # metalBurner.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # metalBurner.Mstart
 -1  1.1000000000000000E+05       0                       0                
  1   280   # metalBurner.pstart
 -1  5.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # metalBurner.Tstart
 -1       0                       0                       1                
  1   280   # metalBurner.Xstart[1]
 -1       0                       0                       1                
  1   280   # metalBurner.Xstart[2]
 -1       0                       0                       1                
  1   280   # metalBurner.Xstart[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # metalBurner.Xstart[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # metalBurner.Xstart[5]
 -1       1                       0                       0                
  1   281   # metalBurner.startBurning
 -1  3.0000000000000001E-03       0                       0                
  1   280   # metalBurner.V
  0       1                       0                       0                
  6   257   # metalBurner.positiveFlow
 -1  9.0000000000000002E-01       0                       0                
  1   280   # metalBurner.lam_eff
  0       0                       0                 1.0000000000000000E+100
  6   260   # metalBurner.q.T
  0       0                       0                       0                
  6   388   # metalBurner.q.Q_flow
  0     150                       0                       0                
  6   256   # metalBurner.summary.lambda_extinguish
  0       0                       0                       0                
  6   256   # metalBurner.summary.AFR_mass
  0       0                       0                       0                
  6   256   # metalBurner.summary.FAR_mass
  0       0                       0                       0                
  6   256   # metalBurner.S[1, 1]
  0       0                       0                       0                
  6   256   # metalBurner.S[1, 2]
  0       0                       0                       0                
  6   256   # metalBurner.S[1, 3]
  0       0                       0                       0                
  6   256   # metalBurner.S[1, 4]
  0       0                       0                       0                
  6   256   # metalBurner.S[1, 5]
  0       0                       0                       0                
  6   256   # metalBurner.S[1, 6]
  0       0                       0                       0                
  6   256   # metalBurner.S[1, 7]
  0       0                       0                       0                
  6   256   # metalBurner.S[2, 1]
  0       1                       0                       0                
  6   256   # metalBurner.S[2, 2]
  0       1                       0                       0                
  6   256   # metalBurner.S[2, 3]
  0       1                       0                       0                
  6   256   # metalBurner.S[2, 4]
  0       0                       0                       0                
  6   256   # metalBurner.S[2, 5]
  0       0                       0                       0                
  6   256   # metalBurner.S[2, 6]
  0       0                       0                       0                
  6   256   # metalBurner.S[2, 7]
  0       1                       0                       0                
  6   256   # metalBurner.S[3, 1]
  0       2                       0                       0                
  6   256   # metalBurner.S[3, 2]
  0       0                       0                       0                
  6   256   # metalBurner.S[3, 3]
  0       0                       0                       0                
  6   256   # metalBurner.S[3, 4]
  0       1                       0                       0                
  6   256   # metalBurner.S[3, 5]
  0       0                       0                       0                
  6   256   # metalBurner.S[3, 6]
  0       0                       0                       0                
  6   256   # metalBurner.S[3, 7]
  0       0                       0                       0                
  6   256   # metalBurner.S[4, 1]
  0       0                       0                       0                
  6   256   # metalBurner.S[4, 2]
  0       0                       0                       0                
  6   256   # metalBurner.S[4, 3]
  0       0                       0                       0                
  6   256   # metalBurner.S[4, 4]
  0       0                       0                       0                
  6   256   # metalBurner.S[4, 5]
  0       1                       0                       0                
  6   256   # metalBurner.S[4, 6]
  0       0                       0                       0                
  6   256   # metalBurner.S[4, 7]
  0 -5.0000000000000000E-01       0                       0                
  6   256   # metalBurner.S[5, 1]
  0      -2                       0                       0                
  6   256   # metalBurner.S[5, 2]
  0 -5.0000000000000000E-01       0                       0                
  6   256   # metalBurner.S[5, 3]
  0       0                       0                       0                
  6   256   # metalBurner.S[5, 4]
  0       0                       0                       0                
  6   256   # metalBurner.S[5, 5]
  0       0                       0                       0                
  6   256   # metalBurner.S[5, 6]
  0       1                       0                       0                
  6   256   # metalBurner.S[5, 7]
  0     500                       0                       0                
  6   256   # metalBurner.wallmaterial.c
  0    7880                       0                 1.0000000000000000E+100
  6   256   # metalBurner.wallmaterial.rho
  0      21                       0                       0                
  6   256   # metalBurner.wallmaterial.lambda
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # metalBurner.M_w
 -1  2.0000000000000000E-02       0                       0                
  1   280   # metalBurner.wallthickness
 -1  2.0000000000000001E-01       0                       0                
  1   280   # metalBurner.A_heat
  0     500                       0                       0                
  6   256   # metalBurner.Cp_w
  0       0                       0                       0                
  6   256   # metalBurner.Rw
  0       1                       1                       5                
  6   258   # metalBurner.burner.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # metalBurner.burner.Mstart
  0       0                       0                       0                
  6   256   # metalBurner.burner.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # metalBurner.burner.Tstart
  0       0                       0                       1                
  6   256   # metalBurner.burner.Xstart[1]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Xstart[2]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Xstart[3]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Xstart[4]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Xstart[5]
  0       0                       0                       0                
  6   257   # metalBurner.burner.startBurning
  0       0                       0                       0                
  6   256   # metalBurner.burner.V
  0       1                       0                       0                
  6   257   # metalBurner.burner.positiveFlow
  0       0                       0                       0                
  6   256   # metalBurner.burner.lam_eff
  0       0                       0                       0                
  6   257   # metalBurner.burner.ignition
  0       0                       0                       0                
  6   388   # metalBurner.burner.q.Q_flow
  0     150                       0                       0                
  6   256   # metalBurner.burner.summary.lambda_extinguish
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[1, 1]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[1, 2]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[1, 3]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[1, 4]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[1, 5]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[1, 6]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[1, 7]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[2, 1]
  0       1                       0                       0                
  6   256   # metalBurner.burner.S[2, 2]
  0       1                       0                       0                
  6   256   # metalBurner.burner.S[2, 3]
  0       1                       0                       0                
  6   256   # metalBurner.burner.S[2, 4]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[2, 5]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[2, 6]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[2, 7]
  0       1                       0                       0                
  6   256   # metalBurner.burner.S[3, 1]
  0       2                       0                       0                
  6   256   # metalBurner.burner.S[3, 2]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[3, 3]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[3, 4]
  0       1                       0                       0                
  6   256   # metalBurner.burner.S[3, 5]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[3, 6]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[3, 7]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[4, 1]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[4, 2]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[4, 3]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[4, 4]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[4, 5]
  0       1                       0                       0                
  6   256   # metalBurner.burner.S[4, 6]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[4, 7]
  0 -5.0000000000000000E-01       0                       0                
  6   256   # metalBurner.burner.S[5, 1]
  0      -2                       0                       0                
  6   256   # metalBurner.burner.S[5, 2]
  0 -5.0000000000000000E-01       0                       0                
  6   256   # metalBurner.burner.S[5, 3]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[5, 4]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[5, 5]
  0       0                       0                       0                
  6   256   # metalBurner.burner.S[5, 6]
  0       1                       0                       0                
  6   256   # metalBurner.burner.S[5, 7]
 -1       0                       0                   10000                
  2   272   # metalBurner.burner.fluegas.T
  0       0                       0                       0                
  3   256   # metalBurner.burner.fluegas.der(T)
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.X[1]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.X[2]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.X[3]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.X[4]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.X[5]
  0       1                  1.0000000000000000E-08  100000                
  6   288   # metalBurner.burner.fluegas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # metalBurner.burner.fluegas.MM
 -1       2                       1                       2                
  1   282   # metalBurner.burner.fluegas.assertlevel
  0       0                       0                  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.state.p
  0     300                       0                   10000                
  6   256   # metalBurner.burner.fluegas.state.T
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.state.X[1]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.state.X[2]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.state.X[3]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.state.X[4]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.state.X[5]
  0       0                       0                       0                
  6   257   # metalBurner.burner.fluegas.preferredMediumStates
  0       0                       0                       0                
  6   256   # metalBurner.burner.fluegas.T_degC
  0       0                       0                       0                
  6   256   # metalBurner.burner.fluegas.p_bar
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.Z[1]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.Z[2]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.Z[3]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.Z[4]
  0       0                       0                       1                
  6   256   # metalBurner.burner.fluegas.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # metalBurner.burner.fluegas.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # metalBurner.burner.fluegas.g_formation[5]
  0       0                       0                       0                
  6   256   # metalBurner.burner.fluegas.ddTp
  0       0                       0                       0                
  6   256   # metalBurner.burner.fluegas.ddpT
  0       0                       0                       0                
  6   256   # metalBurner.burner.fluegas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # metalBurner.burner.fluegas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # metalBurner.burner.fluegas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # metalBurner.burner.fluegas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # metalBurner.burner.fluegas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # metalBurner.burner.fluegas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # metalBurner.burner.fluegas.ddx[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # metalBurner.burner.M
 -1       0                       0                 1.0000000000000000E+100
  2   272   # metalBurner.burner.MX[1]
  0       0                       0                       0                
  3   256   # metalBurner.burner.der(MX[1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # metalBurner.burner.MX[2]
  0       0                       0                       0                
  3   256   # metalBurner.burner.der(MX[2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # metalBurner.burner.MX[3]
  0       0                       0                       0                
  3   256   # metalBurner.burner.der(MX[3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # metalBurner.burner.MX[4]
  0       0                       0                       0                
  3   256   # metalBurner.burner.der(MX[4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # metalBurner.burner.MX[5]
  0       0                       0                       0                
  3   256   # metalBurner.burner.der(MX[5])
  0       0                       0                       0                
  6   256   # metalBurner.burner.E
  0       0                       0                       0                
  6   256   # metalBurner.burner.dE
  0       0                       0                       0                
  6   256   # metalBurner.burner.Tr
  0       0                       0                       0                
  6   256   # metalBurner.burner.lambda
  0     150                       0                       0                
  6   256   # metalBurner.burner.lambda_extinguish
  0       0                       0                       0                
  6   321   # metalBurner.burner.burning
  0       0                       0                       0                
  6   256   # metalBurner.burner.lambda_max_ignite
  0       0                       0                       0                
  6   321   # metalBurner.burner.blowOff
  0       0                       0                       1                
  6   256   # metalBurner.burner.Y[1]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Y[2]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Y[3]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Y[4]
  0       0                       0                       1                
  6   256   # metalBurner.burner.Y[5]
  0       0                       0                       0                
  6   256   # metalBurner.burner.m_flow_oxygen
  0       0                       0                       0                
  6   256   # metalBurner.burner.m_flow_oxygen_stoich
  0       0                       0                       0                
  6  1280   # metalBurner.burner.m_flow_ox_fuel
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[1, 1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[1, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[1, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[1, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[1, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[1, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[1, 7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[2, 1]
  0  2.7433136813182015E+00       0                       0                
  6  1280   # metalBurner.burner.S_Burning[2, 2]
  0  1.5712011024594701E+00       0                       0                
  6  1280   # metalBurner.burner.S_Burning[2, 3]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[2, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[2, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[2, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[2, 7]
  0  8.9366827390519283E+00       0                       0                
  6  1280   # metalBurner.burner.S_Burning[3, 1]
  0  2.2459498106898819E+00       0                       0                
  6  1280   # metalBurner.burner.S_Burning[3, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[3, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[3, 4]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[3, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[3, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[3, 7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[4, 1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[4, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[4, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[4, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[4, 5]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[4, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[4, 7]
  0 -7.9366827390519283E+00       0                       0                
  6  1280   # metalBurner.burner.S_Burning[5, 1]
  0 -3.9892634920080834E+00       0                       0                
  6  1280   # metalBurner.burner.S_Burning[5, 2]
  0 -5.7120110245946998E-01       0                       0                
  6  1280   # metalBurner.burner.S_Burning[5, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[5, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[5, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[5, 6]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Burning[5, 7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[1, 1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[1, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[1, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[1, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[1, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[1, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[1, 7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[2, 1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[2, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[2, 3]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[2, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[2, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[2, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[2, 7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[3, 1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[3, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[3, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[3, 4]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[3, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[3, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[3, 7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[4, 1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[4, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[4, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[4, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[4, 5]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[4, 6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[4, 7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[5, 1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[5, 2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[5, 3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[5, 4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[5, 5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[5, 6]
  0       1                       0                       0                
  6  1280   # metalBurner.burner.S_Mixing[5, 7]
  0       5                       0                       0                
  6  1282   # metalBurner.burner.air[1]
  0       4                       0                       0                
  6  1282   # metalBurner.burner.air[2]
  0       3                       0                       0                
  6  1282   # metalBurner.burner.fuel[1]
  0       7                       0                       0                
  6  1282   # metalBurner.burner.fuel_O2[1]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zia[1]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zia[2]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zia[3]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zia[4]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zia[5]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zif[1]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zif[2]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zif[3]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zif[4]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zif[5]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zif[6]
  0       0                       0                       1                
  6  1280   # metalBurner.burner.Zif[7]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_air[1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_air[2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_air[3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_air[4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_air[5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_fuel[1]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_fuel[2]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_fuel[3]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_fuel[4]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_fuel[5]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_fuel[6]
  0       0                       0                       0                
  6  1280   # metalBurner.burner.z_flow_fuel[7]
 -1       5                       0                       0                
  1  1304   # metalBurner.burner.lambda_max_ignite_par[1]
 -1       0                       0                       0                
  1  1304   # metalBurner.burner.lambda_max_ignite_par[2]
 -1  1.0000000000000001E-01       0                       0                
  1  1304   # metalBurner.burner.scale
 -1       0                       0                       0                
  2  1304   # metalBurner.burner.krate_comb
  0       0                       0                       0                
  3  1280   # metalBurner.burner.der(krate_comb)
  0       0                       0                       0                
  6  1280   # metalBurner.burner.lambda2
  0       1                       1                 1.0000000000000000E+100
  6   258   # metalBurner.wall.n
  0       0                       0                       0                
  6   388   # metalBurner.wall.qb[1].Q_flow
  0       1                       1                 1.0000000000000000E+100
  6   258   # metalBurner.wall.n_channels
  0     500                       0                       0                
  6   256   # metalBurner.wall.pars.Cp
  0       0                       0                       0                
  6   256   # metalBurner.wall.pars.Rw
  0       0                       0                 1.0000000000000000E+100
  6   256   # metalBurner.wall.m[1]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # metalBurner.wall.Tm[1]
  0       0                       0                       0                
  3   256   # metalBurner.wall.der(Tm[1])
  0       0                       0                       0                
  6   256   # metalBurner.wall.Tm_degC[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # metalBurner.wall.T0[1]
  0       0                       0                       0                
  6   257   # metalBurner.wall.steadyStateInit
  0       0                       0                       0                
  6   257   # metalBurner.wall.massLessWall
  0       1                       0                       0                
  6   257   # metalBurner.wall.includeThermalResistance
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # metalBurner.gas_out.h_outflow
  0       0                       0                       1                
  6   260   # metalBurner.gas_out.X_outflow[1]
  0       0                       0                       1                
  6   260   # metalBurner.gas_out.X_outflow[2]
  0       0                       0                       1                
  6   260   # metalBurner.gas_out.X_outflow[3]
  0       0                       0                       1                
  6   260   # metalBurner.gas_out.X_outflow[4]
  0       0                       0                       1                
  6   260   # metalBurner.gas_out.X_outflow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # metalBurner.air_in.m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # metalBurner.fuel_in.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # metalBurner.fuel_in.h_outflow
  0       0                       0                       1                
  6   256   # fuelMix.gas.X[1]
 -1       0                       0                       1                
  2   272   # fuelMix.gas.X[2]
  0       0                       0                       0                
  3   256   # fuelMix.gas.der(X[2])
 -1       0                       0                       1                
  2   272   # fuelMix.gas.X[3]
  0       0                       0                       0                
  3   256   # fuelMix.gas.der(X[3])
 -1       0                       0                       1                
  2   272   # fuelMix.gas.X[4]
  0       0                       0                       0                
  3   256   # fuelMix.gas.der(X[4])
 -1       0                       0                       1                
  2   272   # fuelMix.gas.X[5]
  0       0                       0                       0                
  3   256   # fuelMix.gas.der(X[5])
 -1       0                       0                       1                
  2   272   # fuelMix.gas.X[6]
  0       0                       0                       0                
  3   256   # fuelMix.gas.der(X[6])
 -1       0                       0                       1                
  2   272   # fuelMix.gas.X[7]
  0       0                       0                       0                
  3   256   # fuelMix.gas.der(X[7])
  0       0                       0                       0                
  6   256   # fuelMix.gas.der(X[1])
  0       0                       0                       1                
  6   256   # fuelMix.gas.Xi[1]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Xi[2]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Xi[3]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Xi[4]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Xi[5]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Xi[6]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # fuelMix.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # fuelMix.gas.MM
 -1       2                       1                       2                
  1   282   # fuelMix.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # fuelMix.gas.state.p
  0     300                       0                   10000                
  6   256   # fuelMix.gas.state.T
  0       0                       0                       1                
  6   256   # fuelMix.gas.state.X[1]
  0       0                       0                       1                
  6   256   # fuelMix.gas.state.X[2]
  0       0                       0                       1                
  6   256   # fuelMix.gas.state.X[3]
  0       0                       0                       1                
  6   256   # fuelMix.gas.state.X[4]
  0       0                       0                       1                
  6   256   # fuelMix.gas.state.X[5]
  0       0                       0                       1                
  6   256   # fuelMix.gas.state.X[6]
  0       0                       0                       1                
  6   256   # fuelMix.gas.state.X[7]
  0       0                       0                       0                
  6   257   # fuelMix.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # fuelMix.gas.T_degC
  0       0                       0                       0                
  6   256   # fuelMix.gas.p_bar
  0       0                       0                       1                
  6   256   # fuelMix.gas.Z[1]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Z[2]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Z[3]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Z[4]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Z[5]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Z[6]
  0       0                       0                       1                
  6   256   # fuelMix.gas.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelMix.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelMix.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelMix.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelMix.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelMix.gas.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelMix.gas.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelMix.gas.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelMix.gas.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # fuelMix.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelMix.gas.g_formation[7]
  0       0                       0                       0                
  6   256   # fuelMix.gas.ddTp
  0       0                       0                       0                
  6   256   # fuelMix.gas.ddpT
  0       0                       0                       0                
  6   256   # fuelMix.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # fuelMix.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelMix.gas.ddx[7]
  0       1                       0                       0                
  6   258   # fuelMix.N_feed
  0       1                       0                       0                
  6   258   # fuelMix.N_drain
 -1  1.0000000000000000E-03       0                       0                
  1   280   # fuelMix.V_tot
  0       1                       1                       5                
  6   258   # fuelMix.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.pstart
 -1  1.0731500000000001E+03       0                 1.0000000000000000E+100
  1   280   # fuelMix.Tstart
 -1  5.0000000000000000E-01       0                       1                
  1   280   # fuelMix.Xstart[1]
 -1  4.0000000000000002E-01       0                       1                
  1   280   # fuelMix.Xstart[2]
 -1       0                       0                       1                
  1   280   # fuelMix.Xstart[3]
 -1       0                       0                       1                
  1   280   # fuelMix.Xstart[4]
 -1  1.0000000000000001E-01       0                       1                
  1   280   # fuelMix.Xstart[5]
 -1       0                       0                       1                
  1   280   # fuelMix.Xstart[6]
 -1       0                       0                       1                
  1   280   # fuelMix.Xstart[7]
  0       0                       0                       0                
  6   257   # fuelMix.positiveFlow
  0       0                       0                       0                
  6   257   # fuelMix.QuasiStatic
 -1       0                       0                  1.0000000000000000E+08
  2   272   # fuelMix.p
  0       0                       0                       0                
  3   256   # fuelMix.der(p)
 -1       0                       0                   10000                
  2   272   # fuelMix.T
  0       0                       0                       0                
  3   256   # fuelMix.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.M
  0       0                       0                       0                
  6   256   # fuelMix.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.MXi[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.MXi[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.MXi[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.MXi[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.MXi[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.MXi[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # fuelMix.MXi[7]
  0       0                       0                       1                
  6   260   # fuelMix.drain[1].X_outflow[1]
  0       0                       0                       1                
  6   260   # fuelMix.drain[1].X_outflow[2]
  0       0                       0                       1                
  6   260   # fuelMix.drain[1].X_outflow[3]
  0       0                       0                       1                
  6   260   # fuelMix.drain[1].X_outflow[4]
  0       0                       0                       1                
  6   260   # fuelMix.drain[1].X_outflow[5]
  0       0                       0                       1                
  6   260   # fuelMix.drain[1].X_outflow[6]
  0       0                       0                       1                
  6   260   # fuelMix.drain[1].X_outflow[7]
  0       0                       0                       0                
  6   388   # fuelMix.q.Q_flow
  0       7                       0                       0                
  6  1282   # fuelMix.nXi
  0       0                       0                       0                
  6  1280   # fuelMix.hi[1]
  0       0                       0                       1                
  6  1280   # fuelMix.X_i[1, 1]
  0       0                       0                       1                
  6  1280   # fuelMix.X_i[1, 2]
  0       0                       0                       1                
  6  1280   # fuelMix.X_i[1, 3]
  0       0                       0                       1                
  6  1280   # fuelMix.X_i[1, 4]
  0       0                       0                       1                
  6  1280   # fuelMix.X_i[1, 5]
  0       0                       0                       1                
  6  1280   # fuelMix.X_i[1, 6]
  0       0                       0                       1                
  6  1280   # fuelMix.X_i[1, 7]
  0       0                       0                       0                
  6  1280   # fuelMix.dM
  0       0                       0                       0                
  6  1280   # fuelMix.dE
  0       0                       0                       0                
  6  1280   # fuelMix.dMX[1]
  0       0                       0                       0                
  6  1280   # fuelMix.dMX[2]
  0       0                       0                       0                
  6  1280   # fuelMix.dMX[3]
  0       0                       0                       0                
  6  1280   # fuelMix.dMX[4]
  0       0                       0                       0                
  6  1280   # fuelMix.dMX[5]
  0       0                       0                       0                
  6  1280   # fuelMix.dMX[6]
  0       0                       0                       0                
  6  1280   # fuelMix.dMX[7]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # fuelMix.ddx[1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # fuelMix.ddx[2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # fuelMix.ddx[3]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # fuelMix.ddx[4]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # fuelMix.ddx[5]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # fuelMix.ddx[6]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # fuelMix.ddx[7]
  0       0                       0                       0                
  6  1280   # fuelMix.duTp
  0       0                       0                       0                
  6  1280   # fuelMix.ddTp
  0       0                       0                       0                
  6  1280   # fuelMix.ddpT
  0       0                       0                       1                
  6   260   # fuelLoss.drain.X_outflow[1]
  0       0                       0                       1                
  6   260   # fuelLoss.drain.X_outflow[2]
  0       0                       0                       1                
  6   260   # fuelLoss.drain.X_outflow[3]
  0       0                       0                       1                
  6   260   # fuelLoss.drain.X_outflow[4]
  0       0                       0                       1                
  6   260   # fuelLoss.drain.X_outflow[5]
  0       0                       0                       1                
  6   260   # fuelLoss.drain.X_outflow[6]
  0       0                       0                       1                
  6   260   # fuelLoss.drain.X_outflow[7]
  0       0                       0                       0                
  6   256   # fuelLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.d
  0  2.8814999999999998E+02       0                   10000                
  6   256   # fuelLoss.T
  0       0                       0                       1                
  6   256   # fuelLoss.medium.X[1]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.X[2]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.X[3]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.X[4]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.X[5]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.X[6]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.X[7]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Xi[1]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Xi[2]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Xi[3]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Xi[4]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Xi[5]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Xi[6]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Xi[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # fuelLoss.medium.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # fuelLoss.medium.MM
 -1       2                       1                       2                
  1   282   # fuelLoss.medium.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # fuelLoss.medium.state.p
  0     300                       0                   10000                
  6   256   # fuelLoss.medium.state.T
  0       0                       0                       1                
  6   256   # fuelLoss.medium.state.X[1]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.state.X[2]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.state.X[3]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.state.X[4]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.state.X[5]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.state.X[6]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.state.X[7]
  0       0                       0                       0                
  6   257   # fuelLoss.medium.preferredMediumStates
  0       0                       0                       0                
  6   256   # fuelLoss.medium.T_degC
  0       0                       0                       0                
  6   256   # fuelLoss.medium.p_bar
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Z[1]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Z[2]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Z[3]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Z[4]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Z[5]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Z[6]
  0       0                       0                       1                
  6   256   # fuelLoss.medium.Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelLoss.medium.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelLoss.medium.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelLoss.medium.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelLoss.medium.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelLoss.medium.s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelLoss.medium.s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # fuelLoss.medium.s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # fuelLoss.medium.u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # fuelLoss.medium.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # fuelLoss.medium.g_formation[7]
  0       0                       0                       0                
  6   256   # fuelLoss.medium.ddTp
  0       0                       0                       0                
  6   256   # fuelLoss.medium.ddpT
  0       0                       0                       0                
  6   256   # fuelLoss.medium.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # fuelLoss.medium.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.medium.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.medium.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.medium.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.medium.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.medium.ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.medium.ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # fuelLoss.medium.ddx[7]
 -1       1                       0                 1.0000000000000000E+100
  1   280   # fuelLoss.d0
 -1   10000                       0                       0                
  1   280   # fuelLoss.dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # fuelLoss.m_flow0
  0       1                       0                       0                
  6   257   # fuelLoss.linearLoss
  0       0                       0                       0                
  6  1280   # fuelLoss.nonlinear
  0       0                       0                       0                
  6  1280   # fuelLoss.linear
 -1  1.0000000000000000E-02       0                       0                
  1  1304   # fuelLoss.limroot
  0       0                       0                       1                
  6   256   # airMix.gas.X[1]
 -1       0                       0                       1                
  2   280   # airMix.gas.X[2]
  0       0                       0                       0                
  3   256   # airMix.gas.der(X[2])
 -1       0                       0                       1                
  2   280   # airMix.gas.X[3]
  0       0                       0                       0                
  3   256   # airMix.gas.der(X[3])
 -1  7.7000000000000002E-01       0                       1                
  2   280   # airMix.gas.X[4]
  0       0                       0                       0                
  3   256   # airMix.gas.der(X[4])
 -1  2.3000000000000001E-01       0                       1                
  2   280   # airMix.gas.X[5]
  0       0                       0                       0                
  3   256   # airMix.gas.der(X[5])
  0       0                       0                       0                
  6   256   # airMix.gas.der(X[1])
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airMix.gas.d
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # airMix.gas.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # airMix.gas.MM
 -1       2                       1                       2                
  1   282   # airMix.gas.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # airMix.gas.state.p
  0     300                       0                   10000                
  6   256   # airMix.gas.state.T
  0       0                       0                       1                
  6   256   # airMix.gas.state.X[1]
  0       0                       0                       1                
  6   256   # airMix.gas.state.X[2]
  0       0                       0                       1                
  6   256   # airMix.gas.state.X[3]
  0       0                       0                       1                
  6   256   # airMix.gas.state.X[4]
  0       0                       0                       1                
  6   256   # airMix.gas.state.X[5]
  0       0                       0                       0                
  6   257   # airMix.gas.preferredMediumStates
  0       0                       0                       0                
  6   256   # airMix.gas.T_degC
  0       0                       0                       0                
  6   256   # airMix.gas.p_bar
  0       0                       0                       1                
  6   256   # airMix.gas.Z[1]
  0       0                       0                       1                
  6   256   # airMix.gas.Z[2]
  0       0                       0                       1                
  6   256   # airMix.gas.Z[3]
  0       0                       0                       1                
  6   256   # airMix.gas.Z[4]
  0       0                       0                       1                
  6   256   # airMix.gas.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airMix.gas.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airMix.gas.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airMix.gas.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airMix.gas.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airMix.gas.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airMix.gas.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # airMix.gas.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airMix.gas.g_formation[5]
  0       0                       0                       0                
  6   256   # airMix.gas.ddTp
  0       0                       0                       0                
  6   256   # airMix.gas.ddpT
  0       0                       0                       0                
  6   256   # airMix.gas.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # airMix.gas.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airMix.gas.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airMix.gas.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airMix.gas.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airMix.gas.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airMix.gas.ddx[5]
  0       1                       0                       0                
  6   258   # airMix.N_feed
  0       1                       0                       0                
  6   258   # airMix.N_drain
 -1  1.0000000000000000E-03       0                       0                
  1   280   # airMix.V_tot
  0       5                       1                       5                
  6   258   # airMix.initOpt
  0       0                       0                 1.0000000000000000E+100
  6   256   # airMix.pstart
 -1  9.7314999999999998E+02       0                 1.0000000000000000E+100
  1   280   # airMix.Tstart
 -1       0                       0                       1                
  1   280   # airMix.Xstart[1]
 -1       0                       0                       1                
  1   280   # airMix.Xstart[2]
 -1       0                       0                       1                
  1   280   # airMix.Xstart[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # airMix.Xstart[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # airMix.Xstart[5]
  0       0                       0                       0                
  6   257   # airMix.positiveFlow
  0       0                       0                       0                
  6   257   # airMix.QuasiStatic
 -1       0                       0                  1.0000000000000000E+08
  2   272   # airMix.p
  0       0                       0                       0                
  3   256   # airMix.der(p)
 -1       0                       0                   10000                
  2   272   # airMix.T
  0       0                       0                       0                
  3   256   # airMix.der(T)
  0       0                       0                 1.0000000000000000E+100
  6   256   # airMix.M
  0       0                       0                       0                
  6   256   # airMix.E_tot
  0       0                       0                 1.0000000000000000E+100
  6   256   # airMix.MXi[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # airMix.MXi[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # airMix.MXi[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # airMix.MXi[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # airMix.MXi[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # airMix.feed[1].h_outflow
  0       0                       0                       1                
  6   260   # airMix.drain[1].X_outflow[1]
  0       0                       0                       1                
  6   260   # airMix.drain[1].X_outflow[2]
  0       0                       0                       1                
  6   260   # airMix.drain[1].X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # airMix.drain[1].X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # airMix.drain[1].X_outflow[5]
  0       0                       0                       0                
  6   388   # airMix.q.Q_flow
  0       5                       0                       0                
  6  1282   # airMix.nXi
  0       0                       0                       0                
  6  1280   # airMix.hi[1]
  0       0                       0                       0                
  6  1280   # airMix.ho[1]
  0       0                       0                       1                
  6  1280   # airMix.X_i[1, 1]
  0       0                       0                       1                
  6  1280   # airMix.X_i[1, 2]
  0       0                       0                       1                
  6  1280   # airMix.X_i[1, 3]
  0       0                       0                       1                
  6  1280   # airMix.X_i[1, 4]
  0       0                       0                       1                
  6  1280   # airMix.X_i[1, 5]
  0       0                       0                       1                
  6  1280   # airMix.X_o[1, 1]
  0       0                       0                       1                
  6  1280   # airMix.X_o[1, 2]
  0       0                       0                       1                
  6  1280   # airMix.X_o[1, 3]
  0       0                       0                       1                
  6  1280   # airMix.X_o[1, 4]
  0       0                       0                       1                
  6  1280   # airMix.X_o[1, 5]
  0       0                       0                       0                
  6  1280   # airMix.dM
  0       0                       0                       0                
  6  1280   # airMix.dE
  0       0                       0                       0                
  6  1280   # airMix.dMX[1]
  0       0                       0                       0                
  6  1280   # airMix.dMX[2]
  0       0                       0                       0                
  6  1280   # airMix.dMX[3]
  0       0                       0                       0                
  6  1280   # airMix.dMX[4]
  0       0                       0                       0                
  6  1280   # airMix.dMX[5]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # airMix.ddx[1]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # airMix.ddx[2]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # airMix.ddx[3]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # airMix.ddx[4]
  0       0                       0                 1.0000000000000000E+100
  6  1280   # airMix.ddx[5]
  0       0                       0                       0                
  6  1280   # airMix.duTp
  0       0                       0                       0                
  6  1280   # airMix.ddTp
  0       0                       0                       0                
  6  1280   # airMix.ddpT
  0       0                       0                       1                
  6   260   # airLoss.drain.X_outflow[1]
  0       0                       0                       1                
  6   260   # airLoss.drain.X_outflow[2]
  0       0                       0                       1                
  6   260   # airLoss.drain.X_outflow[3]
  0       0                       0                       1                
  6   260   # airLoss.drain.X_outflow[4]
  0       0                       0                       1                
  6   260   # airLoss.drain.X_outflow[5]
  0       0                       0                       0                
  6   256   # airLoss.dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airLoss.d
  0       0                       0                       1                
  6   256   # airLoss.medium.X[1]
  0       0                       0                       1                
  6   256   # airLoss.medium.X[2]
  0       0                       0                       1                
  6   256   # airLoss.medium.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # airLoss.medium.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # airLoss.medium.X[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # airLoss.medium.Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # airLoss.medium.MM
 -1       2                       1                       2                
  1   282   # airLoss.medium.assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # airLoss.medium.state.p
  0     300                       0                   10000                
  6   256   # airLoss.medium.state.T
  0       0                       0                       1                
  6   256   # airLoss.medium.state.X[1]
  0       0                       0                       1                
  6   256   # airLoss.medium.state.X[2]
  0       0                       0                       1                
  6   256   # airLoss.medium.state.X[3]
  0       0                       0                       1                
  6   256   # airLoss.medium.state.X[4]
  0       0                       0                       1                
  6   256   # airLoss.medium.state.X[5]
  0       0                       0                       0                
  6   257   # airLoss.medium.preferredMediumStates
  0       0                       0                       0                
  6   256   # airLoss.medium.T_degC
  0       0                       0                       0                
  6   256   # airLoss.medium.p_bar
  0       0                       0                       1                
  6   256   # airLoss.medium.Z[1]
  0       0                       0                       1                
  6   256   # airLoss.medium.Z[2]
  0       0                       0                       1                
  6   256   # airLoss.medium.Z[3]
  0       0                       0                       1                
  6   256   # airLoss.medium.Z[4]
  0       0                       0                       1                
  6   256   # airLoss.medium.Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airLoss.medium.s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airLoss.medium.s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airLoss.medium.s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airLoss.medium.s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # airLoss.medium.s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # airLoss.medium.u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # airLoss.medium.cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # airLoss.medium.g_formation[5]
  0       0                       0                       0                
  6   256   # airLoss.medium.ddTp
  0       0                       0                       0                
  6   256   # airLoss.medium.ddpT
  0       0                       0                       0                
  6   256   # airLoss.medium.dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # airLoss.medium.duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airLoss.medium.ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airLoss.medium.ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airLoss.medium.ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airLoss.medium.ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # airLoss.medium.ddx[5]
 -1       1                       0                 1.0000000000000000E+100
  1   280   # airLoss.d0
 -1     100                       0                       0                
  1   280   # airLoss.dp0
 -1  2.0000000000000000E-02       0                       0                
  1   280   # airLoss.m_flow0
  0       1                       0                       0                
  6   257   # airLoss.linearLoss
  0       0                       0                       0                
  6  1280   # airLoss.nonlinear
  0       0                       0                       0                
  6  1280   # airLoss.linear
 -1  1.0000000000000000E-02       0                       0                
  1  1304   # airLoss.limroot
 -1       1                       0                       0                
  1   281   # ignition.k
  0       7                       0                       0                
  6   258   # checkMassBalanceSystem.nS_fuel
  0       5                       0                       0                
  6   258   # checkMassBalanceSystem.nS_air
  0       5                       0                       0                
  6   258   # checkMassBalanceSystem.nS_exhaust
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_fuel[1]
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_fuel[2]
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_fuel[3]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_fuel[4]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_fuel[5]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_fuel[6]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_fuel[7]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_air[1]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_air[2]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_air[3]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_air[4]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_air[5]
 -1  1.8015268000000001E-02       0                 1.0000000000000000E+100
  1   280   # checkMassBalanceSystem.MMX_water[1]
  0  1.8015268000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].molarMass
  0  6.4709600000000000E+02       0                   10000                
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalTemperature
  0  2.2064000000000000E+07       0                  1.0000000000000000E+08
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalPressure
  0  5.5948037267080745E-05  9.9999999999999995E-07  1.0000000000000000E+06
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalMolarVolume
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalDensity
  0      -1                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalEnthalpy
  0      -1                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].criticalEntropy
  0  3.4399999999999997E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].acentricFactor
  0  2.7316000000000003E+02       0                   10000                
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].triplePointTemperature
  0  6.1165700000000004E+02       0                  1.0000000000000000E+08
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].triplePointPressure
  0  2.7314999999999998E+02       0                   10000                
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].meltingPoint
  0  3.7312400000000002E+02       0                   10000                
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].normalBoilingPoint
  0  1.8000000000000000E+00       0                       3                
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].dipoleMoment
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasIdealGasHeatCapacity
  0       1                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasCriticalData
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasDipoleMoment
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasFundamentalEquation
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasLiquidHeatCapacity
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasSolidHeatCapacity
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasAccurateViscosityData
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasAccurateConductivityData
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasVapourPressureCurve
  0       0                       0                       0                
  6  1281   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].hasAcentricFactor
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].HCRIT0
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].SCRIT0
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].deltah
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # _GlobalScope.Modelon.Media.EquationsOfState.Templates.Water.IF97.BaseIF97.waterConstants[1].deltas
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_exhaust[1]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_exhaust[2]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_exhaust[3]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_exhaust[4]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MMX_exhaust[5]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nH_fuel[1]
 -1       4                       0                       0                
  1   280   # checkMassBalanceSystem.nH_fuel[2]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_fuel[3]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_fuel[4]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nH_fuel[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_fuel[6]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_fuel[7]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_fuel[1]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nC_fuel[2]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nC_fuel[3]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nC_fuel[4]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_fuel[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_fuel[6]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_fuel[7]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nO_fuel[1]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nO_fuel[2]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nO_fuel[3]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nO_fuel[4]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nO_fuel[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nO_fuel[6]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nO_fuel[7]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_air[1]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_air[2]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nH_air[3]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_air[4]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_air[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_air[1]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nC_air[2]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_air[3]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_air[4]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_air[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nO_air[1]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nO_air[2]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nO_air[3]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nO_air[4]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nO_air[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_exhaust[1]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_exhaust[2]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nH_exhaust[3]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_exhaust[4]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nH_exhaust[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_exhaust[1]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nC_exhaust[2]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_exhaust[3]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_exhaust[4]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nC_exhaust[5]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nO_exhaust[1]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nO_exhaust[2]
 -1       1                       0                       0                
  1   280   # checkMassBalanceSystem.nO_exhaust[3]
 -1       0                       0                       0                
  1   280   # checkMassBalanceSystem.nO_exhaust[4]
 -1       2                       0                       0                
  1   280   # checkMassBalanceSystem.nO_exhaust[5]
  0  1.0079399999999999E-03       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MM_H
  0  1.2010699999999999E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MM_C
  0  1.5999400000000000E-02       0                 1.0000000000000000E+100
  6   256   # checkMassBalanceSystem.MM_O
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.m_flow_air_in
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.m_flow_in_total
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_fuel_in[1]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_fuel_in[2]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_fuel_in[3]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_fuel_in[4]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_fuel_in[5]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_fuel_in[6]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_fuel_in[7]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_air_in[1]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_air_in[2]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_air_in[3]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_air_in[4]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_air_in[5]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_exhaust_out[1]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_exhaust_out[2]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_exhaust_out[3]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_exhaust_out[4]
  0       0                       0                       1                
  6   256   # checkMassBalanceSystem.X_exhaust_out[5]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.change_m_flow
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.relativeChange_m_flow
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_fuel_in[1]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_fuel_in[2]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_fuel_in[3]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_fuel_in[4]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_fuel_in[5]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_fuel_in[6]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_fuel_in[7]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_air_in[1]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_air_in[2]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_air_in[3]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_air_in[4]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_air_in[5]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_exhaust_out[1]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_exhaust_out[2]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_exhaust_out[3]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_exhaust_out[4]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mX_exhaust_out[5]
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mH_in
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mC_in
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mO_in
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mH_out
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mC_out
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.mO_out
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.change_mH
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.change_mC
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.change_mO
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.relativeChange_mH
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.relativeChange_mC
  0       0                       0                       0                
  6   256   # checkMassBalanceSystem.relativeChange_mO
 -1       1                       0                 1.0000000000000000E+100
  1   282   # display_I.precision
  0       0                       0                       0                
  6   769   # display_I.use_numberPort
  0       0                       0                       0                
  6   769   # display_I.showText
  0       0                       0                       0                
  6   769   # display_I.hideBackground
  0       0                       0                       0                
  6   768   # display_P.number
 -1       0                       0                 1.0000000000000000E+100
  1   282   # display_P.precision
  0       0                       0                       0                
  6   769   # display_P.use_numberPort
  0       0                       0                       0                
  6   769   # display_P.showText
  0       0                       0                       0                
  6   769   # display_P.hideBackground
  0       0                       0                       0                
  6   257   # display_MoleFractions.displayMassUnit
  0       1                       1                       2                
  6   258   # display_MoleFractions.sensorType
  0       1                       0                       0                
  6   258   # display_MoleFractions.H2_index
  0       2                       0                       0                
  6   258   # display_MoleFractions.CH4_index
  0       3                       0                       0                
  6   258   # display_MoleFractions.CO_index
  0       4                       0                       0                
  6   258   # display_MoleFractions.CO2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions.H2O_index
  0       6                       0                       0                
  6   258   # display_MoleFractions.N2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions.O2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_MoleFractions.compatibleMedium
  0       2                       0                       0                
  6   258   # display_MoleFractions.precision
  0       0                       0                       0                
  6   256   # display_MoleFractions.X_H2
  0       0                       0                       0                
  6   256   # display_MoleFractions.X_CH4
  0       0                       0                       0                
  6   256   # display_MoleFractions.X_CO
  0       0                       0                       0                
  6   256   # display_MoleFractions.X_CO2
  0       0                       0                       0                
  6   256   # display_MoleFractions.X_H2O
  0       0                       0                       0                
  6   256   # display_MoleFractions.X_N2
  0       0                       0                       0                
  6   256   # display_MoleFractions.X_O2
  0       0                       0                       1                
  6   256   # display_MoleFractions.y[1]
  0       0                       0                       1                
  6   256   # display_MoleFractions.y[2]
  0       0                       0                       1                
  6   256   # display_MoleFractions.y[3]
  0       0                       0                       1                
  6   256   # display_MoleFractions.y[4]
  0       0                       0                       1                
  6   256   # display_MoleFractions.y[5]
  0       0                       0                       1                
  6   256   # display_MoleFractions.y[6]
  0       0                       0                       1                
  6   256   # display_MoleFractions.y[7]
  0    1000                       0                       0                
  6   256   # display_MoleFractions.flow_conversion
  0       0                       0                       0                
  6   257   # display_MoleFractions.visible_massfraction
  0       0                       0                       0                
  6   257   # display_MoleFractions.visible_molefraction
  0       0                       0                       0                
  6   257   # display_MoleFractions.visible_massflow
  0       0                       0                       0                
  6   257   # display_MoleFractions.visible_moleflow
  0       0                       0                       1                
  6   260   # display_MoleFractions.data.X[1]
  0       0                       0                       1                
  6   260   # display_MoleFractions.data.X[2]
  0       0                       0                       1                
  6   260   # display_MoleFractions.data.X[3]
  0       0                       0                       1                
  6   260   # display_MoleFractions.data.X[4]
  0       0                       0                       1                
  6   260   # display_MoleFractions.data.X[5]
  0       0                       0                       1                
  6   260   # display_MoleFractions.data.X[6]
  0       0                       0                       1                
  6   260   # display_MoleFractions.data.X[7]
  0       0                       0                       0                
  6   260   # display_MoleFractions.data.X_flow[1]
  0       0                       0                       0                
  6   260   # display_MoleFractions.data.X_flow[2]
  0       0                       0                       0                
  6   260   # display_MoleFractions.data.X_flow[3]
  0       0                       0                       0                
  6   260   # display_MoleFractions.data.X_flow[4]
  0       0                       0                       0                
  6   260   # display_MoleFractions.data.X_flow[5]
  0       0                       0                       0                
  6   260   # display_MoleFractions.data.X_flow[6]
  0       0                       0                       0                
  6   260   # display_MoleFractions.data.X_flow[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # gasSensor.state.p
  0     300                       0                   10000                
  6   256   # gasSensor.state.T
  0       0                       0                       1                
  6   256   # gasSensor.state.X[1]
  0       0                       0                       1                
  6   256   # gasSensor.state.X[2]
  0       0                       0                       1                
  6   256   # gasSensor.state.X[3]
  0       0                       0                       1                
  6   256   # gasSensor.state.X[4]
  0       0                       0                       1                
  6   256   # gasSensor.state.X[5]
  0       0                       0                       1                
  6   256   # gasSensor.state.X[6]
  0       0                       0                       1                
  6   256   # gasSensor.state.X[7]
  0       0                       0                       0                
  6   256   # display_phTmdot.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot.displayUnits
  0       0                       0                       0                
  6   257   # display_cathodeIn.displayMassUnit
  0       1                       0                       0                
  6   258   # display_cathodeIn.Ar_index
  0       2                       0                       0                
  6   258   # display_cathodeIn.CO2_index
  0       3                       0                       0                
  6   258   # display_cathodeIn.H2O_index
  0       4                       0                       0                
  6   258   # display_cathodeIn.N2_index
  0       5                       0                       0                
  6   258   # display_cathodeIn.O2_index
  0       5                       0                       0                
  6   258   # display_cathodeIn.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_cathodeIn.compatibleMedium
  0       1                       1                       2                
  6   258   # display_cathodeIn.sensorType
  0       2                       0                       0                
  6   258   # display_cathodeIn.precision
  0       0                       0                       0                
  6   256   # display_cathodeIn.X_Ar
  0       0                       0                       0                
  6   256   # display_cathodeIn.X_CO2
  0       0                       0                       0                
  6   256   # display_cathodeIn.X_H2O
  0       0                       0                       0                
  6   256   # display_cathodeIn.X_N2
  0       0                       0                       0                
  6   256   # display_cathodeIn.X_O2
  0       0                       0                       1                
  6   256   # display_cathodeIn.y[1]
  0       0                       0                       1                
  6   256   # display_cathodeIn.y[2]
  0       0                       0                       1                
  6   256   # display_cathodeIn.y[3]
  0       0                       0                       1                
  6   256   # display_cathodeIn.y[4]
  0       0                       0                       1                
  6   256   # display_cathodeIn.y[5]
  0    1000                       0                       0                
  6   256   # display_cathodeIn.flow_conversion
  0       0                       0                       0                
  6   257   # display_cathodeIn.visible_massfraction
  0       0                       0                       0                
  6   257   # display_cathodeIn.visible_molefraction
  0       0                       0                       0                
  6   257   # display_cathodeIn.visible_massflow
  0       0                       0                       0                
  6   257   # display_cathodeIn.visible_moleflow
  0     300                       0                   10000                
  6   260   # display_cathodeIn.data.temp
  0       0                       0                       1                
  6   260   # display_cathodeIn.data.X[1]
  0       0                       0                       1                
  6   260   # display_cathodeIn.data.X[2]
  0       0                       0                       1                
  6   260   # display_cathodeIn.data.X[3]
  0       0                       0                       1                
  6   260   # display_cathodeIn.data.X[4]
  0       0                       0                       1                
  6   260   # display_cathodeIn.data.X[5]
  0       0                       0                       0                
  6   260   # display_cathodeIn.data.X_flow[1]
  0       0                       0                       0                
  6   260   # display_cathodeIn.data.X_flow[2]
  0       0                       0                       0                
  6   260   # display_cathodeIn.data.X_flow[3]
  0       0                       0                       0                
  6   260   # display_cathodeIn.data.X_flow[4]
  0       0                       0                       0                
  6   260   # display_cathodeIn.data.X_flow[5]
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot_cathodeIn.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot_cathodeIn.displayUnits
  0       0                       0                       0                
  6   256   # display_phTmdot1.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot1.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot1.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot1.mdot
  0       0                       0                       0                
  6   260   # display_phTmdot1.y.X_flow[1]
  0       0                       0                       0                
  6   260   # display_phTmdot1.y.X_flow[2]
  0       0                       0                       0                
  6   260   # display_phTmdot1.y.X_flow[3]
  0       0                       0                       0                
  6   260   # display_phTmdot1.y.X_flow[4]
  0       0                       0                       0                
  6   260   # display_phTmdot1.y.X_flow[5]
  0       0                       0                       0                
  6   260   # display_phTmdot1.y.X_flow[6]
  0       0                       0                       0                
  6   260   # display_phTmdot1.y.X_flow[7]
  0       2                       0                       0                
  6   258   # display_phTmdot1.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot1.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot1.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot1.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot1.displayUnits
  0  100000                       0                  1.0000000000000000E+08
  6   256   # gasSensor1.state.p
  0     300                       0                   10000                
  6   256   # gasSensor1.state.T
  0       0                       0                       1                
  6   256   # gasSensor1.state.X[1]
  0       0                       0                       1                
  6   256   # gasSensor1.state.X[2]
  0       0                       0                       1                
  6   256   # gasSensor1.state.X[3]
  0       0                       0                       1                
  6   256   # gasSensor1.state.X[4]
  0       0                       0                       1                
  6   256   # gasSensor1.state.X[5]
  0       0                       0                       1                
  6   256   # gasSensor1.state.X[6]
  0       0                       0                       1                
  6   256   # gasSensor1.state.X[7]
  0     300                       0                   10000                
  6   256   # gasSensor_cathodeIn1.state.T
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn1.u.X[1]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn1.u.X[2]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn1.u.X[3]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn1.u.X[4]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn1.u.X[5]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn1.u.X_flow[1]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn1.u.X_flow[2]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn1.u.X_flow[3]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn1.u.X_flow[4]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn1.u.X_flow[5]
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn1.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn1.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn1.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn1.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot_cathodeIn1.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn1.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn1.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn1.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot_cathodeIn1.displayUnits
  0       0                       0                       0                
  6   257   # display_cathodeIn2.displayMassUnit
  0       1                       0                       0                
  6   258   # display_cathodeIn2.Ar_index
  0       2                       0                       0                
  6   258   # display_cathodeIn2.CO2_index
  0       3                       0                       0                
  6   258   # display_cathodeIn2.H2O_index
  0       4                       0                       0                
  6   258   # display_cathodeIn2.N2_index
  0       5                       0                       0                
  6   258   # display_cathodeIn2.O2_index
  0       5                       0                       0                
  6   258   # display_cathodeIn2.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_cathodeIn2.compatibleMedium
  0       1                       1                       2                
  6   258   # display_cathodeIn2.sensorType
  0       2                       0                       0                
  6   258   # display_cathodeIn2.precision
  0       0                       0                       0                
  6   256   # display_cathodeIn2.X_Ar
  0       0                       0                       0                
  6   256   # display_cathodeIn2.X_CO2
  0       0                       0                       0                
  6   256   # display_cathodeIn2.X_H2O
  0       0                       0                       0                
  6   256   # display_cathodeIn2.X_N2
  0       0                       0                       0                
  6   256   # display_cathodeIn2.X_O2
  0       0                       0                       1                
  6   256   # display_cathodeIn2.y[1]
  0       0                       0                       1                
  6   256   # display_cathodeIn2.y[2]
  0       0                       0                       1                
  6   256   # display_cathodeIn2.y[3]
  0       0                       0                       1                
  6   256   # display_cathodeIn2.y[4]
  0       0                       0                       1                
  6   256   # display_cathodeIn2.y[5]
  0    1000                       0                       0                
  6   256   # display_cathodeIn2.flow_conversion
  0       0                       0                       0                
  6   257   # display_cathodeIn2.visible_massfraction
  0       0                       0                       0                
  6   257   # display_cathodeIn2.visible_molefraction
  0       0                       0                       0                
  6   257   # display_cathodeIn2.visible_massflow
  0       0                       0                       0                
  6   257   # display_cathodeIn2.visible_moleflow
  0     300                       0                   10000                
  6   260   # display_cathodeIn2.data.temp
  0       0                       0                       1                
  6   260   # display_cathodeIn2.data.X[1]
  0       0                       0                       1                
  6   260   # display_cathodeIn2.data.X[2]
  0       0                       0                       1                
  6   260   # display_cathodeIn2.data.X[3]
  0       0                       0                       1                
  6   260   # display_cathodeIn2.data.X[4]
  0       0                       0                       1                
  6   260   # display_cathodeIn2.data.X[5]
  0       0                       0                       0                
  6   260   # display_cathodeIn2.data.X_flow[1]
  0       0                       0                       0                
  6   260   # display_cathodeIn2.data.X_flow[2]
  0       0                       0                       0                
  6   260   # display_cathodeIn2.data.X_flow[3]
  0       0                       0                       0                
  6   260   # display_cathodeIn2.data.X_flow[4]
  0       0                       0                       0                
  6   260   # display_cathodeIn2.data.X_flow[5]
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn2.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn2.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn2.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn2.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot_cathodeIn2.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn2.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn2.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn2.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot_cathodeIn2.displayUnits
  0       0                       0                       0                
  6   257   # display_MoleFractions2.displayMassUnit
  0       1                       1                       2                
  6   258   # display_MoleFractions2.sensorType
  0       1                       0                       0                
  6   258   # display_MoleFractions2.H2_index
  0       2                       0                       0                
  6   258   # display_MoleFractions2.CH4_index
  0       3                       0                       0                
  6   258   # display_MoleFractions2.CO_index
  0       4                       0                       0                
  6   258   # display_MoleFractions2.CO2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions2.H2O_index
  0       6                       0                       0                
  6   258   # display_MoleFractions2.N2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions2.O2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions2.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_MoleFractions2.compatibleMedium
  0       2                       0                       0                
  6   258   # display_MoleFractions2.precision
  0       0                       0                       0                
  6   256   # display_MoleFractions2.X_H2
  0       0                       0                       0                
  6   256   # display_MoleFractions2.X_CH4
  0       0                       0                       0                
  6   256   # display_MoleFractions2.X_CO
  0       0                       0                       0                
  6   256   # display_MoleFractions2.X_CO2
  0       0                       0                       0                
  6   256   # display_MoleFractions2.X_H2O
  0       0                       0                       0                
  6   256   # display_MoleFractions2.X_N2
  0       0                       0                       0                
  6   256   # display_MoleFractions2.X_O2
  0       0                       0                       1                
  6   256   # display_MoleFractions2.y[1]
  0       0                       0                       1                
  6   256   # display_MoleFractions2.y[2]
  0       0                       0                       1                
  6   256   # display_MoleFractions2.y[3]
  0       0                       0                       1                
  6   256   # display_MoleFractions2.y[4]
  0       0                       0                       1                
  6   256   # display_MoleFractions2.y[5]
  0       0                       0                       1                
  6   256   # display_MoleFractions2.y[6]
  0       0                       0                       1                
  6   256   # display_MoleFractions2.y[7]
  0    1000                       0                       0                
  6   256   # display_MoleFractions2.flow_conversion
  0       0                       0                       0                
  6   257   # display_MoleFractions2.visible_massfraction
  0       0                       0                       0                
  6   257   # display_MoleFractions2.visible_molefraction
  0       0                       0                       0                
  6   257   # display_MoleFractions2.visible_massflow
  0       0                       0                       0                
  6   257   # display_MoleFractions2.visible_moleflow
  0       0                       0                       1                
  6   260   # display_MoleFractions2.data.X[1]
  0       0                       0                       1                
  6   260   # display_MoleFractions2.data.X[2]
  0       0                       0                       1                
  6   260   # display_MoleFractions2.data.X[3]
  0       0                       0                       1                
  6   260   # display_MoleFractions2.data.X[4]
  0       0                       0                       1                
  6   260   # display_MoleFractions2.data.X[5]
  0       0                       0                       1                
  6   260   # display_MoleFractions2.data.X[6]
  0       0                       0                       1                
  6   260   # display_MoleFractions2.data.X[7]
  0       0                       0                       0                
  6   260   # display_MoleFractions2.data.X_flow[1]
  0       0                       0                       0                
  6   260   # display_MoleFractions2.data.X_flow[2]
  0       0                       0                       0                
  6   260   # display_MoleFractions2.data.X_flow[3]
  0       0                       0                       0                
  6   260   # display_MoleFractions2.data.X_flow[4]
  0       0                       0                       0                
  6   260   # display_MoleFractions2.data.X_flow[5]
  0       0                       0                       0                
  6   260   # display_MoleFractions2.data.X_flow[6]
  0       0                       0                       0                
  6   260   # display_MoleFractions2.data.X_flow[7]
  0       0                       0                       0                
  6   256   # display_phTmdot2.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot2.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot2.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot2.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot2.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot2.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot2.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot2.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot2.displayUnits
  0  100000                       0                  1.0000000000000000E+08
  6   256   # gasSensor2.state.p
  0     300                       0                   10000                
  6   256   # gasSensor2.state.T
  0       0                       0                       1                
  6   256   # gasSensor2.state.X[1]
  0       0                       0                       1                
  6   256   # gasSensor2.state.X[2]
  0       0                       0                       1                
  6   256   # gasSensor2.state.X[3]
  0       0                       0                       1                
  6   256   # gasSensor2.state.X[4]
  0       0                       0                       1                
  6   256   # gasSensor2.state.X[5]
  0       0                       0                       1                
  6   256   # gasSensor2.state.X[6]
  0       0                       0                       1                
  6   256   # gasSensor2.state.X[7]
  0     300                       0                   10000                
  6   256   # gasSensor_cathodeIn3.state.T
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn3.u.X_flow[1]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn3.u.X_flow[2]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn3.u.X_flow[3]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn3.u.X_flow[4]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn3.u.X_flow[5]
  0       0                       0                       0                
  6   257   # display_cathodeIn3.displayMassUnit
  0       1                       0                       0                
  6   258   # display_cathodeIn3.Ar_index
  0       2                       0                       0                
  6   258   # display_cathodeIn3.CO2_index
  0       3                       0                       0                
  6   258   # display_cathodeIn3.H2O_index
  0       4                       0                       0                
  6   258   # display_cathodeIn3.N2_index
  0       5                       0                       0                
  6   258   # display_cathodeIn3.O2_index
  0       5                       0                       0                
  6   258   # display_cathodeIn3.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_cathodeIn3.compatibleMedium
  0       1                       1                       2                
  6   258   # display_cathodeIn3.sensorType
  0       2                       0                       0                
  6   258   # display_cathodeIn3.precision
  0       0                       0                       0                
  6   256   # display_cathodeIn3.X_Ar
  0       0                       0                       0                
  6   256   # display_cathodeIn3.X_CO2
  0       0                       0                       0                
  6   256   # display_cathodeIn3.X_H2O
  0       0                       0                       0                
  6   256   # display_cathodeIn3.X_N2
  0       0                       0                       0                
  6   256   # display_cathodeIn3.X_O2
  0       0                       0                       1                
  6   256   # display_cathodeIn3.y[1]
  0       0                       0                       1                
  6   256   # display_cathodeIn3.y[2]
  0       0                       0                       1                
  6   256   # display_cathodeIn3.y[3]
  0       0                       0                       1                
  6   256   # display_cathodeIn3.y[4]
  0       0                       0                       1                
  6   256   # display_cathodeIn3.y[5]
  0    1000                       0                       0                
  6   256   # display_cathodeIn3.flow_conversion
  0       0                       0                       0                
  6   257   # display_cathodeIn3.visible_massfraction
  0       0                       0                       0                
  6   257   # display_cathodeIn3.visible_molefraction
  0       0                       0                       0                
  6   257   # display_cathodeIn3.visible_massflow
  0       0                       0                       0                
  6   257   # display_cathodeIn3.visible_moleflow
  0       0                       0                       1                
  6   260   # display_cathodeIn3.data.X[1]
  0       0                       0                       1                
  6   260   # display_cathodeIn3.data.X[2]
  0       0                       0                       1                
  6   260   # display_cathodeIn3.data.X[3]
  0       0                       0                       1                
  6   260   # display_cathodeIn3.data.X[4]
  0       0                       0                       1                
  6   260   # display_cathodeIn3.data.X[5]
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn3.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn3.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn3.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn3.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot_cathodeIn3.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn3.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn3.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn3.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot_cathodeIn3.displayUnits
  0     300                       0                   10000                
  6   256   # gasSensor_cathodeIn4.state.T
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn4.u.X_flow[1]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn4.u.X_flow[2]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn4.u.X_flow[3]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn4.u.X_flow[4]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn4.u.X_flow[5]
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn4.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn4.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn4.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn4.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot_cathodeIn4.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn4.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn4.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn4.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot_cathodeIn4.displayUnits
  0     300                       0                   10000                
  6   256   # gasSensor_cathodeIn5.state.T
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn5.u.X[1]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn5.u.X[2]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn5.u.X[3]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn5.u.X[4]
  0       0                       0                       1                
  6   260   # gasSensor_cathodeIn5.u.X[5]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn5.u.X_flow[1]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn5.u.X_flow[2]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn5.u.X_flow[3]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn5.u.X_flow[4]
  0       0                       0                       0                
  6   260   # gasSensor_cathodeIn5.u.X_flow[5]
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn5.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn5.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn5.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn5.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot_cathodeIn5.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn5.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn5.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn5.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot_cathodeIn5.displayUnits
  0       0                       0                       0                
  6   257   # display_MoleFractions1.displayMassUnit
  0       1                       1                       2                
  6   258   # display_MoleFractions1.sensorType
  0       1                       0                       0                
  6   258   # display_MoleFractions1.H2_index
  0       2                       0                       0                
  6   258   # display_MoleFractions1.CH4_index
  0       3                       0                       0                
  6   258   # display_MoleFractions1.CO_index
  0       4                       0                       0                
  6   258   # display_MoleFractions1.CO2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions1.H2O_index
  0       6                       0                       0                
  6   258   # display_MoleFractions1.N2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions1.O2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions1.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_MoleFractions1.compatibleMedium
  0       2                       0                       0                
  6   258   # display_MoleFractions1.precision
  0       0                       0                       0                
  6   256   # display_MoleFractions1.X_H2
  0       0                       0                       0                
  6   256   # display_MoleFractions1.X_CH4
  0       0                       0                       0                
  6   256   # display_MoleFractions1.X_CO
  0       0                       0                       0                
  6   256   # display_MoleFractions1.X_CO2
  0       0                       0                       0                
  6   256   # display_MoleFractions1.X_H2O
  0       0                       0                       0                
  6   256   # display_MoleFractions1.X_N2
  0       0                       0                       0                
  6   256   # display_MoleFractions1.X_O2
  0       0                       0                       1                
  6   256   # display_MoleFractions1.y[1]
  0       0                       0                       1                
  6   256   # display_MoleFractions1.y[2]
  0       0                       0                       1                
  6   256   # display_MoleFractions1.y[3]
  0       0                       0                       1                
  6   256   # display_MoleFractions1.y[4]
  0       0                       0                       1                
  6   256   # display_MoleFractions1.y[5]
  0       0                       0                       1                
  6   256   # display_MoleFractions1.y[6]
  0       0                       0                       1                
  6   256   # display_MoleFractions1.y[7]
  0    1000                       0                       0                
  6   256   # display_MoleFractions1.flow_conversion
  0       0                       0                       0                
  6   257   # display_MoleFractions1.visible_massfraction
  0       0                       0                       0                
  6   257   # display_MoleFractions1.visible_molefraction
  0       0                       0                       0                
  6   257   # display_MoleFractions1.visible_massflow
  0       0                       0                       0                
  6   257   # display_MoleFractions1.visible_moleflow
  0       0                       0                       1                
  6   260   # display_MoleFractions1.data.X[1]
  0       0                       0                       1                
  6   260   # display_MoleFractions1.data.X[2]
  0       0                       0                       1                
  6   260   # display_MoleFractions1.data.X[3]
  0       0                       0                       1                
  6   260   # display_MoleFractions1.data.X[4]
  0       0                       0                       1                
  6   260   # display_MoleFractions1.data.X[5]
  0       0                       0                       1                
  6   260   # display_MoleFractions1.data.X[6]
  0       0                       0                       1                
  6   260   # display_MoleFractions1.data.X[7]
  0       0                       0                       0                
  6   260   # display_MoleFractions1.data.X_flow[1]
  0       0                       0                       0                
  6   260   # display_MoleFractions1.data.X_flow[2]
  0       0                       0                       0                
  6   260   # display_MoleFractions1.data.X_flow[3]
  0       0                       0                       0                
  6   260   # display_MoleFractions1.data.X_flow[4]
  0       0                       0                       0                
  6   260   # display_MoleFractions1.data.X_flow[5]
  0       0                       0                       0                
  6   260   # display_MoleFractions1.data.X_flow[6]
  0       0                       0                       0                
  6   260   # display_MoleFractions1.data.X_flow[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # gasSensor3.state.p
  0     300                       0                   10000                
  6   256   # gasSensor3.state.T
  0       0                       0                       1                
  6   256   # gasSensor3.state.X[1]
  0       0                       0                       1                
  6   256   # gasSensor3.state.X[2]
  0       0                       0                       1                
  6   256   # gasSensor3.state.X[3]
  0       0                       0                       1                
  6   256   # gasSensor3.state.X[4]
  0       0                       0                       1                
  6   256   # gasSensor3.state.X[5]
  0       0                       0                       1                
  6   256   # gasSensor3.state.X[6]
  0       0                       0                       1                
  6   256   # gasSensor3.state.X[7]
  0       0                       0                       1                
  6   260   # gasSensor3.portB.X_outflow[1]
  0  9.4698225749100662E-01       0                       1                
  6   260   # gasSensor3.portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # gasSensor3.portB.X_outflow[3]
  0  5.3017742508993361E-02       0                       1                
  6   260   # gasSensor3.portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # gasSensor3.portB.X_outflow[5]
  0       0                       0                       1                
  6   260   # gasSensor3.portB.X_outflow[6]
  0       0                       0                       1                
  6   260   # gasSensor3.portB.X_outflow[7]
  0       0                       0                       0                
  6   256   # display_phTmdot3.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot3.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot3.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot3.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot3.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot3.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot3.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot3.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot3.displayUnits
  0     300                       0                   10000                
  6   256   # gasSensor4.state.T
  0       0                       0                       1                
  6   260   # gasSensor4.portA.X_outflow[1]
  0       0                       0                       1                
  6   260   # gasSensor4.portA.X_outflow[2]
  0       0                       0                       1                
  6   260   # gasSensor4.portA.X_outflow[3]
  0  7.7000000000000002E-01       0                       1                
  6   260   # gasSensor4.portA.X_outflow[4]
  0  2.3000000000000001E-01       0                       1                
  6   260   # gasSensor4.portA.X_outflow[5]
  0       0                       0                       0                
  6   260   # gasSensor4.u.X_flow[1]
  0       0                       0                       0                
  6   260   # gasSensor4.u.X_flow[2]
  0       0                       0                       0                
  6   260   # gasSensor4.u.X_flow[3]
  0       0                       0                       0                
  6   260   # gasSensor4.u.X_flow[4]
  0       0                       0                       0                
  6   260   # gasSensor4.u.X_flow[5]
  0       0                       0                       0                
  6   257   # display_MoleFractions3.displayMassUnit
  0       1                       0                       0                
  6   258   # display_MoleFractions3.Ar_index
  0       2                       0                       0                
  6   258   # display_MoleFractions3.CO2_index
  0       3                       0                       0                
  6   258   # display_MoleFractions3.H2O_index
  0       4                       0                       0                
  6   258   # display_MoleFractions3.N2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions3.O2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions3.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_MoleFractions3.compatibleMedium
  0       1                       1                       2                
  6   258   # display_MoleFractions3.sensorType
  0       2                       0                       0                
  6   258   # display_MoleFractions3.precision
  0       0                       0                       0                
  6   256   # display_MoleFractions3.X_Ar
  0       0                       0                       0                
  6   256   # display_MoleFractions3.X_CO2
  0       0                       0                       0                
  6   256   # display_MoleFractions3.X_H2O
  0       0                       0                       0                
  6   256   # display_MoleFractions3.X_N2
  0       0                       0                       0                
  6   256   # display_MoleFractions3.X_O2
  0       0                       0                       1                
  6   256   # display_MoleFractions3.y[1]
  0       0                       0                       1                
  6   256   # display_MoleFractions3.y[2]
  0       0                       0                       1                
  6   256   # display_MoleFractions3.y[3]
  0       0                       0                       1                
  6   256   # display_MoleFractions3.y[4]
  0       0                       0                       1                
  6   256   # display_MoleFractions3.y[5]
  0    1000                       0                       0                
  6   256   # display_MoleFractions3.flow_conversion
  0       0                       0                       0                
  6   257   # display_MoleFractions3.visible_massfraction
  0       0                       0                       0                
  6   257   # display_MoleFractions3.visible_molefraction
  0       0                       0                       0                
  6   257   # display_MoleFractions3.visible_massflow
  0       0                       0                       0                
  6   257   # display_MoleFractions3.visible_moleflow
  0       0                       0                       1                
  6   260   # display_MoleFractions3.data.X[1]
  0       0                       0                       1                
  6   260   # display_MoleFractions3.data.X[2]
  0       0                       0                       1                
  6   260   # display_MoleFractions3.data.X[3]
  0       0                       0                       1                
  6   260   # display_MoleFractions3.data.X[4]
  0       0                       0                       1                
  6   260   # display_MoleFractions3.data.X[5]
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn6.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn6.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn6.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot_cathodeIn6.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot_cathodeIn6.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn6.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn6.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot_cathodeIn6.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot_cathodeIn6.displayUnits
  0       0                       0                       0                
  6   257   # display_MoleFractions4.displayMassUnit
  0       1                       0                       0                
  6   258   # display_MoleFractions4.Ar_index
  0       2                       0                       0                
  6   258   # display_MoleFractions4.CO2_index
  0       3                       0                       0                
  6   258   # display_MoleFractions4.H2O_index
  0       4                       0                       0                
  6   258   # display_MoleFractions4.N2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions4.O2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions4.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_MoleFractions4.compatibleMedium
  0       1                       1                       2                
  6   258   # display_MoleFractions4.sensorType
  0       2                       0                       0                
  6   258   # display_MoleFractions4.precision
  0       0                       0                       0                
  6   256   # display_MoleFractions4.X_Ar
  0       0                       0                       0                
  6   256   # display_MoleFractions4.X_CO2
  0       0                       0                       0                
  6   256   # display_MoleFractions4.X_H2O
  0       0                       0                       0                
  6   256   # display_MoleFractions4.X_N2
  0       0                       0                       0                
  6   256   # display_MoleFractions4.X_O2
  0       0                       0                       1                
  6   256   # display_MoleFractions4.y[1]
  0       0                       0                       1                
  6   256   # display_MoleFractions4.y[2]
  0       0                       0                       1                
  6   256   # display_MoleFractions4.y[3]
  0       0                       0                       1                
  6   256   # display_MoleFractions4.y[4]
  0       0                       0                       1                
  6   256   # display_MoleFractions4.y[5]
  0    1000                       0                       0                
  6   256   # display_MoleFractions4.flow_conversion
  0       0                       0                       0                
  6   257   # display_MoleFractions4.visible_massfraction
  0       0                       0                       0                
  6   257   # display_MoleFractions4.visible_molefraction
  0       0                       0                       0                
  6   257   # display_MoleFractions4.visible_massflow
  0       0                       0                       0                
  6   257   # display_MoleFractions4.visible_moleflow
  0       0                       0                       1                
  6   260   # display_MoleFractions4.data.X[1]
  0       0                       0                       1                
  6   260   # display_MoleFractions4.data.X[2]
  0       0                       0                       1                
  6   260   # display_MoleFractions4.data.X[3]
  0       0                       0                       1                
  6   260   # display_MoleFractions4.data.X[4]
  0       0                       0                       1                
  6   260   # display_MoleFractions4.data.X[5]
  0       1                       0                       1                
  6   260   # multiDisplaySensor4.portA.X_outflow[1]
  0     300                       0                   10000                
  6   260   # multiDisplaySensor4.u.temp
  0       0                       0                       1                
  6   260   # multiDisplaySensor4.u.X[1]
  0       0                       0                       0                
  6   260   # multiDisplaySensor4.u.X_flow[1]
  0       1                       0                       1                
  6   260   # multiDisplaySensor4.multiDisplaySensor.portA.X_outflow[1]
  0       0                       0                       0                
  6   256   # display_phTmdot4.h_kJ
  0       0                       0                       0                
  6   256   # display_phTmdot4.p_bar
  0       0                       0                       0                
  6   256   # display_phTmdot4.T_degC
  0       0                       0                       0                
  6   256   # display_phTmdot4.mdot
  0       2                       0                       0                
  6   258   # display_phTmdot4.precision_p
  0       1                       0                       0                
  6   258   # display_phTmdot4.precision_h
  0       1                       0                       0                
  6   258   # display_phTmdot4.precision_T
  0       1                       0                       0                
  6   258   # display_phTmdot4.precision_mdot
 -1       1                       0                       0                
  1   281   # display_phTmdot4.displayUnits
  0       0                       0                       0                
  6   257   # display_MoleFractions5.displayMassUnit
  0       1                       1                       2                
  6   258   # display_MoleFractions5.sensorType
  0       1                       0                       0                
  6   258   # display_MoleFractions5.H2_index
  0       2                       0                       0                
  6   258   # display_MoleFractions5.CH4_index
  0       3                       0                       0                
  6   258   # display_MoleFractions5.CO_index
  0       4                       0                       0                
  6   258   # display_MoleFractions5.CO2_index
  0       5                       0                       0                
  6   258   # display_MoleFractions5.H2O_index
  0       6                       0                       0                
  6   258   # display_MoleFractions5.N2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions5.O2_index
  0       7                       0                       0                
  6   258   # display_MoleFractions5.nbrOfPresentSubstances
  0       1                       0                       0                
  6   257   # display_MoleFractions5.compatibleMedium
  0       2                       0                       0                
  6   258   # display_MoleFractions5.precision
  0       0                       0                       0                
  6   256   # display_MoleFractions5.X_H2
  0       0                       0                       0                
  6   256   # display_MoleFractions5.X_CH4
  0       0                       0                       0                
  6   256   # display_MoleFractions5.X_CO
  0       0                       0                       0                
  6   256   # display_MoleFractions5.X_CO2
  0       0                       0                       0                
  6   256   # display_MoleFractions5.X_H2O
  0       0                       0                       0                
  6   256   # display_MoleFractions5.X_N2
  0       0                       0                       0                
  6   256   # display_MoleFractions5.X_O2
  0       0                       0                       1                
  6   256   # display_MoleFractions5.y[1]
  0       0                       0                       1                
  6   256   # display_MoleFractions5.y[2]
  0       0                       0                       1                
  6   256   # display_MoleFractions5.y[3]
  0       0                       0                       1                
  6   256   # display_MoleFractions5.y[4]
  0       0                       0                       1                
  6   256   # display_MoleFractions5.y[5]
  0       0                       0                       1                
  6   256   # display_MoleFractions5.y[6]
  0       0                       0                       1                
  6   256   # display_MoleFractions5.y[7]
  0    1000                       0                       0                
  6   256   # display_MoleFractions5.flow_conversion
  0       0                       0                       0                
  6   257   # display_MoleFractions5.visible_massfraction
  0       0                       0                       0                
  6   257   # display_MoleFractions5.visible_molefraction
  0       0                       0                       0                
  6   257   # display_MoleFractions5.visible_massflow
  0       0                       0                       0                
  6   257   # display_MoleFractions5.visible_moleflow
  0       0                       0                       1                
  6   260   # display_MoleFractions5.data.X[1]
  0       0                       0                       1                
  6   260   # display_MoleFractions5.data.X[2]
  0       0                       0                       1                
  6   260   # display_MoleFractions5.data.X[3]
  0       0                       0                       1                
  6   260   # display_MoleFractions5.data.X[4]
  0       0                       0                       1                
  6   260   # display_MoleFractions5.data.X[5]
  0       0                       0                       1                
  6   260   # display_MoleFractions5.data.X[6]
  0       0                       0                       1                
  6   260   # display_MoleFractions5.data.X[7]
  0       0                       0                       0                
  6   768   # display_I1.number
 -1       1                       0                 1.0000000000000000E+100
  1   282   # display_I1.precision
  0       0                       0                       0                
  6   769   # display_I1.use_numberPort
  0       0                       0                       0                
  6   769   # display_I1.showText
  0       0                       0                       0                
  6   769   # display_I1.hideBackground
  0       0                       0                       0                
  6   768   # display_P1.number
 -1       0                       0                 1.0000000000000000E+100
  1   282   # display_P1.precision
  0       0                       0                       0                
  6   769   # display_P1.use_numberPort
  0       0                       0                       0                
  6   769   # display_P1.showText
  0       0                       0                       0                
  6   769   # display_P1.hideBackground
  0       0                       0                       0                
  6   388   # stack.subStack[1].anode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].anode_channel.channel.q[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].anode_channel.channel.q[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].anode_channel.channel.q[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cathode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cathode_channel.channel.q[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cathode_channel.channel.q[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[1].cathode_channel.channel.q[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].anode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].anode_channel.channel.q[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].anode_channel.channel.q[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].anode_channel.channel.q[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cathode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cathode_channel.channel.q[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cathode_channel.channel.q[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[2].cathode_channel.channel.q[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].anode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].anode_channel.channel.q[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].anode_channel.channel.q[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].anode_channel.channel.q[4].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cathode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cathode_channel.channel.q[2].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cathode_channel.channel.q[3].Q_flow
  0       0                       0                       0                
  6   388   # stack.subStack[3].cathode_channel.channel.q[4].Q_flow
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_in_par[1].y
  0  9.4698225749100662E-01       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_in_par[2].y
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_in_par[3].y
  0  5.3017742508993361E-02       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_in_par[4].y
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_in_par[5].y
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_in_par[6].y
  0       0                       0                       0                
  6  1280   # NGSource.massFlowBoundary.X_in_par[7].y


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(17456,148)
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Parameterize by mass or volume flow rate [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from input connector [:#(type=Boolean)]
Get the temperature or specific enthalpy input connector [:#(type=Boolean)]
Get the mass fraction from input connector [:#(type=Boolean)]
Get the trace species concentration from input connector [:#(type=Boolean)]

Initial Pressure [Pa|bar]
[1]
[1]
[1]
[1]
[1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Fluid density [kg/m3|g/cm3]
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
Flow type definition [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the mass fraction from the input connector [:#(type=Boolean)]
Potential at the pin [V]
Current flowing into the pin [A]
Height of ramp [A]
Duration of ramp [s]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
Current offset [A]
Time offset [s]
Height of ramps [A]
Duration of ramp (= 0.0 gives a Step) [s]
Offset of output signal y [A]
Output y = offset for time < startTime [s]
Number of discretization nodes in the flow direction [:#(type=Integer)]
number of substacks in parallel [:#(type=Integer)]
number of cells in substacks (vector) [:#(type=Integer)]
number of cells in substacks (vector) [:#(type=Integer)]
number of cells in substacks (vector) [:#(type=Integer)]
active cell area [m2]
specific heat capacity of cell material [J/(kg.K)]
cell internal heat transfer coefficient [W/(m2.K)]
total mass of stack [kg]
Top wall area [m2]
Top wall heat transfer coefficient [W/(m2.K)]
Top wall average metal thickness [m]
Top wall convective heat transfer coefficient (Convection) [W/(m2.K)]
Top wall emission value (Radiation) [1]
Bottom wall area [m2]
Bottom wall heat transfer coefficient [W/(m2.K)]
Bottom wall average metal thickness [m]
Side walls area (sum 4 sides) [m2]
Side walls convective heat transfer coefficient [W/(m2.K)]
Side walls emission value
Insulation thermal conductivity (conduction) [W/(m.K)]
Top wall insulation thickness [m]
Bottom wall insulation thickness [m]
Side walls insulation thickness [m]
Number of segments [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Initial mass flow rate (guess value) [kg/s]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
Initial pressure drop in anode manifolds due to friction/Pipe resistance [Pa|bar]
Initial pressure drop in cathode manifolds due to friction/Pipe resistance [Pa|bar]
splitratio anode side
splitratio anode side
splitratio anode side
splitratio cathode side
splitratio cathode side
splitratio cathode side
Manifold_an volume [m3]
Manifold_cath volume [m3]
Stack height [m]
Cell thickness [m]
Average metal thickness of wall [m|mm]
Total cell area [m2]
Nominal mass flow rate anode side [kg/s]
Nominal mass flow rate cathode side [kg/s]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
True if thermal conduction in the cell along the flow direction is included [:#(type=Boolean)]
Cell internal thermal conductivity [W/(m.K)]
Cross section area of a single cell [m2]
Length of the cell [m]
Cell thermal conductance of material [W/K]
number of cells in substack [:#(type=Integer)]
total mass of substack [kg]
specific heat capacity of substack material [J/(kg.K)]
Add prox reactor before inlet to anode channel [:#(type=Boolean)]
substack power [W]
Anode stoichiometry [1]
Cathode stoichiometry [1]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
number of cells [:#(type=Integer)]
total heat capacity, PEN, substrate and electrolyte [J/K]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
heat produced in each section [W]
heat produced in each section [W]
heat produced in each section [W]
heat produced in each section [W]
calculate anode and cathode temperature explicitly from enthalpy [:#(type=Boolean)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Tcell derivative [K/s]
Tcell derivative [K/s]
Tcell derivative [K/s]
Tcell derivative [K/s]
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
H0(298.15K) - H0(0K) [J/kg]
degree of heat capacity polynomial [:#(type=Integer)]
Coefficients for cp
Coefficients for cp
Coefficients for entropy
Coefficients for entropy
Coefficients for entropy
Lower bound for fitting [K] []
Upper bound for fitting [K] []
[W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
[degC]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Initial temperature dependent resistivity [Ohm.m2]
Activation energy [J/mol]
temperature [K|degC]
Nernst potentials [V]
Nernst potentials [V]
Nernst potentials [V]
Nernst potentials [V]
Internal resistance [Ohm]
Internal resistance [Ohm]
Internal resistance [Ohm]
Internal resistance [Ohm]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reformate component indices [:#(type=Integer)]
Reformate component indices [:#(type=Integer)]
Cathode air component indices [:#(type=Integer)]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Potential at the pin [V]
Current flowing into the pin [A]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
[1]
Number of parallel channels [1]
Length of anode channel [m]
Diameter of anode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference anode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of cathode channel [m]
Diameter of cathode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference cathode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of segments [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer
Calibration factor for pressure drop
Calibration factor for heat transfer
Nominal density in prox loss (only used if addProxToAnode=true) [kg/m3|g/cm3]
Nominal pressure drop in prox loss (only used if addProxToAnode=true) [Pa|bar]
Nominal mass flow rate in prox loss (only used if addProxToAnode=true) [kg/s]
[mol/s]
[mol/s]
[mol/s]
[mol/s]
Number of discretizations [:#(type=Integer)]
Number of cells [:#(type=Integer)]
External current density [A/m2]
Cell voltage [V]
Total heat produced in cell [W]
Pressure drop anode side [Pa|bar]
Pressure drop cathode side [Pa|bar]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
Total volume of the pipe [m3]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
number of reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]







Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]








Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
substance index vector with CH4 and H2O [:#(type=Integer)]
substance index vector with CH4 and H2O [:#(type=Integer)]
[K|degC]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Total heat flow rate into pipe [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
[1]
[1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
Total volume of the pipe [m3]
Temperature of upstream fluid [K|degC]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
number of reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]





Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Temperature of medium [K|degC]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Total heat flow rate into pipe [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
[1]
[1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
index for H2 in the anode medium [:#(type=Integer)]
index for O2 in the cathode medium [:#(type=Integer)]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
True if thermal conduction in the cell along the flow direction is included [:#(type=Boolean)]
Cell internal thermal conductivity [W/(m.K)]
Cross section area of a single cell [m2]
Length of the cell [m]
Cell thermal conductance of material [W/K]
number of cells in substack [:#(type=Integer)]
total mass of substack [kg]
specific heat capacity of substack material [J/(kg.K)]
Add prox reactor before inlet to anode channel [:#(type=Boolean)]
substack power [W]
Anode stoichiometry [1]
Cathode stoichiometry [1]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
number of cells [:#(type=Integer)]
total heat capacity, PEN, substrate and electrolyte [J/K]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
heat produced in each section [W]
heat produced in each section [W]
heat produced in each section [W]
heat produced in each section [W]
calculate anode and cathode temperature explicitly from enthalpy [:#(type=Boolean)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Tcell derivative [K/s]
Tcell derivative [K/s]
Tcell derivative [K/s]
Tcell derivative [K/s]
[W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
[degC]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Initial temperature dependent resistivity [Ohm.m2]
Activation energy [J/mol]
temperature [K|degC]
Nernst potentials [V]
Nernst potentials [V]
Nernst potentials [V]
Nernst potentials [V]
Internal resistance [Ohm]
Internal resistance [Ohm]
Internal resistance [Ohm]
Internal resistance [Ohm]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reformate component indices [:#(type=Integer)]
Reformate component indices [:#(type=Integer)]
Cathode air component indices [:#(type=Integer)]
Current flowing into the pin [A]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
[1]
Number of parallel channels [1]
Length of anode channel [m]
Diameter of anode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference anode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of cathode channel [m]
Diameter of cathode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference cathode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of segments [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer
Calibration factor for pressure drop
Calibration factor for heat transfer
Nominal density in prox loss (only used if addProxToAnode=true) [kg/m3|g/cm3]
Nominal pressure drop in prox loss (only used if addProxToAnode=true) [Pa|bar]
Nominal mass flow rate in prox loss (only used if addProxToAnode=true) [kg/s]
[mol/s]
[mol/s]
[mol/s]
[mol/s]
Number of discretizations [:#(type=Integer)]
Number of cells [:#(type=Integer)]
External current density [A/m2]
Cell voltage [V]
Total heat produced in cell [W]
Pressure drop anode side [Pa|bar]
Pressure drop cathode side [Pa|bar]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
Total volume of the pipe [m3]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
number of reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]







Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]








Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
substance index vector with CH4 and H2O [:#(type=Integer)]
substance index vector with CH4 and H2O [:#(type=Integer)]
[K|degC]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Total heat flow rate into pipe [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
[1]
[1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
Total volume of the pipe [m3]
Temperature of upstream fluid [K|degC]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
number of reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]





Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Temperature of medium [K|degC]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Total heat flow rate into pipe [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
[1]
[1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
index for H2 in the anode medium [:#(type=Integer)]
index for O2 in the cathode medium [:#(type=Integer)]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
True if thermal conduction in the cell along the flow direction is included [:#(type=Boolean)]
Cell internal thermal conductivity [W/(m.K)]
Cross section area of a single cell [m2]
Length of the cell [m]
Cell thermal conductance of material [W/K]
number of cells in substack [:#(type=Integer)]
total mass of substack [kg]
specific heat capacity of substack material [J/(kg.K)]
Add prox reactor before inlet to anode channel [:#(type=Boolean)]
substack power [W]
Anode stoichiometry [1]
Cathode stoichiometry [1]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
number of cells [:#(type=Integer)]
total heat capacity, PEN, substrate and electrolyte [J/K]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
heat produced in each section [W]
heat produced in each section [W]
heat produced in each section [W]
heat produced in each section [W]
calculate anode and cathode temperature explicitly from enthalpy [:#(type=Boolean)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Potential at the pin [V]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy of mixture [J/kg]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
temperature on the anode side [K|degC]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Absolute pressure of medium [Pa|bar]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Tcell derivative [K/s]
Tcell derivative [K/s]
Tcell derivative [K/s]
Tcell derivative [K/s]
[W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Power to external load from each cell [W]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
Effective current that relates to consumption of oxygen [A/m2]
[degC]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Initial temperature dependent resistivity [Ohm.m2]
Activation energy [J/mol]
temperature [K|degC]
Nernst potentials [V]
Nernst potentials [V]
Nernst potentials [V]
Nernst potentials [V]
Internal resistance [Ohm]
Internal resistance [Ohm]
Internal resistance [Ohm]
Internal resistance [Ohm]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Temperature dependent resistivity [Ohm.m2]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Gibbs free energy from reaction [J/mol]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2 [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Pressure of O2 [Pa|bar]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Potential at the pin [V]
Potential at the pin [V]
Potential at the pin [V]
Potential at the pin [V]
Reformate component indices [:#(type=Integer)]
Reformate component indices [:#(type=Integer)]
Cathode air component indices [:#(type=Integer)]
Potential at the pin [V]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
[1]
Number of parallel channels [1]
Length of anode channel [m]
Diameter of anode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference anode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of cathode channel [m]
Diameter of cathode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference cathode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of segments [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer
Calibration factor for pressure drop
Calibration factor for heat transfer
Nominal density in prox loss (only used if addProxToAnode=true) [kg/m3|g/cm3]
Nominal pressure drop in prox loss (only used if addProxToAnode=true) [Pa|bar]
Nominal mass flow rate in prox loss (only used if addProxToAnode=true) [kg/s]
[mol/s]
[mol/s]
[mol/s]
[mol/s]
Number of discretizations [:#(type=Integer)]
Number of cells [:#(type=Integer)]
External current density [A/m2]
Cell voltage [V]
Total heat produced in cell [W]
Pressure drop anode side [Pa|bar]
Pressure drop cathode side [Pa|bar]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
Total volume of the pipe [m3]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
number of reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]







Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]








Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
substance index vector with CH4 and H2O [:#(type=Integer)]
substance index vector with CH4 and H2O [:#(type=Integer)]
[K|degC]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Total heat flow rate into pipe [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
[1]
[1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
Total volume of the pipe [m3]
Temperature of upstream fluid [K|degC]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Number of parallel channels [1]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Reaction heat, only if not included in enthalpy [W]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
Component balance, in/out [kg/s]
number of reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]





Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
Total # of moles [mol]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
der(Total # of moles) [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
der(gas pressure) [Pa/s]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
mass per segment [kg]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
der(mass per segment) [kg/s]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Static head between control volumes [Pa|bar]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Temperature of medium [K|degC]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Heat flow rate into control volumes [W]
Total heat flow rate into pipe [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat flow rate from connector q [W]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mass flow over cv boundaries, positive from portA towards portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
[1]
[1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
index for H2 in the anode medium [:#(type=Integer)]
index for O2 in the cathode medium [:#(type=Integer)]
Number of substacks [:#(type=Integer)]
Total stack voltage [V]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
total heat flow from qa to qb [W]
Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
Number of nodes [:#(type=Integer)]
Wall metal volume per segment [m3]
Wall metal volume per segment [m3]
Wall metal volume per segment [m3]
Wall metal volume per segment [m3]
Wall area per segment [m2]
Wall area per segment [m2]
Wall area per segment [m2]
Wall area per segment [m2]
Average metal thickness of wall [m|mm]
Remove thermal resistance if false [:#(type=Boolean)]
removes thermal inertia if true [:#(type=Boolean)]
true for counterflow difference [:#(type=Boolean)]
True if derivatives should be zero at initialization [:#(type=Boolean)]
Temperature start value - first node [K|degC]
Temperature start value - last node [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
[kg]
[kg]
[kg]
[kg]
Thermal resistance [K/W]
Thermal resistance [K/W]
Thermal resistance [K/W]
Thermal resistance [K/W]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [degC]
Metal mean temperature, direction along n as on side qa [degC]
Metal mean temperature, direction along n as on side qa [degC]
Metal mean temperature, direction along n as on side qa [degC]








Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
Number of nodes [:#(type=Integer)]
Wall metal volume per segment [m3]
Wall metal volume per segment [m3]
Wall metal volume per segment [m3]
Wall metal volume per segment [m3]
Wall area per segment [m2]
Wall area per segment [m2]
Wall area per segment [m2]
Wall area per segment [m2]
Average metal thickness of wall [m|mm]
Remove thermal resistance if false [:#(type=Boolean)]
removes thermal inertia if true [:#(type=Boolean)]
true for counterflow difference [:#(type=Boolean)]
True if derivatives should be zero at initialization [:#(type=Boolean)]
Temperature start value - first node [K|degC]
Temperature start value - last node [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
[kg]
[kg]
[kg]
[kg]
Thermal resistance [K/W]
Thermal resistance [K/W]
Thermal resistance [K/W]
Thermal resistance [K/W]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [degC]
Metal mean temperature, direction along n as on side qa [degC]
Metal mean temperature, direction along n as on side qa [degC]
Metal mean temperature, direction along n as on side qa [degC]
Introduced due to pre()-only operates directly on variables
Introduced due to pre()-only operates directly on variables
Introduced due to pre()-only operates directly on variables
Introduced due to pre()-only operates directly on variables




Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
Port temperature [K|degC]
Invert flow direction at the cathode to obtain counter flow configuration [:#(type=Boolean)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of drain connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial inlet pressure [Pa|bar]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of drain connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial inlet pressure [Pa|bar]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet temperatrue [K|degC]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Inlet fluid temperature, design flow direction [K|degC]
Inlet fluid temperature, reverse flow direction [K|degC]
Outlet fluid temperature, design flow direction [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Inlet fluid temperature, design flow direction [K|degC]
Inlet fluid temperature, reverse flow direction [K|degC]
Outlet fluid temperature, design flow direction [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Inlet fluid temperature, design flow direction [K|degC]
Inlet fluid temperature, reverse flow direction [K|degC]
Outlet fluid temperature, design flow direction [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of feed connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial outlet pressure [Pa|bar]
Volume size [m3]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
Total volume [m3]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Volume size [m3]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of feed connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial outlet pressure [Pa|bar]
Volume size [m3]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet temperatrue [K|degC]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
Total volume [m3]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Volume size [m3]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Inlet fluid temperature, design flow direction [K|degC]
Inlet fluid temperature, reverse flow direction [K|degC]
Outlet fluid temperature, design flow direction [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Potential at the pin [V]
Current flowing into the pin [A]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Number of discretization from left to right wall [:#(type=Integer)]
Number of discretization from bottom to top wall [:#(type=Integer)]
Total top wall area [m2]
Total bottom wall area [m2]
Total vertical wall area (sum 4 sides) [m2]
Top wall convection heat transfer coefficient [W/(m2.K)]
Vertical walls convection heat transfer coefficient [W/(m2.K)]
Emission value of top wall [1]
Emission value of vertical walls
Insulation thermal conductivity [W/(m.K)]
Top insulation thickness [m]
Bottom insulation thickness [m]
Side wall insulation thickness [m]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Environment heat transfer [W]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
Constant output value [W/K]
Constant output value [W/K]
Constant output value [W/K]
Constant output value [W/K]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
Constant output value [W/K]
Constant output value [W/K]
Constant output value [W/K]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
Constant output value [W/K]
Constant output value [W/K]
Constant output value [W/K]
port_a.T - port_b.T [K,]
Constant thermal conductance of material [W/K]
port_a.T - port_b.T [K,]
Constant thermal conductance of material [W/K]
port_a.T - port_b.T [K,]
Constant thermal conductance of material [W/K]
port_a.T - port_b.T [K,]
Constant thermal conductance of material [W/K]
Port temperature [K|degC]
Heat flow rate (positive if flowing from outside into the component) [W]
Fuel flowing into the system
Fuel consumed in the fuel cell
Fuel utilization
index for H2 in the anode medium [:#(type=Integer)]
index for H2 in the anode medium [:#(type=Integer)]
Number of substacks [:#(type=Integer)]
Number of components in fuel medium [:#(type=Integer)]
Anode flow rate [kg/s|g/s]
Stack air outlet manifold temperature [degC]
Stack air outlet manifold temperature [degC]
Stack air outlet manifold temperature [degC]
Stack fuel outlet temperature [degC]
Stack fuel outlet temperature [degC]
Stack fuel outlet temperature [degC]
Membrane exit temperature [degC]
Membrane exit temperature [degC]
Membrane exit temperature [degC]
Stack base plate metal temperature [degC]
Stack top end plate metal temperature [degC]
Total stack heat [J]
Stack electrical power out [W]
Total stack voltage [V]
Total stack power [W]
Substack voltages [V]
Substack voltages [V]
Substack voltages [V]
Stack fuel utilisation (% of total H2 supplied consumed by electrochemistry) [1]
Stack fuel utilisation (% of total H2 supplied consumed by electrochemistry) [1]
Stack fuel utilisation (% of total H2 supplied consumed by electrochemistry) [1]
Utilization of CH4 in reformer [1]
Utilization of O2 in reformer [1]
Thermal reforming efficiency in reformer
Steam to carbon ratio at inlet to the refomer
Oxygen gas carbon ratio at inlet to the reformer
Temperature in steam mixing volume [degC]
Temperature of generated steam [degC]
Temperature of liquid in steam generator [degC]
Specific enthalpy of exiting fluid  [J/kg]
Parameterize by mass or volume flow rate [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [kg/kg]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from input connector [:#(type=Boolean)]
Get the temperature or specific enthalpy input connector [:#(type=Boolean)]
Get the mass fraction from input connector [:#(type=Boolean)]
Get the trace species concentration from input connector [:#(type=Boolean)]

Initial Pressure [Pa|bar]
Fluid density [kg/m3|g/cm3]
Flow type definition [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [1]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the mass fraction from the input connector [:#(type=Boolean)]
Pressure [Pa|bar]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Parameterize by mass or volume flow rate [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from input connector [:#(type=Boolean)]
Get the temperature or specific enthalpy input connector [:#(type=Boolean)]
Get the mass fraction from input connector [:#(type=Boolean)]
Get the trace species concentration from input connector [:#(type=Boolean)]

Initial Pressure [Pa|bar]
[1]
[1]
[1]
[1]
[1]
[1]
[1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Fluid density [kg/m3|g/cm3]
Flow type definition [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the mass fraction from the input connector [:#(type=Boolean)]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Parameterize by mass or volume flow rate [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Composition of source [kg/kg]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from input connector [:#(type=Boolean)]
Get the temperature or specific enthalpy input connector [:#(type=Boolean)]
Get the mass fraction from input connector [:#(type=Boolean)]
Get the trace species concentration from input connector [:#(type=Boolean)]

Initial Pressure [Pa|bar]
[1]
[1]
[1]
[1]
[1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Fluid density [kg/m3|g/cm3]
Flow type definition [:#(type=Modelon.ThermoFluid.Choices.FlowDefinition)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Fixed mass flow rate going out of the fluid port [kg/s]
Fixed volume flow rate going out of the fluid port [m3/s]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Composition of source [1]
Unit of volume flow real input signal [:#(type=Modelon.ThermoFluid.Choices.RealVFlowUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the massflow rate from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the mass fraction from the input connector [:#(type=Boolean)]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
number of vector elements in connector [:#(type=Integer)]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
Pressure in fluid port [Pa|bar]
Temperature of the source [K|degC]
Specific enthalpy of the source [J/kg]
Mass fraction of the source [kg/kg]
Mass fraction of the source [kg/kg]
Mass fraction of the source [kg/kg]
Mass fraction of the source [kg/kg]
Mass fraction of the source [kg/kg]
Unit of pressure real input signal [:#(type=Modelon.ThermoFluid.Choices.RealPressureUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]

Get the pressure from input connector [:#(type=Boolean)]
Get the temperature or specific enthalpy from input connector [:#(type=Boolean)]
Get the mass fraction from input connector [:#(type=Boolean)]
Get the trace component fractions from input connector [:#(type=Boolean)]
Apply filter on port state variables, avoids discontinuous connector state at flow reversal [:#(type=Boolean)]
Time constant of port state filter [s]
Initialize port state in steady state, otherwise fixed initialization at prescribed state [:#(type=Boolean)]
Initial Mass flow rate [kg/s]
[1]
[1]
[1]
[1]
[1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Port specific enthalpy, flow direction dependent [J/kg]
Port mass based fluid composition, flow direction dependent [1]
Port mass based fluid composition, flow direction dependent [1]
Port mass based fluid composition, flow direction dependent [1]
Port mass based fluid composition, flow direction dependent [1]
Port mass based fluid composition, flow direction dependent [1]
Parameterize by temperature or enthalpy [:#(type=Modelon.ThermoFluid.Choices.EnergyDefinition)]
pressure in fluid port [Pa|bar]
temperature of the sink [K|degC]
Specific enthalpy of the source [J/kg]
mass fraction of the sink [kg/kg]
mass fraction of the sink [kg/kg]
mass fraction of the sink [kg/kg]
mass fraction of the sink [kg/kg]
mass fraction of the sink [kg/kg]
Unit of pressure real input signal [:#(type=Modelon.ThermoFluid.Choices.RealPressureUnit)]
Unit of temperature real input signal [:#(type=Modelon.ThermoFluid.Choices.RealTemperatureUnit)]
Get the pressure from the input connector [:#(type=Boolean)]
Get the temperature from the input connector [:#(type=Boolean)]
Get the mass fraction from the input connector [:#(type=Boolean)]
Number of parallel flow channels [1]
Length in flow direction [m]
Hydraulic diameter [m]
Cross section area [m2]
Circumference [m]
Total volume [m3]
Heat transfer area [m2]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Nominal mass flowrate (total) [kg/s]
Total volume [m3]
Reactivity of catalyst
Lower heating value (hydrogen)
Lower heating value (methane)
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
Only flow in design direction correct if true [:#(type=Boolean)]
Gas pressure [Pa|bar]
der(Gas pressure) [Pa/s]
Gas temperature [K|degC]
der(Gas temperature) [K/s]
Total mass [kg]
der(Total mass) [kg/s]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Hydrogen carbon monoxide ratio at outlet
Water methane ratio at inlet
Oxygen methane ratio at inlet
Steam carbon ratio in outlet gas
Dry mole fractions [1]
Dry mole fractions [1]
Dry mole fractions [1]
Dry mole fractions [1]
Dry mole fractions [1]
Dry mole fractions [1]
Dry mole fractions [1]
mole H2 produced / mole CH4 fed [1]
partial pressure vector in bar [bar]
partial pressure vector in bar [bar]
partial pressure vector in bar [bar]
partial pressure vector in bar [bar]
partial pressure vector in bar [bar]
partial pressure vector in bar [bar]
partial pressure vector in bar [bar]
Residence time [s]
gas hourly space velocity [1/h]
gas hourly space velocity [m3/h]
Outlet composition in molefractions [1]
Outlet composition in molefractions [1]
Outlet composition in molefractions [1]
Outlet composition in molefractions [1]
Outlet composition in molefractions [1]
Outlet composition in molefractions [1]
Outlet composition in molefractions [1]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
number of reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]







Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
conversion efficiency
time factor for quasi-equilibrium reactions
depletion range [mol]
nominal value for amount of substance (moles), used for numerical scaling
component moles [mol]
der(component moles) [mol/s]
component moles [mol]
der(component moles) [mol/s]
component moles [mol]
der(component moles) [mol/s]
component moles [mol]
der(component moles) [mol/s]
component moles [mol]
der(component moles) [mol/s]
component moles [mol]
der(component moles) [mol/s]
component moles [mol]
der(component moles) [mol/s]
total # of moles [mol]
der(total # of moles) [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
reaction rate vector [mol/s]
reaction rate vector [mol/s]
reaction rate vector [mol/s]
reaction rate vector [mol/s]
protection factor against depleted species
protection factor against depleted species
protection factor against depleted species
protection factor against depleted species
protection factor against depleted species
protection factor against depleted species
protection factor against depleted species
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
substance index vector with CH4, H2O, H2, O2, CO, CO2 [:#(type=Integer)]
substance index vector with CH4, H2O, H2, O2, CO, CO2 [:#(type=Integer)]
substance index vector with CH4, H2O, H2, O2, CO, CO2 [:#(type=Integer)]
substance index vector with CH4, H2O, H2, O2, CO, CO2 [:#(type=Integer)]
substance index vector with CH4, H2O, H2, O2, CO, CO2 [:#(type=Integer)]
substance index vector with CH4, H2O, H2, O2, CO, CO2 [:#(type=Integer)]
kinetic reaction rate constant (steam reforming)
kinetic reaction rate constant (steam reforming)
kinetic reaction rate constant (WGS)
kinetic reaction rate constant (total combustion)
kinetic reaction rate constant (total combustion)
dominator term in the reaction kinetics
equilibrium constant (steam reforming)
equilibrium constant (steam reforming)
equilibrium constant (WGS)
adsorption constant of methane
adsorption constant of carbon monoxide
adsorption constant of hydrogen
adsorption constant of water
adsorption constant for combusting methane
adsorption constant for combusting oxygen
catalyst temperature [K|degC]
reactivity of catalyst
effectiveness factor steam reforming
effectiveness factor steam reforming
effectiveness factor WGS
effectiveness factor total combustion
pre-exponential factor (steam reforming)
pre-exponential factor (steam reforming)
pre-exponential factor (WGS)
pre-exponential factor (total combustion)
pre-exponential factor (total combustion)
activation energy (steam reforming) [J/mol]
activation energy (steam reforming) [J/mol]
activation energy (WGS) [J/mol]
activation energy (total combustion) [J/mol]
reference adsorption constant for methane
reference adsorption constant for carbon monoxide
reference adsorption constant for hydrogen
reference adsorption constant for water
reference adsorption constant for combustiong methane
reference adsorption constant for combustion oxygen
heat of adsorption of methane [J/mol]
heat of adsorption of carbon monoxide [J/mol]
heat of adsorption of hydrogen [J/mol]
heat of adsorption of water [J/mol]
heat of adsorption of combustiong methane [J/mol]
heat of adsorption of combustion oxygen [J/mol]
equilibrium parameter
equilibrium parameter
equilibrium parameter
equilibrium parameter
Heat flow rate (positive if flowing from outside into the component) [W]
specific enthalpy at fuel feed boundary [J/kg]
specific enthalpy at air feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Inlet fuel composition [1]
Inlet fuel composition [1]
Inlet fuel composition [1]
Inlet fuel composition [1]
Inlet fuel composition [1]
Inlet fuel composition [1]
Inlet fuel composition [1]
Inlet air composition [1]
Inlet air composition [1]
Inlet air composition [1]
Inlet air composition [1]
Inlet air composition [1]
Inlet air composition [1]
Inlet air composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
air component mixing vector [1]
air component mixing vector [1]
air component mixing vector [1]
number of independent mass fractions [:#(type=Integer)]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Energy source term [W]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
required substance indices for air [:#(type=Integer)]
required substance indices for air [:#(type=Integer)]
required substance indices for air [:#(type=Integer)]
required substance indices for air [:#(type=Integer)]
required substance indices for the fuel [:#(type=Integer)]
required substance indices for the fuel [:#(type=Integer)]
required substance indices for the fuel [:#(type=Integer)]
required substance indices for the fuel [:#(type=Integer)]
required substance indices for the fuel [:#(type=Integer)]
required substance indices for the fuel [:#(type=Integer)]
required substance indices for the fuel [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [kg/kg]
Gas composition start value [kg/kg]
Gas composition start value [kg/kg]
Gas composition start value [kg/kg]
Gas composition start value [kg/kg]
Gas composition start value [kg/kg]
Gas composition start value [kg/kg]
Nominal mass flowrate (total) [kg/s]
Only flow in design direction correct if true [:#(type=Boolean)]
temperature [K|degC]
der(temperature) [K/s]
inlet specific enthalpy [J/kg]
mass fraction [kg/kg]
mass fraction [kg/kg]
mass fraction [kg/kg]
mass fraction [kg/kg]
mass fraction [kg/kg]
mass fraction [kg/kg]
mass fraction [kg/kg]
Total volume [m3]
If true forward euler discretization of der() [:#(type=Boolean)]
Sampling time [s]
Sampling start time [s]
[:#(type=Boolean)]
If false -remove Asserts for reversing flows [:#(type=Boolean)]
Gas molar composition start value [mol/mol]
Gas molar composition start value [mol/mol]
Gas molar composition start value [mol/mol]
Gas molar composition start value [mol/mol]
Gas molar composition start value [mol/mol]
Gas molar composition start value [mol/mol]
Gas molar composition start value [mol/mol]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Energy source term [W]
number of moles per species [mol]
der(number of moles per species) [mol/s]
number of moles per species [mol]
der(number of moles per species) [mol/s]
number of moles per species [mol]
der(number of moles per species) [mol/s]
number of moles per species [mol]
der(number of moles per species) [mol/s]
number of moles per species [mol]
der(number of moles per species) [mol/s]
number of moles per species [mol]
der(number of moles per species) [mol/s]
number of moles per species [mol]
der(number of moles per species) [mol/s]
Number of total moles [mol]
Independent mole fractions [mol/mol]
Independent mole fractions [mol/mol]
Independent mole fractions [mol/mol]
Independent mole fractions [mol/mol]
Independent mole fractions [mol/mol]
Independent mole fractions [mol/mol]
Independent mole fractions [mol/mol]
[J/(mol.K)]
[J/(mol.K)]
[J/(mol.K)]
[J/(mol.K)]
[J/(mol.K)]
[J/(mol.K)]
[J/(mol.K)]
Ideal gas constant of each component [J/(kg.K)]
Ideal gas constant of each component [J/(kg.K)]
Ideal gas constant of each component [J/(kg.K)]
Ideal gas constant of each component [J/(kg.K)]
Ideal gas constant of each component [J/(kg.K)]
Ideal gas constant of each component [J/(kg.K)]
Ideal gas constant of each component [J/(kg.K)]
derivative of inner energy by temperature at constant moles [J/K]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Molar mass of mixture [kg/mol]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Residence time [s]
Inverse of molar masses of components [mol/kg]
Inverse of molar masses of components [mol/kg]
Inverse of molar masses of components [mol/kg]
Inverse of molar masses of components [mol/kg]
Inverse of molar masses of components [mol/kg]
Inverse of molar masses of components [mol/kg]
Inverse of molar masses of components [mol/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Enthalpy inflow from steam [W]
Enthalpy inflow from NG [W]
Molar fractions in volume [1]
Molar fractions in volume [1]
Molar fractions in volume [1]
Molar fractions in volume [1]
Molar fractions in volume [1]
Molar fractions in volume [1]
Molar fractions in volume [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
specific enthalpy at feed_2 boundary [J/kg]
Inlet composition at feed 2 [kg/kg]
Inlet composition at feed 2 [kg/kg]
Inlet composition at feed 2 [kg/kg]
Inlet composition at feed 2 [kg/kg]
Inlet composition at feed 2 [kg/kg]
Inlet composition at feed 2 [kg/kg]
Inlet composition at feed 2 [kg/kg]
component mixing vector from feed1 [1]
component mixing vector from feed1 [1]
component mixing vector from feed1 [1]
component mixing vector from feed1 [1]
component mixing vector from feed1 [1]
component mixing vector from feed1 [1]
component mixing vector from feed1 [1]
medium index for water [:#(type=Integer)]
Number of parallel flow channels
Length in flow direction [m]
Hydraulic diameter [m]
Cross section area [m2]
Circumference [m]
Total volume [m3]
Heat transfer area [m2]
Steam generator pipe outside wall area [m2]
Nominal pressure drop in gas channel [Pa|bar]
Outside wall area [m2]
Overall heat transfer coefficient, including gas side [W/(m2.K)]
Fouling coefficient
Start value of wall temperature [K|degC]
If true, counter flow [:#(type=Boolean)]
Nominal length in {liquid,2 phase, gas}, used when calculating T_steam
Nominal length in {liquid,2 phase, gas}, used when calculating T_steam
Nominal length in {liquid,2 phase, gas}, used when calculating T_steam
Total metal mass [kg]
Metal wall specific heat capacity [J/(kg.K)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Specific enthalpy at drain boundary [J/kg]
[J/kg]
Heat rate into steam gen [W]
Heat rate for evaporation [W]
Temperature of liquid [K|degC]
Temperature of two phase [K|degC]
Temperature of steam [K|degC]
Average wall temperature [K|degC]
der(Average wall temperature) [K/s]
Coefficient of heat transfer [W/(m2.K)]
Capacity flow [W/K]
Inflow temperature difference [K,]
Mean cp used for NTU calc [J/(kg.K)]
Smaller of the 2 heat capacity streams [W/K]
Ratio of the 2 heat capacity streams [1]
Heat exchanger efficiency [1]
Maximum transferable power [W]
Number of transfer units
Number of parallel flow channels
Length in flow direction [m]
Hydraulic diameter [m]
Cross section area [m2]
Circumference [m]
Total volume [m3]
Heat transfer area [m2]
Number of nodes (always 2) [:#(type=Integer)]
pressure start value [Pa|bar]
temperature start value [K|degC]
Gas composition start value (homogeneous) [kg/kg]
Gas composition start value (homogeneous) [kg/kg]
Gas composition start value (homogeneous) [kg/kg]
Gas composition start value (homogeneous) [kg/kg]
Gas composition start value (homogeneous) [kg/kg]
only flow in design direction correct if true [:#(type=Boolean)]
Reynolds multiplier coefficient
Reynolds Exponent coefficient
Prandl Exponent coefficient
Linear friction if true [:#(type=Boolean)]
Friction Factor Type [:#(type=FuelCell.Internal.Choices.OneDFrictionTypes)]
Nominal hydraulic resistance coefficient [Pa.kg/(m3.kg2/s2)]
Nominal mass flowrate [kg/s]
Nominal pressure drop (only friction) [Pa|bar]
Nominal inlet density [kg/m3|g/cm3]
Nominal Fanning friction factor
Relative roughness (ratio roughness/diameter)
Friction factor correction coefficient
Fraction of nominal flow where linear friction = turbulent
Total heat flow to secondary side [W]
Pressure drop on side [Pa|bar]
Reynolds Number [1]
Nusselt number [1]
Prandl Number [1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
velocity at inlet [m/s]
[Pa.s]
[W/(m.K)]
inlet specific heat capacity [J/(kg.K)]
estimated average heat capacity [J/(kg.K)]

specific enthalpy at feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Wet perimeter [m]
Friction coefficient
Linear friction coefficient
Fanning friction factor
[J/kg]
Mass fractions of exiting fluid [kg/kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
start value of wall temperature [K|degC]
pressure start value [Pa|bar]
Nominal mass flowrate [kg/s]
only gas flow in design direction correct if true  [:#(type=Boolean)]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
der(Mass fractions of exiting fluid) [s-1]
der(Mass fractions of exiting fluid) [s-1]
der(Mass fractions of exiting fluid) [s-1]
der(Mass fractions of exiting fluid) [s-1]
der(Mass fractions of exiting fluid) [s-1]
der(Mass fractions of exiting fluid) [s-1]
der(Mass fractions of exiting fluid) [s-1]
Number of parallel channels [1]
Length of primary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of secondary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Pressure drop smoothing region around zero [Pa|kPa]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
Pressure drop start value [Pa|kPa]
Temperature inlet start value [K|degC]
Pressure drop start value [Pa|kPa]
Temperature inlet start value [K|degC]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Specific enthalpy of exiting fluid  [J/kg]
Total heat flow, from wall to primary side [W]
Inlet temperature, primary side [K|degC]
Outlet temperature, primary side [K|degC]
Inlet specific enthalpy, primary side [J/kg]
Outlet specific enthalpy, primary side [J/kg]
Primary side pressure drop [Pa|bar]
Inlet temperature, secondary side [K|degC]
Outlet temperature, secondary side [K|degC]
Inlet specific enthalpy, secondary side [J/kg]
Outlet specific enthalpy, secondary side [J/kg]
Secondary side pressure drop [Pa|bar]
Temperature difference at inflow of primary side [K,]
Temperature difference at outflow of primary side [K,]
log-mean temperature difference [K,]
Heat exchanger effectiveness [1]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties) [1]
Fraction of total channel length (used for discretization, all correlations)
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
Calibration factor for pressure loss
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties) [1]
Fraction of total channel length (used for discretization, all correlations)
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
Calibration factor for pressure loss
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Calibration factor for pressure drop
Calibration factor for pressure drop
Stream used for the effectiveness calculation [:#(type=Modelon.Types.EffectivenessStreamChoice)]
Number of parallel channels [1]
Length of primary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of secondary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Initial mass flow rate [kg/s]
Initial inlet pressure [Pa|bar]
Initial pressure drop [Pa|bar]
Initial outlet pressure [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet temperature [K|degC]
Initial temperature increase [K,]
Initial outlet temperature [K|degC]
Initial inlet specific enthalpy [J/kg]
Initial specific enthalpy increase [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass flow rate [kg/s]
Initial inlet pressure [Pa|bar]
Initial pressure drop [Pa|bar]
Initial outlet pressure [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet temperature [K|degC]
Initial temperature increase [K,]
Initial outlet temperature [K|degC]
Initial inlet specific enthalpy [J/kg]
Initial specific enthalpy increase [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Primary side outlet pressure [Pa|bar]
Secondary side outlet pressure [Pa|bar]
Ratio of the heat capacity flows [1]
Maximum transferable heat [W]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Temperature of outgoing fluid portA_sec [K|degC]
Temperature of outgoing fluid portB_sec [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific enthalpy of primary side fluid at the secondary side inlet temperature [J/kg]
Specific enthalpy of secondary side fluid at the primary side inlet temperature [J/kg]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Primary heat capacity flow inlet [W/K]
Primary heat capacity flow outlet [W/K]
Secondary heat capacity flow inlet [W/K]
Secondary heat capacity flow outlet [W/K]
Primary heat capacity flow [W/K]
Secondary heat capacity flow [W/K]
Smaller heat capacity flow [W/K]
Larger heat capacity flow [W/K]
Maximum transferable heat for primary side [W]
Maximum transferable heat for secondary side [W]
Wall heat transfer area [m2]
Heat transfer coefficient [W/(m2.K)]
Number of transfer units [1]
Calibration factor for heat transfer [1]
Calibration factor for heat transfer [1]
Wall thickness [m|mm]
If true, heat flow is filtered through a dynamic filter [:#(type=Boolean)]
Order of filter [:#(type=Integer)]
Filter rise time [s]
Specific heat capacity of the material [J/(kg.K)]
Density of the material [kg/m3|g/cm3]
Thermal conductivity of the material [W/(m.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Calibration factor for heat transfer [1]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Calibration factor for heat transfer [1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient primary side [W/(m2.K)]
Heat transfer coefficient secondary side [W/(m2.K)]
Heat transfer coefficient wall [W/(m2.K)]
Heat transfer area [m2]
Wall thickness [m]
If true, heat flow is filtered through a dynamic filter [:#(type=Boolean)]
Order of filter [:#(type=Integer)]
Filter rise time [s]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Total volume of ATR unit [m3]
ATR unit nominal mass flowrate (total) [kg/s]
ATR reactivity of catalyst
Steam mixing total volume [m3]
Total volume of hotgas channel [m3]
Nominal mass flowrate (total) of hotgas channel [kg/s]
Steam generator pipe outside wall area [m2]
Nominal pressure drop in steam generator gas channel [Pa|kPa]
Nominal pressure mass flow rate in steam generator gas channel [kg/s]
Nominal mass flowrate in NG HX hot gas channel [kg/s]
Nominal mass flowrate in NG HX natural gas channel [kg/s]
Length of each side of NG HX [m]
Hydraulic diameter of NG HX [m]
Cross section area of NG HX [m2]
Heat transfer area of NG HX [m2]
Heat transfer coefficient of NG HX [W/(m2.K)]
Nominal mass flowrate in ATR HX air channel [kg/s]
Nominal mass flowrate in ATR HX exhaust channel [kg/s]
Length of each side of ATR HX [m]
Hydraulic diameter of ATR HX [m]
Cross section area of ATR HX [m2]
Heat transfer area of ATR HX [m2]
Heat transfer coefficient of ATR HX [W/(m2.K)]
Overall temperature start value [K|degC]
ATR pressure start value [Pa|bar]
Steam mixer pressure start value [Pa|bar]
Nominal mass flow rate (total) in steam mixer volume [kg/s]
Pressure start value for steam generator channel [Pa|bar]
Pressure start value of HX NG hot gas channel [Pa|bar]
Pressure start value of HX NG natural gas channel [Pa|bar]
Pressure start value of ATR HX air channel [Pa|bar]
Pressure start value of ATR HX exhaust channel [Pa|bar]
Number of components in medium [:#(type=Integer)]
Temperature of outlet flow [degC]
Number of parallel channels [1]
Length of primary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of secondary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
Pressure drop start value [Pa|kPa]
Temperature inlet start value [K|degC]
Pressure drop start value [Pa|kPa]
Temperature inlet start value [K|degC]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Total heat flow, from wall to primary side [W]
Inlet temperature, primary side [K|degC]
Outlet temperature, primary side [K|degC]
Inlet specific enthalpy, primary side [J/kg]
Outlet specific enthalpy, primary side [J/kg]
Primary side pressure drop [Pa|bar]
Inlet temperature, secondary side [K|degC]
Outlet temperature, secondary side [K|degC]
Inlet specific enthalpy, secondary side [J/kg]
Outlet specific enthalpy, secondary side [J/kg]
Secondary side pressure drop [Pa|bar]
Temperature difference at inflow of primary side [K,]
Temperature difference at outflow of primary side [K,]
log-mean temperature difference [K,]
Heat exchanger effectiveness [1]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties) [1]
Fraction of total channel length (used for discretization, all correlations)
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
Calibration factor for pressure loss
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties) [1]
Fraction of total channel length (used for discretization, all correlations)
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
Calibration factor for pressure loss
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Calibration factor for pressure drop
Calibration factor for pressure drop
Stream used for the effectiveness calculation [:#(type=Modelon.Types.EffectivenessStreamChoice)]
Number of parallel channels [1]
Length of primary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of secondary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Initial mass flow rate [kg/s]
Initial inlet pressure [Pa|bar]
Initial pressure drop [Pa|bar]
Initial outlet pressure [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet temperature [K|degC]
Initial temperature increase [K,]
Initial outlet temperature [K|degC]
Initial inlet specific enthalpy [J/kg]
Initial specific enthalpy increase [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass flow rate [kg/s]
Initial inlet pressure [Pa|bar]
Initial pressure drop [Pa|bar]
Initial outlet pressure [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet temperature [K|degC]
Initial temperature increase [K,]
Initial outlet temperature [K|degC]
Initial inlet specific enthalpy [J/kg]
Initial specific enthalpy increase [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Primary side outlet pressure [Pa|bar]
Secondary side outlet pressure [Pa|bar]
Ratio of the heat capacity flows [1]
Maximum transferable heat [W]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific enthalpy of primary side fluid at the secondary side inlet temperature [J/kg]
Specific enthalpy of secondary side fluid at the primary side inlet temperature [J/kg]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Primary heat capacity flow inlet [W/K]
Primary heat capacity flow outlet [W/K]
Secondary heat capacity flow inlet [W/K]
Secondary heat capacity flow outlet [W/K]
Primary heat capacity flow [W/K]
Secondary heat capacity flow [W/K]
Smaller heat capacity flow [W/K]
Larger heat capacity flow [W/K]
Maximum transferable heat for primary side [W]
Maximum transferable heat for secondary side [W]
Wall heat transfer area [m2]
Heat transfer coefficient [W/(m2.K)]
Number of transfer units [1]
Calibration factor for heat transfer [1]
Calibration factor for heat transfer [1]
Wall thickness [m|mm]
If true, heat flow is filtered through a dynamic filter [:#(type=Boolean)]
Order of filter [:#(type=Integer)]
Filter rise time [s]
Specific heat capacity of the material [J/(kg.K)]
Density of the material [kg/m3|g/cm3]
Thermal conductivity of the material [W/(m.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Calibration factor for heat transfer [1]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Calibration factor for heat transfer [1]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient primary side [W/(m2.K)]
Heat transfer coefficient secondary side [W/(m2.K)]
Heat transfer coefficient wall [W/(m2.K)]
Heat transfer area [m2]
Wall thickness [m]
If true, heat flow is filtered through a dynamic filter [:#(type=Boolean)]
Order of filter [:#(type=Integer)]
Filter rise time [s]
pressure drop over component [Pa|bar]
density of media upstream [kg/m3|g/cm3]
temperature of media upstream [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|bar]
Nominal mass flow rate [kg/s]
linear pressure drop if true [:#(type=Boolean)]

[1]
root interpolation region
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Number of feed connectors [:#(type=Integer)]
Number of drain connectors [:#(type=Integer)]
Total volume [m3]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Only flow in design direction correct if true [:#(type=Boolean)]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
gas temperature [K|degC]
der(gas temperature) [K/s]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Specific enthalpy of exiting fluid  [J/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
number of independent mass fractions [:#(type=Integer)]
specific enthalpy at feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative of inner energy by temperature at constant p [J/(kg.K)]
derivative of density by temperature at constant pressure [kg/(m3.K)]
derivative of density by pressure at constant temperature [s2/m2]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Number of feed connectors [:#(type=Integer)]
Number of drain connectors [:#(type=Integer)]
Total volume [m3]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Only flow in design direction correct if true [:#(type=Boolean)]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
gas temperature [K|degC]
der(gas temperature) [K/s]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
number of independent mass fractions [:#(type=Integer)]
specific enthalpy at feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative of inner energy by temperature at constant p [J/(kg.K)]
derivative of density by temperature at constant pressure [kg/(m3.K)]
derivative of density by pressure at constant temperature [s2/m2]
pressure drop over component [Pa|bar]
density of media upstream [kg/m3|g/cm3]
temperature of media upstream [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|bar]
Nominal mass flow rate [kg/s]
linear pressure drop if true [:#(type=Boolean)]

[1]
root interpolation region
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
pressure drop over component [Pa|bar]
density of media upstream [kg/m3|g/cm3]
temperature of media upstream [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|bar]
Nominal mass flow rate [kg/s]
linear pressure drop if true [:#(type=Boolean)]

[1]
root interpolation region
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
pressure drop over component [Pa|bar]
density of media upstream [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|bar]
Nominal mass flow rate [kg/s]
linear pressure drop if true [:#(type=Boolean)]

[1]
root interpolation region
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Number of feed connectors [:#(type=Integer)]
Number of drain connectors [:#(type=Integer)]
Total volume [m3]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Only flow in design direction correct if true [:#(type=Boolean)]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
gas temperature [K|degC]
der(gas temperature) [K/s]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
number of independent mass fractions [:#(type=Integer)]
specific enthalpy at feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative of inner energy by temperature at constant p [J/(kg.K)]
derivative of density by temperature at constant pressure [kg/(m3.K)]
derivative of density by pressure at constant temperature [s2/m2]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Number of feed connectors [:#(type=Integer)]
Number of drain connectors [:#(type=Integer)]
Total volume [m3]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Only flow in design direction correct if true [:#(type=Boolean)]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
gas temperature [K|degC]
der(gas temperature) [K/s]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
number of independent mass fractions [:#(type=Integer)]
specific enthalpy at feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative of inner energy by temperature at constant p [J/(kg.K)]
derivative of density by temperature at constant pressure [kg/(m3.K)]
derivative of density by pressure at constant temperature [s2/m2]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Number of feed connectors [:#(type=Integer)]
Number of drain connectors [:#(type=Integer)]
Total volume [m3]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Only flow in design direction correct if true [:#(type=Boolean)]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
gas temperature [K|degC]
der(gas temperature) [K/s]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
number of independent mass fractions [:#(type=Integer)]
specific enthalpy at feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative of inner energy by temperature at constant p [J/(kg.K)]
derivative of density by temperature at constant pressure [kg/(m3.K)]
derivative of density by pressure at constant temperature [s2/m2]
Number of parallel channels [1]
Length of primary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of secondary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
Pressure drop start value [Pa|bar]
Temperature inlet start value [K|degC]
Pressure drop start value [Pa|bar]
Temperature inlet start value [K|degC]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Total heat flow, from wall to primary side [W]
Inlet temperature, primary side [K|degC]
Outlet temperature, primary side [K|degC]
Inlet specific enthalpy, primary side [J/kg]
Outlet specific enthalpy, primary side [J/kg]
Primary side pressure drop [Pa|bar]
Inlet temperature, secondary side [K|degC]
Outlet temperature, secondary side [K|degC]
Inlet specific enthalpy, secondary side [J/kg]
Outlet specific enthalpy, secondary side [J/kg]
Secondary side pressure drop [Pa|bar]
Temperature difference at inflow of primary side [K,]
Temperature difference at outflow of primary side [K,]
log-mean temperature difference [K,]
Heat exchanger effectiveness [1]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties) [1]
Fraction of total channel length (used for discretization, all correlations)
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
Calibration factor for pressure loss
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties) [1]
Fraction of total channel length (used for discretization, all correlations)
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
Calibration factor for pressure loss
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Calibration factor for pressure drop
Calibration factor for pressure drop
Stream used for the effectiveness calculation [:#(type=Modelon.Types.EffectivenessStreamChoice)]
Number of parallel channels [1]
Length of primary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of secondary channel [m]
Hydraulic diameter, single channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Initial mass flow rate [kg/s]
Initial inlet pressure [Pa|bar]
Initial pressure drop [Pa|bar]
Initial outlet pressure [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet temperature [K|degC]
Initial temperature increase [K,]
Initial outlet temperature [K|degC]
Initial inlet specific enthalpy [J/kg]
Initial specific enthalpy increase [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass flow rate [kg/s]
Initial inlet pressure [Pa|bar]
Initial pressure drop [Pa|bar]
Initial outlet pressure [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet temperature [K|degC]
Initial temperature increase [K,]
Initial outlet temperature [K|degC]
Initial inlet specific enthalpy [J/kg]
Initial specific enthalpy increase [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Initial mass fractions [1]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
Primary side outlet pressure [Pa|bar]
Secondary side outlet pressure [Pa|bar]
Ratio of the heat capacity flows [1]
Maximum transferable heat [W]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Temperature of outgoing fluid portA_sec [K|degC]
Temperature of outgoing fluid portB_sec [K|degC]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Specific enthalpy of primary side fluid at the secondary side inlet temperature [J/kg]
Specific enthalpy of secondary side fluid at the primary side inlet temperature [J/kg]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portA_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions inflow portB_prim [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions in primary channel (flow direction dependent) [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portA_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions inflow portB_sec [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Mass fractions in secondary channel (flow direction dependent) [1]
Primary heat capacity flow inlet [W/K]
Primary heat capacity flow outlet [W/K]
Secondary heat capacity flow inlet [W/K]
Secondary heat capacity flow outlet [W/K]
Primary heat capacity flow [W/K]
Secondary heat capacity flow [W/K]
Smaller heat capacity flow [W/K]
Larger heat capacity flow [W/K]
Maximum transferable heat for primary side [W]
Maximum transferable heat for secondary side [W]
Wall heat transfer area [m2]
Heat transfer coefficient [W/(m2.K)]
Number of transfer units [1]
Calibration factor for heat transfer [1]
Calibration factor for heat transfer [1]
Wall thickness [m|mm]
If true, heat flow is filtered through a dynamic filter [:#(type=Boolean)]
Order of filter [:#(type=Integer)]
Filter rise time [s]
Specific heat capacity of the material [J/(kg.K)]
Density of the material [kg/m3|g/cm3]
Thermal conductivity of the material [W/(m.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Calibration factor for heat transfer [1]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Calibration factor for heat transfer [1]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Heat transfer coefficient primary side [W/(m2.K)]
Heat transfer coefficient secondary side [W/(m2.K)]
Heat transfer coefficient wall [W/(m2.K)]
Heat transfer area [m2]
Wall thickness [m]
If true, heat flow is filtered through a dynamic filter [:#(type=Boolean)]
Order of filter [:#(type=Integer)]
Filter rise time [s]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
gas mass start value [kg]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Mass fraction start values [1]
Mass fraction start values [1]
Mass fraction start values [1]
Mass fraction start values [1]
Mass fraction start values [1]
Start the burner with a burning flame or catalytic process running [:#(type=Boolean)]
Inner volume [m3]
Assume positive flow for upstream properties [:#(type=Boolean)]
Combustion efficiency at under-stoich cond.
Port temperature [K|degC]
Heat flow rate (positive if flowing from outside into the component) [W]
Air fuel equivalence ratio lambda for which air-gas mixture will extinguish
Air-fuel ratio (mass-based) [1]
Fuel-air ratio (mass-based) [1]
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Specific heat capacity of the material [J/(kg.K)]
Density of the material [kg/m3|g/cm3]
Thermal conductivity of the material [W/(m.K)]
Mass of metal wall [kg]
Thickness of metal wall [m]
metal heat transfer area [m2]
[J/(kg.K)]
heat resistance in metal [K/W]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
gas mass start value [kg]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Mass fraction start values [1]
Mass fraction start values [1]
Mass fraction start values [1]
Mass fraction start values [1]
Mass fraction start values [1]
Start the burner with a burning flame or catalytic process running [:#(type=Boolean)]
Inner volume [m3]
Assume positive flow for upstream properties [:#(type=Boolean)]
Combustion efficiency at under-stoich cond.
If true, igniter is on [:#(type=Boolean)]
Heat flow rate (positive if flowing from outside into the component) [W]
Air fuel equivalence ratio lambda for which air-gas mixture will extinguish
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Transformation matrix
Temperature of medium [K|degC]
der(Temperature of medium) [K/s]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Gas total mass [kg]
Partial flue gas masses [kg]
der(Partial flue gas masses) [kg/s]
Partial flue gas masses [kg]
der(Partial flue gas masses) [kg/s]
Partial flue gas masses [kg]
der(Partial flue gas masses) [kg/s]
Partial flue gas masses [kg]
der(Partial flue gas masses) [kg/s]
Partial flue gas masses [kg]
der(Partial flue gas masses) [kg/s]
Gas total energy [J]
Change in total energy [W]
Residence time [s]
Air-fuel ratio lambda [1]
Air fuel ratio lambda for which air-gas mixture will extinguish
true if burner is on [:#(type=Boolean)]
Minimum air fuel ratio lambda for which air-gas mixture will ignite
[:#(type=Boolean)]
[mol/mol]
[mol/mol]
[mol/mol]
[mol/mol]
[mol/mol]
Oxygen mass flow rate [kg/s]
Stoichiometric mass flow rate of oxygen [kg/s]
mass flow rate of oxygen in the fuel [kg/s]
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when burning (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
Stoichiometric matrix when mixing (molar mass based)
substance index vector for some components in air [:#(type=Integer)]
substance index vector for some components in air [:#(type=Integer)]
substance index vector for some fuel components [:#(type=Integer)]
substance index vector for O2 in the fuel [:#(type=Integer)]
Air mole fractions [mol/mol]
Air mole fractions [mol/mol]
Air mole fractions [mol/mol]
Air mole fractions [mol/mol]
Air mole fractions [mol/mol]
fuel mole fractions [mol/mol]
fuel mole fractions [mol/mol]
fuel mole fractions [mol/mol]
fuel mole fractions [mol/mol]
fuel mole fractions [mol/mol]
fuel mole fractions [mol/mol]
fuel mole fractions [mol/mol]
air molar flow [mol/s]
air molar flow [mol/s]
air molar flow [mol/s]
air molar flow [mol/s]
air molar flow [mol/s]
fuel molar flow [mol/s]
fuel molar flow [mol/s]
fuel molar flow [mol/s]
fuel molar flow [mol/s]
fuel molar flow [mol/s]
fuel molar flow [mol/s]
fuel molar flow [mol/s]
parameters to describe temperature dependence of lambda_max_ignite
parameters to describe temperature dependence of lambda_max_ignite
time constant for quasi-equilibrium reactions [s]
combustion rate, start at 0 for smooth ignition [1]
der(combustion rate, start at 0 for smooth ignition) [s-1]
[1]
Discretization of wall connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Number of parallel channels considered [:#(type=Integer)]
Metal heat capacity [J/(kg.K)]
Thermal resistance in metal [K/W]
Metal mass [kg]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Metal mean temperature, direction along n as on side qa [degC]
Metal start temperature, direction along n as on side qa [K|degC]
True if derivatives should be zero at initialization [:#(type=Boolean)]
Removes thermal inertia if true [:#(type=Boolean)]
Removes thermal resistance if false [:#(type=Boolean)]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Number of feed connectors [:#(type=Integer)]
Number of drain connectors [:#(type=Integer)]
Total volume [m3|l]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Only flow in design direction correct if true [:#(type=Boolean)]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
gas temperature [K|degC]
der(gas temperature) [K/s]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
number of independent mass fractions [:#(type=Integer)]
specific enthalpy at feed boundary [J/kg]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative of inner energy by temperature at constant p [J/(kg.K)]
derivative of density by temperature at constant pressure [kg/(m3.K)]
derivative of density by pressure at constant temperature [s2/m2]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
pressure drop over component [Pa|bar]
density of media upstream [kg/m3|g/cm3]
temperature of media upstream [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|bar]
Nominal mass flow rate [kg/s]
linear pressure drop if true [:#(type=Boolean)]

[1]
root interpolation region
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Number of feed connectors [:#(type=Integer)]
Number of drain connectors [:#(type=Integer)]
Total volume [m3]
Initialisation option [:#(type=FuelCell.Internal.Choices.InitOptions)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Gas composition start value [1]
Only flow in design direction correct if true [:#(type=Boolean)]
Quasi-static model (static mass and energy balances [:#(type=Boolean)]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
gas temperature [K|degC]
der(gas temperature) [K/s]
Total mass [kg]
Total internal energy [J]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Total component mass [kg]
Specific enthalpy of exiting fluid  [J/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
number of independent mass fractions [:#(type=Integer)]
specific enthalpy at feed boundary [J/kg]
specific enthalpy at drain boundary [J/kg]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Inlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Outlet composition [1]
Mass residual for balance [kg/s]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative vector of density by change in mass composition [kg/m3|g/cm3]
derivative of inner energy by temperature at constant p [J/(kg.K)]
derivative of density by temperature at constant pressure [kg/(m3.K)]
derivative of density by pressure at constant temperature [s2/m2]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
pressure drop over component [Pa|bar]
density of media upstream [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
linear pressure drop if true [:#(type=Boolean)]

[1]
root interpolation region
Constant output value [:#(type=Boolean)]
Number of species in the fuel model [:#(type=Integer)]
Number of species in the air model [:#(type=Integer)]
Number of species in the exhaust model [:#(type=Integer)]
Molar Mass for fuel [kg/mol]
Molar Mass for fuel [kg/mol]
Molar Mass for fuel [kg/mol]
Molar Mass for fuel [kg/mol]
Molar Mass for fuel [kg/mol]
Molar Mass for fuel [kg/mol]
Molar Mass for fuel [kg/mol]
Molar Mass for air [kg/mol]
Molar Mass for air [kg/mol]
Molar Mass for air [kg/mol]
Molar Mass for air [kg/mol]
Molar Mass for air [kg/mol]
Molar Mass for water [kg/mol]
molar mass [kg/mol]
critical temperature [K|degC]
critical pressure [Pa|bar]
critical molar Volume [m3/mol]
critical molar Volume [kg/m3|g/cm3]
critical specific enthalpy [J/kg]
critical specific entropy [J/(kg.K)]
Pitzer acentric factor
triple point temperature [K|degC]
triple point pressure [Pa|bar]
melting point at 101325 Pa [K|degC]
normal boiling point (at 101325 Pa) [K|degC]
dipole moment of molecule in Debye (1 debye = 3.33564e10-30 C.m) [debye]
true if ideal gas heat capacity is available [:#(type=Boolean)]
true if critical data are known [:#(type=Boolean)]
true if a dipole moment known [:#(type=Boolean)]
true if a fundamental equation [:#(type=Boolean)]
true if liquid heat capacity is available [:#(type=Boolean)]
true if solid heat capacity is available [:#(type=Boolean)]
true if accurate data for a viscosity function is available [:#(type=Boolean)]
true if accurate data for thermal conductivity is available [:#(type=Boolean)]
true if vapour pressure data, e.g. Antoine coefficients are known [:#(type=Boolean)]
true if Pitzer accentric factor is known [:#(type=Boolean)]
Critical specific enthalpy of the fundamental equation [J/kg]
Critical specific entropy of the fundamental equation [J/(kg.K)]
Difference between specific enthalpy model (h_m) and f.eq. (h_f) (h_m - h_f) [J/kg]
Difference between specific enthalpy model (s_m) and f.eq. (s_f) (s_m - s_f) [J/(kg.K)]
Molar Mass for exhaust gas [kg/mol]
Molar Mass for exhaust gas [kg/mol]
Molar Mass for exhaust gas [kg/mol]
Molar Mass for exhaust gas [kg/mol]
Molar Mass for exhaust gas [kg/mol]
Number of hydrogen atoms in each species for fuel
Number of hydrogen atoms in each species for fuel
Number of hydrogen atoms in each species for fuel
Number of hydrogen atoms in each species for fuel
Number of hydrogen atoms in each species for fuel
Number of hydrogen atoms in each species for fuel
Number of hydrogen atoms in each species for fuel
Number of carbon atoms in each species for fuel
Number of carbon atoms in each species for fuel
Number of carbon atoms in each species for fuel
Number of carbon atoms in each species for fuel
Number of carbon atoms in each species for fuel
Number of carbon atoms in each species for fuel
Number of carbon atoms in each species for fuel
Number of oxygen atoms in each species for fuel
Number of oxygen atoms in each species for fuel
Number of oxygen atoms in each species for fuel
Number of oxygen atoms in each species for fuel
Number of oxygen atoms in each species for fuel
Number of oxygen atoms in each species for fuel
Number of oxygen atoms in each species for fuel
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of hydrogen atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of carbon atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
Number of oxygen atoms in each species for air
[kg/mol]
[kg/mol]
[kg/mol]
Mass flow rate at the air inlet [kg/s]
Total inlet mass flow rate [kg/s]
Composition at the fuel inlet [1]
Composition at the fuel inlet [1]
Composition at the fuel inlet [1]
Composition at the fuel inlet [1]
Composition at the fuel inlet [1]
Composition at the fuel inlet [1]
Composition at the fuel inlet [1]
Composition at the air inlet [1]
Composition at the air inlet [1]
Composition at the air inlet [1]
Composition at the air inlet [1]
Composition at the air inlet [1]
Composition at the outlet [1]
Composition at the outlet [1]
Composition at the outlet [1]
Composition at the outlet [1]
Composition at the outlet [1]
Change in mass flow rate [kg/s]
Relative change of m_flow [1]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
[kg/s]
Inlet hydrogen atom mass flow rate [kg/s]
Inlet carbon atom mass flow rate [kg/s]
Inlet oxygen atom mass flow rate [kg/s]
Outlet hydrogen atom mass flow rate [kg/s]
Outlet carbon atom mass flow rate [kg/s]
Outlet oxygen atom mass flow rate [kg/s]
Change of hydrogen atom mass flow rate [kg/s]
Change of carbon atom mass flow rate [kg/s]
Change of oxygen atom mass flow rate [kg/s]
Relative change of hydrogen atom mass flow rate [1]
Relative change of carbon atom mass flow rate [1]
Relative change of oxygen atom mass flow rate [1]
Number of decimals to show [:#(type=Integer)]
= true, if numberPort enabled [:#(type=Boolean)]
Show number reference as text [:#(type=Boolean)]
Hide background [:#(type=Boolean)]
Number to visualize if use_numberPort=false [W]
Number of decimals to show [:#(type=Integer)]
= true, if numberPort enabled [:#(type=Boolean)]
Show number reference as text [:#(type=Boolean)]
Hide background [:#(type=Boolean)]
If false visualizer show concentration in mole [:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
H2 substance index [:#(type=Integer)]
CH4 substance index [:#(type=Integer)]
CO substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Number of significant digits [:#(type=Integer)]







[1]
[1]
[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
If false visualizer show concentration in mole [:#(type=Boolean)]
Ar substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
Number of significant digits [:#(type=Integer)]





[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[K|degC]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
[J/kg]
[bar]
[degC;]
[kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Temperature of medium [K|degC]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
If false visualizer show concentration in mole [:#(type=Boolean)]
Ar substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
Number of significant digits [:#(type=Integer)]





[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[K|degC]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
If false visualizer show concentration in mole [:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
H2 substance index [:#(type=Integer)]
CH4 substance index [:#(type=Integer)]
CO substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Number of significant digits [:#(type=Integer)]







[1]
[1]
[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Temperature of medium [K|degC]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
If false visualizer show concentration in mole [:#(type=Boolean)]
Ar substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
Number of significant digits [:#(type=Integer)]





[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
Temperature of medium [K|degC]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
Temperature of medium [K|degC]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
If false visualizer show concentration in mole [:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
H2 substance index [:#(type=Integer)]
CH4 substance index [:#(type=Integer)]
CO substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Number of significant digits [:#(type=Integer)]







[1]
[1]
[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
Temperature of medium [K|degC]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
Mass flow [kg/s]
If false visualizer show concentration in mole [:#(type=Boolean)]
Ar substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
Number of significant digits [:#(type=Integer)]





[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
If false visualizer show concentration in mole [:#(type=Boolean)]
Ar substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
Number of significant digits [:#(type=Integer)]





[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass fractions of exiting fluid [kg/kg]
[K|degC]
Mass Fraction [1]
Mass flow [kg/s]
Mass fractions of exiting fluid [kg/kg]
[J/kg]
[bar]
[degC;]
[kg/s]
Number of significant digits - pressure [:#(type=Integer)]
Number of significant digits - specific enthalpy [:#(type=Integer)]
Number of significant digits - temperature [:#(type=Integer)]
Number of significant digits - mass flow [:#(type=Integer)]
If true the actual units are displayed [:#(type=Boolean)]
If false visualizer show concentration in mole [:#(type=Boolean)]
Sensor type [:#(type=FuelCell.Sensors.Types.SensorType)]
H2 substance index [:#(type=Integer)]
CH4 substance index [:#(type=Integer)]
CO substance index [:#(type=Integer)]
CO2 substance index [:#(type=Integer)]
H2O substance index [:#(type=Integer)]
N2 substance index [:#(type=Integer)]
O2 substance index [:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Boolean)]
Number of significant digits [:#(type=Integer)]







[1]
[1]
[1]
[1]
[1]
[1]
[1]
Kg/s to g/s
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Mass Fraction [1]
Number to visualize if use_numberPort=false [W]
Number of decimals to show [:#(type=Integer)]
= true, if numberPort enabled [:#(type=Boolean)]
Show number reference as text [:#(type=Boolean)]
Hide background [:#(type=Boolean)]
Number to visualize if use_numberPort=false
Number of decimals to show [:#(type=Integer)]
= true, if numberPort enabled [:#(type=Boolean)]
Show number reference as text [:#(type=Boolean)]
Hide background [:#(type=Boolean)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Value of Real output [1]
Value of Real output [1]
Value of Real output [1]
Value of Real output [1]
Value of Real output [1]
Value of Real output [1]
Value of Real output [1]

